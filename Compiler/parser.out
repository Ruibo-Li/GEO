Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    K_NULL
    COMMENT
    K_POINT

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> <empty>
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> function_declaration
Rule 5     statement -> compound_statement
Rule 6     compound_statement -> function_call_statement
Rule 7     compound_statement -> variable_declaration
Rule 8     compound_statement -> selection_statement
Rule 9     compound_statement -> iteration_statement
Rule 10    compound_statement -> jump_statement
Rule 11    function_call_statement -> ID LPAREN parameter_list RPAREN
Rule 12    function_call_statement -> ID LPAREN RPAREN
Rule 13    parameter_list -> parameter_list COMMA expression
Rule 14    parameter_list -> expression
Rule 15    variable_declaration -> pre_type_modifier type ID
Rule 16    variable_declaration -> pre_type_modifier type ID ASSIGN expression
Rule 17    variable_declaration -> ID ASSIGN expression
Rule 18    pre_type_modifier -> <empty>
Rule 19    pre_type_modifier -> K_LIST
Rule 20    pre_type_modifier -> K_DICT
Rule 21    pre_type_modifier -> K_SET
Rule 22    type -> K_INT
Rule 23    type -> K_DOUBLE
Rule 24    type -> K_STRING
Rule 25    type -> K_BOOL
Rule 26    type -> K_WINDOW
Rule 27    type -> K_SHAPE
Rule 28    type -> K_TRIANGLE
Rule 29    type -> K_RECTANGLE
Rule 30    type -> K_CIRCLE
Rule 31    type -> K_TEXT
Rule 32    expression -> string_expression
Rule 33    expression -> unary_expression
Rule 34    expression -> boolean_expression
Rule 35    expression -> arithmetic_expression
Rule 36    string_expression -> string_expression PLUS string_term
Rule 37    string_expression -> STRING
Rule 38    string_term -> function_call_statement
Rule 39    string_term -> STRING
Rule 40    unary_expression -> ID
Rule 41    unary_expression -> STRING
Rule 42    unary_expression -> INTEGER
Rule 43    unary_expression -> function_call_statement
Rule 44    unary_expression -> DOUBLE
Rule 45    unary_expression -> K_TRUE
Rule 46    unary_expression -> K_FALSE
Rule 47    boolean_expression -> boolean_expression OR boolean_term
Rule 48    boolean_expression -> boolean_term
Rule 49    boolean_term -> boolean_term AND boolean_factor
Rule 50    boolean_term -> boolean_factor
Rule 51    boolean_factor -> LPAREN boolean_expression RPAREN
Rule 52    boolean_factor -> unary_expression comparator unary_expression
Rule 53    boolean_factor -> arithmetic_expression comparator arithmetic_expression
Rule 54    boolean_factor -> string_expression comparator string_expression
Rule 55    boolean_factor -> unary_expression
Rule 56    boolean_factor -> NEG boolean_factor
Rule 57    comparator -> GT
Rule 58    comparator -> LT
Rule 59    comparator -> GEQ
Rule 60    comparator -> LEQ
Rule 61    comparator -> EQ
Rule 62    comparator -> NEQ
Rule 63    arithmetic_expression -> arithmetic_expression PLUS arithmetic_term
Rule 64    arithmetic_expression -> arithmetic_expression MINUS arithmetic_term
Rule 65    arithmetic_expression -> arithmetic_term
Rule 66    arithmetic_term -> arithmetic_term TIMES arithmetic_factor
Rule 67    arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor
Rule 68    arithmetic_term -> arithmetic_term MOD arithmetic_factor
Rule 69    arithmetic_term -> arithmetic_factor
Rule 70    arithmetic_factor -> LPAREN arithmetic_expression RPAREN
Rule 71    arithmetic_factor -> number
Rule 72    arithmetic_factor -> ID
Rule 73    arithmetic_factor -> function_call_statement
Rule 74    arithmetic_factor -> MINUS arithmetic_factor
Rule 75    number -> INTEGER
Rule 76    number -> DOUBLE
Rule 77    selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
Rule 78    else_if_statement_list -> <empty>
Rule 79    else_if_statement_list -> else_if_statement_list else_if_statement
Rule 80    else_if_statement -> K_EF LPAREN boolean_expression RPAREN compound_statement_list
Rule 81    else_statement -> <empty>
Rule 82    else_statement -> K_EL compound_statement_list
Rule 83    compound_statement_list -> <empty>
Rule 84    compound_statement_list -> compound_statement_list compound_statement
Rule 85    iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END
Rule 86    jump_statement -> K_CONTINUE
Rule 87    jump_statement -> K_BREAK
Rule 88    jump_statement -> K_DONE
Rule 89    function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END
Rule 90    function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END
Rule 91    argument_list -> argument_list COMMA argument
Rule 92    argument_list -> argument
Rule 93    argument -> pre_type_modifier type ID

Terminals, with rules where they appear

AND                  : 49
ASSIGN               : 16 17 89 90
COMMA                : 13 91
COMMENT              : 
DIVIDE               : 67
DOUBLE               : 44 76
EQ                   : 61
GEQ                  : 59
GT                   : 57
ID                   : 11 12 15 16 17 40 72 89 90 93
INTEGER              : 42 75
K_BOOL               : 25
K_BREAK              : 87
K_CIRCLE             : 30
K_CONTINUE           : 86
K_DICT               : 20
K_DONE               : 88
K_DOUBLE             : 23
K_EF                 : 80
K_EL                 : 82
K_END                : 77 85 89 90
K_FALSE              : 46
K_IF                 : 77
K_INT                : 22
K_LIST               : 19
K_NULL               : 
K_POINT              : 
K_RECTANGLE          : 29
K_SET                : 21
K_SHAPE              : 27
K_STRING             : 24
K_TEXT               : 31
K_TRIANGLE           : 28
K_TRUE               : 45
K_WHILE              : 85
K_WINDOW             : 26
LEQ                  : 60
LPAREN               : 11 12 51 70 77 80 85 89 90
LT                   : 58
MINUS                : 64 74
MOD                  : 68
NEG                  : 56
NEQ                  : 62
OR                   : 47
PLUS                 : 36 63
RPAREN               : 11 12 51 70 77 80 85 89 90
STRING               : 37 39 41
TIMES                : 66
error                : 

Nonterminals, with rules where they appear

argument             : 91 92
argument_list        : 89 91
arithmetic_expression : 35 53 53 63 64 70
arithmetic_factor    : 66 67 68 69 74
arithmetic_term      : 63 64 65 66 67 68
boolean_expression   : 34 47 51 77 80 85
boolean_factor       : 49 50 56
boolean_term         : 47 48 49
comparator           : 52 53 54
compound_statement   : 5 84
compound_statement_list : 77 80 82 84 85 89 90
else_if_statement    : 79
else_if_statement_list : 77 79
else_statement       : 77
expression           : 13 14 16 17
function_call_statement : 6 38 43 73
function_declaration : 4
iteration_statement  : 9
jump_statement       : 10
number               : 71
parameter_list       : 11 13
pre_type_modifier    : 15 16 89 90 93
program              : 0
selection_statement  : 8
statement            : 3
statement_list       : 1 3
string_expression    : 32 36 54 54
string_term          : 36
type                 : 15 16 89 90 93
unary_expression     : 33 52 52 55 89 90
variable_declaration : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> .
    (3) statement_list -> . statement_list statement

    K_LIST          reduce using rule 2 (statement_list -> .)
    K_DICT          reduce using rule 2 (statement_list -> .)
    K_SET           reduce using rule 2 (statement_list -> .)
    ID              reduce using rule 2 (statement_list -> .)
    K_IF            reduce using rule 2 (statement_list -> .)
    K_WHILE         reduce using rule 2 (statement_list -> .)
    K_CONTINUE      reduce using rule 2 (statement_list -> .)
    K_BREAK         reduce using rule 2 (statement_list -> .)
    K_DONE          reduce using rule 2 (statement_list -> .)
    K_INT           reduce using rule 2 (statement_list -> .)
    K_DOUBLE        reduce using rule 2 (statement_list -> .)
    K_STRING        reduce using rule 2 (statement_list -> .)
    K_BOOL          reduce using rule 2 (statement_list -> .)
    K_WINDOW        reduce using rule 2 (statement_list -> .)
    K_SHAPE         reduce using rule 2 (statement_list -> .)
    K_TRIANGLE      reduce using rule 2 (statement_list -> .)
    K_RECTANGLE     reduce using rule 2 (statement_list -> .)
    K_CIRCLE        reduce using rule 2 (statement_list -> .)
    K_TEXT          reduce using rule 2 (statement_list -> .)
    $end            reduce using rule 2 (statement_list -> .)

    statement_list                 shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . function_declaration
    (5) statement -> . compound_statement
    (89) function_declaration -> . pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END
    (90) function_declaration -> . pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (77) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (85) iteration_statement -> . K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END
    (86) jump_statement -> . K_CONTINUE
    (87) jump_statement -> . K_BREAK
    (88) jump_statement -> . K_DONE

    $end            reduce using rule 1 (program -> statement_list .)
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 20

    jump_statement                 shift and go to state 17
    function_declaration           shift and go to state 18
    compound_statement             shift and go to state 8
    iteration_statement            shift and go to state 5
    selection_statement            shift and go to state 3
    function_call_statement        shift and go to state 19
    statement                      shift and go to state 10
    pre_type_modifier              shift and go to state 14
    variable_declaration           shift and go to state 6

state 2

    (0) S' -> program .



state 3

    (8) compound_statement -> selection_statement .

    K_END           reduce using rule 8 (compound_statement -> selection_statement .)
    ID              reduce using rule 8 (compound_statement -> selection_statement .)
    K_IF            reduce using rule 8 (compound_statement -> selection_statement .)
    K_WHILE         reduce using rule 8 (compound_statement -> selection_statement .)
    K_CONTINUE      reduce using rule 8 (compound_statement -> selection_statement .)
    K_BREAK         reduce using rule 8 (compound_statement -> selection_statement .)
    K_DONE          reduce using rule 8 (compound_statement -> selection_statement .)
    K_LIST          reduce using rule 8 (compound_statement -> selection_statement .)
    K_DICT          reduce using rule 8 (compound_statement -> selection_statement .)
    K_SET           reduce using rule 8 (compound_statement -> selection_statement .)
    K_INT           reduce using rule 8 (compound_statement -> selection_statement .)
    K_DOUBLE        reduce using rule 8 (compound_statement -> selection_statement .)
    K_STRING        reduce using rule 8 (compound_statement -> selection_statement .)
    K_BOOL          reduce using rule 8 (compound_statement -> selection_statement .)
    K_WINDOW        reduce using rule 8 (compound_statement -> selection_statement .)
    K_SHAPE         reduce using rule 8 (compound_statement -> selection_statement .)
    K_TRIANGLE      reduce using rule 8 (compound_statement -> selection_statement .)
    K_RECTANGLE     reduce using rule 8 (compound_statement -> selection_statement .)
    K_CIRCLE        reduce using rule 8 (compound_statement -> selection_statement .)
    K_TEXT          reduce using rule 8 (compound_statement -> selection_statement .)
    K_EL            reduce using rule 8 (compound_statement -> selection_statement .)
    K_EF            reduce using rule 8 (compound_statement -> selection_statement .)
    $end            reduce using rule 8 (compound_statement -> selection_statement .)


state 4

    (77) selection_statement -> K_IF . LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END

    LPAREN          shift and go to state 21


state 5

    (9) compound_statement -> iteration_statement .

    K_END           reduce using rule 9 (compound_statement -> iteration_statement .)
    ID              reduce using rule 9 (compound_statement -> iteration_statement .)
    K_IF            reduce using rule 9 (compound_statement -> iteration_statement .)
    K_WHILE         reduce using rule 9 (compound_statement -> iteration_statement .)
    K_CONTINUE      reduce using rule 9 (compound_statement -> iteration_statement .)
    K_BREAK         reduce using rule 9 (compound_statement -> iteration_statement .)
    K_DONE          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_LIST          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_DICT          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_SET           reduce using rule 9 (compound_statement -> iteration_statement .)
    K_INT           reduce using rule 9 (compound_statement -> iteration_statement .)
    K_DOUBLE        reduce using rule 9 (compound_statement -> iteration_statement .)
    K_STRING        reduce using rule 9 (compound_statement -> iteration_statement .)
    K_BOOL          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_WINDOW        reduce using rule 9 (compound_statement -> iteration_statement .)
    K_SHAPE         reduce using rule 9 (compound_statement -> iteration_statement .)
    K_TRIANGLE      reduce using rule 9 (compound_statement -> iteration_statement .)
    K_RECTANGLE     reduce using rule 9 (compound_statement -> iteration_statement .)
    K_CIRCLE        reduce using rule 9 (compound_statement -> iteration_statement .)
    K_TEXT          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_EL            reduce using rule 9 (compound_statement -> iteration_statement .)
    K_EF            reduce using rule 9 (compound_statement -> iteration_statement .)
    $end            reduce using rule 9 (compound_statement -> iteration_statement .)


state 6

    (7) compound_statement -> variable_declaration .

    K_END           reduce using rule 7 (compound_statement -> variable_declaration .)
    ID              reduce using rule 7 (compound_statement -> variable_declaration .)
    K_IF            reduce using rule 7 (compound_statement -> variable_declaration .)
    K_WHILE         reduce using rule 7 (compound_statement -> variable_declaration .)
    K_CONTINUE      reduce using rule 7 (compound_statement -> variable_declaration .)
    K_BREAK         reduce using rule 7 (compound_statement -> variable_declaration .)
    K_DONE          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_LIST          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_DICT          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_SET           reduce using rule 7 (compound_statement -> variable_declaration .)
    K_INT           reduce using rule 7 (compound_statement -> variable_declaration .)
    K_DOUBLE        reduce using rule 7 (compound_statement -> variable_declaration .)
    K_STRING        reduce using rule 7 (compound_statement -> variable_declaration .)
    K_BOOL          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_WINDOW        reduce using rule 7 (compound_statement -> variable_declaration .)
    K_SHAPE         reduce using rule 7 (compound_statement -> variable_declaration .)
    K_TRIANGLE      reduce using rule 7 (compound_statement -> variable_declaration .)
    K_RECTANGLE     reduce using rule 7 (compound_statement -> variable_declaration .)
    K_CIRCLE        reduce using rule 7 (compound_statement -> variable_declaration .)
    K_TEXT          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_EL            reduce using rule 7 (compound_statement -> variable_declaration .)
    K_EF            reduce using rule 7 (compound_statement -> variable_declaration .)
    $end            reduce using rule 7 (compound_statement -> variable_declaration .)


state 7

    (85) iteration_statement -> K_WHILE . LPAREN boolean_expression RPAREN compound_statement_list K_END

    LPAREN          shift and go to state 22


state 8

    (5) statement -> compound_statement .

    K_LIST          reduce using rule 5 (statement -> compound_statement .)
    K_DICT          reduce using rule 5 (statement -> compound_statement .)
    K_SET           reduce using rule 5 (statement -> compound_statement .)
    ID              reduce using rule 5 (statement -> compound_statement .)
    K_IF            reduce using rule 5 (statement -> compound_statement .)
    K_WHILE         reduce using rule 5 (statement -> compound_statement .)
    K_CONTINUE      reduce using rule 5 (statement -> compound_statement .)
    K_BREAK         reduce using rule 5 (statement -> compound_statement .)
    K_DONE          reduce using rule 5 (statement -> compound_statement .)
    K_INT           reduce using rule 5 (statement -> compound_statement .)
    K_DOUBLE        reduce using rule 5 (statement -> compound_statement .)
    K_STRING        reduce using rule 5 (statement -> compound_statement .)
    K_BOOL          reduce using rule 5 (statement -> compound_statement .)
    K_WINDOW        reduce using rule 5 (statement -> compound_statement .)
    K_SHAPE         reduce using rule 5 (statement -> compound_statement .)
    K_TRIANGLE      reduce using rule 5 (statement -> compound_statement .)
    K_RECTANGLE     reduce using rule 5 (statement -> compound_statement .)
    K_CIRCLE        reduce using rule 5 (statement -> compound_statement .)
    K_TEXT          reduce using rule 5 (statement -> compound_statement .)
    $end            reduce using rule 5 (statement -> compound_statement .)


state 9

    (21) pre_type_modifier -> K_SET .

    K_INT           reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_DOUBLE        reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_STRING        reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_BOOL          reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_WINDOW        reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_SHAPE         reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_TRIANGLE      reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_RECTANGLE     reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_CIRCLE        reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_TEXT          reduce using rule 21 (pre_type_modifier -> K_SET .)


state 10

    (3) statement_list -> statement_list statement .

    K_LIST          reduce using rule 3 (statement_list -> statement_list statement .)
    K_DICT          reduce using rule 3 (statement_list -> statement_list statement .)
    K_SET           reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    K_IF            reduce using rule 3 (statement_list -> statement_list statement .)
    K_WHILE         reduce using rule 3 (statement_list -> statement_list statement .)
    K_CONTINUE      reduce using rule 3 (statement_list -> statement_list statement .)
    K_BREAK         reduce using rule 3 (statement_list -> statement_list statement .)
    K_DONE          reduce using rule 3 (statement_list -> statement_list statement .)
    K_INT           reduce using rule 3 (statement_list -> statement_list statement .)
    K_DOUBLE        reduce using rule 3 (statement_list -> statement_list statement .)
    K_STRING        reduce using rule 3 (statement_list -> statement_list statement .)
    K_BOOL          reduce using rule 3 (statement_list -> statement_list statement .)
    K_WINDOW        reduce using rule 3 (statement_list -> statement_list statement .)
    K_SHAPE         reduce using rule 3 (statement_list -> statement_list statement .)
    K_TRIANGLE      reduce using rule 3 (statement_list -> statement_list statement .)
    K_RECTANGLE     reduce using rule 3 (statement_list -> statement_list statement .)
    K_CIRCLE        reduce using rule 3 (statement_list -> statement_list statement .)
    K_TEXT          reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)


state 11

    (86) jump_statement -> K_CONTINUE .

    K_END           reduce using rule 86 (jump_statement -> K_CONTINUE .)
    ID              reduce using rule 86 (jump_statement -> K_CONTINUE .)
    K_IF            reduce using rule 86 (jump_statement -> K_CONTINUE .)
    K_WHILE         reduce using rule 86 (jump_statement -> K_CONTINUE .)
    K_CONTINUE      reduce using rule 86 (jump_statement -> K_CONTINUE .)
    K_BREAK         reduce using rule 86 (jump_statement -> K_CONTINUE .)
    K_DONE          reduce using rule 86 (jump_statement -> K_CONTINUE .)
    K_LIST          reduce using rule 86 (jump_statement -> K_CONTINUE .)
    K_DICT          reduce using rule 86 (jump_statement -> K_CONTINUE .)
    K_SET           reduce using rule 86 (jump_statement -> K_CONTINUE .)
    K_INT           reduce using rule 86 (jump_statement -> K_CONTINUE .)
    K_DOUBLE        reduce using rule 86 (jump_statement -> K_CONTINUE .)
    K_STRING        reduce using rule 86 (jump_statement -> K_CONTINUE .)
    K_BOOL          reduce using rule 86 (jump_statement -> K_CONTINUE .)
    K_WINDOW        reduce using rule 86 (jump_statement -> K_CONTINUE .)
    K_SHAPE         reduce using rule 86 (jump_statement -> K_CONTINUE .)
    K_TRIANGLE      reduce using rule 86 (jump_statement -> K_CONTINUE .)
    K_RECTANGLE     reduce using rule 86 (jump_statement -> K_CONTINUE .)
    K_CIRCLE        reduce using rule 86 (jump_statement -> K_CONTINUE .)
    K_TEXT          reduce using rule 86 (jump_statement -> K_CONTINUE .)
    K_EL            reduce using rule 86 (jump_statement -> K_CONTINUE .)
    K_EF            reduce using rule 86 (jump_statement -> K_CONTINUE .)
    $end            reduce using rule 86 (jump_statement -> K_CONTINUE .)


state 12

    (87) jump_statement -> K_BREAK .

    K_END           reduce using rule 87 (jump_statement -> K_BREAK .)
    ID              reduce using rule 87 (jump_statement -> K_BREAK .)
    K_IF            reduce using rule 87 (jump_statement -> K_BREAK .)
    K_WHILE         reduce using rule 87 (jump_statement -> K_BREAK .)
    K_CONTINUE      reduce using rule 87 (jump_statement -> K_BREAK .)
    K_BREAK         reduce using rule 87 (jump_statement -> K_BREAK .)
    K_DONE          reduce using rule 87 (jump_statement -> K_BREAK .)
    K_LIST          reduce using rule 87 (jump_statement -> K_BREAK .)
    K_DICT          reduce using rule 87 (jump_statement -> K_BREAK .)
    K_SET           reduce using rule 87 (jump_statement -> K_BREAK .)
    K_INT           reduce using rule 87 (jump_statement -> K_BREAK .)
    K_DOUBLE        reduce using rule 87 (jump_statement -> K_BREAK .)
    K_STRING        reduce using rule 87 (jump_statement -> K_BREAK .)
    K_BOOL          reduce using rule 87 (jump_statement -> K_BREAK .)
    K_WINDOW        reduce using rule 87 (jump_statement -> K_BREAK .)
    K_SHAPE         reduce using rule 87 (jump_statement -> K_BREAK .)
    K_TRIANGLE      reduce using rule 87 (jump_statement -> K_BREAK .)
    K_RECTANGLE     reduce using rule 87 (jump_statement -> K_BREAK .)
    K_CIRCLE        reduce using rule 87 (jump_statement -> K_BREAK .)
    K_TEXT          reduce using rule 87 (jump_statement -> K_BREAK .)
    K_EL            reduce using rule 87 (jump_statement -> K_BREAK .)
    K_EF            reduce using rule 87 (jump_statement -> K_BREAK .)
    $end            reduce using rule 87 (jump_statement -> K_BREAK .)


state 13

    (19) pre_type_modifier -> K_LIST .

    K_INT           reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_DOUBLE        reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_STRING        reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_BOOL          reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_WINDOW        reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_SHAPE         reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_TRIANGLE      reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_RECTANGLE     reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_CIRCLE        reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_TEXT          reduce using rule 19 (pre_type_modifier -> K_LIST .)


state 14

    (89) function_declaration -> pre_type_modifier . type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END
    (90) function_declaration -> pre_type_modifier . type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END
    (15) variable_declaration -> pre_type_modifier . type ID
    (16) variable_declaration -> pre_type_modifier . type ID ASSIGN expression
    (22) type -> . K_INT
    (23) type -> . K_DOUBLE
    (24) type -> . K_STRING
    (25) type -> . K_BOOL
    (26) type -> . K_WINDOW
    (27) type -> . K_SHAPE
    (28) type -> . K_TRIANGLE
    (29) type -> . K_RECTANGLE
    (30) type -> . K_CIRCLE
    (31) type -> . K_TEXT

    K_INT           shift and go to state 29
    K_DOUBLE        shift and go to state 24
    K_STRING        shift and go to state 30
    K_BOOL          shift and go to state 23
    K_WINDOW        shift and go to state 31
    K_SHAPE         shift and go to state 26
    K_TRIANGLE      shift and go to state 25
    K_RECTANGLE     shift and go to state 28
    K_CIRCLE        shift and go to state 33
    K_TEXT          shift and go to state 27

    type                           shift and go to state 32

state 15

    (20) pre_type_modifier -> K_DICT .

    K_INT           reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_DOUBLE        reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_STRING        reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_BOOL          reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_WINDOW        reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_SHAPE         reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_TRIANGLE      reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_RECTANGLE     reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_CIRCLE        reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_TEXT          reduce using rule 20 (pre_type_modifier -> K_DICT .)


state 16

    (11) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (12) function_call_statement -> ID . LPAREN RPAREN
    (17) variable_declaration -> ID . ASSIGN expression

    LPAREN          shift and go to state 35
    ASSIGN          shift and go to state 34


state 17

    (10) compound_statement -> jump_statement .

    K_END           reduce using rule 10 (compound_statement -> jump_statement .)
    ID              reduce using rule 10 (compound_statement -> jump_statement .)
    K_IF            reduce using rule 10 (compound_statement -> jump_statement .)
    K_WHILE         reduce using rule 10 (compound_statement -> jump_statement .)
    K_CONTINUE      reduce using rule 10 (compound_statement -> jump_statement .)
    K_BREAK         reduce using rule 10 (compound_statement -> jump_statement .)
    K_DONE          reduce using rule 10 (compound_statement -> jump_statement .)
    K_LIST          reduce using rule 10 (compound_statement -> jump_statement .)
    K_DICT          reduce using rule 10 (compound_statement -> jump_statement .)
    K_SET           reduce using rule 10 (compound_statement -> jump_statement .)
    K_INT           reduce using rule 10 (compound_statement -> jump_statement .)
    K_DOUBLE        reduce using rule 10 (compound_statement -> jump_statement .)
    K_STRING        reduce using rule 10 (compound_statement -> jump_statement .)
    K_BOOL          reduce using rule 10 (compound_statement -> jump_statement .)
    K_WINDOW        reduce using rule 10 (compound_statement -> jump_statement .)
    K_SHAPE         reduce using rule 10 (compound_statement -> jump_statement .)
    K_TRIANGLE      reduce using rule 10 (compound_statement -> jump_statement .)
    K_RECTANGLE     reduce using rule 10 (compound_statement -> jump_statement .)
    K_CIRCLE        reduce using rule 10 (compound_statement -> jump_statement .)
    K_TEXT          reduce using rule 10 (compound_statement -> jump_statement .)
    K_EL            reduce using rule 10 (compound_statement -> jump_statement .)
    K_EF            reduce using rule 10 (compound_statement -> jump_statement .)
    $end            reduce using rule 10 (compound_statement -> jump_statement .)


state 18

    (4) statement -> function_declaration .

    K_LIST          reduce using rule 4 (statement -> function_declaration .)
    K_DICT          reduce using rule 4 (statement -> function_declaration .)
    K_SET           reduce using rule 4 (statement -> function_declaration .)
    ID              reduce using rule 4 (statement -> function_declaration .)
    K_IF            reduce using rule 4 (statement -> function_declaration .)
    K_WHILE         reduce using rule 4 (statement -> function_declaration .)
    K_CONTINUE      reduce using rule 4 (statement -> function_declaration .)
    K_BREAK         reduce using rule 4 (statement -> function_declaration .)
    K_DONE          reduce using rule 4 (statement -> function_declaration .)
    K_INT           reduce using rule 4 (statement -> function_declaration .)
    K_DOUBLE        reduce using rule 4 (statement -> function_declaration .)
    K_STRING        reduce using rule 4 (statement -> function_declaration .)
    K_BOOL          reduce using rule 4 (statement -> function_declaration .)
    K_WINDOW        reduce using rule 4 (statement -> function_declaration .)
    K_SHAPE         reduce using rule 4 (statement -> function_declaration .)
    K_TRIANGLE      reduce using rule 4 (statement -> function_declaration .)
    K_RECTANGLE     reduce using rule 4 (statement -> function_declaration .)
    K_CIRCLE        reduce using rule 4 (statement -> function_declaration .)
    K_TEXT          reduce using rule 4 (statement -> function_declaration .)
    $end            reduce using rule 4 (statement -> function_declaration .)


state 19

    (6) compound_statement -> function_call_statement .

    K_END           reduce using rule 6 (compound_statement -> function_call_statement .)
    ID              reduce using rule 6 (compound_statement -> function_call_statement .)
    K_IF            reduce using rule 6 (compound_statement -> function_call_statement .)
    K_WHILE         reduce using rule 6 (compound_statement -> function_call_statement .)
    K_CONTINUE      reduce using rule 6 (compound_statement -> function_call_statement .)
    K_BREAK         reduce using rule 6 (compound_statement -> function_call_statement .)
    K_DONE          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_LIST          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_DICT          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_SET           reduce using rule 6 (compound_statement -> function_call_statement .)
    K_INT           reduce using rule 6 (compound_statement -> function_call_statement .)
    K_DOUBLE        reduce using rule 6 (compound_statement -> function_call_statement .)
    K_STRING        reduce using rule 6 (compound_statement -> function_call_statement .)
    K_BOOL          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_WINDOW        reduce using rule 6 (compound_statement -> function_call_statement .)
    K_SHAPE         reduce using rule 6 (compound_statement -> function_call_statement .)
    K_TRIANGLE      reduce using rule 6 (compound_statement -> function_call_statement .)
    K_RECTANGLE     reduce using rule 6 (compound_statement -> function_call_statement .)
    K_CIRCLE        reduce using rule 6 (compound_statement -> function_call_statement .)
    K_TEXT          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_EL            reduce using rule 6 (compound_statement -> function_call_statement .)
    K_EF            reduce using rule 6 (compound_statement -> function_call_statement .)
    $end            reduce using rule 6 (compound_statement -> function_call_statement .)


state 20

    (88) jump_statement -> K_DONE .

    K_END           reduce using rule 88 (jump_statement -> K_DONE .)
    ID              reduce using rule 88 (jump_statement -> K_DONE .)
    K_IF            reduce using rule 88 (jump_statement -> K_DONE .)
    K_WHILE         reduce using rule 88 (jump_statement -> K_DONE .)
    K_CONTINUE      reduce using rule 88 (jump_statement -> K_DONE .)
    K_BREAK         reduce using rule 88 (jump_statement -> K_DONE .)
    K_DONE          reduce using rule 88 (jump_statement -> K_DONE .)
    K_LIST          reduce using rule 88 (jump_statement -> K_DONE .)
    K_DICT          reduce using rule 88 (jump_statement -> K_DONE .)
    K_SET           reduce using rule 88 (jump_statement -> K_DONE .)
    K_INT           reduce using rule 88 (jump_statement -> K_DONE .)
    K_DOUBLE        reduce using rule 88 (jump_statement -> K_DONE .)
    K_STRING        reduce using rule 88 (jump_statement -> K_DONE .)
    K_BOOL          reduce using rule 88 (jump_statement -> K_DONE .)
    K_WINDOW        reduce using rule 88 (jump_statement -> K_DONE .)
    K_SHAPE         reduce using rule 88 (jump_statement -> K_DONE .)
    K_TRIANGLE      reduce using rule 88 (jump_statement -> K_DONE .)
    K_RECTANGLE     reduce using rule 88 (jump_statement -> K_DONE .)
    K_CIRCLE        reduce using rule 88 (jump_statement -> K_DONE .)
    K_TEXT          reduce using rule 88 (jump_statement -> K_DONE .)
    K_EL            reduce using rule 88 (jump_statement -> K_DONE .)
    K_EF            reduce using rule 88 (jump_statement -> K_DONE .)
    $end            reduce using rule 88 (jump_statement -> K_DONE .)


state 21

    (77) selection_statement -> K_IF LPAREN . boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (47) boolean_expression -> . boolean_expression OR boolean_term
    (48) boolean_expression -> . boolean_term
    (49) boolean_term -> . boolean_term AND boolean_factor
    (50) boolean_term -> . boolean_factor
    (51) boolean_factor -> . LPAREN boolean_expression RPAREN
    (52) boolean_factor -> . unary_expression comparator unary_expression
    (53) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (54) boolean_factor -> . string_expression comparator string_expression
    (55) boolean_factor -> . unary_expression
    (56) boolean_factor -> . NEG boolean_factor
    (40) unary_expression -> . ID
    (41) unary_expression -> . STRING
    (42) unary_expression -> . INTEGER
    (43) unary_expression -> . function_call_statement
    (44) unary_expression -> . DOUBLE
    (45) unary_expression -> . K_TRUE
    (46) unary_expression -> . K_FALSE
    (63) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (65) arithmetic_expression -> . arithmetic_term
    (36) string_expression -> . string_expression PLUS string_term
    (37) string_expression -> . STRING
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (66) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (68) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (69) arithmetic_term -> . arithmetic_factor
    (70) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (71) arithmetic_factor -> . number
    (72) arithmetic_factor -> . ID
    (73) arithmetic_factor -> . function_call_statement
    (74) arithmetic_factor -> . MINUS arithmetic_factor
    (75) number -> . INTEGER
    (76) number -> . DOUBLE

    LPAREN          shift and go to state 47
    NEG             shift and go to state 37
    ID              shift and go to state 50
    STRING          shift and go to state 46
    INTEGER         shift and go to state 43
    DOUBLE          shift and go to state 52
    K_TRUE          shift and go to state 39
    K_FALSE         shift and go to state 54
    MINUS           shift and go to state 41

    arithmetic_expression          shift and go to state 44
    string_expression              shift and go to state 45
    unary_expression               shift and go to state 36
    boolean_expression             shift and go to state 51
    arithmetic_factor              shift and go to state 42
    boolean_term                   shift and go to state 38
    function_call_statement        shift and go to state 53
    number                         shift and go to state 49
    arithmetic_term                shift and go to state 40
    boolean_factor                 shift and go to state 48

state 22

    (85) iteration_statement -> K_WHILE LPAREN . boolean_expression RPAREN compound_statement_list K_END
    (47) boolean_expression -> . boolean_expression OR boolean_term
    (48) boolean_expression -> . boolean_term
    (49) boolean_term -> . boolean_term AND boolean_factor
    (50) boolean_term -> . boolean_factor
    (51) boolean_factor -> . LPAREN boolean_expression RPAREN
    (52) boolean_factor -> . unary_expression comparator unary_expression
    (53) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (54) boolean_factor -> . string_expression comparator string_expression
    (55) boolean_factor -> . unary_expression
    (56) boolean_factor -> . NEG boolean_factor
    (40) unary_expression -> . ID
    (41) unary_expression -> . STRING
    (42) unary_expression -> . INTEGER
    (43) unary_expression -> . function_call_statement
    (44) unary_expression -> . DOUBLE
    (45) unary_expression -> . K_TRUE
    (46) unary_expression -> . K_FALSE
    (63) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (65) arithmetic_expression -> . arithmetic_term
    (36) string_expression -> . string_expression PLUS string_term
    (37) string_expression -> . STRING
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (66) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (68) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (69) arithmetic_term -> . arithmetic_factor
    (70) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (71) arithmetic_factor -> . number
    (72) arithmetic_factor -> . ID
    (73) arithmetic_factor -> . function_call_statement
    (74) arithmetic_factor -> . MINUS arithmetic_factor
    (75) number -> . INTEGER
    (76) number -> . DOUBLE

    LPAREN          shift and go to state 47
    NEG             shift and go to state 37
    ID              shift and go to state 50
    STRING          shift and go to state 46
    INTEGER         shift and go to state 43
    DOUBLE          shift and go to state 52
    K_TRUE          shift and go to state 39
    K_FALSE         shift and go to state 54
    MINUS           shift and go to state 41

    arithmetic_expression          shift and go to state 44
    string_expression              shift and go to state 45
    unary_expression               shift and go to state 36
    boolean_expression             shift and go to state 55
    arithmetic_factor              shift and go to state 42
    boolean_term                   shift and go to state 38
    function_call_statement        shift and go to state 53
    number                         shift and go to state 49
    arithmetic_term                shift and go to state 40
    boolean_factor                 shift and go to state 48

state 23

    (25) type -> K_BOOL .

    ID              reduce using rule 25 (type -> K_BOOL .)


state 24

    (23) type -> K_DOUBLE .

    ID              reduce using rule 23 (type -> K_DOUBLE .)


state 25

    (28) type -> K_TRIANGLE .

    ID              reduce using rule 28 (type -> K_TRIANGLE .)


state 26

    (27) type -> K_SHAPE .

    ID              reduce using rule 27 (type -> K_SHAPE .)


state 27

    (31) type -> K_TEXT .

    ID              reduce using rule 31 (type -> K_TEXT .)


state 28

    (29) type -> K_RECTANGLE .

    ID              reduce using rule 29 (type -> K_RECTANGLE .)


state 29

    (22) type -> K_INT .

    ID              reduce using rule 22 (type -> K_INT .)


state 30

    (24) type -> K_STRING .

    ID              reduce using rule 24 (type -> K_STRING .)


state 31

    (26) type -> K_WINDOW .

    ID              reduce using rule 26 (type -> K_WINDOW .)


state 32

    (89) function_declaration -> pre_type_modifier type . ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END
    (90) function_declaration -> pre_type_modifier type . ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END
    (15) variable_declaration -> pre_type_modifier type . ID
    (16) variable_declaration -> pre_type_modifier type . ID ASSIGN expression

    ID              shift and go to state 56


state 33

    (30) type -> K_CIRCLE .

    ID              reduce using rule 30 (type -> K_CIRCLE .)


state 34

    (17) variable_declaration -> ID ASSIGN . expression
    (32) expression -> . string_expression
    (33) expression -> . unary_expression
    (34) expression -> . boolean_expression
    (35) expression -> . arithmetic_expression
    (36) string_expression -> . string_expression PLUS string_term
    (37) string_expression -> . STRING
    (40) unary_expression -> . ID
    (41) unary_expression -> . STRING
    (42) unary_expression -> . INTEGER
    (43) unary_expression -> . function_call_statement
    (44) unary_expression -> . DOUBLE
    (45) unary_expression -> . K_TRUE
    (46) unary_expression -> . K_FALSE
    (47) boolean_expression -> . boolean_expression OR boolean_term
    (48) boolean_expression -> . boolean_term
    (63) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (65) arithmetic_expression -> . arithmetic_term
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (49) boolean_term -> . boolean_term AND boolean_factor
    (50) boolean_term -> . boolean_factor
    (66) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (68) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (69) arithmetic_term -> . arithmetic_factor
    (51) boolean_factor -> . LPAREN boolean_expression RPAREN
    (52) boolean_factor -> . unary_expression comparator unary_expression
    (53) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (54) boolean_factor -> . string_expression comparator string_expression
    (55) boolean_factor -> . unary_expression
    (56) boolean_factor -> . NEG boolean_factor
    (70) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (71) arithmetic_factor -> . number
    (72) arithmetic_factor -> . ID
    (73) arithmetic_factor -> . function_call_statement
    (74) arithmetic_factor -> . MINUS arithmetic_factor
    (75) number -> . INTEGER
    (76) number -> . DOUBLE

    STRING          shift and go to state 60
    ID              shift and go to state 50
    INTEGER         shift and go to state 43
    DOUBLE          shift and go to state 52
    K_TRUE          shift and go to state 39
    K_FALSE         shift and go to state 54
    LPAREN          shift and go to state 47
    NEG             shift and go to state 37
    MINUS           shift and go to state 41

    arithmetic_expression          shift and go to state 58
    string_expression              shift and go to state 59
    number                         shift and go to state 49
    unary_expression               shift and go to state 57
    boolean_expression             shift and go to state 61
    arithmetic_factor              shift and go to state 42
    boolean_term                   shift and go to state 38
    function_call_statement        shift and go to state 53
    arithmetic_term                shift and go to state 40
    boolean_factor                 shift and go to state 48
    expression                     shift and go to state 62

state 35

    (11) function_call_statement -> ID LPAREN . parameter_list RPAREN
    (12) function_call_statement -> ID LPAREN . RPAREN
    (13) parameter_list -> . parameter_list COMMA expression
    (14) parameter_list -> . expression
    (32) expression -> . string_expression
    (33) expression -> . unary_expression
    (34) expression -> . boolean_expression
    (35) expression -> . arithmetic_expression
    (36) string_expression -> . string_expression PLUS string_term
    (37) string_expression -> . STRING
    (40) unary_expression -> . ID
    (41) unary_expression -> . STRING
    (42) unary_expression -> . INTEGER
    (43) unary_expression -> . function_call_statement
    (44) unary_expression -> . DOUBLE
    (45) unary_expression -> . K_TRUE
    (46) unary_expression -> . K_FALSE
    (47) boolean_expression -> . boolean_expression OR boolean_term
    (48) boolean_expression -> . boolean_term
    (63) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (65) arithmetic_expression -> . arithmetic_term
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (49) boolean_term -> . boolean_term AND boolean_factor
    (50) boolean_term -> . boolean_factor
    (66) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (68) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (69) arithmetic_term -> . arithmetic_factor
    (51) boolean_factor -> . LPAREN boolean_expression RPAREN
    (52) boolean_factor -> . unary_expression comparator unary_expression
    (53) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (54) boolean_factor -> . string_expression comparator string_expression
    (55) boolean_factor -> . unary_expression
    (56) boolean_factor -> . NEG boolean_factor
    (70) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (71) arithmetic_factor -> . number
    (72) arithmetic_factor -> . ID
    (73) arithmetic_factor -> . function_call_statement
    (74) arithmetic_factor -> . MINUS arithmetic_factor
    (75) number -> . INTEGER
    (76) number -> . DOUBLE

    RPAREN          shift and go to state 63
    STRING          shift and go to state 60
    ID              shift and go to state 50
    INTEGER         shift and go to state 43
    DOUBLE          shift and go to state 52
    K_TRUE          shift and go to state 39
    K_FALSE         shift and go to state 54
    LPAREN          shift and go to state 47
    NEG             shift and go to state 37
    MINUS           shift and go to state 41

    arithmetic_expression          shift and go to state 58
    string_expression              shift and go to state 59
    number                         shift and go to state 49
    parameter_list                 shift and go to state 64
    unary_expression               shift and go to state 57
    boolean_expression             shift and go to state 61
    arithmetic_factor              shift and go to state 42
    boolean_term                   shift and go to state 38
    function_call_statement        shift and go to state 53
    arithmetic_term                shift and go to state 40
    boolean_factor                 shift and go to state 48
    expression                     shift and go to state 65

state 36

    (52) boolean_factor -> unary_expression . comparator unary_expression
    (55) boolean_factor -> unary_expression .
    (57) comparator -> . GT
    (58) comparator -> . LT
    (59) comparator -> . GEQ
    (60) comparator -> . LEQ
    (61) comparator -> . EQ
    (62) comparator -> . NEQ

    AND             reduce using rule 55 (boolean_factor -> unary_expression .)
    RPAREN          reduce using rule 55 (boolean_factor -> unary_expression .)
    OR              reduce using rule 55 (boolean_factor -> unary_expression .)
    K_LIST          reduce using rule 55 (boolean_factor -> unary_expression .)
    K_DICT          reduce using rule 55 (boolean_factor -> unary_expression .)
    K_SET           reduce using rule 55 (boolean_factor -> unary_expression .)
    ID              reduce using rule 55 (boolean_factor -> unary_expression .)
    K_IF            reduce using rule 55 (boolean_factor -> unary_expression .)
    K_WHILE         reduce using rule 55 (boolean_factor -> unary_expression .)
    K_CONTINUE      reduce using rule 55 (boolean_factor -> unary_expression .)
    K_BREAK         reduce using rule 55 (boolean_factor -> unary_expression .)
    K_DONE          reduce using rule 55 (boolean_factor -> unary_expression .)
    K_INT           reduce using rule 55 (boolean_factor -> unary_expression .)
    K_DOUBLE        reduce using rule 55 (boolean_factor -> unary_expression .)
    K_STRING        reduce using rule 55 (boolean_factor -> unary_expression .)
    K_BOOL          reduce using rule 55 (boolean_factor -> unary_expression .)
    K_WINDOW        reduce using rule 55 (boolean_factor -> unary_expression .)
    K_SHAPE         reduce using rule 55 (boolean_factor -> unary_expression .)
    K_TRIANGLE      reduce using rule 55 (boolean_factor -> unary_expression .)
    K_RECTANGLE     reduce using rule 55 (boolean_factor -> unary_expression .)
    K_CIRCLE        reduce using rule 55 (boolean_factor -> unary_expression .)
    K_TEXT          reduce using rule 55 (boolean_factor -> unary_expression .)
    $end            reduce using rule 55 (boolean_factor -> unary_expression .)
    K_EL            reduce using rule 55 (boolean_factor -> unary_expression .)
    K_EF            reduce using rule 55 (boolean_factor -> unary_expression .)
    K_END           reduce using rule 55 (boolean_factor -> unary_expression .)
    COMMA           reduce using rule 55 (boolean_factor -> unary_expression .)
    GT              shift and go to state 67
    LT              shift and go to state 70
    GEQ             shift and go to state 66
    LEQ             shift and go to state 69
    EQ              shift and go to state 71
    NEQ             shift and go to state 72

    comparator                     shift and go to state 68

state 37

    (56) boolean_factor -> NEG . boolean_factor
    (51) boolean_factor -> . LPAREN boolean_expression RPAREN
    (52) boolean_factor -> . unary_expression comparator unary_expression
    (53) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (54) boolean_factor -> . string_expression comparator string_expression
    (55) boolean_factor -> . unary_expression
    (56) boolean_factor -> . NEG boolean_factor
    (40) unary_expression -> . ID
    (41) unary_expression -> . STRING
    (42) unary_expression -> . INTEGER
    (43) unary_expression -> . function_call_statement
    (44) unary_expression -> . DOUBLE
    (45) unary_expression -> . K_TRUE
    (46) unary_expression -> . K_FALSE
    (63) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (65) arithmetic_expression -> . arithmetic_term
    (36) string_expression -> . string_expression PLUS string_term
    (37) string_expression -> . STRING
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (66) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (68) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (69) arithmetic_term -> . arithmetic_factor
    (70) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (71) arithmetic_factor -> . number
    (72) arithmetic_factor -> . ID
    (73) arithmetic_factor -> . function_call_statement
    (74) arithmetic_factor -> . MINUS arithmetic_factor
    (75) number -> . INTEGER
    (76) number -> . DOUBLE

    LPAREN          shift and go to state 47
    NEG             shift and go to state 37
    ID              shift and go to state 50
    STRING          shift and go to state 46
    INTEGER         shift and go to state 43
    DOUBLE          shift and go to state 52
    K_TRUE          shift and go to state 39
    K_FALSE         shift and go to state 54
    MINUS           shift and go to state 41

    arithmetic_expression          shift and go to state 44
    string_expression              shift and go to state 45
    unary_expression               shift and go to state 36
    arithmetic_factor              shift and go to state 42
    function_call_statement        shift and go to state 53
    number                         shift and go to state 49
    arithmetic_term                shift and go to state 40
    boolean_factor                 shift and go to state 73

state 38

    (48) boolean_expression -> boolean_term .
    (49) boolean_term -> boolean_term . AND boolean_factor

    OR              reduce using rule 48 (boolean_expression -> boolean_term .)
    RPAREN          reduce using rule 48 (boolean_expression -> boolean_term .)
    COMMA           reduce using rule 48 (boolean_expression -> boolean_term .)
    K_LIST          reduce using rule 48 (boolean_expression -> boolean_term .)
    K_DICT          reduce using rule 48 (boolean_expression -> boolean_term .)
    K_SET           reduce using rule 48 (boolean_expression -> boolean_term .)
    ID              reduce using rule 48 (boolean_expression -> boolean_term .)
    K_IF            reduce using rule 48 (boolean_expression -> boolean_term .)
    K_WHILE         reduce using rule 48 (boolean_expression -> boolean_term .)
    K_CONTINUE      reduce using rule 48 (boolean_expression -> boolean_term .)
    K_BREAK         reduce using rule 48 (boolean_expression -> boolean_term .)
    K_DONE          reduce using rule 48 (boolean_expression -> boolean_term .)
    K_INT           reduce using rule 48 (boolean_expression -> boolean_term .)
    K_DOUBLE        reduce using rule 48 (boolean_expression -> boolean_term .)
    K_STRING        reduce using rule 48 (boolean_expression -> boolean_term .)
    K_BOOL          reduce using rule 48 (boolean_expression -> boolean_term .)
    K_WINDOW        reduce using rule 48 (boolean_expression -> boolean_term .)
    K_SHAPE         reduce using rule 48 (boolean_expression -> boolean_term .)
    K_TRIANGLE      reduce using rule 48 (boolean_expression -> boolean_term .)
    K_RECTANGLE     reduce using rule 48 (boolean_expression -> boolean_term .)
    K_CIRCLE        reduce using rule 48 (boolean_expression -> boolean_term .)
    K_TEXT          reduce using rule 48 (boolean_expression -> boolean_term .)
    $end            reduce using rule 48 (boolean_expression -> boolean_term .)
    K_EL            reduce using rule 48 (boolean_expression -> boolean_term .)
    K_EF            reduce using rule 48 (boolean_expression -> boolean_term .)
    K_END           reduce using rule 48 (boolean_expression -> boolean_term .)
    AND             shift and go to state 74


state 39

    (45) unary_expression -> K_TRUE .

    GT              reduce using rule 45 (unary_expression -> K_TRUE .)
    LT              reduce using rule 45 (unary_expression -> K_TRUE .)
    GEQ             reduce using rule 45 (unary_expression -> K_TRUE .)
    LEQ             reduce using rule 45 (unary_expression -> K_TRUE .)
    EQ              reduce using rule 45 (unary_expression -> K_TRUE .)
    NEQ             reduce using rule 45 (unary_expression -> K_TRUE .)
    AND             reduce using rule 45 (unary_expression -> K_TRUE .)
    RPAREN          reduce using rule 45 (unary_expression -> K_TRUE .)
    OR              reduce using rule 45 (unary_expression -> K_TRUE .)
    K_LIST          reduce using rule 45 (unary_expression -> K_TRUE .)
    K_DICT          reduce using rule 45 (unary_expression -> K_TRUE .)
    K_SET           reduce using rule 45 (unary_expression -> K_TRUE .)
    ID              reduce using rule 45 (unary_expression -> K_TRUE .)
    K_IF            reduce using rule 45 (unary_expression -> K_TRUE .)
    K_WHILE         reduce using rule 45 (unary_expression -> K_TRUE .)
    K_CONTINUE      reduce using rule 45 (unary_expression -> K_TRUE .)
    K_BREAK         reduce using rule 45 (unary_expression -> K_TRUE .)
    K_DONE          reduce using rule 45 (unary_expression -> K_TRUE .)
    K_INT           reduce using rule 45 (unary_expression -> K_TRUE .)
    K_DOUBLE        reduce using rule 45 (unary_expression -> K_TRUE .)
    K_STRING        reduce using rule 45 (unary_expression -> K_TRUE .)
    K_BOOL          reduce using rule 45 (unary_expression -> K_TRUE .)
    K_WINDOW        reduce using rule 45 (unary_expression -> K_TRUE .)
    K_SHAPE         reduce using rule 45 (unary_expression -> K_TRUE .)
    K_TRIANGLE      reduce using rule 45 (unary_expression -> K_TRUE .)
    K_RECTANGLE     reduce using rule 45 (unary_expression -> K_TRUE .)
    K_CIRCLE        reduce using rule 45 (unary_expression -> K_TRUE .)
    K_TEXT          reduce using rule 45 (unary_expression -> K_TRUE .)
    $end            reduce using rule 45 (unary_expression -> K_TRUE .)
    K_EL            reduce using rule 45 (unary_expression -> K_TRUE .)
    K_EF            reduce using rule 45 (unary_expression -> K_TRUE .)
    K_END           reduce using rule 45 (unary_expression -> K_TRUE .)
    COMMA           reduce using rule 45 (unary_expression -> K_TRUE .)


state 40

    (65) arithmetic_expression -> arithmetic_term .
    (66) arithmetic_term -> arithmetic_term . TIMES arithmetic_factor
    (67) arithmetic_term -> arithmetic_term . DIVIDE arithmetic_factor
    (68) arithmetic_term -> arithmetic_term . MOD arithmetic_factor

    PLUS            reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    MINUS           reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    AND             reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    RPAREN          reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    OR              reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    K_LIST          reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    K_DICT          reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    K_SET           reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    ID              reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    K_IF            reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    K_WHILE         reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    K_CONTINUE      reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    K_BREAK         reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    K_DONE          reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    K_INT           reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    K_DOUBLE        reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    K_STRING        reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    K_BOOL          reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    K_WINDOW        reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    K_SHAPE         reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    K_TRIANGLE      reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    K_RECTANGLE     reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    K_CIRCLE        reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    K_TEXT          reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    $end            reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    K_EL            reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    K_EF            reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    K_END           reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    COMMA           reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    GT              reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    LT              reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    GEQ             reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    LEQ             reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    EQ              reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    NEQ             reduce using rule 65 (arithmetic_expression -> arithmetic_term .)
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 75


state 41

    (74) arithmetic_factor -> MINUS . arithmetic_factor
    (70) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (71) arithmetic_factor -> . number
    (72) arithmetic_factor -> . ID
    (73) arithmetic_factor -> . function_call_statement
    (74) arithmetic_factor -> . MINUS arithmetic_factor
    (75) number -> . INTEGER
    (76) number -> . DOUBLE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 82
    ID              shift and go to state 81
    MINUS           shift and go to state 41
    INTEGER         shift and go to state 83
    DOUBLE          shift and go to state 79

    number                         shift and go to state 49
    function_call_statement        shift and go to state 80
    arithmetic_factor              shift and go to state 78

state 42

    (69) arithmetic_term -> arithmetic_factor .

    TIMES           reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    DIVIDE          reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    MOD             reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    PLUS            reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    MINUS           reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    GT              reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    LT              reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    GEQ             reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    LEQ             reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    EQ              reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    NEQ             reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    RPAREN          reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    COMMA           reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    K_LIST          reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    K_DICT          reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    K_SET           reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    ID              reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    K_IF            reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    K_WHILE         reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    K_CONTINUE      reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    K_BREAK         reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    K_DONE          reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    K_INT           reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    K_DOUBLE        reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    K_STRING        reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    K_BOOL          reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    K_WINDOW        reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    K_SHAPE         reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    K_TRIANGLE      reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    K_RECTANGLE     reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    K_CIRCLE        reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    K_TEXT          reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    $end            reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    K_EL            reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    K_EF            reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    K_END           reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    AND             reduce using rule 69 (arithmetic_term -> arithmetic_factor .)
    OR              reduce using rule 69 (arithmetic_term -> arithmetic_factor .)


state 43

    (42) unary_expression -> INTEGER .
    (75) number -> INTEGER .

  ! reduce/reduce conflict for GT resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for LT resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for GEQ resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for LEQ resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for EQ resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for NEQ resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_LIST resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_DICT resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_SET resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for ID resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_IF resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_WHILE resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_CONTINUE resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_BREAK resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_DONE resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_INT resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_STRING resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for $end resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_EL resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_EF resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_END resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 42 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 42 (unary_expression -> INTEGER .)
    GT              reduce using rule 42 (unary_expression -> INTEGER .)
    LT              reduce using rule 42 (unary_expression -> INTEGER .)
    GEQ             reduce using rule 42 (unary_expression -> INTEGER .)
    LEQ             reduce using rule 42 (unary_expression -> INTEGER .)
    EQ              reduce using rule 42 (unary_expression -> INTEGER .)
    NEQ             reduce using rule 42 (unary_expression -> INTEGER .)
    AND             reduce using rule 42 (unary_expression -> INTEGER .)
    RPAREN          reduce using rule 42 (unary_expression -> INTEGER .)
    OR              reduce using rule 42 (unary_expression -> INTEGER .)
    K_LIST          reduce using rule 42 (unary_expression -> INTEGER .)
    K_DICT          reduce using rule 42 (unary_expression -> INTEGER .)
    K_SET           reduce using rule 42 (unary_expression -> INTEGER .)
    ID              reduce using rule 42 (unary_expression -> INTEGER .)
    K_IF            reduce using rule 42 (unary_expression -> INTEGER .)
    K_WHILE         reduce using rule 42 (unary_expression -> INTEGER .)
    K_CONTINUE      reduce using rule 42 (unary_expression -> INTEGER .)
    K_BREAK         reduce using rule 42 (unary_expression -> INTEGER .)
    K_DONE          reduce using rule 42 (unary_expression -> INTEGER .)
    K_INT           reduce using rule 42 (unary_expression -> INTEGER .)
    K_DOUBLE        reduce using rule 42 (unary_expression -> INTEGER .)
    K_STRING        reduce using rule 42 (unary_expression -> INTEGER .)
    K_BOOL          reduce using rule 42 (unary_expression -> INTEGER .)
    K_WINDOW        reduce using rule 42 (unary_expression -> INTEGER .)
    K_SHAPE         reduce using rule 42 (unary_expression -> INTEGER .)
    K_TRIANGLE      reduce using rule 42 (unary_expression -> INTEGER .)
    K_RECTANGLE     reduce using rule 42 (unary_expression -> INTEGER .)
    K_CIRCLE        reduce using rule 42 (unary_expression -> INTEGER .)
    K_TEXT          reduce using rule 42 (unary_expression -> INTEGER .)
    $end            reduce using rule 42 (unary_expression -> INTEGER .)
    K_EL            reduce using rule 42 (unary_expression -> INTEGER .)
    K_EF            reduce using rule 42 (unary_expression -> INTEGER .)
    K_END           reduce using rule 42 (unary_expression -> INTEGER .)
    COMMA           reduce using rule 42 (unary_expression -> INTEGER .)
    TIMES           reduce using rule 75 (number -> INTEGER .)
    DIVIDE          reduce using rule 75 (number -> INTEGER .)
    MOD             reduce using rule 75 (number -> INTEGER .)
    PLUS            reduce using rule 75 (number -> INTEGER .)
    MINUS           reduce using rule 75 (number -> INTEGER .)

  ! GT              [ reduce using rule 75 (number -> INTEGER .) ]
  ! LT              [ reduce using rule 75 (number -> INTEGER .) ]
  ! GEQ             [ reduce using rule 75 (number -> INTEGER .) ]
  ! LEQ             [ reduce using rule 75 (number -> INTEGER .) ]
  ! EQ              [ reduce using rule 75 (number -> INTEGER .) ]
  ! NEQ             [ reduce using rule 75 (number -> INTEGER .) ]
  ! K_LIST          [ reduce using rule 75 (number -> INTEGER .) ]
  ! K_DICT          [ reduce using rule 75 (number -> INTEGER .) ]
  ! K_SET           [ reduce using rule 75 (number -> INTEGER .) ]
  ! ID              [ reduce using rule 75 (number -> INTEGER .) ]
  ! K_IF            [ reduce using rule 75 (number -> INTEGER .) ]
  ! K_WHILE         [ reduce using rule 75 (number -> INTEGER .) ]
  ! K_CONTINUE      [ reduce using rule 75 (number -> INTEGER .) ]
  ! K_BREAK         [ reduce using rule 75 (number -> INTEGER .) ]
  ! K_DONE          [ reduce using rule 75 (number -> INTEGER .) ]
  ! K_INT           [ reduce using rule 75 (number -> INTEGER .) ]
  ! K_DOUBLE        [ reduce using rule 75 (number -> INTEGER .) ]
  ! K_STRING        [ reduce using rule 75 (number -> INTEGER .) ]
  ! K_BOOL          [ reduce using rule 75 (number -> INTEGER .) ]
  ! K_WINDOW        [ reduce using rule 75 (number -> INTEGER .) ]
  ! K_SHAPE         [ reduce using rule 75 (number -> INTEGER .) ]
  ! K_TRIANGLE      [ reduce using rule 75 (number -> INTEGER .) ]
  ! K_RECTANGLE     [ reduce using rule 75 (number -> INTEGER .) ]
  ! K_CIRCLE        [ reduce using rule 75 (number -> INTEGER .) ]
  ! K_TEXT          [ reduce using rule 75 (number -> INTEGER .) ]
  ! $end            [ reduce using rule 75 (number -> INTEGER .) ]
  ! K_EL            [ reduce using rule 75 (number -> INTEGER .) ]
  ! K_EF            [ reduce using rule 75 (number -> INTEGER .) ]
  ! K_END           [ reduce using rule 75 (number -> INTEGER .) ]
  ! RPAREN          [ reduce using rule 75 (number -> INTEGER .) ]
  ! COMMA           [ reduce using rule 75 (number -> INTEGER .) ]


state 44

    (53) boolean_factor -> arithmetic_expression . comparator arithmetic_expression
    (63) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (64) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term
    (57) comparator -> . GT
    (58) comparator -> . LT
    (59) comparator -> . GEQ
    (60) comparator -> . LEQ
    (61) comparator -> . EQ
    (62) comparator -> . NEQ

    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    GT              shift and go to state 67
    LT              shift and go to state 70
    GEQ             shift and go to state 66
    LEQ             shift and go to state 69
    EQ              shift and go to state 71
    NEQ             shift and go to state 72

    comparator                     shift and go to state 84

state 45

    (54) boolean_factor -> string_expression . comparator string_expression
    (36) string_expression -> string_expression . PLUS string_term
    (57) comparator -> . GT
    (58) comparator -> . LT
    (59) comparator -> . GEQ
    (60) comparator -> . LEQ
    (61) comparator -> . EQ
    (62) comparator -> . NEQ

    PLUS            shift and go to state 88
    GT              shift and go to state 67
    LT              shift and go to state 70
    GEQ             shift and go to state 66
    LEQ             shift and go to state 69
    EQ              shift and go to state 71
    NEQ             shift and go to state 72

    comparator                     shift and go to state 87

state 46

    (41) unary_expression -> STRING .
    (37) string_expression -> STRING .

  ! reduce/reduce conflict for GT resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for LT resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for GEQ resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for LEQ resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for EQ resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for NEQ resolved using rule 37 (string_expression -> STRING .)
    AND             reduce using rule 41 (unary_expression -> STRING .)
    RPAREN          reduce using rule 41 (unary_expression -> STRING .)
    OR              reduce using rule 41 (unary_expression -> STRING .)
    K_LIST          reduce using rule 41 (unary_expression -> STRING .)
    K_DICT          reduce using rule 41 (unary_expression -> STRING .)
    K_SET           reduce using rule 41 (unary_expression -> STRING .)
    ID              reduce using rule 41 (unary_expression -> STRING .)
    K_IF            reduce using rule 41 (unary_expression -> STRING .)
    K_WHILE         reduce using rule 41 (unary_expression -> STRING .)
    K_CONTINUE      reduce using rule 41 (unary_expression -> STRING .)
    K_BREAK         reduce using rule 41 (unary_expression -> STRING .)
    K_DONE          reduce using rule 41 (unary_expression -> STRING .)
    K_INT           reduce using rule 41 (unary_expression -> STRING .)
    K_DOUBLE        reduce using rule 41 (unary_expression -> STRING .)
    K_STRING        reduce using rule 41 (unary_expression -> STRING .)
    K_BOOL          reduce using rule 41 (unary_expression -> STRING .)
    K_WINDOW        reduce using rule 41 (unary_expression -> STRING .)
    K_SHAPE         reduce using rule 41 (unary_expression -> STRING .)
    K_TRIANGLE      reduce using rule 41 (unary_expression -> STRING .)
    K_RECTANGLE     reduce using rule 41 (unary_expression -> STRING .)
    K_CIRCLE        reduce using rule 41 (unary_expression -> STRING .)
    K_TEXT          reduce using rule 41 (unary_expression -> STRING .)
    $end            reduce using rule 41 (unary_expression -> STRING .)
    K_EL            reduce using rule 41 (unary_expression -> STRING .)
    K_EF            reduce using rule 41 (unary_expression -> STRING .)
    K_END           reduce using rule 41 (unary_expression -> STRING .)
    COMMA           reduce using rule 41 (unary_expression -> STRING .)
    PLUS            reduce using rule 37 (string_expression -> STRING .)
    GT              reduce using rule 37 (string_expression -> STRING .)
    LT              reduce using rule 37 (string_expression -> STRING .)
    GEQ             reduce using rule 37 (string_expression -> STRING .)
    LEQ             reduce using rule 37 (string_expression -> STRING .)
    EQ              reduce using rule 37 (string_expression -> STRING .)
    NEQ             reduce using rule 37 (string_expression -> STRING .)

  ! GT              [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! LT              [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! GEQ             [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! LEQ             [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! EQ              [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! NEQ             [ reduce using rule 41 (unary_expression -> STRING .) ]


state 47

    (51) boolean_factor -> LPAREN . boolean_expression RPAREN
    (70) arithmetic_factor -> LPAREN . arithmetic_expression RPAREN
    (47) boolean_expression -> . boolean_expression OR boolean_term
    (48) boolean_expression -> . boolean_term
    (63) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (65) arithmetic_expression -> . arithmetic_term
    (49) boolean_term -> . boolean_term AND boolean_factor
    (50) boolean_term -> . boolean_factor
    (66) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (68) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (69) arithmetic_term -> . arithmetic_factor
    (51) boolean_factor -> . LPAREN boolean_expression RPAREN
    (52) boolean_factor -> . unary_expression comparator unary_expression
    (53) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (54) boolean_factor -> . string_expression comparator string_expression
    (55) boolean_factor -> . unary_expression
    (56) boolean_factor -> . NEG boolean_factor
    (70) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (71) arithmetic_factor -> . number
    (72) arithmetic_factor -> . ID
    (73) arithmetic_factor -> . function_call_statement
    (74) arithmetic_factor -> . MINUS arithmetic_factor
    (40) unary_expression -> . ID
    (41) unary_expression -> . STRING
    (42) unary_expression -> . INTEGER
    (43) unary_expression -> . function_call_statement
    (44) unary_expression -> . DOUBLE
    (45) unary_expression -> . K_TRUE
    (46) unary_expression -> . K_FALSE
    (36) string_expression -> . string_expression PLUS string_term
    (37) string_expression -> . STRING
    (75) number -> . INTEGER
    (76) number -> . DOUBLE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 47
    NEG             shift and go to state 37
    ID              shift and go to state 91
    MINUS           shift and go to state 41
    STRING          shift and go to state 46
    INTEGER         shift and go to state 43
    DOUBLE          shift and go to state 52
    K_TRUE          shift and go to state 39
    K_FALSE         shift and go to state 54

    arithmetic_expression          shift and go to state 90
    string_expression              shift and go to state 45
    unary_expression               shift and go to state 36
    arithmetic_factor              shift and go to state 42
    boolean_expression             shift and go to state 92
    boolean_term                   shift and go to state 38
    arithmetic_term                shift and go to state 40
    number                         shift and go to state 49
    function_call_statement        shift and go to state 89
    boolean_factor                 shift and go to state 48

state 48

    (50) boolean_term -> boolean_factor .

    AND             reduce using rule 50 (boolean_term -> boolean_factor .)
    RPAREN          reduce using rule 50 (boolean_term -> boolean_factor .)
    OR              reduce using rule 50 (boolean_term -> boolean_factor .)
    K_LIST          reduce using rule 50 (boolean_term -> boolean_factor .)
    K_DICT          reduce using rule 50 (boolean_term -> boolean_factor .)
    K_SET           reduce using rule 50 (boolean_term -> boolean_factor .)
    ID              reduce using rule 50 (boolean_term -> boolean_factor .)
    K_IF            reduce using rule 50 (boolean_term -> boolean_factor .)
    K_WHILE         reduce using rule 50 (boolean_term -> boolean_factor .)
    K_CONTINUE      reduce using rule 50 (boolean_term -> boolean_factor .)
    K_BREAK         reduce using rule 50 (boolean_term -> boolean_factor .)
    K_DONE          reduce using rule 50 (boolean_term -> boolean_factor .)
    K_INT           reduce using rule 50 (boolean_term -> boolean_factor .)
    K_DOUBLE        reduce using rule 50 (boolean_term -> boolean_factor .)
    K_STRING        reduce using rule 50 (boolean_term -> boolean_factor .)
    K_BOOL          reduce using rule 50 (boolean_term -> boolean_factor .)
    K_WINDOW        reduce using rule 50 (boolean_term -> boolean_factor .)
    K_SHAPE         reduce using rule 50 (boolean_term -> boolean_factor .)
    K_TRIANGLE      reduce using rule 50 (boolean_term -> boolean_factor .)
    K_RECTANGLE     reduce using rule 50 (boolean_term -> boolean_factor .)
    K_CIRCLE        reduce using rule 50 (boolean_term -> boolean_factor .)
    K_TEXT          reduce using rule 50 (boolean_term -> boolean_factor .)
    $end            reduce using rule 50 (boolean_term -> boolean_factor .)
    K_EL            reduce using rule 50 (boolean_term -> boolean_factor .)
    K_EF            reduce using rule 50 (boolean_term -> boolean_factor .)
    K_END           reduce using rule 50 (boolean_term -> boolean_factor .)
    COMMA           reduce using rule 50 (boolean_term -> boolean_factor .)


state 49

    (71) arithmetic_factor -> number .

    TIMES           reduce using rule 71 (arithmetic_factor -> number .)
    DIVIDE          reduce using rule 71 (arithmetic_factor -> number .)
    MOD             reduce using rule 71 (arithmetic_factor -> number .)
    PLUS            reduce using rule 71 (arithmetic_factor -> number .)
    MINUS           reduce using rule 71 (arithmetic_factor -> number .)
    GT              reduce using rule 71 (arithmetic_factor -> number .)
    LT              reduce using rule 71 (arithmetic_factor -> number .)
    GEQ             reduce using rule 71 (arithmetic_factor -> number .)
    LEQ             reduce using rule 71 (arithmetic_factor -> number .)
    EQ              reduce using rule 71 (arithmetic_factor -> number .)
    NEQ             reduce using rule 71 (arithmetic_factor -> number .)
    K_LIST          reduce using rule 71 (arithmetic_factor -> number .)
    K_DICT          reduce using rule 71 (arithmetic_factor -> number .)
    K_SET           reduce using rule 71 (arithmetic_factor -> number .)
    ID              reduce using rule 71 (arithmetic_factor -> number .)
    K_IF            reduce using rule 71 (arithmetic_factor -> number .)
    K_WHILE         reduce using rule 71 (arithmetic_factor -> number .)
    K_CONTINUE      reduce using rule 71 (arithmetic_factor -> number .)
    K_BREAK         reduce using rule 71 (arithmetic_factor -> number .)
    K_DONE          reduce using rule 71 (arithmetic_factor -> number .)
    K_INT           reduce using rule 71 (arithmetic_factor -> number .)
    K_DOUBLE        reduce using rule 71 (arithmetic_factor -> number .)
    K_STRING        reduce using rule 71 (arithmetic_factor -> number .)
    K_BOOL          reduce using rule 71 (arithmetic_factor -> number .)
    K_WINDOW        reduce using rule 71 (arithmetic_factor -> number .)
    K_SHAPE         reduce using rule 71 (arithmetic_factor -> number .)
    K_TRIANGLE      reduce using rule 71 (arithmetic_factor -> number .)
    K_RECTANGLE     reduce using rule 71 (arithmetic_factor -> number .)
    K_CIRCLE        reduce using rule 71 (arithmetic_factor -> number .)
    K_TEXT          reduce using rule 71 (arithmetic_factor -> number .)
    $end            reduce using rule 71 (arithmetic_factor -> number .)
    K_EL            reduce using rule 71 (arithmetic_factor -> number .)
    K_EF            reduce using rule 71 (arithmetic_factor -> number .)
    K_END           reduce using rule 71 (arithmetic_factor -> number .)
    RPAREN          reduce using rule 71 (arithmetic_factor -> number .)
    COMMA           reduce using rule 71 (arithmetic_factor -> number .)
    AND             reduce using rule 71 (arithmetic_factor -> number .)
    OR              reduce using rule 71 (arithmetic_factor -> number .)


state 50

    (40) unary_expression -> ID .
    (11) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (12) function_call_statement -> ID . LPAREN RPAREN
    (72) arithmetic_factor -> ID .

  ! reduce/reduce conflict for GT resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for LT resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for GEQ resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for LEQ resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for EQ resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for NEQ resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_LIST resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_DICT resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_SET resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_IF resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_WHILE resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_CONTINUE resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_BREAK resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_DONE resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_INT resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_STRING resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_EL resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_EF resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_END resolved using rule 40 (unary_expression -> ID .)
    GT              reduce using rule 40 (unary_expression -> ID .)
    LT              reduce using rule 40 (unary_expression -> ID .)
    GEQ             reduce using rule 40 (unary_expression -> ID .)
    LEQ             reduce using rule 40 (unary_expression -> ID .)
    EQ              reduce using rule 40 (unary_expression -> ID .)
    NEQ             reduce using rule 40 (unary_expression -> ID .)
    AND             reduce using rule 40 (unary_expression -> ID .)
    RPAREN          reduce using rule 40 (unary_expression -> ID .)
    OR              reduce using rule 40 (unary_expression -> ID .)
    K_LIST          reduce using rule 40 (unary_expression -> ID .)
    K_DICT          reduce using rule 40 (unary_expression -> ID .)
    K_SET           reduce using rule 40 (unary_expression -> ID .)
    ID              reduce using rule 40 (unary_expression -> ID .)
    K_IF            reduce using rule 40 (unary_expression -> ID .)
    K_WHILE         reduce using rule 40 (unary_expression -> ID .)
    K_CONTINUE      reduce using rule 40 (unary_expression -> ID .)
    K_BREAK         reduce using rule 40 (unary_expression -> ID .)
    K_DONE          reduce using rule 40 (unary_expression -> ID .)
    K_INT           reduce using rule 40 (unary_expression -> ID .)
    K_DOUBLE        reduce using rule 40 (unary_expression -> ID .)
    K_STRING        reduce using rule 40 (unary_expression -> ID .)
    K_BOOL          reduce using rule 40 (unary_expression -> ID .)
    K_WINDOW        reduce using rule 40 (unary_expression -> ID .)
    K_SHAPE         reduce using rule 40 (unary_expression -> ID .)
    K_TRIANGLE      reduce using rule 40 (unary_expression -> ID .)
    K_RECTANGLE     reduce using rule 40 (unary_expression -> ID .)
    K_CIRCLE        reduce using rule 40 (unary_expression -> ID .)
    K_TEXT          reduce using rule 40 (unary_expression -> ID .)
    $end            reduce using rule 40 (unary_expression -> ID .)
    K_EL            reduce using rule 40 (unary_expression -> ID .)
    K_EF            reduce using rule 40 (unary_expression -> ID .)
    K_END           reduce using rule 40 (unary_expression -> ID .)
    COMMA           reduce using rule 40 (unary_expression -> ID .)
    LPAREN          shift and go to state 35
    TIMES           reduce using rule 72 (arithmetic_factor -> ID .)
    DIVIDE          reduce using rule 72 (arithmetic_factor -> ID .)
    MOD             reduce using rule 72 (arithmetic_factor -> ID .)
    PLUS            reduce using rule 72 (arithmetic_factor -> ID .)
    MINUS           reduce using rule 72 (arithmetic_factor -> ID .)

  ! GT              [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! LT              [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! GEQ             [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! LEQ             [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! EQ              [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! NEQ             [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! RPAREN          [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! COMMA           [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! K_LIST          [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! K_DICT          [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! K_SET           [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! ID              [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! K_IF            [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! K_WHILE         [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! K_CONTINUE      [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! K_BREAK         [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! K_DONE          [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! K_INT           [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! K_DOUBLE        [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! K_STRING        [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! K_BOOL          [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! K_WINDOW        [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! K_SHAPE         [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! K_TRIANGLE      [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! K_RECTANGLE     [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! K_CIRCLE        [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! K_TEXT          [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! $end            [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! K_EL            [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! K_EF            [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! K_END           [ reduce using rule 72 (arithmetic_factor -> ID .) ]


state 51

    (77) selection_statement -> K_IF LPAREN boolean_expression . RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (47) boolean_expression -> boolean_expression . OR boolean_term

    RPAREN          shift and go to state 93
    OR              shift and go to state 94


state 52

    (44) unary_expression -> DOUBLE .
    (76) number -> DOUBLE .

  ! reduce/reduce conflict for GT resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for LT resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for GEQ resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for LEQ resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for EQ resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for NEQ resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_LIST resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_DICT resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_SET resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for ID resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_IF resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_WHILE resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_CONTINUE resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_BREAK resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_DONE resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_INT resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_STRING resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for $end resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_EL resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_EF resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_END resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 44 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 44 (unary_expression -> DOUBLE .)
    GT              reduce using rule 44 (unary_expression -> DOUBLE .)
    LT              reduce using rule 44 (unary_expression -> DOUBLE .)
    GEQ             reduce using rule 44 (unary_expression -> DOUBLE .)
    LEQ             reduce using rule 44 (unary_expression -> DOUBLE .)
    EQ              reduce using rule 44 (unary_expression -> DOUBLE .)
    NEQ             reduce using rule 44 (unary_expression -> DOUBLE .)
    AND             reduce using rule 44 (unary_expression -> DOUBLE .)
    RPAREN          reduce using rule 44 (unary_expression -> DOUBLE .)
    OR              reduce using rule 44 (unary_expression -> DOUBLE .)
    K_LIST          reduce using rule 44 (unary_expression -> DOUBLE .)
    K_DICT          reduce using rule 44 (unary_expression -> DOUBLE .)
    K_SET           reduce using rule 44 (unary_expression -> DOUBLE .)
    ID              reduce using rule 44 (unary_expression -> DOUBLE .)
    K_IF            reduce using rule 44 (unary_expression -> DOUBLE .)
    K_WHILE         reduce using rule 44 (unary_expression -> DOUBLE .)
    K_CONTINUE      reduce using rule 44 (unary_expression -> DOUBLE .)
    K_BREAK         reduce using rule 44 (unary_expression -> DOUBLE .)
    K_DONE          reduce using rule 44 (unary_expression -> DOUBLE .)
    K_INT           reduce using rule 44 (unary_expression -> DOUBLE .)
    K_DOUBLE        reduce using rule 44 (unary_expression -> DOUBLE .)
    K_STRING        reduce using rule 44 (unary_expression -> DOUBLE .)
    K_BOOL          reduce using rule 44 (unary_expression -> DOUBLE .)
    K_WINDOW        reduce using rule 44 (unary_expression -> DOUBLE .)
    K_SHAPE         reduce using rule 44 (unary_expression -> DOUBLE .)
    K_TRIANGLE      reduce using rule 44 (unary_expression -> DOUBLE .)
    K_RECTANGLE     reduce using rule 44 (unary_expression -> DOUBLE .)
    K_CIRCLE        reduce using rule 44 (unary_expression -> DOUBLE .)
    K_TEXT          reduce using rule 44 (unary_expression -> DOUBLE .)
    $end            reduce using rule 44 (unary_expression -> DOUBLE .)
    K_EL            reduce using rule 44 (unary_expression -> DOUBLE .)
    K_EF            reduce using rule 44 (unary_expression -> DOUBLE .)
    K_END           reduce using rule 44 (unary_expression -> DOUBLE .)
    COMMA           reduce using rule 44 (unary_expression -> DOUBLE .)
    TIMES           reduce using rule 76 (number -> DOUBLE .)
    DIVIDE          reduce using rule 76 (number -> DOUBLE .)
    MOD             reduce using rule 76 (number -> DOUBLE .)
    PLUS            reduce using rule 76 (number -> DOUBLE .)
    MINUS           reduce using rule 76 (number -> DOUBLE .)

  ! GT              [ reduce using rule 76 (number -> DOUBLE .) ]
  ! LT              [ reduce using rule 76 (number -> DOUBLE .) ]
  ! GEQ             [ reduce using rule 76 (number -> DOUBLE .) ]
  ! LEQ             [ reduce using rule 76 (number -> DOUBLE .) ]
  ! EQ              [ reduce using rule 76 (number -> DOUBLE .) ]
  ! NEQ             [ reduce using rule 76 (number -> DOUBLE .) ]
  ! K_LIST          [ reduce using rule 76 (number -> DOUBLE .) ]
  ! K_DICT          [ reduce using rule 76 (number -> DOUBLE .) ]
  ! K_SET           [ reduce using rule 76 (number -> DOUBLE .) ]
  ! ID              [ reduce using rule 76 (number -> DOUBLE .) ]
  ! K_IF            [ reduce using rule 76 (number -> DOUBLE .) ]
  ! K_WHILE         [ reduce using rule 76 (number -> DOUBLE .) ]
  ! K_CONTINUE      [ reduce using rule 76 (number -> DOUBLE .) ]
  ! K_BREAK         [ reduce using rule 76 (number -> DOUBLE .) ]
  ! K_DONE          [ reduce using rule 76 (number -> DOUBLE .) ]
  ! K_INT           [ reduce using rule 76 (number -> DOUBLE .) ]
  ! K_DOUBLE        [ reduce using rule 76 (number -> DOUBLE .) ]
  ! K_STRING        [ reduce using rule 76 (number -> DOUBLE .) ]
  ! K_BOOL          [ reduce using rule 76 (number -> DOUBLE .) ]
  ! K_WINDOW        [ reduce using rule 76 (number -> DOUBLE .) ]
  ! K_SHAPE         [ reduce using rule 76 (number -> DOUBLE .) ]
  ! K_TRIANGLE      [ reduce using rule 76 (number -> DOUBLE .) ]
  ! K_RECTANGLE     [ reduce using rule 76 (number -> DOUBLE .) ]
  ! K_CIRCLE        [ reduce using rule 76 (number -> DOUBLE .) ]
  ! K_TEXT          [ reduce using rule 76 (number -> DOUBLE .) ]
  ! $end            [ reduce using rule 76 (number -> DOUBLE .) ]
  ! K_EL            [ reduce using rule 76 (number -> DOUBLE .) ]
  ! K_EF            [ reduce using rule 76 (number -> DOUBLE .) ]
  ! K_END           [ reduce using rule 76 (number -> DOUBLE .) ]
  ! RPAREN          [ reduce using rule 76 (number -> DOUBLE .) ]
  ! COMMA           [ reduce using rule 76 (number -> DOUBLE .) ]


state 53

    (43) unary_expression -> function_call_statement .
    (73) arithmetic_factor -> function_call_statement .

  ! reduce/reduce conflict for GT resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for LT resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for GEQ resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for LEQ resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for EQ resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for NEQ resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for RPAREN resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for COMMA resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_LIST resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_DICT resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_SET resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for ID resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_IF resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_WHILE resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_CONTINUE resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_BREAK resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_DONE resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_INT resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_STRING resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for $end resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_EL resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_EF resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_END resolved using rule 43 (unary_expression -> function_call_statement .)
    GT              reduce using rule 43 (unary_expression -> function_call_statement .)
    LT              reduce using rule 43 (unary_expression -> function_call_statement .)
    GEQ             reduce using rule 43 (unary_expression -> function_call_statement .)
    LEQ             reduce using rule 43 (unary_expression -> function_call_statement .)
    EQ              reduce using rule 43 (unary_expression -> function_call_statement .)
    NEQ             reduce using rule 43 (unary_expression -> function_call_statement .)
    AND             reduce using rule 43 (unary_expression -> function_call_statement .)
    RPAREN          reduce using rule 43 (unary_expression -> function_call_statement .)
    OR              reduce using rule 43 (unary_expression -> function_call_statement .)
    K_LIST          reduce using rule 43 (unary_expression -> function_call_statement .)
    K_DICT          reduce using rule 43 (unary_expression -> function_call_statement .)
    K_SET           reduce using rule 43 (unary_expression -> function_call_statement .)
    ID              reduce using rule 43 (unary_expression -> function_call_statement .)
    K_IF            reduce using rule 43 (unary_expression -> function_call_statement .)
    K_WHILE         reduce using rule 43 (unary_expression -> function_call_statement .)
    K_CONTINUE      reduce using rule 43 (unary_expression -> function_call_statement .)
    K_BREAK         reduce using rule 43 (unary_expression -> function_call_statement .)
    K_DONE          reduce using rule 43 (unary_expression -> function_call_statement .)
    K_INT           reduce using rule 43 (unary_expression -> function_call_statement .)
    K_DOUBLE        reduce using rule 43 (unary_expression -> function_call_statement .)
    K_STRING        reduce using rule 43 (unary_expression -> function_call_statement .)
    K_BOOL          reduce using rule 43 (unary_expression -> function_call_statement .)
    K_WINDOW        reduce using rule 43 (unary_expression -> function_call_statement .)
    K_SHAPE         reduce using rule 43 (unary_expression -> function_call_statement .)
    K_TRIANGLE      reduce using rule 43 (unary_expression -> function_call_statement .)
    K_RECTANGLE     reduce using rule 43 (unary_expression -> function_call_statement .)
    K_CIRCLE        reduce using rule 43 (unary_expression -> function_call_statement .)
    K_TEXT          reduce using rule 43 (unary_expression -> function_call_statement .)
    $end            reduce using rule 43 (unary_expression -> function_call_statement .)
    K_EL            reduce using rule 43 (unary_expression -> function_call_statement .)
    K_EF            reduce using rule 43 (unary_expression -> function_call_statement .)
    K_END           reduce using rule 43 (unary_expression -> function_call_statement .)
    COMMA           reduce using rule 43 (unary_expression -> function_call_statement .)
    TIMES           reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    DIVIDE          reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    MOD             reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    PLUS            reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    MINUS           reduce using rule 73 (arithmetic_factor -> function_call_statement .)

  ! GT              [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! LT              [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! GEQ             [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! LEQ             [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! EQ              [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! NEQ             [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! RPAREN          [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! COMMA           [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! K_LIST          [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! K_DICT          [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! K_SET           [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! ID              [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! K_IF            [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! K_WHILE         [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! K_CONTINUE      [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! K_BREAK         [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! K_DONE          [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! K_INT           [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! K_DOUBLE        [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! K_STRING        [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! K_BOOL          [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! K_WINDOW        [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! K_SHAPE         [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! K_TRIANGLE      [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! K_RECTANGLE     [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! K_CIRCLE        [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! K_TEXT          [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! $end            [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! K_EL            [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! K_EF            [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! K_END           [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]


state 54

    (46) unary_expression -> K_FALSE .

    GT              reduce using rule 46 (unary_expression -> K_FALSE .)
    LT              reduce using rule 46 (unary_expression -> K_FALSE .)
    GEQ             reduce using rule 46 (unary_expression -> K_FALSE .)
    LEQ             reduce using rule 46 (unary_expression -> K_FALSE .)
    EQ              reduce using rule 46 (unary_expression -> K_FALSE .)
    NEQ             reduce using rule 46 (unary_expression -> K_FALSE .)
    AND             reduce using rule 46 (unary_expression -> K_FALSE .)
    RPAREN          reduce using rule 46 (unary_expression -> K_FALSE .)
    OR              reduce using rule 46 (unary_expression -> K_FALSE .)
    K_LIST          reduce using rule 46 (unary_expression -> K_FALSE .)
    K_DICT          reduce using rule 46 (unary_expression -> K_FALSE .)
    K_SET           reduce using rule 46 (unary_expression -> K_FALSE .)
    ID              reduce using rule 46 (unary_expression -> K_FALSE .)
    K_IF            reduce using rule 46 (unary_expression -> K_FALSE .)
    K_WHILE         reduce using rule 46 (unary_expression -> K_FALSE .)
    K_CONTINUE      reduce using rule 46 (unary_expression -> K_FALSE .)
    K_BREAK         reduce using rule 46 (unary_expression -> K_FALSE .)
    K_DONE          reduce using rule 46 (unary_expression -> K_FALSE .)
    K_INT           reduce using rule 46 (unary_expression -> K_FALSE .)
    K_DOUBLE        reduce using rule 46 (unary_expression -> K_FALSE .)
    K_STRING        reduce using rule 46 (unary_expression -> K_FALSE .)
    K_BOOL          reduce using rule 46 (unary_expression -> K_FALSE .)
    K_WINDOW        reduce using rule 46 (unary_expression -> K_FALSE .)
    K_SHAPE         reduce using rule 46 (unary_expression -> K_FALSE .)
    K_TRIANGLE      reduce using rule 46 (unary_expression -> K_FALSE .)
    K_RECTANGLE     reduce using rule 46 (unary_expression -> K_FALSE .)
    K_CIRCLE        reduce using rule 46 (unary_expression -> K_FALSE .)
    K_TEXT          reduce using rule 46 (unary_expression -> K_FALSE .)
    $end            reduce using rule 46 (unary_expression -> K_FALSE .)
    K_EL            reduce using rule 46 (unary_expression -> K_FALSE .)
    K_EF            reduce using rule 46 (unary_expression -> K_FALSE .)
    K_END           reduce using rule 46 (unary_expression -> K_FALSE .)
    COMMA           reduce using rule 46 (unary_expression -> K_FALSE .)


state 55

    (85) iteration_statement -> K_WHILE LPAREN boolean_expression . RPAREN compound_statement_list K_END
    (47) boolean_expression -> boolean_expression . OR boolean_term

    RPAREN          shift and go to state 95
    OR              shift and go to state 94


state 56

    (89) function_declaration -> pre_type_modifier type ID . LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END
    (90) function_declaration -> pre_type_modifier type ID . LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END
    (15) variable_declaration -> pre_type_modifier type ID .
    (16) variable_declaration -> pre_type_modifier type ID . ASSIGN expression

    LPAREN          shift and go to state 97
    K_LIST          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DICT          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_SET           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    ID              reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_IF            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_WHILE         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_CONTINUE      reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_BREAK         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DONE          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_INT           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DOUBLE        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_STRING        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_BOOL          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_WINDOW        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_SHAPE         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_TRIANGLE      reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_RECTANGLE     reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_CIRCLE        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_TEXT          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    $end            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    ASSIGN          shift and go to state 96


state 57

    (33) expression -> unary_expression .
    (52) boolean_factor -> unary_expression . comparator unary_expression
    (55) boolean_factor -> unary_expression .
    (57) comparator -> . GT
    (58) comparator -> . LT
    (59) comparator -> . GEQ
    (60) comparator -> . LEQ
    (61) comparator -> . EQ
    (62) comparator -> . NEQ

  ! reduce/reduce conflict for RPAREN resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_LIST resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_DICT resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_SET resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for ID resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_IF resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_WHILE resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_CONTINUE resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_BREAK resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_DONE resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_INT resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_STRING resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for $end resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_EL resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_EF resolved using rule 33 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_END resolved using rule 33 (expression -> unary_expression .)
    K_LIST          reduce using rule 33 (expression -> unary_expression .)
    K_DICT          reduce using rule 33 (expression -> unary_expression .)
    K_SET           reduce using rule 33 (expression -> unary_expression .)
    ID              reduce using rule 33 (expression -> unary_expression .)
    K_IF            reduce using rule 33 (expression -> unary_expression .)
    K_WHILE         reduce using rule 33 (expression -> unary_expression .)
    K_CONTINUE      reduce using rule 33 (expression -> unary_expression .)
    K_BREAK         reduce using rule 33 (expression -> unary_expression .)
    K_DONE          reduce using rule 33 (expression -> unary_expression .)
    K_INT           reduce using rule 33 (expression -> unary_expression .)
    K_DOUBLE        reduce using rule 33 (expression -> unary_expression .)
    K_STRING        reduce using rule 33 (expression -> unary_expression .)
    K_BOOL          reduce using rule 33 (expression -> unary_expression .)
    K_WINDOW        reduce using rule 33 (expression -> unary_expression .)
    K_SHAPE         reduce using rule 33 (expression -> unary_expression .)
    K_TRIANGLE      reduce using rule 33 (expression -> unary_expression .)
    K_RECTANGLE     reduce using rule 33 (expression -> unary_expression .)
    K_CIRCLE        reduce using rule 33 (expression -> unary_expression .)
    K_TEXT          reduce using rule 33 (expression -> unary_expression .)
    $end            reduce using rule 33 (expression -> unary_expression .)
    K_EL            reduce using rule 33 (expression -> unary_expression .)
    K_EF            reduce using rule 33 (expression -> unary_expression .)
    K_END           reduce using rule 33 (expression -> unary_expression .)
    RPAREN          reduce using rule 33 (expression -> unary_expression .)
    COMMA           reduce using rule 33 (expression -> unary_expression .)
    AND             reduce using rule 55 (boolean_factor -> unary_expression .)
    OR              reduce using rule 55 (boolean_factor -> unary_expression .)
    GT              shift and go to state 67
    LT              shift and go to state 70
    GEQ             shift and go to state 66
    LEQ             shift and go to state 69
    EQ              shift and go to state 71
    NEQ             shift and go to state 72

  ! RPAREN          [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! COMMA           [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! K_LIST          [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! K_DICT          [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! K_SET           [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! ID              [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! K_IF            [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! K_WHILE         [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! K_CONTINUE      [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! K_BREAK         [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! K_DONE          [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! K_INT           [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! K_DOUBLE        [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! K_STRING        [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! K_BOOL          [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! K_WINDOW        [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! K_SHAPE         [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! K_TRIANGLE      [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! K_RECTANGLE     [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! K_CIRCLE        [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! K_TEXT          [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! $end            [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! K_EL            [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! K_EF            [ reduce using rule 55 (boolean_factor -> unary_expression .) ]
  ! K_END           [ reduce using rule 55 (boolean_factor -> unary_expression .) ]

    comparator                     shift and go to state 68

state 58

    (35) expression -> arithmetic_expression .
    (63) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (64) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term
    (53) boolean_factor -> arithmetic_expression . comparator arithmetic_expression
    (57) comparator -> . GT
    (58) comparator -> . LT
    (59) comparator -> . GEQ
    (60) comparator -> . LEQ
    (61) comparator -> . EQ
    (62) comparator -> . NEQ

    K_LIST          reduce using rule 35 (expression -> arithmetic_expression .)
    K_DICT          reduce using rule 35 (expression -> arithmetic_expression .)
    K_SET           reduce using rule 35 (expression -> arithmetic_expression .)
    ID              reduce using rule 35 (expression -> arithmetic_expression .)
    K_IF            reduce using rule 35 (expression -> arithmetic_expression .)
    K_WHILE         reduce using rule 35 (expression -> arithmetic_expression .)
    K_CONTINUE      reduce using rule 35 (expression -> arithmetic_expression .)
    K_BREAK         reduce using rule 35 (expression -> arithmetic_expression .)
    K_DONE          reduce using rule 35 (expression -> arithmetic_expression .)
    K_INT           reduce using rule 35 (expression -> arithmetic_expression .)
    K_DOUBLE        reduce using rule 35 (expression -> arithmetic_expression .)
    K_STRING        reduce using rule 35 (expression -> arithmetic_expression .)
    K_BOOL          reduce using rule 35 (expression -> arithmetic_expression .)
    K_WINDOW        reduce using rule 35 (expression -> arithmetic_expression .)
    K_SHAPE         reduce using rule 35 (expression -> arithmetic_expression .)
    K_TRIANGLE      reduce using rule 35 (expression -> arithmetic_expression .)
    K_RECTANGLE     reduce using rule 35 (expression -> arithmetic_expression .)
    K_CIRCLE        reduce using rule 35 (expression -> arithmetic_expression .)
    K_TEXT          reduce using rule 35 (expression -> arithmetic_expression .)
    $end            reduce using rule 35 (expression -> arithmetic_expression .)
    K_EL            reduce using rule 35 (expression -> arithmetic_expression .)
    K_EF            reduce using rule 35 (expression -> arithmetic_expression .)
    K_END           reduce using rule 35 (expression -> arithmetic_expression .)
    RPAREN          reduce using rule 35 (expression -> arithmetic_expression .)
    COMMA           reduce using rule 35 (expression -> arithmetic_expression .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    GT              shift and go to state 67
    LT              shift and go to state 70
    GEQ             shift and go to state 66
    LEQ             shift and go to state 69
    EQ              shift and go to state 71
    NEQ             shift and go to state 72

    comparator                     shift and go to state 84

state 59

    (32) expression -> string_expression .
    (36) string_expression -> string_expression . PLUS string_term
    (54) boolean_factor -> string_expression . comparator string_expression
    (57) comparator -> . GT
    (58) comparator -> . LT
    (59) comparator -> . GEQ
    (60) comparator -> . LEQ
    (61) comparator -> . EQ
    (62) comparator -> . NEQ

    K_LIST          reduce using rule 32 (expression -> string_expression .)
    K_DICT          reduce using rule 32 (expression -> string_expression .)
    K_SET           reduce using rule 32 (expression -> string_expression .)
    ID              reduce using rule 32 (expression -> string_expression .)
    K_IF            reduce using rule 32 (expression -> string_expression .)
    K_WHILE         reduce using rule 32 (expression -> string_expression .)
    K_CONTINUE      reduce using rule 32 (expression -> string_expression .)
    K_BREAK         reduce using rule 32 (expression -> string_expression .)
    K_DONE          reduce using rule 32 (expression -> string_expression .)
    K_INT           reduce using rule 32 (expression -> string_expression .)
    K_DOUBLE        reduce using rule 32 (expression -> string_expression .)
    K_STRING        reduce using rule 32 (expression -> string_expression .)
    K_BOOL          reduce using rule 32 (expression -> string_expression .)
    K_WINDOW        reduce using rule 32 (expression -> string_expression .)
    K_SHAPE         reduce using rule 32 (expression -> string_expression .)
    K_TRIANGLE      reduce using rule 32 (expression -> string_expression .)
    K_RECTANGLE     reduce using rule 32 (expression -> string_expression .)
    K_CIRCLE        reduce using rule 32 (expression -> string_expression .)
    K_TEXT          reduce using rule 32 (expression -> string_expression .)
    $end            reduce using rule 32 (expression -> string_expression .)
    K_EL            reduce using rule 32 (expression -> string_expression .)
    K_EF            reduce using rule 32 (expression -> string_expression .)
    K_END           reduce using rule 32 (expression -> string_expression .)
    RPAREN          reduce using rule 32 (expression -> string_expression .)
    COMMA           reduce using rule 32 (expression -> string_expression .)
    PLUS            shift and go to state 88
    GT              shift and go to state 67
    LT              shift and go to state 70
    GEQ             shift and go to state 66
    LEQ             shift and go to state 69
    EQ              shift and go to state 71
    NEQ             shift and go to state 72

    comparator                     shift and go to state 87

state 60

    (37) string_expression -> STRING .
    (41) unary_expression -> STRING .

  ! reduce/reduce conflict for GT resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for LT resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for GEQ resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for LEQ resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for EQ resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for NEQ resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_LIST resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_DICT resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_SET resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for ID resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_IF resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_WHILE resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_CONTINUE resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_BREAK resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_DONE resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_INT resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_STRING resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for $end resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_EL resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_EF resolved using rule 37 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_END resolved using rule 37 (string_expression -> STRING .)
    PLUS            reduce using rule 37 (string_expression -> STRING .)
    GT              reduce using rule 37 (string_expression -> STRING .)
    LT              reduce using rule 37 (string_expression -> STRING .)
    GEQ             reduce using rule 37 (string_expression -> STRING .)
    LEQ             reduce using rule 37 (string_expression -> STRING .)
    EQ              reduce using rule 37 (string_expression -> STRING .)
    NEQ             reduce using rule 37 (string_expression -> STRING .)
    RPAREN          reduce using rule 37 (string_expression -> STRING .)
    COMMA           reduce using rule 37 (string_expression -> STRING .)
    K_LIST          reduce using rule 37 (string_expression -> STRING .)
    K_DICT          reduce using rule 37 (string_expression -> STRING .)
    K_SET           reduce using rule 37 (string_expression -> STRING .)
    ID              reduce using rule 37 (string_expression -> STRING .)
    K_IF            reduce using rule 37 (string_expression -> STRING .)
    K_WHILE         reduce using rule 37 (string_expression -> STRING .)
    K_CONTINUE      reduce using rule 37 (string_expression -> STRING .)
    K_BREAK         reduce using rule 37 (string_expression -> STRING .)
    K_DONE          reduce using rule 37 (string_expression -> STRING .)
    K_INT           reduce using rule 37 (string_expression -> STRING .)
    K_DOUBLE        reduce using rule 37 (string_expression -> STRING .)
    K_STRING        reduce using rule 37 (string_expression -> STRING .)
    K_BOOL          reduce using rule 37 (string_expression -> STRING .)
    K_WINDOW        reduce using rule 37 (string_expression -> STRING .)
    K_SHAPE         reduce using rule 37 (string_expression -> STRING .)
    K_TRIANGLE      reduce using rule 37 (string_expression -> STRING .)
    K_RECTANGLE     reduce using rule 37 (string_expression -> STRING .)
    K_CIRCLE        reduce using rule 37 (string_expression -> STRING .)
    K_TEXT          reduce using rule 37 (string_expression -> STRING .)
    $end            reduce using rule 37 (string_expression -> STRING .)
    K_EL            reduce using rule 37 (string_expression -> STRING .)
    K_EF            reduce using rule 37 (string_expression -> STRING .)
    K_END           reduce using rule 37 (string_expression -> STRING .)
    AND             reduce using rule 41 (unary_expression -> STRING .)
    OR              reduce using rule 41 (unary_expression -> STRING .)

  ! GT              [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! LT              [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! GEQ             [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! LEQ             [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! EQ              [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! NEQ             [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! RPAREN          [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! COMMA           [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! K_LIST          [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! K_DICT          [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! K_SET           [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! ID              [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! K_IF            [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! K_WHILE         [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! K_CONTINUE      [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! K_BREAK         [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! K_DONE          [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! K_INT           [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! K_DOUBLE        [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! K_STRING        [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! K_BOOL          [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! K_WINDOW        [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! K_SHAPE         [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! K_TRIANGLE      [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! K_RECTANGLE     [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! K_CIRCLE        [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! K_TEXT          [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! $end            [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! K_EL            [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! K_EF            [ reduce using rule 41 (unary_expression -> STRING .) ]
  ! K_END           [ reduce using rule 41 (unary_expression -> STRING .) ]


state 61

    (34) expression -> boolean_expression .
    (47) boolean_expression -> boolean_expression . OR boolean_term

    K_LIST          reduce using rule 34 (expression -> boolean_expression .)
    K_DICT          reduce using rule 34 (expression -> boolean_expression .)
    K_SET           reduce using rule 34 (expression -> boolean_expression .)
    ID              reduce using rule 34 (expression -> boolean_expression .)
    K_IF            reduce using rule 34 (expression -> boolean_expression .)
    K_WHILE         reduce using rule 34 (expression -> boolean_expression .)
    K_CONTINUE      reduce using rule 34 (expression -> boolean_expression .)
    K_BREAK         reduce using rule 34 (expression -> boolean_expression .)
    K_DONE          reduce using rule 34 (expression -> boolean_expression .)
    K_INT           reduce using rule 34 (expression -> boolean_expression .)
    K_DOUBLE        reduce using rule 34 (expression -> boolean_expression .)
    K_STRING        reduce using rule 34 (expression -> boolean_expression .)
    K_BOOL          reduce using rule 34 (expression -> boolean_expression .)
    K_WINDOW        reduce using rule 34 (expression -> boolean_expression .)
    K_SHAPE         reduce using rule 34 (expression -> boolean_expression .)
    K_TRIANGLE      reduce using rule 34 (expression -> boolean_expression .)
    K_RECTANGLE     reduce using rule 34 (expression -> boolean_expression .)
    K_CIRCLE        reduce using rule 34 (expression -> boolean_expression .)
    K_TEXT          reduce using rule 34 (expression -> boolean_expression .)
    $end            reduce using rule 34 (expression -> boolean_expression .)
    K_EL            reduce using rule 34 (expression -> boolean_expression .)
    K_EF            reduce using rule 34 (expression -> boolean_expression .)
    K_END           reduce using rule 34 (expression -> boolean_expression .)
    RPAREN          reduce using rule 34 (expression -> boolean_expression .)
    COMMA           reduce using rule 34 (expression -> boolean_expression .)
    OR              shift and go to state 94


state 62

    (17) variable_declaration -> ID ASSIGN expression .

    ID              reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_IF            reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_WHILE         reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_CONTINUE      reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_BREAK         reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_DONE          reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_LIST          reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_DICT          reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_SET           reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_INT           reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_DOUBLE        reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_STRING        reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_BOOL          reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_WINDOW        reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_SHAPE         reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_TRIANGLE      reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_RECTANGLE     reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_CIRCLE        reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_TEXT          reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_EL            reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_EF            reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_END           reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    $end            reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)


state 63

    (12) function_call_statement -> ID LPAREN RPAREN .

    GT              reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    LT              reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    GEQ             reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    LEQ             reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    EQ              reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    NEQ             reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    AND             reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    OR              reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    MOD             reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_LIST          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_DICT          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_SET           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    ID              reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_IF            reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_WHILE         reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_CONTINUE      reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_BREAK         reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_DONE          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_INT           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_DOUBLE        reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_STRING        reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_BOOL          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_WINDOW        reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_SHAPE         reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_TRIANGLE      reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_RECTANGLE     reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_CIRCLE        reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_TEXT          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    $end            reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_EL            reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_EF            reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_END           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)


state 64

    (11) function_call_statement -> ID LPAREN parameter_list . RPAREN
    (13) parameter_list -> parameter_list . COMMA expression

    RPAREN          shift and go to state 98
    COMMA           shift and go to state 99


state 65

    (14) parameter_list -> expression .

    RPAREN          reduce using rule 14 (parameter_list -> expression .)
    COMMA           reduce using rule 14 (parameter_list -> expression .)


state 66

    (59) comparator -> GEQ .

    LPAREN          reduce using rule 59 (comparator -> GEQ .)
    ID              reduce using rule 59 (comparator -> GEQ .)
    MINUS           reduce using rule 59 (comparator -> GEQ .)
    INTEGER         reduce using rule 59 (comparator -> GEQ .)
    DOUBLE          reduce using rule 59 (comparator -> GEQ .)
    STRING          reduce using rule 59 (comparator -> GEQ .)
    K_TRUE          reduce using rule 59 (comparator -> GEQ .)
    K_FALSE         reduce using rule 59 (comparator -> GEQ .)


state 67

    (57) comparator -> GT .

    LPAREN          reduce using rule 57 (comparator -> GT .)
    ID              reduce using rule 57 (comparator -> GT .)
    MINUS           reduce using rule 57 (comparator -> GT .)
    INTEGER         reduce using rule 57 (comparator -> GT .)
    DOUBLE          reduce using rule 57 (comparator -> GT .)
    STRING          reduce using rule 57 (comparator -> GT .)
    K_TRUE          reduce using rule 57 (comparator -> GT .)
    K_FALSE         reduce using rule 57 (comparator -> GT .)


state 68

    (52) boolean_factor -> unary_expression comparator . unary_expression
    (40) unary_expression -> . ID
    (41) unary_expression -> . STRING
    (42) unary_expression -> . INTEGER
    (43) unary_expression -> . function_call_statement
    (44) unary_expression -> . DOUBLE
    (45) unary_expression -> . K_TRUE
    (46) unary_expression -> . K_FALSE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    ID              shift and go to state 105
    STRING          shift and go to state 100
    INTEGER         shift and go to state 103
    DOUBLE          shift and go to state 101
    K_TRUE          shift and go to state 39
    K_FALSE         shift and go to state 54

    function_call_statement        shift and go to state 102
    unary_expression               shift and go to state 104

state 69

    (60) comparator -> LEQ .

    LPAREN          reduce using rule 60 (comparator -> LEQ .)
    ID              reduce using rule 60 (comparator -> LEQ .)
    MINUS           reduce using rule 60 (comparator -> LEQ .)
    INTEGER         reduce using rule 60 (comparator -> LEQ .)
    DOUBLE          reduce using rule 60 (comparator -> LEQ .)
    STRING          reduce using rule 60 (comparator -> LEQ .)
    K_TRUE          reduce using rule 60 (comparator -> LEQ .)
    K_FALSE         reduce using rule 60 (comparator -> LEQ .)


state 70

    (58) comparator -> LT .

    LPAREN          reduce using rule 58 (comparator -> LT .)
    ID              reduce using rule 58 (comparator -> LT .)
    MINUS           reduce using rule 58 (comparator -> LT .)
    INTEGER         reduce using rule 58 (comparator -> LT .)
    DOUBLE          reduce using rule 58 (comparator -> LT .)
    STRING          reduce using rule 58 (comparator -> LT .)
    K_TRUE          reduce using rule 58 (comparator -> LT .)
    K_FALSE         reduce using rule 58 (comparator -> LT .)


state 71

    (61) comparator -> EQ .

    LPAREN          reduce using rule 61 (comparator -> EQ .)
    ID              reduce using rule 61 (comparator -> EQ .)
    MINUS           reduce using rule 61 (comparator -> EQ .)
    INTEGER         reduce using rule 61 (comparator -> EQ .)
    DOUBLE          reduce using rule 61 (comparator -> EQ .)
    STRING          reduce using rule 61 (comparator -> EQ .)
    K_TRUE          reduce using rule 61 (comparator -> EQ .)
    K_FALSE         reduce using rule 61 (comparator -> EQ .)


state 72

    (62) comparator -> NEQ .

    LPAREN          reduce using rule 62 (comparator -> NEQ .)
    ID              reduce using rule 62 (comparator -> NEQ .)
    MINUS           reduce using rule 62 (comparator -> NEQ .)
    INTEGER         reduce using rule 62 (comparator -> NEQ .)
    DOUBLE          reduce using rule 62 (comparator -> NEQ .)
    STRING          reduce using rule 62 (comparator -> NEQ .)
    K_TRUE          reduce using rule 62 (comparator -> NEQ .)
    K_FALSE         reduce using rule 62 (comparator -> NEQ .)


state 73

    (56) boolean_factor -> NEG boolean_factor .

    AND             reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    RPAREN          reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    OR              reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    COMMA           reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    K_LIST          reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    K_DICT          reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    K_SET           reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    ID              reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    K_IF            reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    K_WHILE         reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    K_CONTINUE      reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    K_BREAK         reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    K_DONE          reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    K_INT           reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    K_DOUBLE        reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    K_STRING        reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    K_BOOL          reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    K_WINDOW        reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    K_SHAPE         reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    K_TRIANGLE      reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    K_RECTANGLE     reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    K_CIRCLE        reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    K_TEXT          reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    $end            reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    K_EL            reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    K_EF            reduce using rule 56 (boolean_factor -> NEG boolean_factor .)
    K_END           reduce using rule 56 (boolean_factor -> NEG boolean_factor .)


state 74

    (49) boolean_term -> boolean_term AND . boolean_factor
    (51) boolean_factor -> . LPAREN boolean_expression RPAREN
    (52) boolean_factor -> . unary_expression comparator unary_expression
    (53) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (54) boolean_factor -> . string_expression comparator string_expression
    (55) boolean_factor -> . unary_expression
    (56) boolean_factor -> . NEG boolean_factor
    (40) unary_expression -> . ID
    (41) unary_expression -> . STRING
    (42) unary_expression -> . INTEGER
    (43) unary_expression -> . function_call_statement
    (44) unary_expression -> . DOUBLE
    (45) unary_expression -> . K_TRUE
    (46) unary_expression -> . K_FALSE
    (63) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (65) arithmetic_expression -> . arithmetic_term
    (36) string_expression -> . string_expression PLUS string_term
    (37) string_expression -> . STRING
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (66) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (68) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (69) arithmetic_term -> . arithmetic_factor
    (70) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (71) arithmetic_factor -> . number
    (72) arithmetic_factor -> . ID
    (73) arithmetic_factor -> . function_call_statement
    (74) arithmetic_factor -> . MINUS arithmetic_factor
    (75) number -> . INTEGER
    (76) number -> . DOUBLE

    LPAREN          shift and go to state 47
    NEG             shift and go to state 37
    ID              shift and go to state 50
    STRING          shift and go to state 46
    INTEGER         shift and go to state 43
    DOUBLE          shift and go to state 52
    K_TRUE          shift and go to state 39
    K_FALSE         shift and go to state 54
    MINUS           shift and go to state 41

    arithmetic_expression          shift and go to state 44
    string_expression              shift and go to state 45
    unary_expression               shift and go to state 36
    arithmetic_factor              shift and go to state 42
    function_call_statement        shift and go to state 53
    number                         shift and go to state 49
    arithmetic_term                shift and go to state 40
    boolean_factor                 shift and go to state 106

state 75

    (68) arithmetic_term -> arithmetic_term MOD . arithmetic_factor
    (70) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (71) arithmetic_factor -> . number
    (72) arithmetic_factor -> . ID
    (73) arithmetic_factor -> . function_call_statement
    (74) arithmetic_factor -> . MINUS arithmetic_factor
    (75) number -> . INTEGER
    (76) number -> . DOUBLE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 82
    ID              shift and go to state 81
    MINUS           shift and go to state 41
    INTEGER         shift and go to state 83
    DOUBLE          shift and go to state 79

    arithmetic_factor              shift and go to state 107
    number                         shift and go to state 49
    function_call_statement        shift and go to state 80

state 76

    (67) arithmetic_term -> arithmetic_term DIVIDE . arithmetic_factor
    (70) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (71) arithmetic_factor -> . number
    (72) arithmetic_factor -> . ID
    (73) arithmetic_factor -> . function_call_statement
    (74) arithmetic_factor -> . MINUS arithmetic_factor
    (75) number -> . INTEGER
    (76) number -> . DOUBLE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 82
    ID              shift and go to state 81
    MINUS           shift and go to state 41
    INTEGER         shift and go to state 83
    DOUBLE          shift and go to state 79

    arithmetic_factor              shift and go to state 108
    number                         shift and go to state 49
    function_call_statement        shift and go to state 80

state 77

    (66) arithmetic_term -> arithmetic_term TIMES . arithmetic_factor
    (70) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (71) arithmetic_factor -> . number
    (72) arithmetic_factor -> . ID
    (73) arithmetic_factor -> . function_call_statement
    (74) arithmetic_factor -> . MINUS arithmetic_factor
    (75) number -> . INTEGER
    (76) number -> . DOUBLE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 82
    ID              shift and go to state 81
    MINUS           shift and go to state 41
    INTEGER         shift and go to state 83
    DOUBLE          shift and go to state 79

    arithmetic_factor              shift and go to state 109
    number                         shift and go to state 49
    function_call_statement        shift and go to state 80

state 78

    (74) arithmetic_factor -> MINUS arithmetic_factor .

    TIMES           reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    DIVIDE          reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    MOD             reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    PLUS            reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    MINUS           reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    GT              reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    LT              reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    GEQ             reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    LEQ             reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    EQ              reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    NEQ             reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_LIST          reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_DICT          reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_SET           reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    ID              reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_IF            reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_WHILE         reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_CONTINUE      reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_BREAK         reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_DONE          reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_INT           reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_DOUBLE        reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_STRING        reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_BOOL          reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_WINDOW        reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_SHAPE         reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_TRIANGLE      reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_RECTANGLE     reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_CIRCLE        reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_TEXT          reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    $end            reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_EL            reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_EF            reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_END           reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    RPAREN          reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    COMMA           reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    AND             reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)
    OR              reduce using rule 74 (arithmetic_factor -> MINUS arithmetic_factor .)


state 79

    (76) number -> DOUBLE .

    TIMES           reduce using rule 76 (number -> DOUBLE .)
    DIVIDE          reduce using rule 76 (number -> DOUBLE .)
    MOD             reduce using rule 76 (number -> DOUBLE .)
    PLUS            reduce using rule 76 (number -> DOUBLE .)
    MINUS           reduce using rule 76 (number -> DOUBLE .)
    GT              reduce using rule 76 (number -> DOUBLE .)
    LT              reduce using rule 76 (number -> DOUBLE .)
    GEQ             reduce using rule 76 (number -> DOUBLE .)
    LEQ             reduce using rule 76 (number -> DOUBLE .)
    EQ              reduce using rule 76 (number -> DOUBLE .)
    NEQ             reduce using rule 76 (number -> DOUBLE .)
    K_LIST          reduce using rule 76 (number -> DOUBLE .)
    K_DICT          reduce using rule 76 (number -> DOUBLE .)
    K_SET           reduce using rule 76 (number -> DOUBLE .)
    ID              reduce using rule 76 (number -> DOUBLE .)
    K_IF            reduce using rule 76 (number -> DOUBLE .)
    K_WHILE         reduce using rule 76 (number -> DOUBLE .)
    K_CONTINUE      reduce using rule 76 (number -> DOUBLE .)
    K_BREAK         reduce using rule 76 (number -> DOUBLE .)
    K_DONE          reduce using rule 76 (number -> DOUBLE .)
    K_INT           reduce using rule 76 (number -> DOUBLE .)
    K_DOUBLE        reduce using rule 76 (number -> DOUBLE .)
    K_STRING        reduce using rule 76 (number -> DOUBLE .)
    K_BOOL          reduce using rule 76 (number -> DOUBLE .)
    K_WINDOW        reduce using rule 76 (number -> DOUBLE .)
    K_SHAPE         reduce using rule 76 (number -> DOUBLE .)
    K_TRIANGLE      reduce using rule 76 (number -> DOUBLE .)
    K_RECTANGLE     reduce using rule 76 (number -> DOUBLE .)
    K_CIRCLE        reduce using rule 76 (number -> DOUBLE .)
    K_TEXT          reduce using rule 76 (number -> DOUBLE .)
    $end            reduce using rule 76 (number -> DOUBLE .)
    K_EL            reduce using rule 76 (number -> DOUBLE .)
    K_EF            reduce using rule 76 (number -> DOUBLE .)
    K_END           reduce using rule 76 (number -> DOUBLE .)
    RPAREN          reduce using rule 76 (number -> DOUBLE .)
    COMMA           reduce using rule 76 (number -> DOUBLE .)
    AND             reduce using rule 76 (number -> DOUBLE .)
    OR              reduce using rule 76 (number -> DOUBLE .)


state 80

    (73) arithmetic_factor -> function_call_statement .

    TIMES           reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    DIVIDE          reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    MOD             reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    PLUS            reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    MINUS           reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    GT              reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    LT              reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    GEQ             reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    LEQ             reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    EQ              reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    NEQ             reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    K_LIST          reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    K_DICT          reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    K_SET           reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    ID              reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    K_IF            reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    K_WHILE         reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    K_CONTINUE      reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    K_BREAK         reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    K_DONE          reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    K_INT           reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    K_DOUBLE        reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    K_STRING        reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    K_BOOL          reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    K_WINDOW        reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    K_SHAPE         reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    K_TRIANGLE      reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    K_RECTANGLE     reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    K_CIRCLE        reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    K_TEXT          reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    $end            reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    K_EL            reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    K_EF            reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    K_END           reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    RPAREN          reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    COMMA           reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    AND             reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    OR              reduce using rule 73 (arithmetic_factor -> function_call_statement .)


state 81

    (72) arithmetic_factor -> ID .
    (11) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (12) function_call_statement -> ID . LPAREN RPAREN

    TIMES           reduce using rule 72 (arithmetic_factor -> ID .)
    DIVIDE          reduce using rule 72 (arithmetic_factor -> ID .)
    MOD             reduce using rule 72 (arithmetic_factor -> ID .)
    PLUS            reduce using rule 72 (arithmetic_factor -> ID .)
    MINUS           reduce using rule 72 (arithmetic_factor -> ID .)
    GT              reduce using rule 72 (arithmetic_factor -> ID .)
    LT              reduce using rule 72 (arithmetic_factor -> ID .)
    GEQ             reduce using rule 72 (arithmetic_factor -> ID .)
    LEQ             reduce using rule 72 (arithmetic_factor -> ID .)
    EQ              reduce using rule 72 (arithmetic_factor -> ID .)
    NEQ             reduce using rule 72 (arithmetic_factor -> ID .)
    K_LIST          reduce using rule 72 (arithmetic_factor -> ID .)
    K_DICT          reduce using rule 72 (arithmetic_factor -> ID .)
    K_SET           reduce using rule 72 (arithmetic_factor -> ID .)
    ID              reduce using rule 72 (arithmetic_factor -> ID .)
    K_IF            reduce using rule 72 (arithmetic_factor -> ID .)
    K_WHILE         reduce using rule 72 (arithmetic_factor -> ID .)
    K_CONTINUE      reduce using rule 72 (arithmetic_factor -> ID .)
    K_BREAK         reduce using rule 72 (arithmetic_factor -> ID .)
    K_DONE          reduce using rule 72 (arithmetic_factor -> ID .)
    K_INT           reduce using rule 72 (arithmetic_factor -> ID .)
    K_DOUBLE        reduce using rule 72 (arithmetic_factor -> ID .)
    K_STRING        reduce using rule 72 (arithmetic_factor -> ID .)
    K_BOOL          reduce using rule 72 (arithmetic_factor -> ID .)
    K_WINDOW        reduce using rule 72 (arithmetic_factor -> ID .)
    K_SHAPE         reduce using rule 72 (arithmetic_factor -> ID .)
    K_TRIANGLE      reduce using rule 72 (arithmetic_factor -> ID .)
    K_RECTANGLE     reduce using rule 72 (arithmetic_factor -> ID .)
    K_CIRCLE        reduce using rule 72 (arithmetic_factor -> ID .)
    K_TEXT          reduce using rule 72 (arithmetic_factor -> ID .)
    $end            reduce using rule 72 (arithmetic_factor -> ID .)
    K_EL            reduce using rule 72 (arithmetic_factor -> ID .)
    K_EF            reduce using rule 72 (arithmetic_factor -> ID .)
    K_END           reduce using rule 72 (arithmetic_factor -> ID .)
    RPAREN          reduce using rule 72 (arithmetic_factor -> ID .)
    COMMA           reduce using rule 72 (arithmetic_factor -> ID .)
    AND             reduce using rule 72 (arithmetic_factor -> ID .)
    OR              reduce using rule 72 (arithmetic_factor -> ID .)
    LPAREN          shift and go to state 35


state 82

    (70) arithmetic_factor -> LPAREN . arithmetic_expression RPAREN
    (63) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (65) arithmetic_expression -> . arithmetic_term
    (66) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (68) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (69) arithmetic_term -> . arithmetic_factor
    (70) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (71) arithmetic_factor -> . number
    (72) arithmetic_factor -> . ID
    (73) arithmetic_factor -> . function_call_statement
    (74) arithmetic_factor -> . MINUS arithmetic_factor
    (75) number -> . INTEGER
    (76) number -> . DOUBLE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 82
    ID              shift and go to state 81
    MINUS           shift and go to state 41
    INTEGER         shift and go to state 83
    DOUBLE          shift and go to state 79

    arithmetic_expression          shift and go to state 110
    arithmetic_factor              shift and go to state 42
    number                         shift and go to state 49
    function_call_statement        shift and go to state 80
    arithmetic_term                shift and go to state 40

state 83

    (75) number -> INTEGER .

    TIMES           reduce using rule 75 (number -> INTEGER .)
    DIVIDE          reduce using rule 75 (number -> INTEGER .)
    MOD             reduce using rule 75 (number -> INTEGER .)
    PLUS            reduce using rule 75 (number -> INTEGER .)
    MINUS           reduce using rule 75 (number -> INTEGER .)
    GT              reduce using rule 75 (number -> INTEGER .)
    LT              reduce using rule 75 (number -> INTEGER .)
    GEQ             reduce using rule 75 (number -> INTEGER .)
    LEQ             reduce using rule 75 (number -> INTEGER .)
    EQ              reduce using rule 75 (number -> INTEGER .)
    NEQ             reduce using rule 75 (number -> INTEGER .)
    K_LIST          reduce using rule 75 (number -> INTEGER .)
    K_DICT          reduce using rule 75 (number -> INTEGER .)
    K_SET           reduce using rule 75 (number -> INTEGER .)
    ID              reduce using rule 75 (number -> INTEGER .)
    K_IF            reduce using rule 75 (number -> INTEGER .)
    K_WHILE         reduce using rule 75 (number -> INTEGER .)
    K_CONTINUE      reduce using rule 75 (number -> INTEGER .)
    K_BREAK         reduce using rule 75 (number -> INTEGER .)
    K_DONE          reduce using rule 75 (number -> INTEGER .)
    K_INT           reduce using rule 75 (number -> INTEGER .)
    K_DOUBLE        reduce using rule 75 (number -> INTEGER .)
    K_STRING        reduce using rule 75 (number -> INTEGER .)
    K_BOOL          reduce using rule 75 (number -> INTEGER .)
    K_WINDOW        reduce using rule 75 (number -> INTEGER .)
    K_SHAPE         reduce using rule 75 (number -> INTEGER .)
    K_TRIANGLE      reduce using rule 75 (number -> INTEGER .)
    K_RECTANGLE     reduce using rule 75 (number -> INTEGER .)
    K_CIRCLE        reduce using rule 75 (number -> INTEGER .)
    K_TEXT          reduce using rule 75 (number -> INTEGER .)
    $end            reduce using rule 75 (number -> INTEGER .)
    K_EL            reduce using rule 75 (number -> INTEGER .)
    K_EF            reduce using rule 75 (number -> INTEGER .)
    K_END           reduce using rule 75 (number -> INTEGER .)
    RPAREN          reduce using rule 75 (number -> INTEGER .)
    COMMA           reduce using rule 75 (number -> INTEGER .)
    AND             reduce using rule 75 (number -> INTEGER .)
    OR              reduce using rule 75 (number -> INTEGER .)


state 84

    (53) boolean_factor -> arithmetic_expression comparator . arithmetic_expression
    (63) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (65) arithmetic_expression -> . arithmetic_term
    (66) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (68) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (69) arithmetic_term -> . arithmetic_factor
    (70) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (71) arithmetic_factor -> . number
    (72) arithmetic_factor -> . ID
    (73) arithmetic_factor -> . function_call_statement
    (74) arithmetic_factor -> . MINUS arithmetic_factor
    (75) number -> . INTEGER
    (76) number -> . DOUBLE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 82
    ID              shift and go to state 81
    MINUS           shift and go to state 41
    INTEGER         shift and go to state 83
    DOUBLE          shift and go to state 79

    arithmetic_expression          shift and go to state 111
    arithmetic_factor              shift and go to state 42
    number                         shift and go to state 49
    function_call_statement        shift and go to state 80
    arithmetic_term                shift and go to state 40

state 85

    (63) arithmetic_expression -> arithmetic_expression PLUS . arithmetic_term
    (66) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (68) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (69) arithmetic_term -> . arithmetic_factor
    (70) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (71) arithmetic_factor -> . number
    (72) arithmetic_factor -> . ID
    (73) arithmetic_factor -> . function_call_statement
    (74) arithmetic_factor -> . MINUS arithmetic_factor
    (75) number -> . INTEGER
    (76) number -> . DOUBLE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 82
    ID              shift and go to state 81
    MINUS           shift and go to state 41
    INTEGER         shift and go to state 83
    DOUBLE          shift and go to state 79

    arithmetic_factor              shift and go to state 42
    number                         shift and go to state 49
    function_call_statement        shift and go to state 80
    arithmetic_term                shift and go to state 112

state 86

    (64) arithmetic_expression -> arithmetic_expression MINUS . arithmetic_term
    (66) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (68) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (69) arithmetic_term -> . arithmetic_factor
    (70) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (71) arithmetic_factor -> . number
    (72) arithmetic_factor -> . ID
    (73) arithmetic_factor -> . function_call_statement
    (74) arithmetic_factor -> . MINUS arithmetic_factor
    (75) number -> . INTEGER
    (76) number -> . DOUBLE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 82
    ID              shift and go to state 81
    MINUS           shift and go to state 41
    INTEGER         shift and go to state 83
    DOUBLE          shift and go to state 79

    arithmetic_factor              shift and go to state 42
    number                         shift and go to state 49
    function_call_statement        shift and go to state 80
    arithmetic_term                shift and go to state 113

state 87

    (54) boolean_factor -> string_expression comparator . string_expression
    (36) string_expression -> . string_expression PLUS string_term
    (37) string_expression -> . STRING

    STRING          shift and go to state 115

    string_expression              shift and go to state 114

state 88

    (36) string_expression -> string_expression PLUS . string_term
    (38) string_term -> . function_call_statement
    (39) string_term -> . STRING
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    STRING          shift and go to state 116
    ID              shift and go to state 119

    string_term                    shift and go to state 118
    function_call_statement        shift and go to state 117

state 89

    (73) arithmetic_factor -> function_call_statement .
    (43) unary_expression -> function_call_statement .

  ! reduce/reduce conflict for GT resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for LT resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for GEQ resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for LEQ resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for EQ resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for NEQ resolved using rule 43 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for RPAREN resolved using rule 43 (unary_expression -> function_call_statement .)
    TIMES           reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    DIVIDE          reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    MOD             reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    PLUS            reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    MINUS           reduce using rule 73 (arithmetic_factor -> function_call_statement .)
    GT              reduce using rule 43 (unary_expression -> function_call_statement .)
    LT              reduce using rule 43 (unary_expression -> function_call_statement .)
    GEQ             reduce using rule 43 (unary_expression -> function_call_statement .)
    LEQ             reduce using rule 43 (unary_expression -> function_call_statement .)
    EQ              reduce using rule 43 (unary_expression -> function_call_statement .)
    NEQ             reduce using rule 43 (unary_expression -> function_call_statement .)
    AND             reduce using rule 43 (unary_expression -> function_call_statement .)
    RPAREN          reduce using rule 43 (unary_expression -> function_call_statement .)
    OR              reduce using rule 43 (unary_expression -> function_call_statement .)

  ! RPAREN          [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! GT              [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! LT              [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! GEQ             [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! LEQ             [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! EQ              [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]
  ! NEQ             [ reduce using rule 73 (arithmetic_factor -> function_call_statement .) ]


state 90

    (70) arithmetic_factor -> LPAREN arithmetic_expression . RPAREN
    (63) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (64) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term
    (53) boolean_factor -> arithmetic_expression . comparator arithmetic_expression
    (57) comparator -> . GT
    (58) comparator -> . LT
    (59) comparator -> . GEQ
    (60) comparator -> . LEQ
    (61) comparator -> . EQ
    (62) comparator -> . NEQ

    RPAREN          shift and go to state 120
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    GT              shift and go to state 67
    LT              shift and go to state 70
    GEQ             shift and go to state 66
    LEQ             shift and go to state 69
    EQ              shift and go to state 71
    NEQ             shift and go to state 72

    comparator                     shift and go to state 84

state 91

    (72) arithmetic_factor -> ID .
    (40) unary_expression -> ID .
    (11) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (12) function_call_statement -> ID . LPAREN RPAREN

  ! reduce/reduce conflict for GT resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for LT resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for GEQ resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for LEQ resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for EQ resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for NEQ resolved using rule 40 (unary_expression -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 40 (unary_expression -> ID .)
    TIMES           reduce using rule 72 (arithmetic_factor -> ID .)
    DIVIDE          reduce using rule 72 (arithmetic_factor -> ID .)
    MOD             reduce using rule 72 (arithmetic_factor -> ID .)
    PLUS            reduce using rule 72 (arithmetic_factor -> ID .)
    MINUS           reduce using rule 72 (arithmetic_factor -> ID .)
    GT              reduce using rule 40 (unary_expression -> ID .)
    LT              reduce using rule 40 (unary_expression -> ID .)
    GEQ             reduce using rule 40 (unary_expression -> ID .)
    LEQ             reduce using rule 40 (unary_expression -> ID .)
    EQ              reduce using rule 40 (unary_expression -> ID .)
    NEQ             reduce using rule 40 (unary_expression -> ID .)
    AND             reduce using rule 40 (unary_expression -> ID .)
    RPAREN          reduce using rule 40 (unary_expression -> ID .)
    OR              reduce using rule 40 (unary_expression -> ID .)
    LPAREN          shift and go to state 35

  ! RPAREN          [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! GT              [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! LT              [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! GEQ             [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! LEQ             [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! EQ              [ reduce using rule 72 (arithmetic_factor -> ID .) ]
  ! NEQ             [ reduce using rule 72 (arithmetic_factor -> ID .) ]


state 92

    (51) boolean_factor -> LPAREN boolean_expression . RPAREN
    (47) boolean_expression -> boolean_expression . OR boolean_term

    RPAREN          shift and go to state 121
    OR              shift and go to state 94


state 93

    (77) selection_statement -> K_IF LPAREN boolean_expression RPAREN . compound_statement_list else_if_statement_list else_statement K_END
    (83) compound_statement_list -> .
    (84) compound_statement_list -> . compound_statement_list compound_statement

    ID              reduce using rule 83 (compound_statement_list -> .)
    K_IF            reduce using rule 83 (compound_statement_list -> .)
    K_WHILE         reduce using rule 83 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 83 (compound_statement_list -> .)
    K_BREAK         reduce using rule 83 (compound_statement_list -> .)
    K_DONE          reduce using rule 83 (compound_statement_list -> .)
    K_LIST          reduce using rule 83 (compound_statement_list -> .)
    K_DICT          reduce using rule 83 (compound_statement_list -> .)
    K_SET           reduce using rule 83 (compound_statement_list -> .)
    K_EL            reduce using rule 83 (compound_statement_list -> .)
    K_EF            reduce using rule 83 (compound_statement_list -> .)
    K_END           reduce using rule 83 (compound_statement_list -> .)
    K_INT           reduce using rule 83 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 83 (compound_statement_list -> .)
    K_STRING        reduce using rule 83 (compound_statement_list -> .)
    K_BOOL          reduce using rule 83 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 83 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 83 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 83 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 83 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 83 (compound_statement_list -> .)
    K_TEXT          reduce using rule 83 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 122

state 94

    (47) boolean_expression -> boolean_expression OR . boolean_term
    (49) boolean_term -> . boolean_term AND boolean_factor
    (50) boolean_term -> . boolean_factor
    (51) boolean_factor -> . LPAREN boolean_expression RPAREN
    (52) boolean_factor -> . unary_expression comparator unary_expression
    (53) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (54) boolean_factor -> . string_expression comparator string_expression
    (55) boolean_factor -> . unary_expression
    (56) boolean_factor -> . NEG boolean_factor
    (40) unary_expression -> . ID
    (41) unary_expression -> . STRING
    (42) unary_expression -> . INTEGER
    (43) unary_expression -> . function_call_statement
    (44) unary_expression -> . DOUBLE
    (45) unary_expression -> . K_TRUE
    (46) unary_expression -> . K_FALSE
    (63) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (65) arithmetic_expression -> . arithmetic_term
    (36) string_expression -> . string_expression PLUS string_term
    (37) string_expression -> . STRING
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (66) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (68) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (69) arithmetic_term -> . arithmetic_factor
    (70) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (71) arithmetic_factor -> . number
    (72) arithmetic_factor -> . ID
    (73) arithmetic_factor -> . function_call_statement
    (74) arithmetic_factor -> . MINUS arithmetic_factor
    (75) number -> . INTEGER
    (76) number -> . DOUBLE

    LPAREN          shift and go to state 47
    NEG             shift and go to state 37
    ID              shift and go to state 50
    STRING          shift and go to state 46
    INTEGER         shift and go to state 43
    DOUBLE          shift and go to state 52
    K_TRUE          shift and go to state 39
    K_FALSE         shift and go to state 54
    MINUS           shift and go to state 41

    arithmetic_expression          shift and go to state 44
    string_expression              shift and go to state 45
    unary_expression               shift and go to state 36
    arithmetic_factor              shift and go to state 42
    boolean_term                   shift and go to state 123
    function_call_statement        shift and go to state 53
    number                         shift and go to state 49
    arithmetic_term                shift and go to state 40
    boolean_factor                 shift and go to state 48

state 95

    (85) iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN . compound_statement_list K_END
    (83) compound_statement_list -> .
    (84) compound_statement_list -> . compound_statement_list compound_statement

    K_END           reduce using rule 83 (compound_statement_list -> .)
    ID              reduce using rule 83 (compound_statement_list -> .)
    K_IF            reduce using rule 83 (compound_statement_list -> .)
    K_WHILE         reduce using rule 83 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 83 (compound_statement_list -> .)
    K_BREAK         reduce using rule 83 (compound_statement_list -> .)
    K_DONE          reduce using rule 83 (compound_statement_list -> .)
    K_LIST          reduce using rule 83 (compound_statement_list -> .)
    K_DICT          reduce using rule 83 (compound_statement_list -> .)
    K_SET           reduce using rule 83 (compound_statement_list -> .)
    K_INT           reduce using rule 83 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 83 (compound_statement_list -> .)
    K_STRING        reduce using rule 83 (compound_statement_list -> .)
    K_BOOL          reduce using rule 83 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 83 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 83 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 83 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 83 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 83 (compound_statement_list -> .)
    K_TEXT          reduce using rule 83 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 124

state 96

    (16) variable_declaration -> pre_type_modifier type ID ASSIGN . expression
    (32) expression -> . string_expression
    (33) expression -> . unary_expression
    (34) expression -> . boolean_expression
    (35) expression -> . arithmetic_expression
    (36) string_expression -> . string_expression PLUS string_term
    (37) string_expression -> . STRING
    (40) unary_expression -> . ID
    (41) unary_expression -> . STRING
    (42) unary_expression -> . INTEGER
    (43) unary_expression -> . function_call_statement
    (44) unary_expression -> . DOUBLE
    (45) unary_expression -> . K_TRUE
    (46) unary_expression -> . K_FALSE
    (47) boolean_expression -> . boolean_expression OR boolean_term
    (48) boolean_expression -> . boolean_term
    (63) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (65) arithmetic_expression -> . arithmetic_term
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (49) boolean_term -> . boolean_term AND boolean_factor
    (50) boolean_term -> . boolean_factor
    (66) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (68) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (69) arithmetic_term -> . arithmetic_factor
    (51) boolean_factor -> . LPAREN boolean_expression RPAREN
    (52) boolean_factor -> . unary_expression comparator unary_expression
    (53) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (54) boolean_factor -> . string_expression comparator string_expression
    (55) boolean_factor -> . unary_expression
    (56) boolean_factor -> . NEG boolean_factor
    (70) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (71) arithmetic_factor -> . number
    (72) arithmetic_factor -> . ID
    (73) arithmetic_factor -> . function_call_statement
    (74) arithmetic_factor -> . MINUS arithmetic_factor
    (75) number -> . INTEGER
    (76) number -> . DOUBLE

    STRING          shift and go to state 60
    ID              shift and go to state 50
    INTEGER         shift and go to state 43
    DOUBLE          shift and go to state 52
    K_TRUE          shift and go to state 39
    K_FALSE         shift and go to state 54
    LPAREN          shift and go to state 47
    NEG             shift and go to state 37
    MINUS           shift and go to state 41

    arithmetic_expression          shift and go to state 58
    string_expression              shift and go to state 59
    number                         shift and go to state 49
    unary_expression               shift and go to state 57
    boolean_expression             shift and go to state 61
    arithmetic_factor              shift and go to state 42
    boolean_term                   shift and go to state 38
    function_call_statement        shift and go to state 53
    arithmetic_term                shift and go to state 40
    boolean_factor                 shift and go to state 48
    expression                     shift and go to state 125

state 97

    (89) function_declaration -> pre_type_modifier type ID LPAREN . argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END
    (90) function_declaration -> pre_type_modifier type ID LPAREN . RPAREN ASSIGN unary_expression compound_statement_list K_END
    (91) argument_list -> . argument_list COMMA argument
    (92) argument_list -> . argument
    (93) argument -> . pre_type_modifier type ID
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    RPAREN          shift and go to state 126
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    argument                       shift and go to state 127
    argument_list                  shift and go to state 128
    pre_type_modifier              shift and go to state 129

state 98

    (11) function_call_statement -> ID LPAREN parameter_list RPAREN .

    GT              reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    LT              reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    GEQ             reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    LEQ             reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    EQ              reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    NEQ             reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    AND             reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    OR              reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    MOD             reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_LIST          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_DICT          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_SET           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    ID              reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_IF            reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_WHILE         reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_CONTINUE      reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_BREAK         reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_DONE          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_INT           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_DOUBLE        reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_STRING        reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_BOOL          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_WINDOW        reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_SHAPE         reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_TRIANGLE      reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_RECTANGLE     reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_CIRCLE        reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_TEXT          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    $end            reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_EL            reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_EF            reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_END           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)


state 99

    (13) parameter_list -> parameter_list COMMA . expression
    (32) expression -> . string_expression
    (33) expression -> . unary_expression
    (34) expression -> . boolean_expression
    (35) expression -> . arithmetic_expression
    (36) string_expression -> . string_expression PLUS string_term
    (37) string_expression -> . STRING
    (40) unary_expression -> . ID
    (41) unary_expression -> . STRING
    (42) unary_expression -> . INTEGER
    (43) unary_expression -> . function_call_statement
    (44) unary_expression -> . DOUBLE
    (45) unary_expression -> . K_TRUE
    (46) unary_expression -> . K_FALSE
    (47) boolean_expression -> . boolean_expression OR boolean_term
    (48) boolean_expression -> . boolean_term
    (63) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (65) arithmetic_expression -> . arithmetic_term
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (49) boolean_term -> . boolean_term AND boolean_factor
    (50) boolean_term -> . boolean_factor
    (66) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (68) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (69) arithmetic_term -> . arithmetic_factor
    (51) boolean_factor -> . LPAREN boolean_expression RPAREN
    (52) boolean_factor -> . unary_expression comparator unary_expression
    (53) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (54) boolean_factor -> . string_expression comparator string_expression
    (55) boolean_factor -> . unary_expression
    (56) boolean_factor -> . NEG boolean_factor
    (70) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (71) arithmetic_factor -> . number
    (72) arithmetic_factor -> . ID
    (73) arithmetic_factor -> . function_call_statement
    (74) arithmetic_factor -> . MINUS arithmetic_factor
    (75) number -> . INTEGER
    (76) number -> . DOUBLE

    STRING          shift and go to state 60
    ID              shift and go to state 50
    INTEGER         shift and go to state 43
    DOUBLE          shift and go to state 52
    K_TRUE          shift and go to state 39
    K_FALSE         shift and go to state 54
    LPAREN          shift and go to state 47
    NEG             shift and go to state 37
    MINUS           shift and go to state 41

    arithmetic_expression          shift and go to state 58
    string_expression              shift and go to state 59
    number                         shift and go to state 49
    unary_expression               shift and go to state 57
    boolean_expression             shift and go to state 61
    arithmetic_factor              shift and go to state 42
    boolean_term                   shift and go to state 38
    function_call_statement        shift and go to state 53
    arithmetic_term                shift and go to state 40
    boolean_factor                 shift and go to state 48
    expression                     shift and go to state 130

state 100

    (41) unary_expression -> STRING .

    AND             reduce using rule 41 (unary_expression -> STRING .)
    RPAREN          reduce using rule 41 (unary_expression -> STRING .)
    OR              reduce using rule 41 (unary_expression -> STRING .)
    K_LIST          reduce using rule 41 (unary_expression -> STRING .)
    K_DICT          reduce using rule 41 (unary_expression -> STRING .)
    K_SET           reduce using rule 41 (unary_expression -> STRING .)
    ID              reduce using rule 41 (unary_expression -> STRING .)
    K_IF            reduce using rule 41 (unary_expression -> STRING .)
    K_WHILE         reduce using rule 41 (unary_expression -> STRING .)
    K_CONTINUE      reduce using rule 41 (unary_expression -> STRING .)
    K_BREAK         reduce using rule 41 (unary_expression -> STRING .)
    K_DONE          reduce using rule 41 (unary_expression -> STRING .)
    K_INT           reduce using rule 41 (unary_expression -> STRING .)
    K_DOUBLE        reduce using rule 41 (unary_expression -> STRING .)
    K_STRING        reduce using rule 41 (unary_expression -> STRING .)
    K_BOOL          reduce using rule 41 (unary_expression -> STRING .)
    K_WINDOW        reduce using rule 41 (unary_expression -> STRING .)
    K_SHAPE         reduce using rule 41 (unary_expression -> STRING .)
    K_TRIANGLE      reduce using rule 41 (unary_expression -> STRING .)
    K_RECTANGLE     reduce using rule 41 (unary_expression -> STRING .)
    K_CIRCLE        reduce using rule 41 (unary_expression -> STRING .)
    K_TEXT          reduce using rule 41 (unary_expression -> STRING .)
    $end            reduce using rule 41 (unary_expression -> STRING .)
    K_EL            reduce using rule 41 (unary_expression -> STRING .)
    K_EF            reduce using rule 41 (unary_expression -> STRING .)
    K_END           reduce using rule 41 (unary_expression -> STRING .)
    COMMA           reduce using rule 41 (unary_expression -> STRING .)


state 101

    (44) unary_expression -> DOUBLE .

    AND             reduce using rule 44 (unary_expression -> DOUBLE .)
    RPAREN          reduce using rule 44 (unary_expression -> DOUBLE .)
    OR              reduce using rule 44 (unary_expression -> DOUBLE .)
    K_LIST          reduce using rule 44 (unary_expression -> DOUBLE .)
    K_DICT          reduce using rule 44 (unary_expression -> DOUBLE .)
    K_SET           reduce using rule 44 (unary_expression -> DOUBLE .)
    ID              reduce using rule 44 (unary_expression -> DOUBLE .)
    K_IF            reduce using rule 44 (unary_expression -> DOUBLE .)
    K_WHILE         reduce using rule 44 (unary_expression -> DOUBLE .)
    K_CONTINUE      reduce using rule 44 (unary_expression -> DOUBLE .)
    K_BREAK         reduce using rule 44 (unary_expression -> DOUBLE .)
    K_DONE          reduce using rule 44 (unary_expression -> DOUBLE .)
    K_INT           reduce using rule 44 (unary_expression -> DOUBLE .)
    K_DOUBLE        reduce using rule 44 (unary_expression -> DOUBLE .)
    K_STRING        reduce using rule 44 (unary_expression -> DOUBLE .)
    K_BOOL          reduce using rule 44 (unary_expression -> DOUBLE .)
    K_WINDOW        reduce using rule 44 (unary_expression -> DOUBLE .)
    K_SHAPE         reduce using rule 44 (unary_expression -> DOUBLE .)
    K_TRIANGLE      reduce using rule 44 (unary_expression -> DOUBLE .)
    K_RECTANGLE     reduce using rule 44 (unary_expression -> DOUBLE .)
    K_CIRCLE        reduce using rule 44 (unary_expression -> DOUBLE .)
    K_TEXT          reduce using rule 44 (unary_expression -> DOUBLE .)
    $end            reduce using rule 44 (unary_expression -> DOUBLE .)
    K_EL            reduce using rule 44 (unary_expression -> DOUBLE .)
    K_EF            reduce using rule 44 (unary_expression -> DOUBLE .)
    K_END           reduce using rule 44 (unary_expression -> DOUBLE .)
    COMMA           reduce using rule 44 (unary_expression -> DOUBLE .)


state 102

    (43) unary_expression -> function_call_statement .

    AND             reduce using rule 43 (unary_expression -> function_call_statement .)
    RPAREN          reduce using rule 43 (unary_expression -> function_call_statement .)
    OR              reduce using rule 43 (unary_expression -> function_call_statement .)
    K_LIST          reduce using rule 43 (unary_expression -> function_call_statement .)
    K_DICT          reduce using rule 43 (unary_expression -> function_call_statement .)
    K_SET           reduce using rule 43 (unary_expression -> function_call_statement .)
    ID              reduce using rule 43 (unary_expression -> function_call_statement .)
    K_IF            reduce using rule 43 (unary_expression -> function_call_statement .)
    K_WHILE         reduce using rule 43 (unary_expression -> function_call_statement .)
    K_CONTINUE      reduce using rule 43 (unary_expression -> function_call_statement .)
    K_BREAK         reduce using rule 43 (unary_expression -> function_call_statement .)
    K_DONE          reduce using rule 43 (unary_expression -> function_call_statement .)
    K_INT           reduce using rule 43 (unary_expression -> function_call_statement .)
    K_DOUBLE        reduce using rule 43 (unary_expression -> function_call_statement .)
    K_STRING        reduce using rule 43 (unary_expression -> function_call_statement .)
    K_BOOL          reduce using rule 43 (unary_expression -> function_call_statement .)
    K_WINDOW        reduce using rule 43 (unary_expression -> function_call_statement .)
    K_SHAPE         reduce using rule 43 (unary_expression -> function_call_statement .)
    K_TRIANGLE      reduce using rule 43 (unary_expression -> function_call_statement .)
    K_RECTANGLE     reduce using rule 43 (unary_expression -> function_call_statement .)
    K_CIRCLE        reduce using rule 43 (unary_expression -> function_call_statement .)
    K_TEXT          reduce using rule 43 (unary_expression -> function_call_statement .)
    $end            reduce using rule 43 (unary_expression -> function_call_statement .)
    K_EL            reduce using rule 43 (unary_expression -> function_call_statement .)
    K_EF            reduce using rule 43 (unary_expression -> function_call_statement .)
    K_END           reduce using rule 43 (unary_expression -> function_call_statement .)
    COMMA           reduce using rule 43 (unary_expression -> function_call_statement .)


state 103

    (42) unary_expression -> INTEGER .

    AND             reduce using rule 42 (unary_expression -> INTEGER .)
    RPAREN          reduce using rule 42 (unary_expression -> INTEGER .)
    OR              reduce using rule 42 (unary_expression -> INTEGER .)
    K_LIST          reduce using rule 42 (unary_expression -> INTEGER .)
    K_DICT          reduce using rule 42 (unary_expression -> INTEGER .)
    K_SET           reduce using rule 42 (unary_expression -> INTEGER .)
    ID              reduce using rule 42 (unary_expression -> INTEGER .)
    K_IF            reduce using rule 42 (unary_expression -> INTEGER .)
    K_WHILE         reduce using rule 42 (unary_expression -> INTEGER .)
    K_CONTINUE      reduce using rule 42 (unary_expression -> INTEGER .)
    K_BREAK         reduce using rule 42 (unary_expression -> INTEGER .)
    K_DONE          reduce using rule 42 (unary_expression -> INTEGER .)
    K_INT           reduce using rule 42 (unary_expression -> INTEGER .)
    K_DOUBLE        reduce using rule 42 (unary_expression -> INTEGER .)
    K_STRING        reduce using rule 42 (unary_expression -> INTEGER .)
    K_BOOL          reduce using rule 42 (unary_expression -> INTEGER .)
    K_WINDOW        reduce using rule 42 (unary_expression -> INTEGER .)
    K_SHAPE         reduce using rule 42 (unary_expression -> INTEGER .)
    K_TRIANGLE      reduce using rule 42 (unary_expression -> INTEGER .)
    K_RECTANGLE     reduce using rule 42 (unary_expression -> INTEGER .)
    K_CIRCLE        reduce using rule 42 (unary_expression -> INTEGER .)
    K_TEXT          reduce using rule 42 (unary_expression -> INTEGER .)
    $end            reduce using rule 42 (unary_expression -> INTEGER .)
    K_EL            reduce using rule 42 (unary_expression -> INTEGER .)
    K_EF            reduce using rule 42 (unary_expression -> INTEGER .)
    K_END           reduce using rule 42 (unary_expression -> INTEGER .)
    COMMA           reduce using rule 42 (unary_expression -> INTEGER .)


state 104

    (52) boolean_factor -> unary_expression comparator unary_expression .

    AND             reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    RPAREN          reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    OR              reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    COMMA           reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    K_LIST          reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    K_DICT          reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    K_SET           reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    ID              reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    K_IF            reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    K_WHILE         reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    K_CONTINUE      reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    K_BREAK         reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    K_DONE          reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    K_INT           reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    K_DOUBLE        reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    K_STRING        reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    K_BOOL          reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    K_WINDOW        reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    K_SHAPE         reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    K_TRIANGLE      reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    K_RECTANGLE     reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    K_CIRCLE        reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    K_TEXT          reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    $end            reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    K_EL            reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    K_EF            reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)
    K_END           reduce using rule 52 (boolean_factor -> unary_expression comparator unary_expression .)


state 105

    (40) unary_expression -> ID .
    (11) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (12) function_call_statement -> ID . LPAREN RPAREN

    AND             reduce using rule 40 (unary_expression -> ID .)
    RPAREN          reduce using rule 40 (unary_expression -> ID .)
    OR              reduce using rule 40 (unary_expression -> ID .)
    K_LIST          reduce using rule 40 (unary_expression -> ID .)
    K_DICT          reduce using rule 40 (unary_expression -> ID .)
    K_SET           reduce using rule 40 (unary_expression -> ID .)
    ID              reduce using rule 40 (unary_expression -> ID .)
    K_IF            reduce using rule 40 (unary_expression -> ID .)
    K_WHILE         reduce using rule 40 (unary_expression -> ID .)
    K_CONTINUE      reduce using rule 40 (unary_expression -> ID .)
    K_BREAK         reduce using rule 40 (unary_expression -> ID .)
    K_DONE          reduce using rule 40 (unary_expression -> ID .)
    K_INT           reduce using rule 40 (unary_expression -> ID .)
    K_DOUBLE        reduce using rule 40 (unary_expression -> ID .)
    K_STRING        reduce using rule 40 (unary_expression -> ID .)
    K_BOOL          reduce using rule 40 (unary_expression -> ID .)
    K_WINDOW        reduce using rule 40 (unary_expression -> ID .)
    K_SHAPE         reduce using rule 40 (unary_expression -> ID .)
    K_TRIANGLE      reduce using rule 40 (unary_expression -> ID .)
    K_RECTANGLE     reduce using rule 40 (unary_expression -> ID .)
    K_CIRCLE        reduce using rule 40 (unary_expression -> ID .)
    K_TEXT          reduce using rule 40 (unary_expression -> ID .)
    $end            reduce using rule 40 (unary_expression -> ID .)
    K_EL            reduce using rule 40 (unary_expression -> ID .)
    K_EF            reduce using rule 40 (unary_expression -> ID .)
    K_END           reduce using rule 40 (unary_expression -> ID .)
    COMMA           reduce using rule 40 (unary_expression -> ID .)
    LPAREN          shift and go to state 35


state 106

    (49) boolean_term -> boolean_term AND boolean_factor .

    AND             reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    RPAREN          reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    OR              reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    K_LIST          reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    K_DICT          reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    K_SET           reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    ID              reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    K_IF            reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    K_WHILE         reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    K_CONTINUE      reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    K_BREAK         reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    K_DONE          reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    K_INT           reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    K_DOUBLE        reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    K_STRING        reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    K_BOOL          reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    K_WINDOW        reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    K_SHAPE         reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    K_TRIANGLE      reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    K_RECTANGLE     reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    K_CIRCLE        reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    K_TEXT          reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    $end            reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    K_EL            reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    K_EF            reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    K_END           reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)
    COMMA           reduce using rule 49 (boolean_term -> boolean_term AND boolean_factor .)


state 107

    (68) arithmetic_term -> arithmetic_term MOD arithmetic_factor .

    TIMES           reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    DIVIDE          reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    MOD             reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    PLUS            reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    MINUS           reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    GT              reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    LT              reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    GEQ             reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    LEQ             reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    EQ              reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    NEQ             reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    RPAREN          reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    COMMA           reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_LIST          reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_DICT          reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_SET           reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    ID              reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_IF            reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_WHILE         reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_CONTINUE      reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_BREAK         reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_DONE          reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_INT           reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_DOUBLE        reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_STRING        reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_BOOL          reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_WINDOW        reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_SHAPE         reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_TRIANGLE      reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_RECTANGLE     reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_CIRCLE        reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_TEXT          reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    $end            reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_EL            reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_EF            reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_END           reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    AND             reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    OR              reduce using rule 68 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)


state 108

    (67) arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .

    TIMES           reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    DIVIDE          reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    MOD             reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    PLUS            reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    MINUS           reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    GT              reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    LT              reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    GEQ             reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    LEQ             reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    EQ              reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    NEQ             reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    RPAREN          reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    COMMA           reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_LIST          reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_DICT          reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_SET           reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    ID              reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_IF            reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_WHILE         reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_CONTINUE      reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_BREAK         reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_DONE          reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_INT           reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_DOUBLE        reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_STRING        reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_BOOL          reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_WINDOW        reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_SHAPE         reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_TRIANGLE      reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_RECTANGLE     reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_CIRCLE        reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_TEXT          reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    $end            reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_EL            reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_EF            reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_END           reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    AND             reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    OR              reduce using rule 67 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)


state 109

    (66) arithmetic_term -> arithmetic_term TIMES arithmetic_factor .

    TIMES           reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    DIVIDE          reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    MOD             reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    PLUS            reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    MINUS           reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    GT              reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    LT              reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    GEQ             reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    LEQ             reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    EQ              reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    NEQ             reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    RPAREN          reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    COMMA           reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_LIST          reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_DICT          reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_SET           reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    ID              reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_IF            reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_WHILE         reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_CONTINUE      reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_BREAK         reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_DONE          reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_INT           reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_DOUBLE        reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_STRING        reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_BOOL          reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_WINDOW        reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_SHAPE         reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_TRIANGLE      reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_RECTANGLE     reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_CIRCLE        reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_TEXT          reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    $end            reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_EL            reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_EF            reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_END           reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    AND             reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    OR              reduce using rule 66 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)


state 110

    (70) arithmetic_factor -> LPAREN arithmetic_expression . RPAREN
    (63) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (64) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term

    RPAREN          shift and go to state 120
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86


state 111

    (53) boolean_factor -> arithmetic_expression comparator arithmetic_expression .
    (63) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (64) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term

    AND             reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    RPAREN          reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    OR              reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    COMMA           reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_LIST          reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_DICT          reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_SET           reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    ID              reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_IF            reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_WHILE         reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_CONTINUE      reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_BREAK         reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_DONE          reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_INT           reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_DOUBLE        reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_STRING        reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_BOOL          reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_WINDOW        reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_SHAPE         reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_TRIANGLE      reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_RECTANGLE     reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_CIRCLE        reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_TEXT          reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    $end            reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_EL            reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_EF            reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_END           reduce using rule 53 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86


state 112

    (63) arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .
    (66) arithmetic_term -> arithmetic_term . TIMES arithmetic_factor
    (67) arithmetic_term -> arithmetic_term . DIVIDE arithmetic_factor
    (68) arithmetic_term -> arithmetic_term . MOD arithmetic_factor

    PLUS            reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    MINUS           reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    AND             reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    RPAREN          reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    OR              reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_LIST          reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_DICT          reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_SET           reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    ID              reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_IF            reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_WHILE         reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_CONTINUE      reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_BREAK         reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_DONE          reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_INT           reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_DOUBLE        reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_STRING        reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_BOOL          reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_WINDOW        reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_SHAPE         reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_TRIANGLE      reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_RECTANGLE     reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_CIRCLE        reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_TEXT          reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    $end            reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_EL            reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_EF            reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_END           reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    COMMA           reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    GT              reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    LT              reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    GEQ             reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    LEQ             reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    EQ              reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    NEQ             reduce using rule 63 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 75


state 113

    (64) arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .
    (66) arithmetic_term -> arithmetic_term . TIMES arithmetic_factor
    (67) arithmetic_term -> arithmetic_term . DIVIDE arithmetic_factor
    (68) arithmetic_term -> arithmetic_term . MOD arithmetic_factor

    PLUS            reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    MINUS           reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    AND             reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    RPAREN          reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    OR              reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_LIST          reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_DICT          reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_SET           reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    ID              reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_IF            reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_WHILE         reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_CONTINUE      reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_BREAK         reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_DONE          reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_INT           reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_DOUBLE        reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_STRING        reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_BOOL          reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_WINDOW        reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_SHAPE         reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_TRIANGLE      reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_RECTANGLE     reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_CIRCLE        reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_TEXT          reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    $end            reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_EL            reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_EF            reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_END           reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    COMMA           reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    GT              reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    LT              reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    GEQ             reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    LEQ             reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    EQ              reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    NEQ             reduce using rule 64 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 76
    MOD             shift and go to state 75


state 114

    (54) boolean_factor -> string_expression comparator string_expression .
    (36) string_expression -> string_expression . PLUS string_term

    AND             reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    RPAREN          reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    OR              reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    COMMA           reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    K_LIST          reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    K_DICT          reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    K_SET           reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    ID              reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    K_IF            reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    K_WHILE         reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    K_CONTINUE      reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    K_BREAK         reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    K_DONE          reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    K_INT           reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    K_DOUBLE        reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    K_STRING        reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    K_BOOL          reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    K_WINDOW        reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    K_SHAPE         reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    K_TRIANGLE      reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    K_RECTANGLE     reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    K_CIRCLE        reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    K_TEXT          reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    $end            reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    K_EL            reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    K_EF            reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    K_END           reduce using rule 54 (boolean_factor -> string_expression comparator string_expression .)
    PLUS            shift and go to state 88


state 115

    (37) string_expression -> STRING .

    PLUS            reduce using rule 37 (string_expression -> STRING .)
    AND             reduce using rule 37 (string_expression -> STRING .)
    RPAREN          reduce using rule 37 (string_expression -> STRING .)
    OR              reduce using rule 37 (string_expression -> STRING .)
    K_LIST          reduce using rule 37 (string_expression -> STRING .)
    K_DICT          reduce using rule 37 (string_expression -> STRING .)
    K_SET           reduce using rule 37 (string_expression -> STRING .)
    ID              reduce using rule 37 (string_expression -> STRING .)
    K_IF            reduce using rule 37 (string_expression -> STRING .)
    K_WHILE         reduce using rule 37 (string_expression -> STRING .)
    K_CONTINUE      reduce using rule 37 (string_expression -> STRING .)
    K_BREAK         reduce using rule 37 (string_expression -> STRING .)
    K_DONE          reduce using rule 37 (string_expression -> STRING .)
    K_INT           reduce using rule 37 (string_expression -> STRING .)
    K_DOUBLE        reduce using rule 37 (string_expression -> STRING .)
    K_STRING        reduce using rule 37 (string_expression -> STRING .)
    K_BOOL          reduce using rule 37 (string_expression -> STRING .)
    K_WINDOW        reduce using rule 37 (string_expression -> STRING .)
    K_SHAPE         reduce using rule 37 (string_expression -> STRING .)
    K_TRIANGLE      reduce using rule 37 (string_expression -> STRING .)
    K_RECTANGLE     reduce using rule 37 (string_expression -> STRING .)
    K_CIRCLE        reduce using rule 37 (string_expression -> STRING .)
    K_TEXT          reduce using rule 37 (string_expression -> STRING .)
    $end            reduce using rule 37 (string_expression -> STRING .)
    K_EL            reduce using rule 37 (string_expression -> STRING .)
    K_EF            reduce using rule 37 (string_expression -> STRING .)
    K_END           reduce using rule 37 (string_expression -> STRING .)
    COMMA           reduce using rule 37 (string_expression -> STRING .)


state 116

    (39) string_term -> STRING .

    PLUS            reduce using rule 39 (string_term -> STRING .)
    GT              reduce using rule 39 (string_term -> STRING .)
    LT              reduce using rule 39 (string_term -> STRING .)
    GEQ             reduce using rule 39 (string_term -> STRING .)
    LEQ             reduce using rule 39 (string_term -> STRING .)
    EQ              reduce using rule 39 (string_term -> STRING .)
    NEQ             reduce using rule 39 (string_term -> STRING .)
    K_LIST          reduce using rule 39 (string_term -> STRING .)
    K_DICT          reduce using rule 39 (string_term -> STRING .)
    K_SET           reduce using rule 39 (string_term -> STRING .)
    ID              reduce using rule 39 (string_term -> STRING .)
    K_IF            reduce using rule 39 (string_term -> STRING .)
    K_WHILE         reduce using rule 39 (string_term -> STRING .)
    K_CONTINUE      reduce using rule 39 (string_term -> STRING .)
    K_BREAK         reduce using rule 39 (string_term -> STRING .)
    K_DONE          reduce using rule 39 (string_term -> STRING .)
    K_INT           reduce using rule 39 (string_term -> STRING .)
    K_DOUBLE        reduce using rule 39 (string_term -> STRING .)
    K_STRING        reduce using rule 39 (string_term -> STRING .)
    K_BOOL          reduce using rule 39 (string_term -> STRING .)
    K_WINDOW        reduce using rule 39 (string_term -> STRING .)
    K_SHAPE         reduce using rule 39 (string_term -> STRING .)
    K_TRIANGLE      reduce using rule 39 (string_term -> STRING .)
    K_RECTANGLE     reduce using rule 39 (string_term -> STRING .)
    K_CIRCLE        reduce using rule 39 (string_term -> STRING .)
    K_TEXT          reduce using rule 39 (string_term -> STRING .)
    $end            reduce using rule 39 (string_term -> STRING .)
    K_EL            reduce using rule 39 (string_term -> STRING .)
    K_EF            reduce using rule 39 (string_term -> STRING .)
    K_END           reduce using rule 39 (string_term -> STRING .)
    RPAREN          reduce using rule 39 (string_term -> STRING .)
    COMMA           reduce using rule 39 (string_term -> STRING .)
    AND             reduce using rule 39 (string_term -> STRING .)
    OR              reduce using rule 39 (string_term -> STRING .)


state 117

    (38) string_term -> function_call_statement .

    PLUS            reduce using rule 38 (string_term -> function_call_statement .)
    GT              reduce using rule 38 (string_term -> function_call_statement .)
    LT              reduce using rule 38 (string_term -> function_call_statement .)
    GEQ             reduce using rule 38 (string_term -> function_call_statement .)
    LEQ             reduce using rule 38 (string_term -> function_call_statement .)
    EQ              reduce using rule 38 (string_term -> function_call_statement .)
    NEQ             reduce using rule 38 (string_term -> function_call_statement .)
    K_LIST          reduce using rule 38 (string_term -> function_call_statement .)
    K_DICT          reduce using rule 38 (string_term -> function_call_statement .)
    K_SET           reduce using rule 38 (string_term -> function_call_statement .)
    ID              reduce using rule 38 (string_term -> function_call_statement .)
    K_IF            reduce using rule 38 (string_term -> function_call_statement .)
    K_WHILE         reduce using rule 38 (string_term -> function_call_statement .)
    K_CONTINUE      reduce using rule 38 (string_term -> function_call_statement .)
    K_BREAK         reduce using rule 38 (string_term -> function_call_statement .)
    K_DONE          reduce using rule 38 (string_term -> function_call_statement .)
    K_INT           reduce using rule 38 (string_term -> function_call_statement .)
    K_DOUBLE        reduce using rule 38 (string_term -> function_call_statement .)
    K_STRING        reduce using rule 38 (string_term -> function_call_statement .)
    K_BOOL          reduce using rule 38 (string_term -> function_call_statement .)
    K_WINDOW        reduce using rule 38 (string_term -> function_call_statement .)
    K_SHAPE         reduce using rule 38 (string_term -> function_call_statement .)
    K_TRIANGLE      reduce using rule 38 (string_term -> function_call_statement .)
    K_RECTANGLE     reduce using rule 38 (string_term -> function_call_statement .)
    K_CIRCLE        reduce using rule 38 (string_term -> function_call_statement .)
    K_TEXT          reduce using rule 38 (string_term -> function_call_statement .)
    $end            reduce using rule 38 (string_term -> function_call_statement .)
    K_EL            reduce using rule 38 (string_term -> function_call_statement .)
    K_EF            reduce using rule 38 (string_term -> function_call_statement .)
    K_END           reduce using rule 38 (string_term -> function_call_statement .)
    RPAREN          reduce using rule 38 (string_term -> function_call_statement .)
    COMMA           reduce using rule 38 (string_term -> function_call_statement .)
    AND             reduce using rule 38 (string_term -> function_call_statement .)
    OR              reduce using rule 38 (string_term -> function_call_statement .)


state 118

    (36) string_expression -> string_expression PLUS string_term .

    PLUS            reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    AND             reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    RPAREN          reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    OR              reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    K_LIST          reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    K_DICT          reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    K_SET           reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    ID              reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    K_IF            reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    K_WHILE         reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    K_CONTINUE      reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    K_BREAK         reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    K_DONE          reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    K_INT           reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    K_DOUBLE        reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    K_STRING        reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    K_BOOL          reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    K_WINDOW        reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    K_SHAPE         reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    K_TRIANGLE      reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    K_RECTANGLE     reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    K_CIRCLE        reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    K_TEXT          reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    $end            reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    K_EL            reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    K_EF            reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    K_END           reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    COMMA           reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    GT              reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    LT              reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    GEQ             reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    LEQ             reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    EQ              reduce using rule 36 (string_expression -> string_expression PLUS string_term .)
    NEQ             reduce using rule 36 (string_expression -> string_expression PLUS string_term .)


state 119

    (11) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (12) function_call_statement -> ID . LPAREN RPAREN

    LPAREN          shift and go to state 35


state 120

    (70) arithmetic_factor -> LPAREN arithmetic_expression RPAREN .

    TIMES           reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    DIVIDE          reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    MOD             reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    PLUS            reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    MINUS           reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    GT              reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    LT              reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    GEQ             reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    LEQ             reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    EQ              reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    NEQ             reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_LIST          reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_DICT          reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_SET           reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    ID              reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_IF            reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_WHILE         reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_CONTINUE      reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_BREAK         reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_DONE          reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_INT           reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_DOUBLE        reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_STRING        reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_BOOL          reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_WINDOW        reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_SHAPE         reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_TRIANGLE      reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_RECTANGLE     reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_CIRCLE        reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_TEXT          reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    $end            reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_EL            reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_EF            reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_END           reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    RPAREN          reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    COMMA           reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    AND             reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    OR              reduce using rule 70 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)


state 121

    (51) boolean_factor -> LPAREN boolean_expression RPAREN .

    AND             reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    RPAREN          reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    OR              reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    COMMA           reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_LIST          reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_DICT          reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_SET           reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    ID              reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_IF            reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_WHILE         reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_CONTINUE      reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_BREAK         reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_DONE          reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_INT           reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_DOUBLE        reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_STRING        reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_BOOL          reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_WINDOW        reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_SHAPE         reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_TRIANGLE      reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_RECTANGLE     reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_CIRCLE        reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_TEXT          reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    $end            reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_EL            reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_EF            reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_END           reduce using rule 51 (boolean_factor -> LPAREN boolean_expression RPAREN .)


state 122

    (77) selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list . else_if_statement_list else_statement K_END
    (84) compound_statement_list -> compound_statement_list . compound_statement
    (78) else_if_statement_list -> .
    (79) else_if_statement_list -> . else_if_statement_list else_if_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (77) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (85) iteration_statement -> . K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END
    (86) jump_statement -> . K_CONTINUE
    (87) jump_statement -> . K_BREAK
    (88) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_EL            reduce using rule 78 (else_if_statement_list -> .)
    K_EF            reduce using rule 78 (else_if_statement_list -> .)
    K_END           reduce using rule 78 (else_if_statement_list -> .)
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 20
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    jump_statement                 shift and go to state 17
    selection_statement            shift and go to state 3
    compound_statement             shift and go to state 131
    function_call_statement        shift and go to state 19
    pre_type_modifier              shift and go to state 133
    iteration_statement            shift and go to state 5
    variable_declaration           shift and go to state 6
    else_if_statement_list         shift and go to state 132

state 123

    (47) boolean_expression -> boolean_expression OR boolean_term .
    (49) boolean_term -> boolean_term . AND boolean_factor

    OR              reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    RPAREN          reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    COMMA           reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    K_LIST          reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    K_DICT          reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    K_SET           reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    ID              reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    K_IF            reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    K_WHILE         reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    K_CONTINUE      reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    K_BREAK         reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    K_DONE          reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    K_INT           reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    K_DOUBLE        reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    K_STRING        reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    K_BOOL          reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    K_WINDOW        reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    K_SHAPE         reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    K_TRIANGLE      reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    K_RECTANGLE     reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    K_CIRCLE        reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    K_TEXT          reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    $end            reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    K_EL            reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    K_EF            reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    K_END           reduce using rule 47 (boolean_expression -> boolean_expression OR boolean_term .)
    AND             shift and go to state 74


state 124

    (85) iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list . K_END
    (84) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (77) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (85) iteration_statement -> . K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END
    (86) jump_statement -> . K_CONTINUE
    (87) jump_statement -> . K_BREAK
    (88) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_END           shift and go to state 134
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 20
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    jump_statement                 shift and go to state 17
    compound_statement             shift and go to state 131
    selection_statement            shift and go to state 3
    function_call_statement        shift and go to state 19
    pre_type_modifier              shift and go to state 133
    iteration_statement            shift and go to state 5
    variable_declaration           shift and go to state 6

state 125

    (16) variable_declaration -> pre_type_modifier type ID ASSIGN expression .

    ID              reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_IF            reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_WHILE         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_CONTINUE      reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_BREAK         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_DONE          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_LIST          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_DICT          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_SET           reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_INT           reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_DOUBLE        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_STRING        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_BOOL          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_WINDOW        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_SHAPE         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_TRIANGLE      reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_RECTANGLE     reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_CIRCLE        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_TEXT          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_EL            reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_EF            reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_END           reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    $end            reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)


state 126

    (90) function_declaration -> pre_type_modifier type ID LPAREN RPAREN . ASSIGN unary_expression compound_statement_list K_END

    ASSIGN          shift and go to state 135


state 127

    (92) argument_list -> argument .

    RPAREN          reduce using rule 92 (argument_list -> argument .)
    COMMA           reduce using rule 92 (argument_list -> argument .)


state 128

    (89) function_declaration -> pre_type_modifier type ID LPAREN argument_list . RPAREN ASSIGN unary_expression compound_statement_list K_END
    (91) argument_list -> argument_list . COMMA argument

    RPAREN          shift and go to state 136
    COMMA           shift and go to state 137


state 129

    (93) argument -> pre_type_modifier . type ID
    (22) type -> . K_INT
    (23) type -> . K_DOUBLE
    (24) type -> . K_STRING
    (25) type -> . K_BOOL
    (26) type -> . K_WINDOW
    (27) type -> . K_SHAPE
    (28) type -> . K_TRIANGLE
    (29) type -> . K_RECTANGLE
    (30) type -> . K_CIRCLE
    (31) type -> . K_TEXT

    K_INT           shift and go to state 29
    K_DOUBLE        shift and go to state 24
    K_STRING        shift and go to state 30
    K_BOOL          shift and go to state 23
    K_WINDOW        shift and go to state 31
    K_SHAPE         shift and go to state 26
    K_TRIANGLE      shift and go to state 25
    K_RECTANGLE     shift and go to state 28
    K_CIRCLE        shift and go to state 33
    K_TEXT          shift and go to state 27

    type                           shift and go to state 138

state 130

    (13) parameter_list -> parameter_list COMMA expression .

    RPAREN          reduce using rule 13 (parameter_list -> parameter_list COMMA expression .)
    COMMA           reduce using rule 13 (parameter_list -> parameter_list COMMA expression .)


state 131

    (84) compound_statement_list -> compound_statement_list compound_statement .

    K_END           reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    ID              reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_IF            reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_WHILE         reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_CONTINUE      reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_BREAK         reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_DONE          reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_LIST          reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_DICT          reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_SET           reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_INT           reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_DOUBLE        reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_STRING        reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_BOOL          reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_WINDOW        reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_SHAPE         reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_TRIANGLE      reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_RECTANGLE     reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_CIRCLE        reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_TEXT          reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_EL            reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_EF            reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)


state 132

    (77) selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list . else_statement K_END
    (79) else_if_statement_list -> else_if_statement_list . else_if_statement
    (81) else_statement -> .
    (82) else_statement -> . K_EL compound_statement_list
    (80) else_if_statement -> . K_EF LPAREN boolean_expression RPAREN compound_statement_list

    K_END           reduce using rule 81 (else_statement -> .)
    K_EL            shift and go to state 140
    K_EF            shift and go to state 142

    else_statement                 shift and go to state 139
    else_if_statement              shift and go to state 141

state 133

    (15) variable_declaration -> pre_type_modifier . type ID
    (16) variable_declaration -> pre_type_modifier . type ID ASSIGN expression
    (22) type -> . K_INT
    (23) type -> . K_DOUBLE
    (24) type -> . K_STRING
    (25) type -> . K_BOOL
    (26) type -> . K_WINDOW
    (27) type -> . K_SHAPE
    (28) type -> . K_TRIANGLE
    (29) type -> . K_RECTANGLE
    (30) type -> . K_CIRCLE
    (31) type -> . K_TEXT

    K_INT           shift and go to state 29
    K_DOUBLE        shift and go to state 24
    K_STRING        shift and go to state 30
    K_BOOL          shift and go to state 23
    K_WINDOW        shift and go to state 31
    K_SHAPE         shift and go to state 26
    K_TRIANGLE      shift and go to state 25
    K_RECTANGLE     shift and go to state 28
    K_CIRCLE        shift and go to state 33
    K_TEXT          shift and go to state 27

    type                           shift and go to state 143

state 134

    (85) iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .

    K_LIST          reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_DICT          reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_SET           reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    ID              reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_IF            reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_WHILE         reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_CONTINUE      reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_BREAK         reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_DONE          reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_INT           reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_DOUBLE        reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_STRING        reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_BOOL          reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_WINDOW        reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_SHAPE         reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_TRIANGLE      reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_RECTANGLE     reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_CIRCLE        reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_TEXT          reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    $end            reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_END           reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_EL            reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_EF            reduce using rule 85 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)


state 135

    (90) function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN . unary_expression compound_statement_list K_END
    (40) unary_expression -> . ID
    (41) unary_expression -> . STRING
    (42) unary_expression -> . INTEGER
    (43) unary_expression -> . function_call_statement
    (44) unary_expression -> . DOUBLE
    (45) unary_expression -> . K_TRUE
    (46) unary_expression -> . K_FALSE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    ID              shift and go to state 105
    STRING          shift and go to state 100
    INTEGER         shift and go to state 103
    DOUBLE          shift and go to state 101
    K_TRUE          shift and go to state 39
    K_FALSE         shift and go to state 54

    unary_expression               shift and go to state 144
    function_call_statement        shift and go to state 102

state 136

    (89) function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN . ASSIGN unary_expression compound_statement_list K_END

    ASSIGN          shift and go to state 145


state 137

    (91) argument_list -> argument_list COMMA . argument
    (93) argument -> . pre_type_modifier type ID
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    pre_type_modifier              shift and go to state 129
    argument                       shift and go to state 146

state 138

    (93) argument -> pre_type_modifier type . ID

    ID              shift and go to state 147


state 139

    (77) selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement . K_END

    K_END           shift and go to state 148


state 140

    (82) else_statement -> K_EL . compound_statement_list
    (83) compound_statement_list -> .
    (84) compound_statement_list -> . compound_statement_list compound_statement

    ID              reduce using rule 83 (compound_statement_list -> .)
    K_IF            reduce using rule 83 (compound_statement_list -> .)
    K_WHILE         reduce using rule 83 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 83 (compound_statement_list -> .)
    K_BREAK         reduce using rule 83 (compound_statement_list -> .)
    K_DONE          reduce using rule 83 (compound_statement_list -> .)
    K_LIST          reduce using rule 83 (compound_statement_list -> .)
    K_DICT          reduce using rule 83 (compound_statement_list -> .)
    K_SET           reduce using rule 83 (compound_statement_list -> .)
    K_INT           reduce using rule 83 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 83 (compound_statement_list -> .)
    K_STRING        reduce using rule 83 (compound_statement_list -> .)
    K_BOOL          reduce using rule 83 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 83 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 83 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 83 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 83 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 83 (compound_statement_list -> .)
    K_TEXT          reduce using rule 83 (compound_statement_list -> .)
    K_END           reduce using rule 83 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 149

state 141

    (79) else_if_statement_list -> else_if_statement_list else_if_statement .

    K_EL            reduce using rule 79 (else_if_statement_list -> else_if_statement_list else_if_statement .)
    K_EF            reduce using rule 79 (else_if_statement_list -> else_if_statement_list else_if_statement .)
    K_END           reduce using rule 79 (else_if_statement_list -> else_if_statement_list else_if_statement .)


state 142

    (80) else_if_statement -> K_EF . LPAREN boolean_expression RPAREN compound_statement_list

    LPAREN          shift and go to state 150


state 143

    (15) variable_declaration -> pre_type_modifier type . ID
    (16) variable_declaration -> pre_type_modifier type . ID ASSIGN expression

    ID              shift and go to state 151


state 144

    (90) function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression . compound_statement_list K_END
    (83) compound_statement_list -> .
    (84) compound_statement_list -> . compound_statement_list compound_statement

    K_END           reduce using rule 83 (compound_statement_list -> .)
    ID              reduce using rule 83 (compound_statement_list -> .)
    K_IF            reduce using rule 83 (compound_statement_list -> .)
    K_WHILE         reduce using rule 83 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 83 (compound_statement_list -> .)
    K_BREAK         reduce using rule 83 (compound_statement_list -> .)
    K_DONE          reduce using rule 83 (compound_statement_list -> .)
    K_LIST          reduce using rule 83 (compound_statement_list -> .)
    K_DICT          reduce using rule 83 (compound_statement_list -> .)
    K_SET           reduce using rule 83 (compound_statement_list -> .)
    K_INT           reduce using rule 83 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 83 (compound_statement_list -> .)
    K_STRING        reduce using rule 83 (compound_statement_list -> .)
    K_BOOL          reduce using rule 83 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 83 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 83 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 83 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 83 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 83 (compound_statement_list -> .)
    K_TEXT          reduce using rule 83 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 152

state 145

    (89) function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN . unary_expression compound_statement_list K_END
    (40) unary_expression -> . ID
    (41) unary_expression -> . STRING
    (42) unary_expression -> . INTEGER
    (43) unary_expression -> . function_call_statement
    (44) unary_expression -> . DOUBLE
    (45) unary_expression -> . K_TRUE
    (46) unary_expression -> . K_FALSE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    ID              shift and go to state 105
    STRING          shift and go to state 100
    INTEGER         shift and go to state 103
    DOUBLE          shift and go to state 101
    K_TRUE          shift and go to state 39
    K_FALSE         shift and go to state 54

    unary_expression               shift and go to state 153
    function_call_statement        shift and go to state 102

state 146

    (91) argument_list -> argument_list COMMA argument .

    RPAREN          reduce using rule 91 (argument_list -> argument_list COMMA argument .)
    COMMA           reduce using rule 91 (argument_list -> argument_list COMMA argument .)


state 147

    (93) argument -> pre_type_modifier type ID .

    RPAREN          reduce using rule 93 (argument -> pre_type_modifier type ID .)
    COMMA           reduce using rule 93 (argument -> pre_type_modifier type ID .)


state 148

    (77) selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .

    ID              reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_IF            reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_WHILE         reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_CONTINUE      reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_BREAK         reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_DONE          reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_LIST          reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_DICT          reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_SET           reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_EL            reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_EF            reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_END           reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_INT           reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_DOUBLE        reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_STRING        reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_BOOL          reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_WINDOW        reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_SHAPE         reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_TRIANGLE      reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_RECTANGLE     reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_CIRCLE        reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_TEXT          reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    $end            reduce using rule 77 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)


state 149

    (82) else_statement -> K_EL compound_statement_list .
    (84) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (77) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (85) iteration_statement -> . K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END
    (86) jump_statement -> . K_CONTINUE
    (87) jump_statement -> . K_BREAK
    (88) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_END           reduce using rule 82 (else_statement -> K_EL compound_statement_list .)
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 20
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    jump_statement                 shift and go to state 17
    compound_statement             shift and go to state 131
    selection_statement            shift and go to state 3
    function_call_statement        shift and go to state 19
    pre_type_modifier              shift and go to state 133
    iteration_statement            shift and go to state 5
    variable_declaration           shift and go to state 6

state 150

    (80) else_if_statement -> K_EF LPAREN . boolean_expression RPAREN compound_statement_list
    (47) boolean_expression -> . boolean_expression OR boolean_term
    (48) boolean_expression -> . boolean_term
    (49) boolean_term -> . boolean_term AND boolean_factor
    (50) boolean_term -> . boolean_factor
    (51) boolean_factor -> . LPAREN boolean_expression RPAREN
    (52) boolean_factor -> . unary_expression comparator unary_expression
    (53) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (54) boolean_factor -> . string_expression comparator string_expression
    (55) boolean_factor -> . unary_expression
    (56) boolean_factor -> . NEG boolean_factor
    (40) unary_expression -> . ID
    (41) unary_expression -> . STRING
    (42) unary_expression -> . INTEGER
    (43) unary_expression -> . function_call_statement
    (44) unary_expression -> . DOUBLE
    (45) unary_expression -> . K_TRUE
    (46) unary_expression -> . K_FALSE
    (63) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (65) arithmetic_expression -> . arithmetic_term
    (36) string_expression -> . string_expression PLUS string_term
    (37) string_expression -> . STRING
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (66) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (68) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (69) arithmetic_term -> . arithmetic_factor
    (70) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (71) arithmetic_factor -> . number
    (72) arithmetic_factor -> . ID
    (73) arithmetic_factor -> . function_call_statement
    (74) arithmetic_factor -> . MINUS arithmetic_factor
    (75) number -> . INTEGER
    (76) number -> . DOUBLE

    LPAREN          shift and go to state 47
    NEG             shift and go to state 37
    ID              shift and go to state 50
    STRING          shift and go to state 46
    INTEGER         shift and go to state 43
    DOUBLE          shift and go to state 52
    K_TRUE          shift and go to state 39
    K_FALSE         shift and go to state 54
    MINUS           shift and go to state 41

    arithmetic_expression          shift and go to state 44
    string_expression              shift and go to state 45
    unary_expression               shift and go to state 36
    boolean_expression             shift and go to state 154
    arithmetic_factor              shift and go to state 42
    boolean_term                   shift and go to state 38
    function_call_statement        shift and go to state 53
    number                         shift and go to state 49
    arithmetic_term                shift and go to state 40
    boolean_factor                 shift and go to state 48

state 151

    (15) variable_declaration -> pre_type_modifier type ID .
    (16) variable_declaration -> pre_type_modifier type ID . ASSIGN expression

    ID              reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_IF            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_WHILE         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_CONTINUE      reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_BREAK         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DONE          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_LIST          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DICT          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_SET           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_INT           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DOUBLE        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_STRING        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_BOOL          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_WINDOW        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_SHAPE         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_TRIANGLE      reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_RECTANGLE     reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_CIRCLE        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_TEXT          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_EL            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_EF            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_END           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    ASSIGN          shift and go to state 96


state 152

    (90) function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list . K_END
    (84) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (77) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (85) iteration_statement -> . K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END
    (86) jump_statement -> . K_CONTINUE
    (87) jump_statement -> . K_BREAK
    (88) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_END           shift and go to state 155
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 20
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    jump_statement                 shift and go to state 17
    compound_statement             shift and go to state 131
    iteration_statement            shift and go to state 5
    selection_statement            shift and go to state 3
    function_call_statement        shift and go to state 19
    pre_type_modifier              shift and go to state 133
    variable_declaration           shift and go to state 6

state 153

    (89) function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression . compound_statement_list K_END
    (83) compound_statement_list -> .
    (84) compound_statement_list -> . compound_statement_list compound_statement

    K_END           reduce using rule 83 (compound_statement_list -> .)
    ID              reduce using rule 83 (compound_statement_list -> .)
    K_IF            reduce using rule 83 (compound_statement_list -> .)
    K_WHILE         reduce using rule 83 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 83 (compound_statement_list -> .)
    K_BREAK         reduce using rule 83 (compound_statement_list -> .)
    K_DONE          reduce using rule 83 (compound_statement_list -> .)
    K_LIST          reduce using rule 83 (compound_statement_list -> .)
    K_DICT          reduce using rule 83 (compound_statement_list -> .)
    K_SET           reduce using rule 83 (compound_statement_list -> .)
    K_INT           reduce using rule 83 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 83 (compound_statement_list -> .)
    K_STRING        reduce using rule 83 (compound_statement_list -> .)
    K_BOOL          reduce using rule 83 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 83 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 83 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 83 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 83 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 83 (compound_statement_list -> .)
    K_TEXT          reduce using rule 83 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 156

state 154

    (80) else_if_statement -> K_EF LPAREN boolean_expression . RPAREN compound_statement_list
    (47) boolean_expression -> boolean_expression . OR boolean_term

    RPAREN          shift and go to state 157
    OR              shift and go to state 94


state 155

    (90) function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .

    K_LIST          reduce using rule 90 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_DICT          reduce using rule 90 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_SET           reduce using rule 90 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    ID              reduce using rule 90 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_IF            reduce using rule 90 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_WHILE         reduce using rule 90 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_CONTINUE      reduce using rule 90 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_BREAK         reduce using rule 90 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_DONE          reduce using rule 90 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_INT           reduce using rule 90 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_DOUBLE        reduce using rule 90 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_STRING        reduce using rule 90 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_BOOL          reduce using rule 90 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_WINDOW        reduce using rule 90 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_SHAPE         reduce using rule 90 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_TRIANGLE      reduce using rule 90 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_RECTANGLE     reduce using rule 90 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_CIRCLE        reduce using rule 90 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_TEXT          reduce using rule 90 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    $end            reduce using rule 90 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)


state 156

    (89) function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list . K_END
    (84) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (77) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (85) iteration_statement -> . K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END
    (86) jump_statement -> . K_CONTINUE
    (87) jump_statement -> . K_BREAK
    (88) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_END           shift and go to state 158
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 20
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    jump_statement                 shift and go to state 17
    compound_statement             shift and go to state 131
    iteration_statement            shift and go to state 5
    selection_statement            shift and go to state 3
    function_call_statement        shift and go to state 19
    pre_type_modifier              shift and go to state 133
    variable_declaration           shift and go to state 6

state 157

    (80) else_if_statement -> K_EF LPAREN boolean_expression RPAREN . compound_statement_list
    (83) compound_statement_list -> .
    (84) compound_statement_list -> . compound_statement_list compound_statement

    ID              reduce using rule 83 (compound_statement_list -> .)
    K_IF            reduce using rule 83 (compound_statement_list -> .)
    K_WHILE         reduce using rule 83 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 83 (compound_statement_list -> .)
    K_BREAK         reduce using rule 83 (compound_statement_list -> .)
    K_DONE          reduce using rule 83 (compound_statement_list -> .)
    K_LIST          reduce using rule 83 (compound_statement_list -> .)
    K_DICT          reduce using rule 83 (compound_statement_list -> .)
    K_SET           reduce using rule 83 (compound_statement_list -> .)
    K_INT           reduce using rule 83 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 83 (compound_statement_list -> .)
    K_STRING        reduce using rule 83 (compound_statement_list -> .)
    K_BOOL          reduce using rule 83 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 83 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 83 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 83 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 83 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 83 (compound_statement_list -> .)
    K_TEXT          reduce using rule 83 (compound_statement_list -> .)
    K_EL            reduce using rule 83 (compound_statement_list -> .)
    K_EF            reduce using rule 83 (compound_statement_list -> .)
    K_END           reduce using rule 83 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 159

state 158

    (89) function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .

    K_LIST          reduce using rule 89 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_DICT          reduce using rule 89 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_SET           reduce using rule 89 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    ID              reduce using rule 89 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_IF            reduce using rule 89 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_WHILE         reduce using rule 89 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_CONTINUE      reduce using rule 89 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_BREAK         reduce using rule 89 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_DONE          reduce using rule 89 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_INT           reduce using rule 89 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_DOUBLE        reduce using rule 89 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_STRING        reduce using rule 89 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_BOOL          reduce using rule 89 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_WINDOW        reduce using rule 89 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_SHAPE         reduce using rule 89 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_TRIANGLE      reduce using rule 89 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_RECTANGLE     reduce using rule 89 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_CIRCLE        reduce using rule 89 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_TEXT          reduce using rule 89 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    $end            reduce using rule 89 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)


state 159

    (80) else_if_statement -> K_EF LPAREN boolean_expression RPAREN compound_statement_list .
    (84) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (77) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (85) iteration_statement -> . K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END
    (86) jump_statement -> . K_CONTINUE
    (87) jump_statement -> . K_BREAK
    (88) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_EL            reduce using rule 80 (else_if_statement -> K_EF LPAREN boolean_expression RPAREN compound_statement_list .)
    K_EF            reduce using rule 80 (else_if_statement -> K_EF LPAREN boolean_expression RPAREN compound_statement_list .)
    K_END           reduce using rule 80 (else_if_statement -> K_EF LPAREN boolean_expression RPAREN compound_statement_list .)
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 20
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    jump_statement                 shift and go to state 17
    compound_statement             shift and go to state 131
    selection_statement            shift and go to state 3
    function_call_statement        shift and go to state 19
    pre_type_modifier              shift and go to state 133
    iteration_statement            shift and go to state 5
    variable_declaration           shift and go to state 6
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 43 resolved using rule (unary_expression -> INTEGER)
WARNING: rejected rule (number -> INTEGER) in state 43
WARNING: reduce/reduce conflict in state 46 resolved using rule (string_expression -> STRING)
WARNING: rejected rule (unary_expression -> STRING) in state 46
WARNING: reduce/reduce conflict in state 50 resolved using rule (unary_expression -> ID)
WARNING: rejected rule (arithmetic_factor -> ID) in state 50
WARNING: reduce/reduce conflict in state 52 resolved using rule (unary_expression -> DOUBLE)
WARNING: rejected rule (number -> DOUBLE) in state 52
WARNING: reduce/reduce conflict in state 53 resolved using rule (unary_expression -> function_call_statement)
WARNING: rejected rule (arithmetic_factor -> function_call_statement) in state 53
WARNING: reduce/reduce conflict in state 57 resolved using rule (expression -> unary_expression)
WARNING: rejected rule (boolean_factor -> unary_expression) in state 57
WARNING: reduce/reduce conflict in state 60 resolved using rule (string_expression -> STRING)
WARNING: rejected rule (unary_expression -> STRING) in state 60
WARNING: reduce/reduce conflict in state 89 resolved using rule (unary_expression -> function_call_statement)
WARNING: rejected rule (arithmetic_factor -> function_call_statement) in state 89
WARNING: reduce/reduce conflict in state 91 resolved using rule (unary_expression -> ID)
WARNING: rejected rule (arithmetic_factor -> ID) in state 91
