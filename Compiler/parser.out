Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    K_NULL
    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> <empty>
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> function_declaration
Rule 5     statement -> compound_statement
Rule 6     compound_statement -> function_call_statement
Rule 7     compound_statement -> variable_declaration
Rule 8     compound_statement -> selection_statement
Rule 9     compound_statement -> iteration_statement
Rule 10    compound_statement -> jump_statement
Rule 11    function_call_statement -> ID LPAREN parameter_list RPAREN
Rule 12    function_call_statement -> ID LPAREN RPAREN
Rule 13    parameter_list -> parameter_list COMMA expression
Rule 14    parameter_list -> expression
Rule 15    variable_declaration -> pre_type_modifier type ID
Rule 16    variable_declaration -> pre_type_modifier type ID ASSIGN expression
Rule 17    variable_declaration -> ID ASSIGN expression
Rule 18    pre_type_modifier -> <empty>
Rule 19    pre_type_modifier -> K_LIST
Rule 20    pre_type_modifier -> K_DICT
Rule 21    pre_type_modifier -> K_SET
Rule 22    type -> K_INT
Rule 23    type -> K_DOUBLE
Rule 24    type -> K_STRING
Rule 25    type -> K_BOOL
Rule 26    type -> K_WINDOW
Rule 27    type -> K_SHAPE
Rule 28    type -> K_TRIANGLE
Rule 29    type -> K_RECTANGLE
Rule 30    type -> K_CIRCLE
Rule 31    type -> K_POINT
Rule 32    type -> K_TEXT
Rule 33    expression -> string_expression
Rule 34    expression -> unary_expression
Rule 35    expression -> boolean_expression
Rule 36    expression -> arithmetic_expression
Rule 37    string_expression -> string_expression PLUS string_term
Rule 38    string_expression -> string_term
Rule 39    string_term -> function_call_statement
Rule 40    string_term -> STRING
Rule 41    string_term -> ID
Rule 42    unary_expression -> ID
Rule 43    unary_expression -> STRING
Rule 44    unary_expression -> INTEGER
Rule 45    unary_expression -> function_call_statement
Rule 46    unary_expression -> DOUBLE
Rule 47    unary_expression -> K_TRUE
Rule 48    unary_expression -> K_FALSE
Rule 49    boolean_expression -> boolean_expression OR boolean_term
Rule 50    boolean_expression -> boolean_term
Rule 51    boolean_term -> boolean_term AND boolean_factor
Rule 52    boolean_term -> boolean_factor
Rule 53    boolean_factor -> LPAREN boolean_expression RPAREN
Rule 54    boolean_factor -> unary_expression comparator unary_expression
Rule 55    boolean_factor -> arithmetic_expression comparator arithmetic_expression
Rule 56    boolean_factor -> string_expression comparator string_expression
Rule 57    boolean_factor -> unary_expression
Rule 58    boolean_factor -> NEG boolean_factor
Rule 59    comparator -> GT
Rule 60    comparator -> LT
Rule 61    comparator -> GEQ
Rule 62    comparator -> LEQ
Rule 63    comparator -> EQ
Rule 64    comparator -> NEQ
Rule 65    arithmetic_expression -> arithmetic_expression PLUS arithmetic_term
Rule 66    arithmetic_expression -> arithmetic_expression MINUS arithmetic_term
Rule 67    arithmetic_expression -> arithmetic_term
Rule 68    arithmetic_term -> arithmetic_term TIMES arithmetic_factor
Rule 69    arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor
Rule 70    arithmetic_term -> arithmetic_term MOD arithmetic_factor
Rule 71    arithmetic_term -> arithmetic_factor
Rule 72    arithmetic_factor -> LPAREN arithmetic_expression RPAREN
Rule 73    arithmetic_factor -> number
Rule 74    arithmetic_factor -> ID
Rule 75    arithmetic_factor -> function_call_statement
Rule 76    arithmetic_factor -> MINUS arithmetic_factor
Rule 77    number -> INTEGER
Rule 78    number -> DOUBLE
Rule 79    selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
Rule 80    else_if_statement_list -> <empty>
Rule 81    else_if_statement_list -> else_if_statement_list else_if_statement
Rule 82    else_if_statement -> K_EF LPAREN boolean_expression RPAREN compound_statement_list
Rule 83    else_statement -> <empty>
Rule 84    else_statement -> K_EL compound_statement_list
Rule 85    compound_statement_list -> <empty>
Rule 86    compound_statement_list -> compound_statement_list compound_statement
Rule 87    iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END
Rule 88    jump_statement -> K_CONTINUE
Rule 89    jump_statement -> K_BREAK
Rule 90    jump_statement -> K_DONE
Rule 91    function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END
Rule 92    function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END
Rule 93    argument_list -> argument_list COMMA argument
Rule 94    argument_list -> argument
Rule 95    argument -> pre_type_modifier type ID

Terminals, with rules where they appear

AND                  : 51
ASSIGN               : 16 17 91 92
COMMA                : 13 93
COMMENT              : 
DIVIDE               : 69
DOUBLE               : 46 78
EQ                   : 63
GEQ                  : 61
GT                   : 59
ID                   : 11 12 15 16 17 41 42 74 91 92 95
INTEGER              : 44 77
K_BOOL               : 25
K_BREAK              : 89
K_CIRCLE             : 30
K_CONTINUE           : 88
K_DICT               : 20
K_DONE               : 90
K_DOUBLE             : 23
K_EF                 : 82
K_EL                 : 84
K_END                : 79 87 91 92
K_FALSE              : 48
K_IF                 : 79
K_INT                : 22
K_LIST               : 19
K_NULL               : 
K_POINT              : 31
K_RECTANGLE          : 29
K_SET                : 21
K_SHAPE              : 27
K_STRING             : 24
K_TEXT               : 32
K_TRIANGLE           : 28
K_TRUE               : 47
K_WHILE              : 87
K_WINDOW             : 26
LEQ                  : 62
LPAREN               : 11 12 53 72 79 82 87 91 92
LT                   : 60
MINUS                : 66 76
MOD                  : 70
NEG                  : 58
NEQ                  : 64
OR                   : 49
PLUS                 : 37 65
RPAREN               : 11 12 53 72 79 82 87 91 92
STRING               : 40 43
TIMES                : 68
error                : 

Nonterminals, with rules where they appear

argument             : 93 94
argument_list        : 91 93
arithmetic_expression : 36 55 55 65 66 72
arithmetic_factor    : 68 69 70 71 76
arithmetic_term      : 65 66 67 68 69 70
boolean_expression   : 35 49 53 79 82 87
boolean_factor       : 51 52 58
boolean_term         : 49 50 51
comparator           : 54 55 56
compound_statement   : 5 86
compound_statement_list : 79 82 84 86 87 91 92
else_if_statement    : 81
else_if_statement_list : 79 81
else_statement       : 79
expression           : 13 14 16 17
function_call_statement : 6 39 45 75
function_declaration : 4
iteration_statement  : 9
jump_statement       : 10
number               : 73
parameter_list       : 11 13
pre_type_modifier    : 15 16 91 92 95
program              : 0
selection_statement  : 8
statement            : 3
statement_list       : 1 3
string_expression    : 33 37 56 56
string_term          : 37 38
type                 : 15 16 91 92 95
unary_expression     : 34 54 54 57 91 92
variable_declaration : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> .
    (3) statement_list -> . statement_list statement

    K_LIST          reduce using rule 2 (statement_list -> .)
    K_DICT          reduce using rule 2 (statement_list -> .)
    K_SET           reduce using rule 2 (statement_list -> .)
    ID              reduce using rule 2 (statement_list -> .)
    K_IF            reduce using rule 2 (statement_list -> .)
    K_WHILE         reduce using rule 2 (statement_list -> .)
    K_CONTINUE      reduce using rule 2 (statement_list -> .)
    K_BREAK         reduce using rule 2 (statement_list -> .)
    K_DONE          reduce using rule 2 (statement_list -> .)
    K_INT           reduce using rule 2 (statement_list -> .)
    K_DOUBLE        reduce using rule 2 (statement_list -> .)
    K_STRING        reduce using rule 2 (statement_list -> .)
    K_BOOL          reduce using rule 2 (statement_list -> .)
    K_WINDOW        reduce using rule 2 (statement_list -> .)
    K_SHAPE         reduce using rule 2 (statement_list -> .)
    K_TRIANGLE      reduce using rule 2 (statement_list -> .)
    K_RECTANGLE     reduce using rule 2 (statement_list -> .)
    K_CIRCLE        reduce using rule 2 (statement_list -> .)
    K_POINT         reduce using rule 2 (statement_list -> .)
    K_TEXT          reduce using rule 2 (statement_list -> .)
    $end            reduce using rule 2 (statement_list -> .)

    statement_list                 shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . function_declaration
    (5) statement -> . compound_statement
    (91) function_declaration -> . pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END
    (92) function_declaration -> . pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (79) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (87) iteration_statement -> . K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END
    (88) jump_statement -> . K_CONTINUE
    (89) jump_statement -> . K_BREAK
    (90) jump_statement -> . K_DONE

    $end            reduce using rule 1 (program -> statement_list .)
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 20

    jump_statement                 shift and go to state 17
    function_declaration           shift and go to state 18
    compound_statement             shift and go to state 8
    iteration_statement            shift and go to state 5
    selection_statement            shift and go to state 3
    function_call_statement        shift and go to state 19
    statement                      shift and go to state 10
    pre_type_modifier              shift and go to state 14
    variable_declaration           shift and go to state 6

state 2

    (0) S' -> program .



state 3

    (8) compound_statement -> selection_statement .

    K_END           reduce using rule 8 (compound_statement -> selection_statement .)
    ID              reduce using rule 8 (compound_statement -> selection_statement .)
    K_IF            reduce using rule 8 (compound_statement -> selection_statement .)
    K_WHILE         reduce using rule 8 (compound_statement -> selection_statement .)
    K_CONTINUE      reduce using rule 8 (compound_statement -> selection_statement .)
    K_BREAK         reduce using rule 8 (compound_statement -> selection_statement .)
    K_DONE          reduce using rule 8 (compound_statement -> selection_statement .)
    K_LIST          reduce using rule 8 (compound_statement -> selection_statement .)
    K_DICT          reduce using rule 8 (compound_statement -> selection_statement .)
    K_SET           reduce using rule 8 (compound_statement -> selection_statement .)
    K_INT           reduce using rule 8 (compound_statement -> selection_statement .)
    K_DOUBLE        reduce using rule 8 (compound_statement -> selection_statement .)
    K_STRING        reduce using rule 8 (compound_statement -> selection_statement .)
    K_BOOL          reduce using rule 8 (compound_statement -> selection_statement .)
    K_WINDOW        reduce using rule 8 (compound_statement -> selection_statement .)
    K_SHAPE         reduce using rule 8 (compound_statement -> selection_statement .)
    K_TRIANGLE      reduce using rule 8 (compound_statement -> selection_statement .)
    K_RECTANGLE     reduce using rule 8 (compound_statement -> selection_statement .)
    K_CIRCLE        reduce using rule 8 (compound_statement -> selection_statement .)
    K_POINT         reduce using rule 8 (compound_statement -> selection_statement .)
    K_TEXT          reduce using rule 8 (compound_statement -> selection_statement .)
    K_EL            reduce using rule 8 (compound_statement -> selection_statement .)
    K_EF            reduce using rule 8 (compound_statement -> selection_statement .)
    $end            reduce using rule 8 (compound_statement -> selection_statement .)


state 4

    (79) selection_statement -> K_IF . LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END

    LPAREN          shift and go to state 21


state 5

    (9) compound_statement -> iteration_statement .

    K_END           reduce using rule 9 (compound_statement -> iteration_statement .)
    ID              reduce using rule 9 (compound_statement -> iteration_statement .)
    K_IF            reduce using rule 9 (compound_statement -> iteration_statement .)
    K_WHILE         reduce using rule 9 (compound_statement -> iteration_statement .)
    K_CONTINUE      reduce using rule 9 (compound_statement -> iteration_statement .)
    K_BREAK         reduce using rule 9 (compound_statement -> iteration_statement .)
    K_DONE          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_LIST          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_DICT          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_SET           reduce using rule 9 (compound_statement -> iteration_statement .)
    K_INT           reduce using rule 9 (compound_statement -> iteration_statement .)
    K_DOUBLE        reduce using rule 9 (compound_statement -> iteration_statement .)
    K_STRING        reduce using rule 9 (compound_statement -> iteration_statement .)
    K_BOOL          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_WINDOW        reduce using rule 9 (compound_statement -> iteration_statement .)
    K_SHAPE         reduce using rule 9 (compound_statement -> iteration_statement .)
    K_TRIANGLE      reduce using rule 9 (compound_statement -> iteration_statement .)
    K_RECTANGLE     reduce using rule 9 (compound_statement -> iteration_statement .)
    K_CIRCLE        reduce using rule 9 (compound_statement -> iteration_statement .)
    K_POINT         reduce using rule 9 (compound_statement -> iteration_statement .)
    K_TEXT          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_EL            reduce using rule 9 (compound_statement -> iteration_statement .)
    K_EF            reduce using rule 9 (compound_statement -> iteration_statement .)
    $end            reduce using rule 9 (compound_statement -> iteration_statement .)


state 6

    (7) compound_statement -> variable_declaration .

    K_END           reduce using rule 7 (compound_statement -> variable_declaration .)
    ID              reduce using rule 7 (compound_statement -> variable_declaration .)
    K_IF            reduce using rule 7 (compound_statement -> variable_declaration .)
    K_WHILE         reduce using rule 7 (compound_statement -> variable_declaration .)
    K_CONTINUE      reduce using rule 7 (compound_statement -> variable_declaration .)
    K_BREAK         reduce using rule 7 (compound_statement -> variable_declaration .)
    K_DONE          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_LIST          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_DICT          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_SET           reduce using rule 7 (compound_statement -> variable_declaration .)
    K_INT           reduce using rule 7 (compound_statement -> variable_declaration .)
    K_DOUBLE        reduce using rule 7 (compound_statement -> variable_declaration .)
    K_STRING        reduce using rule 7 (compound_statement -> variable_declaration .)
    K_BOOL          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_WINDOW        reduce using rule 7 (compound_statement -> variable_declaration .)
    K_SHAPE         reduce using rule 7 (compound_statement -> variable_declaration .)
    K_TRIANGLE      reduce using rule 7 (compound_statement -> variable_declaration .)
    K_RECTANGLE     reduce using rule 7 (compound_statement -> variable_declaration .)
    K_CIRCLE        reduce using rule 7 (compound_statement -> variable_declaration .)
    K_POINT         reduce using rule 7 (compound_statement -> variable_declaration .)
    K_TEXT          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_EL            reduce using rule 7 (compound_statement -> variable_declaration .)
    K_EF            reduce using rule 7 (compound_statement -> variable_declaration .)
    $end            reduce using rule 7 (compound_statement -> variable_declaration .)


state 7

    (87) iteration_statement -> K_WHILE . LPAREN boolean_expression RPAREN compound_statement_list K_END

    LPAREN          shift and go to state 22


state 8

    (5) statement -> compound_statement .

    K_LIST          reduce using rule 5 (statement -> compound_statement .)
    K_DICT          reduce using rule 5 (statement -> compound_statement .)
    K_SET           reduce using rule 5 (statement -> compound_statement .)
    ID              reduce using rule 5 (statement -> compound_statement .)
    K_IF            reduce using rule 5 (statement -> compound_statement .)
    K_WHILE         reduce using rule 5 (statement -> compound_statement .)
    K_CONTINUE      reduce using rule 5 (statement -> compound_statement .)
    K_BREAK         reduce using rule 5 (statement -> compound_statement .)
    K_DONE          reduce using rule 5 (statement -> compound_statement .)
    K_INT           reduce using rule 5 (statement -> compound_statement .)
    K_DOUBLE        reduce using rule 5 (statement -> compound_statement .)
    K_STRING        reduce using rule 5 (statement -> compound_statement .)
    K_BOOL          reduce using rule 5 (statement -> compound_statement .)
    K_WINDOW        reduce using rule 5 (statement -> compound_statement .)
    K_SHAPE         reduce using rule 5 (statement -> compound_statement .)
    K_TRIANGLE      reduce using rule 5 (statement -> compound_statement .)
    K_RECTANGLE     reduce using rule 5 (statement -> compound_statement .)
    K_CIRCLE        reduce using rule 5 (statement -> compound_statement .)
    K_POINT         reduce using rule 5 (statement -> compound_statement .)
    K_TEXT          reduce using rule 5 (statement -> compound_statement .)
    $end            reduce using rule 5 (statement -> compound_statement .)


state 9

    (21) pre_type_modifier -> K_SET .

    K_INT           reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_DOUBLE        reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_STRING        reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_BOOL          reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_WINDOW        reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_SHAPE         reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_TRIANGLE      reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_RECTANGLE     reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_CIRCLE        reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_POINT         reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_TEXT          reduce using rule 21 (pre_type_modifier -> K_SET .)


state 10

    (3) statement_list -> statement_list statement .

    K_LIST          reduce using rule 3 (statement_list -> statement_list statement .)
    K_DICT          reduce using rule 3 (statement_list -> statement_list statement .)
    K_SET           reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    K_IF            reduce using rule 3 (statement_list -> statement_list statement .)
    K_WHILE         reduce using rule 3 (statement_list -> statement_list statement .)
    K_CONTINUE      reduce using rule 3 (statement_list -> statement_list statement .)
    K_BREAK         reduce using rule 3 (statement_list -> statement_list statement .)
    K_DONE          reduce using rule 3 (statement_list -> statement_list statement .)
    K_INT           reduce using rule 3 (statement_list -> statement_list statement .)
    K_DOUBLE        reduce using rule 3 (statement_list -> statement_list statement .)
    K_STRING        reduce using rule 3 (statement_list -> statement_list statement .)
    K_BOOL          reduce using rule 3 (statement_list -> statement_list statement .)
    K_WINDOW        reduce using rule 3 (statement_list -> statement_list statement .)
    K_SHAPE         reduce using rule 3 (statement_list -> statement_list statement .)
    K_TRIANGLE      reduce using rule 3 (statement_list -> statement_list statement .)
    K_RECTANGLE     reduce using rule 3 (statement_list -> statement_list statement .)
    K_CIRCLE        reduce using rule 3 (statement_list -> statement_list statement .)
    K_POINT         reduce using rule 3 (statement_list -> statement_list statement .)
    K_TEXT          reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)


state 11

    (88) jump_statement -> K_CONTINUE .

    ID              reduce using rule 88 (jump_statement -> K_CONTINUE .)
    K_IF            reduce using rule 88 (jump_statement -> K_CONTINUE .)
    K_WHILE         reduce using rule 88 (jump_statement -> K_CONTINUE .)
    K_CONTINUE      reduce using rule 88 (jump_statement -> K_CONTINUE .)
    K_BREAK         reduce using rule 88 (jump_statement -> K_CONTINUE .)
    K_DONE          reduce using rule 88 (jump_statement -> K_CONTINUE .)
    K_LIST          reduce using rule 88 (jump_statement -> K_CONTINUE .)
    K_DICT          reduce using rule 88 (jump_statement -> K_CONTINUE .)
    K_SET           reduce using rule 88 (jump_statement -> K_CONTINUE .)
    K_INT           reduce using rule 88 (jump_statement -> K_CONTINUE .)
    K_DOUBLE        reduce using rule 88 (jump_statement -> K_CONTINUE .)
    K_STRING        reduce using rule 88 (jump_statement -> K_CONTINUE .)
    K_BOOL          reduce using rule 88 (jump_statement -> K_CONTINUE .)
    K_WINDOW        reduce using rule 88 (jump_statement -> K_CONTINUE .)
    K_SHAPE         reduce using rule 88 (jump_statement -> K_CONTINUE .)
    K_TRIANGLE      reduce using rule 88 (jump_statement -> K_CONTINUE .)
    K_RECTANGLE     reduce using rule 88 (jump_statement -> K_CONTINUE .)
    K_CIRCLE        reduce using rule 88 (jump_statement -> K_CONTINUE .)
    K_POINT         reduce using rule 88 (jump_statement -> K_CONTINUE .)
    K_TEXT          reduce using rule 88 (jump_statement -> K_CONTINUE .)
    K_EL            reduce using rule 88 (jump_statement -> K_CONTINUE .)
    K_EF            reduce using rule 88 (jump_statement -> K_CONTINUE .)
    K_END           reduce using rule 88 (jump_statement -> K_CONTINUE .)
    $end            reduce using rule 88 (jump_statement -> K_CONTINUE .)


state 12

    (89) jump_statement -> K_BREAK .

    ID              reduce using rule 89 (jump_statement -> K_BREAK .)
    K_IF            reduce using rule 89 (jump_statement -> K_BREAK .)
    K_WHILE         reduce using rule 89 (jump_statement -> K_BREAK .)
    K_CONTINUE      reduce using rule 89 (jump_statement -> K_BREAK .)
    K_BREAK         reduce using rule 89 (jump_statement -> K_BREAK .)
    K_DONE          reduce using rule 89 (jump_statement -> K_BREAK .)
    K_LIST          reduce using rule 89 (jump_statement -> K_BREAK .)
    K_DICT          reduce using rule 89 (jump_statement -> K_BREAK .)
    K_SET           reduce using rule 89 (jump_statement -> K_BREAK .)
    K_INT           reduce using rule 89 (jump_statement -> K_BREAK .)
    K_DOUBLE        reduce using rule 89 (jump_statement -> K_BREAK .)
    K_STRING        reduce using rule 89 (jump_statement -> K_BREAK .)
    K_BOOL          reduce using rule 89 (jump_statement -> K_BREAK .)
    K_WINDOW        reduce using rule 89 (jump_statement -> K_BREAK .)
    K_SHAPE         reduce using rule 89 (jump_statement -> K_BREAK .)
    K_TRIANGLE      reduce using rule 89 (jump_statement -> K_BREAK .)
    K_RECTANGLE     reduce using rule 89 (jump_statement -> K_BREAK .)
    K_CIRCLE        reduce using rule 89 (jump_statement -> K_BREAK .)
    K_POINT         reduce using rule 89 (jump_statement -> K_BREAK .)
    K_TEXT          reduce using rule 89 (jump_statement -> K_BREAK .)
    K_EL            reduce using rule 89 (jump_statement -> K_BREAK .)
    K_EF            reduce using rule 89 (jump_statement -> K_BREAK .)
    K_END           reduce using rule 89 (jump_statement -> K_BREAK .)
    $end            reduce using rule 89 (jump_statement -> K_BREAK .)


state 13

    (19) pre_type_modifier -> K_LIST .

    K_INT           reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_DOUBLE        reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_STRING        reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_BOOL          reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_WINDOW        reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_SHAPE         reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_TRIANGLE      reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_RECTANGLE     reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_CIRCLE        reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_POINT         reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_TEXT          reduce using rule 19 (pre_type_modifier -> K_LIST .)


state 14

    (91) function_declaration -> pre_type_modifier . type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END
    (92) function_declaration -> pre_type_modifier . type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END
    (15) variable_declaration -> pre_type_modifier . type ID
    (16) variable_declaration -> pre_type_modifier . type ID ASSIGN expression
    (22) type -> . K_INT
    (23) type -> . K_DOUBLE
    (24) type -> . K_STRING
    (25) type -> . K_BOOL
    (26) type -> . K_WINDOW
    (27) type -> . K_SHAPE
    (28) type -> . K_TRIANGLE
    (29) type -> . K_RECTANGLE
    (30) type -> . K_CIRCLE
    (31) type -> . K_POINT
    (32) type -> . K_TEXT

    K_INT           shift and go to state 30
    K_DOUBLE        shift and go to state 23
    K_STRING        shift and go to state 24
    K_BOOL          shift and go to state 31
    K_WINDOW        shift and go to state 34
    K_SHAPE         shift and go to state 27
    K_TRIANGLE      shift and go to state 25
    K_RECTANGLE     shift and go to state 33
    K_CIRCLE        shift and go to state 26
    K_POINT         shift and go to state 29
    K_TEXT          shift and go to state 28

    type                           shift and go to state 32

state 15

    (20) pre_type_modifier -> K_DICT .

    K_INT           reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_DOUBLE        reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_STRING        reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_BOOL          reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_WINDOW        reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_SHAPE         reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_TRIANGLE      reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_RECTANGLE     reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_CIRCLE        reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_POINT         reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_TEXT          reduce using rule 20 (pre_type_modifier -> K_DICT .)


state 16

    (11) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (12) function_call_statement -> ID . LPAREN RPAREN
    (17) variable_declaration -> ID . ASSIGN expression

    LPAREN          shift and go to state 36
    ASSIGN          shift and go to state 35


state 17

    (10) compound_statement -> jump_statement .

    K_END           reduce using rule 10 (compound_statement -> jump_statement .)
    ID              reduce using rule 10 (compound_statement -> jump_statement .)
    K_IF            reduce using rule 10 (compound_statement -> jump_statement .)
    K_WHILE         reduce using rule 10 (compound_statement -> jump_statement .)
    K_CONTINUE      reduce using rule 10 (compound_statement -> jump_statement .)
    K_BREAK         reduce using rule 10 (compound_statement -> jump_statement .)
    K_DONE          reduce using rule 10 (compound_statement -> jump_statement .)
    K_LIST          reduce using rule 10 (compound_statement -> jump_statement .)
    K_DICT          reduce using rule 10 (compound_statement -> jump_statement .)
    K_SET           reduce using rule 10 (compound_statement -> jump_statement .)
    K_INT           reduce using rule 10 (compound_statement -> jump_statement .)
    K_DOUBLE        reduce using rule 10 (compound_statement -> jump_statement .)
    K_STRING        reduce using rule 10 (compound_statement -> jump_statement .)
    K_BOOL          reduce using rule 10 (compound_statement -> jump_statement .)
    K_WINDOW        reduce using rule 10 (compound_statement -> jump_statement .)
    K_SHAPE         reduce using rule 10 (compound_statement -> jump_statement .)
    K_TRIANGLE      reduce using rule 10 (compound_statement -> jump_statement .)
    K_RECTANGLE     reduce using rule 10 (compound_statement -> jump_statement .)
    K_CIRCLE        reduce using rule 10 (compound_statement -> jump_statement .)
    K_POINT         reduce using rule 10 (compound_statement -> jump_statement .)
    K_TEXT          reduce using rule 10 (compound_statement -> jump_statement .)
    K_EL            reduce using rule 10 (compound_statement -> jump_statement .)
    K_EF            reduce using rule 10 (compound_statement -> jump_statement .)
    $end            reduce using rule 10 (compound_statement -> jump_statement .)


state 18

    (4) statement -> function_declaration .

    K_LIST          reduce using rule 4 (statement -> function_declaration .)
    K_DICT          reduce using rule 4 (statement -> function_declaration .)
    K_SET           reduce using rule 4 (statement -> function_declaration .)
    ID              reduce using rule 4 (statement -> function_declaration .)
    K_IF            reduce using rule 4 (statement -> function_declaration .)
    K_WHILE         reduce using rule 4 (statement -> function_declaration .)
    K_CONTINUE      reduce using rule 4 (statement -> function_declaration .)
    K_BREAK         reduce using rule 4 (statement -> function_declaration .)
    K_DONE          reduce using rule 4 (statement -> function_declaration .)
    K_INT           reduce using rule 4 (statement -> function_declaration .)
    K_DOUBLE        reduce using rule 4 (statement -> function_declaration .)
    K_STRING        reduce using rule 4 (statement -> function_declaration .)
    K_BOOL          reduce using rule 4 (statement -> function_declaration .)
    K_WINDOW        reduce using rule 4 (statement -> function_declaration .)
    K_SHAPE         reduce using rule 4 (statement -> function_declaration .)
    K_TRIANGLE      reduce using rule 4 (statement -> function_declaration .)
    K_RECTANGLE     reduce using rule 4 (statement -> function_declaration .)
    K_CIRCLE        reduce using rule 4 (statement -> function_declaration .)
    K_POINT         reduce using rule 4 (statement -> function_declaration .)
    K_TEXT          reduce using rule 4 (statement -> function_declaration .)
    $end            reduce using rule 4 (statement -> function_declaration .)


state 19

    (6) compound_statement -> function_call_statement .

    K_END           reduce using rule 6 (compound_statement -> function_call_statement .)
    ID              reduce using rule 6 (compound_statement -> function_call_statement .)
    K_IF            reduce using rule 6 (compound_statement -> function_call_statement .)
    K_WHILE         reduce using rule 6 (compound_statement -> function_call_statement .)
    K_CONTINUE      reduce using rule 6 (compound_statement -> function_call_statement .)
    K_BREAK         reduce using rule 6 (compound_statement -> function_call_statement .)
    K_DONE          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_LIST          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_DICT          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_SET           reduce using rule 6 (compound_statement -> function_call_statement .)
    K_INT           reduce using rule 6 (compound_statement -> function_call_statement .)
    K_DOUBLE        reduce using rule 6 (compound_statement -> function_call_statement .)
    K_STRING        reduce using rule 6 (compound_statement -> function_call_statement .)
    K_BOOL          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_WINDOW        reduce using rule 6 (compound_statement -> function_call_statement .)
    K_SHAPE         reduce using rule 6 (compound_statement -> function_call_statement .)
    K_TRIANGLE      reduce using rule 6 (compound_statement -> function_call_statement .)
    K_RECTANGLE     reduce using rule 6 (compound_statement -> function_call_statement .)
    K_CIRCLE        reduce using rule 6 (compound_statement -> function_call_statement .)
    K_POINT         reduce using rule 6 (compound_statement -> function_call_statement .)
    K_TEXT          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_EL            reduce using rule 6 (compound_statement -> function_call_statement .)
    K_EF            reduce using rule 6 (compound_statement -> function_call_statement .)
    $end            reduce using rule 6 (compound_statement -> function_call_statement .)


state 20

    (90) jump_statement -> K_DONE .

    ID              reduce using rule 90 (jump_statement -> K_DONE .)
    K_IF            reduce using rule 90 (jump_statement -> K_DONE .)
    K_WHILE         reduce using rule 90 (jump_statement -> K_DONE .)
    K_CONTINUE      reduce using rule 90 (jump_statement -> K_DONE .)
    K_BREAK         reduce using rule 90 (jump_statement -> K_DONE .)
    K_DONE          reduce using rule 90 (jump_statement -> K_DONE .)
    K_LIST          reduce using rule 90 (jump_statement -> K_DONE .)
    K_DICT          reduce using rule 90 (jump_statement -> K_DONE .)
    K_SET           reduce using rule 90 (jump_statement -> K_DONE .)
    K_INT           reduce using rule 90 (jump_statement -> K_DONE .)
    K_DOUBLE        reduce using rule 90 (jump_statement -> K_DONE .)
    K_STRING        reduce using rule 90 (jump_statement -> K_DONE .)
    K_BOOL          reduce using rule 90 (jump_statement -> K_DONE .)
    K_WINDOW        reduce using rule 90 (jump_statement -> K_DONE .)
    K_SHAPE         reduce using rule 90 (jump_statement -> K_DONE .)
    K_TRIANGLE      reduce using rule 90 (jump_statement -> K_DONE .)
    K_RECTANGLE     reduce using rule 90 (jump_statement -> K_DONE .)
    K_CIRCLE        reduce using rule 90 (jump_statement -> K_DONE .)
    K_POINT         reduce using rule 90 (jump_statement -> K_DONE .)
    K_TEXT          reduce using rule 90 (jump_statement -> K_DONE .)
    K_EL            reduce using rule 90 (jump_statement -> K_DONE .)
    K_EF            reduce using rule 90 (jump_statement -> K_DONE .)
    K_END           reduce using rule 90 (jump_statement -> K_DONE .)
    $end            reduce using rule 90 (jump_statement -> K_DONE .)


state 21

    (79) selection_statement -> K_IF LPAREN . boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (49) boolean_expression -> . boolean_expression OR boolean_term
    (50) boolean_expression -> . boolean_term
    (51) boolean_term -> . boolean_term AND boolean_factor
    (52) boolean_term -> . boolean_factor
    (53) boolean_factor -> . LPAREN boolean_expression RPAREN
    (54) boolean_factor -> . unary_expression comparator unary_expression
    (55) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (56) boolean_factor -> . string_expression comparator string_expression
    (57) boolean_factor -> . unary_expression
    (58) boolean_factor -> . NEG boolean_factor
    (42) unary_expression -> . ID
    (43) unary_expression -> . STRING
    (44) unary_expression -> . INTEGER
    (45) unary_expression -> . function_call_statement
    (46) unary_expression -> . DOUBLE
    (47) unary_expression -> . K_TRUE
    (48) unary_expression -> . K_FALSE
    (65) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (66) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (67) arithmetic_expression -> . arithmetic_term
    (37) string_expression -> . string_expression PLUS string_term
    (38) string_expression -> . string_term
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (68) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (69) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (70) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (71) arithmetic_term -> . arithmetic_factor
    (39) string_term -> . function_call_statement
    (40) string_term -> . STRING
    (41) string_term -> . ID
    (72) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (73) arithmetic_factor -> . number
    (74) arithmetic_factor -> . ID
    (75) arithmetic_factor -> . function_call_statement
    (76) arithmetic_factor -> . MINUS arithmetic_factor
    (77) number -> . INTEGER
    (78) number -> . DOUBLE

    LPAREN          shift and go to state 49
    NEG             shift and go to state 38
    ID              shift and go to state 52
    STRING          shift and go to state 47
    INTEGER         shift and go to state 44
    DOUBLE          shift and go to state 54
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 56
    MINUS           shift and go to state 42

    arithmetic_expression          shift and go to state 45
    string_expression              shift and go to state 46
    unary_expression               shift and go to state 37
    boolean_expression             shift and go to state 53
    arithmetic_factor              shift and go to state 43
    boolean_term                   shift and go to state 39
    function_call_statement        shift and go to state 55
    number                         shift and go to state 51
    string_term                    shift and go to state 48
    arithmetic_term                shift and go to state 41
    boolean_factor                 shift and go to state 50

state 22

    (87) iteration_statement -> K_WHILE LPAREN . boolean_expression RPAREN compound_statement_list K_END
    (49) boolean_expression -> . boolean_expression OR boolean_term
    (50) boolean_expression -> . boolean_term
    (51) boolean_term -> . boolean_term AND boolean_factor
    (52) boolean_term -> . boolean_factor
    (53) boolean_factor -> . LPAREN boolean_expression RPAREN
    (54) boolean_factor -> . unary_expression comparator unary_expression
    (55) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (56) boolean_factor -> . string_expression comparator string_expression
    (57) boolean_factor -> . unary_expression
    (58) boolean_factor -> . NEG boolean_factor
    (42) unary_expression -> . ID
    (43) unary_expression -> . STRING
    (44) unary_expression -> . INTEGER
    (45) unary_expression -> . function_call_statement
    (46) unary_expression -> . DOUBLE
    (47) unary_expression -> . K_TRUE
    (48) unary_expression -> . K_FALSE
    (65) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (66) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (67) arithmetic_expression -> . arithmetic_term
    (37) string_expression -> . string_expression PLUS string_term
    (38) string_expression -> . string_term
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (68) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (69) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (70) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (71) arithmetic_term -> . arithmetic_factor
    (39) string_term -> . function_call_statement
    (40) string_term -> . STRING
    (41) string_term -> . ID
    (72) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (73) arithmetic_factor -> . number
    (74) arithmetic_factor -> . ID
    (75) arithmetic_factor -> . function_call_statement
    (76) arithmetic_factor -> . MINUS arithmetic_factor
    (77) number -> . INTEGER
    (78) number -> . DOUBLE

    LPAREN          shift and go to state 49
    NEG             shift and go to state 38
    ID              shift and go to state 52
    STRING          shift and go to state 47
    INTEGER         shift and go to state 44
    DOUBLE          shift and go to state 54
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 56
    MINUS           shift and go to state 42

    arithmetic_expression          shift and go to state 45
    string_expression              shift and go to state 46
    unary_expression               shift and go to state 37
    boolean_expression             shift and go to state 57
    arithmetic_factor              shift and go to state 43
    boolean_term                   shift and go to state 39
    function_call_statement        shift and go to state 55
    number                         shift and go to state 51
    string_term                    shift and go to state 48
    arithmetic_term                shift and go to state 41
    boolean_factor                 shift and go to state 50

state 23

    (23) type -> K_DOUBLE .

    ID              reduce using rule 23 (type -> K_DOUBLE .)


state 24

    (24) type -> K_STRING .

    ID              reduce using rule 24 (type -> K_STRING .)


state 25

    (28) type -> K_TRIANGLE .

    ID              reduce using rule 28 (type -> K_TRIANGLE .)


state 26

    (30) type -> K_CIRCLE .

    ID              reduce using rule 30 (type -> K_CIRCLE .)


state 27

    (27) type -> K_SHAPE .

    ID              reduce using rule 27 (type -> K_SHAPE .)


state 28

    (32) type -> K_TEXT .

    ID              reduce using rule 32 (type -> K_TEXT .)


state 29

    (31) type -> K_POINT .

    ID              reduce using rule 31 (type -> K_POINT .)


state 30

    (22) type -> K_INT .

    ID              reduce using rule 22 (type -> K_INT .)


state 31

    (25) type -> K_BOOL .

    ID              reduce using rule 25 (type -> K_BOOL .)


state 32

    (91) function_declaration -> pre_type_modifier type . ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END
    (92) function_declaration -> pre_type_modifier type . ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END
    (15) variable_declaration -> pre_type_modifier type . ID
    (16) variable_declaration -> pre_type_modifier type . ID ASSIGN expression

    ID              shift and go to state 58


state 33

    (29) type -> K_RECTANGLE .

    ID              reduce using rule 29 (type -> K_RECTANGLE .)


state 34

    (26) type -> K_WINDOW .

    ID              reduce using rule 26 (type -> K_WINDOW .)


state 35

    (17) variable_declaration -> ID ASSIGN . expression
    (33) expression -> . string_expression
    (34) expression -> . unary_expression
    (35) expression -> . boolean_expression
    (36) expression -> . arithmetic_expression
    (37) string_expression -> . string_expression PLUS string_term
    (38) string_expression -> . string_term
    (42) unary_expression -> . ID
    (43) unary_expression -> . STRING
    (44) unary_expression -> . INTEGER
    (45) unary_expression -> . function_call_statement
    (46) unary_expression -> . DOUBLE
    (47) unary_expression -> . K_TRUE
    (48) unary_expression -> . K_FALSE
    (49) boolean_expression -> . boolean_expression OR boolean_term
    (50) boolean_expression -> . boolean_term
    (65) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (66) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (67) arithmetic_expression -> . arithmetic_term
    (39) string_term -> . function_call_statement
    (40) string_term -> . STRING
    (41) string_term -> . ID
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (51) boolean_term -> . boolean_term AND boolean_factor
    (52) boolean_term -> . boolean_factor
    (68) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (69) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (70) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (71) arithmetic_term -> . arithmetic_factor
    (53) boolean_factor -> . LPAREN boolean_expression RPAREN
    (54) boolean_factor -> . unary_expression comparator unary_expression
    (55) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (56) boolean_factor -> . string_expression comparator string_expression
    (57) boolean_factor -> . unary_expression
    (58) boolean_factor -> . NEG boolean_factor
    (72) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (73) arithmetic_factor -> . number
    (74) arithmetic_factor -> . ID
    (75) arithmetic_factor -> . function_call_statement
    (76) arithmetic_factor -> . MINUS arithmetic_factor
    (77) number -> . INTEGER
    (78) number -> . DOUBLE

    ID              shift and go to state 62
    STRING          shift and go to state 47
    INTEGER         shift and go to state 44
    DOUBLE          shift and go to state 54
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 56
    LPAREN          shift and go to state 49
    NEG             shift and go to state 38
    MINUS           shift and go to state 42

    arithmetic_expression          shift and go to state 60
    string_expression              shift and go to state 61
    number                         shift and go to state 51
    unary_expression               shift and go to state 59
    boolean_expression             shift and go to state 63
    arithmetic_factor              shift and go to state 43
    boolean_term                   shift and go to state 39
    function_call_statement        shift and go to state 55
    string_term                    shift and go to state 48
    arithmetic_term                shift and go to state 41
    boolean_factor                 shift and go to state 50
    expression                     shift and go to state 64

state 36

    (11) function_call_statement -> ID LPAREN . parameter_list RPAREN
    (12) function_call_statement -> ID LPAREN . RPAREN
    (13) parameter_list -> . parameter_list COMMA expression
    (14) parameter_list -> . expression
    (33) expression -> . string_expression
    (34) expression -> . unary_expression
    (35) expression -> . boolean_expression
    (36) expression -> . arithmetic_expression
    (37) string_expression -> . string_expression PLUS string_term
    (38) string_expression -> . string_term
    (42) unary_expression -> . ID
    (43) unary_expression -> . STRING
    (44) unary_expression -> . INTEGER
    (45) unary_expression -> . function_call_statement
    (46) unary_expression -> . DOUBLE
    (47) unary_expression -> . K_TRUE
    (48) unary_expression -> . K_FALSE
    (49) boolean_expression -> . boolean_expression OR boolean_term
    (50) boolean_expression -> . boolean_term
    (65) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (66) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (67) arithmetic_expression -> . arithmetic_term
    (39) string_term -> . function_call_statement
    (40) string_term -> . STRING
    (41) string_term -> . ID
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (51) boolean_term -> . boolean_term AND boolean_factor
    (52) boolean_term -> . boolean_factor
    (68) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (69) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (70) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (71) arithmetic_term -> . arithmetic_factor
    (53) boolean_factor -> . LPAREN boolean_expression RPAREN
    (54) boolean_factor -> . unary_expression comparator unary_expression
    (55) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (56) boolean_factor -> . string_expression comparator string_expression
    (57) boolean_factor -> . unary_expression
    (58) boolean_factor -> . NEG boolean_factor
    (72) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (73) arithmetic_factor -> . number
    (74) arithmetic_factor -> . ID
    (75) arithmetic_factor -> . function_call_statement
    (76) arithmetic_factor -> . MINUS arithmetic_factor
    (77) number -> . INTEGER
    (78) number -> . DOUBLE

    RPAREN          shift and go to state 65
    ID              shift and go to state 62
    STRING          shift and go to state 47
    INTEGER         shift and go to state 44
    DOUBLE          shift and go to state 54
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 56
    LPAREN          shift and go to state 49
    NEG             shift and go to state 38
    MINUS           shift and go to state 42

    arithmetic_expression          shift and go to state 60
    string_expression              shift and go to state 61
    number                         shift and go to state 51
    parameter_list                 shift and go to state 66
    unary_expression               shift and go to state 59
    boolean_expression             shift and go to state 63
    arithmetic_factor              shift and go to state 43
    boolean_term                   shift and go to state 39
    function_call_statement        shift and go to state 55
    string_term                    shift and go to state 48
    arithmetic_term                shift and go to state 41
    boolean_factor                 shift and go to state 50
    expression                     shift and go to state 67

state 37

    (54) boolean_factor -> unary_expression . comparator unary_expression
    (57) boolean_factor -> unary_expression .
    (59) comparator -> . GT
    (60) comparator -> . LT
    (61) comparator -> . GEQ
    (62) comparator -> . LEQ
    (63) comparator -> . EQ
    (64) comparator -> . NEQ

    AND             reduce using rule 57 (boolean_factor -> unary_expression .)
    RPAREN          reduce using rule 57 (boolean_factor -> unary_expression .)
    OR              reduce using rule 57 (boolean_factor -> unary_expression .)
    K_LIST          reduce using rule 57 (boolean_factor -> unary_expression .)
    K_DICT          reduce using rule 57 (boolean_factor -> unary_expression .)
    K_SET           reduce using rule 57 (boolean_factor -> unary_expression .)
    ID              reduce using rule 57 (boolean_factor -> unary_expression .)
    K_IF            reduce using rule 57 (boolean_factor -> unary_expression .)
    K_WHILE         reduce using rule 57 (boolean_factor -> unary_expression .)
    K_CONTINUE      reduce using rule 57 (boolean_factor -> unary_expression .)
    K_BREAK         reduce using rule 57 (boolean_factor -> unary_expression .)
    K_DONE          reduce using rule 57 (boolean_factor -> unary_expression .)
    K_INT           reduce using rule 57 (boolean_factor -> unary_expression .)
    K_DOUBLE        reduce using rule 57 (boolean_factor -> unary_expression .)
    K_STRING        reduce using rule 57 (boolean_factor -> unary_expression .)
    K_BOOL          reduce using rule 57 (boolean_factor -> unary_expression .)
    K_WINDOW        reduce using rule 57 (boolean_factor -> unary_expression .)
    K_SHAPE         reduce using rule 57 (boolean_factor -> unary_expression .)
    K_TRIANGLE      reduce using rule 57 (boolean_factor -> unary_expression .)
    K_RECTANGLE     reduce using rule 57 (boolean_factor -> unary_expression .)
    K_CIRCLE        reduce using rule 57 (boolean_factor -> unary_expression .)
    K_POINT         reduce using rule 57 (boolean_factor -> unary_expression .)
    K_TEXT          reduce using rule 57 (boolean_factor -> unary_expression .)
    $end            reduce using rule 57 (boolean_factor -> unary_expression .)
    K_EL            reduce using rule 57 (boolean_factor -> unary_expression .)
    K_EF            reduce using rule 57 (boolean_factor -> unary_expression .)
    K_END           reduce using rule 57 (boolean_factor -> unary_expression .)
    COMMA           reduce using rule 57 (boolean_factor -> unary_expression .)
    GT              shift and go to state 69
    LT              shift and go to state 72
    GEQ             shift and go to state 68
    LEQ             shift and go to state 71
    EQ              shift and go to state 73
    NEQ             shift and go to state 74

    comparator                     shift and go to state 70

state 38

    (58) boolean_factor -> NEG . boolean_factor
    (53) boolean_factor -> . LPAREN boolean_expression RPAREN
    (54) boolean_factor -> . unary_expression comparator unary_expression
    (55) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (56) boolean_factor -> . string_expression comparator string_expression
    (57) boolean_factor -> . unary_expression
    (58) boolean_factor -> . NEG boolean_factor
    (42) unary_expression -> . ID
    (43) unary_expression -> . STRING
    (44) unary_expression -> . INTEGER
    (45) unary_expression -> . function_call_statement
    (46) unary_expression -> . DOUBLE
    (47) unary_expression -> . K_TRUE
    (48) unary_expression -> . K_FALSE
    (65) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (66) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (67) arithmetic_expression -> . arithmetic_term
    (37) string_expression -> . string_expression PLUS string_term
    (38) string_expression -> . string_term
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (68) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (69) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (70) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (71) arithmetic_term -> . arithmetic_factor
    (39) string_term -> . function_call_statement
    (40) string_term -> . STRING
    (41) string_term -> . ID
    (72) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (73) arithmetic_factor -> . number
    (74) arithmetic_factor -> . ID
    (75) arithmetic_factor -> . function_call_statement
    (76) arithmetic_factor -> . MINUS arithmetic_factor
    (77) number -> . INTEGER
    (78) number -> . DOUBLE

    LPAREN          shift and go to state 49
    NEG             shift and go to state 38
    ID              shift and go to state 52
    STRING          shift and go to state 47
    INTEGER         shift and go to state 44
    DOUBLE          shift and go to state 54
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 56
    MINUS           shift and go to state 42

    arithmetic_expression          shift and go to state 45
    string_expression              shift and go to state 46
    unary_expression               shift and go to state 37
    arithmetic_factor              shift and go to state 43
    function_call_statement        shift and go to state 55
    number                         shift and go to state 51
    string_term                    shift and go to state 48
    arithmetic_term                shift and go to state 41
    boolean_factor                 shift and go to state 75

state 39

    (50) boolean_expression -> boolean_term .
    (51) boolean_term -> boolean_term . AND boolean_factor

    RPAREN          reduce using rule 50 (boolean_expression -> boolean_term .)
    OR              reduce using rule 50 (boolean_expression -> boolean_term .)
    K_LIST          reduce using rule 50 (boolean_expression -> boolean_term .)
    K_DICT          reduce using rule 50 (boolean_expression -> boolean_term .)
    K_SET           reduce using rule 50 (boolean_expression -> boolean_term .)
    ID              reduce using rule 50 (boolean_expression -> boolean_term .)
    K_IF            reduce using rule 50 (boolean_expression -> boolean_term .)
    K_WHILE         reduce using rule 50 (boolean_expression -> boolean_term .)
    K_CONTINUE      reduce using rule 50 (boolean_expression -> boolean_term .)
    K_BREAK         reduce using rule 50 (boolean_expression -> boolean_term .)
    K_DONE          reduce using rule 50 (boolean_expression -> boolean_term .)
    K_INT           reduce using rule 50 (boolean_expression -> boolean_term .)
    K_DOUBLE        reduce using rule 50 (boolean_expression -> boolean_term .)
    K_STRING        reduce using rule 50 (boolean_expression -> boolean_term .)
    K_BOOL          reduce using rule 50 (boolean_expression -> boolean_term .)
    K_WINDOW        reduce using rule 50 (boolean_expression -> boolean_term .)
    K_SHAPE         reduce using rule 50 (boolean_expression -> boolean_term .)
    K_TRIANGLE      reduce using rule 50 (boolean_expression -> boolean_term .)
    K_RECTANGLE     reduce using rule 50 (boolean_expression -> boolean_term .)
    K_CIRCLE        reduce using rule 50 (boolean_expression -> boolean_term .)
    K_POINT         reduce using rule 50 (boolean_expression -> boolean_term .)
    K_TEXT          reduce using rule 50 (boolean_expression -> boolean_term .)
    $end            reduce using rule 50 (boolean_expression -> boolean_term .)
    K_EL            reduce using rule 50 (boolean_expression -> boolean_term .)
    K_EF            reduce using rule 50 (boolean_expression -> boolean_term .)
    K_END           reduce using rule 50 (boolean_expression -> boolean_term .)
    COMMA           reduce using rule 50 (boolean_expression -> boolean_term .)
    AND             shift and go to state 76


state 40

    (47) unary_expression -> K_TRUE .

    GT              reduce using rule 47 (unary_expression -> K_TRUE .)
    LT              reduce using rule 47 (unary_expression -> K_TRUE .)
    GEQ             reduce using rule 47 (unary_expression -> K_TRUE .)
    LEQ             reduce using rule 47 (unary_expression -> K_TRUE .)
    EQ              reduce using rule 47 (unary_expression -> K_TRUE .)
    NEQ             reduce using rule 47 (unary_expression -> K_TRUE .)
    AND             reduce using rule 47 (unary_expression -> K_TRUE .)
    RPAREN          reduce using rule 47 (unary_expression -> K_TRUE .)
    OR              reduce using rule 47 (unary_expression -> K_TRUE .)
    K_LIST          reduce using rule 47 (unary_expression -> K_TRUE .)
    K_DICT          reduce using rule 47 (unary_expression -> K_TRUE .)
    K_SET           reduce using rule 47 (unary_expression -> K_TRUE .)
    ID              reduce using rule 47 (unary_expression -> K_TRUE .)
    K_IF            reduce using rule 47 (unary_expression -> K_TRUE .)
    K_WHILE         reduce using rule 47 (unary_expression -> K_TRUE .)
    K_CONTINUE      reduce using rule 47 (unary_expression -> K_TRUE .)
    K_BREAK         reduce using rule 47 (unary_expression -> K_TRUE .)
    K_DONE          reduce using rule 47 (unary_expression -> K_TRUE .)
    K_INT           reduce using rule 47 (unary_expression -> K_TRUE .)
    K_DOUBLE        reduce using rule 47 (unary_expression -> K_TRUE .)
    K_STRING        reduce using rule 47 (unary_expression -> K_TRUE .)
    K_BOOL          reduce using rule 47 (unary_expression -> K_TRUE .)
    K_WINDOW        reduce using rule 47 (unary_expression -> K_TRUE .)
    K_SHAPE         reduce using rule 47 (unary_expression -> K_TRUE .)
    K_TRIANGLE      reduce using rule 47 (unary_expression -> K_TRUE .)
    K_RECTANGLE     reduce using rule 47 (unary_expression -> K_TRUE .)
    K_CIRCLE        reduce using rule 47 (unary_expression -> K_TRUE .)
    K_POINT         reduce using rule 47 (unary_expression -> K_TRUE .)
    K_TEXT          reduce using rule 47 (unary_expression -> K_TRUE .)
    $end            reduce using rule 47 (unary_expression -> K_TRUE .)
    K_EL            reduce using rule 47 (unary_expression -> K_TRUE .)
    K_EF            reduce using rule 47 (unary_expression -> K_TRUE .)
    K_END           reduce using rule 47 (unary_expression -> K_TRUE .)
    COMMA           reduce using rule 47 (unary_expression -> K_TRUE .)


state 41

    (67) arithmetic_expression -> arithmetic_term .
    (68) arithmetic_term -> arithmetic_term . TIMES arithmetic_factor
    (69) arithmetic_term -> arithmetic_term . DIVIDE arithmetic_factor
    (70) arithmetic_term -> arithmetic_term . MOD arithmetic_factor

    PLUS            reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    MINUS           reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    GT              reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    LT              reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    GEQ             reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    LEQ             reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    EQ              reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    NEQ             reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    K_LIST          reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    K_DICT          reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    K_SET           reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    ID              reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    K_IF            reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    K_WHILE         reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    K_CONTINUE      reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    K_BREAK         reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    K_DONE          reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    K_INT           reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    K_DOUBLE        reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    K_STRING        reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    K_BOOL          reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    K_WINDOW        reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    K_SHAPE         reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    K_TRIANGLE      reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    K_RECTANGLE     reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    K_CIRCLE        reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    K_POINT         reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    K_TEXT          reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    $end            reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    K_EL            reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    K_EF            reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    K_END           reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    RPAREN          reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    AND             reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    OR              reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    COMMA           reduce using rule 67 (arithmetic_expression -> arithmetic_term .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 78
    MOD             shift and go to state 77


state 42

    (76) arithmetic_factor -> MINUS . arithmetic_factor
    (72) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (73) arithmetic_factor -> . number
    (74) arithmetic_factor -> . ID
    (75) arithmetic_factor -> . function_call_statement
    (76) arithmetic_factor -> . MINUS arithmetic_factor
    (77) number -> . INTEGER
    (78) number -> . DOUBLE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 84
    ID              shift and go to state 83
    MINUS           shift and go to state 42
    INTEGER         shift and go to state 85
    DOUBLE          shift and go to state 81

    number                         shift and go to state 51
    function_call_statement        shift and go to state 82
    arithmetic_factor              shift and go to state 80

state 43

    (71) arithmetic_term -> arithmetic_factor .

    TIMES           reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    DIVIDE          reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    MOD             reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    PLUS            reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    MINUS           reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    GT              reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    LT              reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    GEQ             reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    LEQ             reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    EQ              reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    NEQ             reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    K_LIST          reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    K_DICT          reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    K_SET           reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    ID              reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    K_IF            reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    K_WHILE         reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    K_CONTINUE      reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    K_BREAK         reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    K_DONE          reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    K_INT           reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    K_DOUBLE        reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    K_STRING        reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    K_BOOL          reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    K_WINDOW        reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    K_SHAPE         reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    K_TRIANGLE      reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    K_RECTANGLE     reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    K_CIRCLE        reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    K_POINT         reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    K_TEXT          reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    $end            reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    K_EL            reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    K_EF            reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    K_END           reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    RPAREN          reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    COMMA           reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    AND             reduce using rule 71 (arithmetic_term -> arithmetic_factor .)
    OR              reduce using rule 71 (arithmetic_term -> arithmetic_factor .)


state 44

    (44) unary_expression -> INTEGER .
    (77) number -> INTEGER .

  ! reduce/reduce conflict for GT resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for LT resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for GEQ resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for LEQ resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for EQ resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for NEQ resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_LIST resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_DICT resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_SET resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for ID resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_IF resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_WHILE resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_CONTINUE resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_BREAK resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_DONE resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_INT resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_STRING resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_POINT resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for $end resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_EL resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_EF resolved using rule 44 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_END resolved using rule 44 (unary_expression -> INTEGER .)
    GT              reduce using rule 44 (unary_expression -> INTEGER .)
    LT              reduce using rule 44 (unary_expression -> INTEGER .)
    GEQ             reduce using rule 44 (unary_expression -> INTEGER .)
    LEQ             reduce using rule 44 (unary_expression -> INTEGER .)
    EQ              reduce using rule 44 (unary_expression -> INTEGER .)
    NEQ             reduce using rule 44 (unary_expression -> INTEGER .)
    AND             reduce using rule 44 (unary_expression -> INTEGER .)
    RPAREN          reduce using rule 44 (unary_expression -> INTEGER .)
    OR              reduce using rule 44 (unary_expression -> INTEGER .)
    K_LIST          reduce using rule 44 (unary_expression -> INTEGER .)
    K_DICT          reduce using rule 44 (unary_expression -> INTEGER .)
    K_SET           reduce using rule 44 (unary_expression -> INTEGER .)
    ID              reduce using rule 44 (unary_expression -> INTEGER .)
    K_IF            reduce using rule 44 (unary_expression -> INTEGER .)
    K_WHILE         reduce using rule 44 (unary_expression -> INTEGER .)
    K_CONTINUE      reduce using rule 44 (unary_expression -> INTEGER .)
    K_BREAK         reduce using rule 44 (unary_expression -> INTEGER .)
    K_DONE          reduce using rule 44 (unary_expression -> INTEGER .)
    K_INT           reduce using rule 44 (unary_expression -> INTEGER .)
    K_DOUBLE        reduce using rule 44 (unary_expression -> INTEGER .)
    K_STRING        reduce using rule 44 (unary_expression -> INTEGER .)
    K_BOOL          reduce using rule 44 (unary_expression -> INTEGER .)
    K_WINDOW        reduce using rule 44 (unary_expression -> INTEGER .)
    K_SHAPE         reduce using rule 44 (unary_expression -> INTEGER .)
    K_TRIANGLE      reduce using rule 44 (unary_expression -> INTEGER .)
    K_RECTANGLE     reduce using rule 44 (unary_expression -> INTEGER .)
    K_CIRCLE        reduce using rule 44 (unary_expression -> INTEGER .)
    K_POINT         reduce using rule 44 (unary_expression -> INTEGER .)
    K_TEXT          reduce using rule 44 (unary_expression -> INTEGER .)
    $end            reduce using rule 44 (unary_expression -> INTEGER .)
    K_EL            reduce using rule 44 (unary_expression -> INTEGER .)
    K_EF            reduce using rule 44 (unary_expression -> INTEGER .)
    K_END           reduce using rule 44 (unary_expression -> INTEGER .)
    COMMA           reduce using rule 44 (unary_expression -> INTEGER .)
    TIMES           reduce using rule 77 (number -> INTEGER .)
    DIVIDE          reduce using rule 77 (number -> INTEGER .)
    MOD             reduce using rule 77 (number -> INTEGER .)
    PLUS            reduce using rule 77 (number -> INTEGER .)
    MINUS           reduce using rule 77 (number -> INTEGER .)

  ! GT              [ reduce using rule 77 (number -> INTEGER .) ]
  ! LT              [ reduce using rule 77 (number -> INTEGER .) ]
  ! GEQ             [ reduce using rule 77 (number -> INTEGER .) ]
  ! LEQ             [ reduce using rule 77 (number -> INTEGER .) ]
  ! EQ              [ reduce using rule 77 (number -> INTEGER .) ]
  ! NEQ             [ reduce using rule 77 (number -> INTEGER .) ]
  ! RPAREN          [ reduce using rule 77 (number -> INTEGER .) ]
  ! COMMA           [ reduce using rule 77 (number -> INTEGER .) ]
  ! K_LIST          [ reduce using rule 77 (number -> INTEGER .) ]
  ! K_DICT          [ reduce using rule 77 (number -> INTEGER .) ]
  ! K_SET           [ reduce using rule 77 (number -> INTEGER .) ]
  ! ID              [ reduce using rule 77 (number -> INTEGER .) ]
  ! K_IF            [ reduce using rule 77 (number -> INTEGER .) ]
  ! K_WHILE         [ reduce using rule 77 (number -> INTEGER .) ]
  ! K_CONTINUE      [ reduce using rule 77 (number -> INTEGER .) ]
  ! K_BREAK         [ reduce using rule 77 (number -> INTEGER .) ]
  ! K_DONE          [ reduce using rule 77 (number -> INTEGER .) ]
  ! K_INT           [ reduce using rule 77 (number -> INTEGER .) ]
  ! K_DOUBLE        [ reduce using rule 77 (number -> INTEGER .) ]
  ! K_STRING        [ reduce using rule 77 (number -> INTEGER .) ]
  ! K_BOOL          [ reduce using rule 77 (number -> INTEGER .) ]
  ! K_WINDOW        [ reduce using rule 77 (number -> INTEGER .) ]
  ! K_SHAPE         [ reduce using rule 77 (number -> INTEGER .) ]
  ! K_TRIANGLE      [ reduce using rule 77 (number -> INTEGER .) ]
  ! K_RECTANGLE     [ reduce using rule 77 (number -> INTEGER .) ]
  ! K_CIRCLE        [ reduce using rule 77 (number -> INTEGER .) ]
  ! K_POINT         [ reduce using rule 77 (number -> INTEGER .) ]
  ! K_TEXT          [ reduce using rule 77 (number -> INTEGER .) ]
  ! $end            [ reduce using rule 77 (number -> INTEGER .) ]
  ! K_EL            [ reduce using rule 77 (number -> INTEGER .) ]
  ! K_EF            [ reduce using rule 77 (number -> INTEGER .) ]
  ! K_END           [ reduce using rule 77 (number -> INTEGER .) ]


state 45

    (55) boolean_factor -> arithmetic_expression . comparator arithmetic_expression
    (65) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (66) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term
    (59) comparator -> . GT
    (60) comparator -> . LT
    (61) comparator -> . GEQ
    (62) comparator -> . LEQ
    (63) comparator -> . EQ
    (64) comparator -> . NEQ

    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    GT              shift and go to state 69
    LT              shift and go to state 72
    GEQ             shift and go to state 68
    LEQ             shift and go to state 71
    EQ              shift and go to state 73
    NEQ             shift and go to state 74

    comparator                     shift and go to state 86

state 46

    (56) boolean_factor -> string_expression . comparator string_expression
    (37) string_expression -> string_expression . PLUS string_term
    (59) comparator -> . GT
    (60) comparator -> . LT
    (61) comparator -> . GEQ
    (62) comparator -> . LEQ
    (63) comparator -> . EQ
    (64) comparator -> . NEQ

    PLUS            shift and go to state 90
    GT              shift and go to state 69
    LT              shift and go to state 72
    GEQ             shift and go to state 68
    LEQ             shift and go to state 71
    EQ              shift and go to state 73
    NEQ             shift and go to state 74

    comparator                     shift and go to state 89

state 47

    (43) unary_expression -> STRING .
    (40) string_term -> STRING .

  ! reduce/reduce conflict for GT resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for LT resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for GEQ resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for LEQ resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for EQ resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for NEQ resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for K_LIST resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for K_DICT resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for K_SET resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for ID resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for K_IF resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for K_WHILE resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for K_CONTINUE resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for K_BREAK resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for K_DONE resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for K_INT resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for K_STRING resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for K_POINT resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for $end resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for K_EL resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for K_EF resolved using rule 40 (string_term -> STRING .)
  ! reduce/reduce conflict for K_END resolved using rule 40 (string_term -> STRING .)
    AND             reduce using rule 43 (unary_expression -> STRING .)
    OR              reduce using rule 43 (unary_expression -> STRING .)
    PLUS            reduce using rule 40 (string_term -> STRING .)
    GT              reduce using rule 40 (string_term -> STRING .)
    LT              reduce using rule 40 (string_term -> STRING .)
    GEQ             reduce using rule 40 (string_term -> STRING .)
    LEQ             reduce using rule 40 (string_term -> STRING .)
    EQ              reduce using rule 40 (string_term -> STRING .)
    NEQ             reduce using rule 40 (string_term -> STRING .)
    RPAREN          reduce using rule 40 (string_term -> STRING .)
    COMMA           reduce using rule 40 (string_term -> STRING .)
    K_LIST          reduce using rule 40 (string_term -> STRING .)
    K_DICT          reduce using rule 40 (string_term -> STRING .)
    K_SET           reduce using rule 40 (string_term -> STRING .)
    ID              reduce using rule 40 (string_term -> STRING .)
    K_IF            reduce using rule 40 (string_term -> STRING .)
    K_WHILE         reduce using rule 40 (string_term -> STRING .)
    K_CONTINUE      reduce using rule 40 (string_term -> STRING .)
    K_BREAK         reduce using rule 40 (string_term -> STRING .)
    K_DONE          reduce using rule 40 (string_term -> STRING .)
    K_INT           reduce using rule 40 (string_term -> STRING .)
    K_DOUBLE        reduce using rule 40 (string_term -> STRING .)
    K_STRING        reduce using rule 40 (string_term -> STRING .)
    K_BOOL          reduce using rule 40 (string_term -> STRING .)
    K_WINDOW        reduce using rule 40 (string_term -> STRING .)
    K_SHAPE         reduce using rule 40 (string_term -> STRING .)
    K_TRIANGLE      reduce using rule 40 (string_term -> STRING .)
    K_RECTANGLE     reduce using rule 40 (string_term -> STRING .)
    K_CIRCLE        reduce using rule 40 (string_term -> STRING .)
    K_POINT         reduce using rule 40 (string_term -> STRING .)
    K_TEXT          reduce using rule 40 (string_term -> STRING .)
    $end            reduce using rule 40 (string_term -> STRING .)
    K_EL            reduce using rule 40 (string_term -> STRING .)
    K_EF            reduce using rule 40 (string_term -> STRING .)
    K_END           reduce using rule 40 (string_term -> STRING .)

  ! GT              [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! LT              [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! GEQ             [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! LEQ             [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! EQ              [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! NEQ             [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! RPAREN          [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! K_LIST          [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! K_DICT          [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! K_SET           [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! ID              [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! K_IF            [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! K_WHILE         [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! K_CONTINUE      [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! K_BREAK         [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! K_DONE          [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! K_INT           [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! K_DOUBLE        [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! K_STRING        [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! K_BOOL          [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! K_WINDOW        [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! K_SHAPE         [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! K_TRIANGLE      [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! K_RECTANGLE     [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! K_CIRCLE        [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! K_POINT         [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! K_TEXT          [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! $end            [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! K_EL            [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! K_EF            [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! K_END           [ reduce using rule 43 (unary_expression -> STRING .) ]
  ! COMMA           [ reduce using rule 43 (unary_expression -> STRING .) ]


state 48

    (38) string_expression -> string_term .

    PLUS            reduce using rule 38 (string_expression -> string_term .)
    GT              reduce using rule 38 (string_expression -> string_term .)
    LT              reduce using rule 38 (string_expression -> string_term .)
    GEQ             reduce using rule 38 (string_expression -> string_term .)
    LEQ             reduce using rule 38 (string_expression -> string_term .)
    EQ              reduce using rule 38 (string_expression -> string_term .)
    NEQ             reduce using rule 38 (string_expression -> string_term .)
    RPAREN          reduce using rule 38 (string_expression -> string_term .)
    COMMA           reduce using rule 38 (string_expression -> string_term .)
    AND             reduce using rule 38 (string_expression -> string_term .)
    OR              reduce using rule 38 (string_expression -> string_term .)
    K_LIST          reduce using rule 38 (string_expression -> string_term .)
    K_DICT          reduce using rule 38 (string_expression -> string_term .)
    K_SET           reduce using rule 38 (string_expression -> string_term .)
    ID              reduce using rule 38 (string_expression -> string_term .)
    K_IF            reduce using rule 38 (string_expression -> string_term .)
    K_WHILE         reduce using rule 38 (string_expression -> string_term .)
    K_CONTINUE      reduce using rule 38 (string_expression -> string_term .)
    K_BREAK         reduce using rule 38 (string_expression -> string_term .)
    K_DONE          reduce using rule 38 (string_expression -> string_term .)
    K_INT           reduce using rule 38 (string_expression -> string_term .)
    K_DOUBLE        reduce using rule 38 (string_expression -> string_term .)
    K_STRING        reduce using rule 38 (string_expression -> string_term .)
    K_BOOL          reduce using rule 38 (string_expression -> string_term .)
    K_WINDOW        reduce using rule 38 (string_expression -> string_term .)
    K_SHAPE         reduce using rule 38 (string_expression -> string_term .)
    K_TRIANGLE      reduce using rule 38 (string_expression -> string_term .)
    K_RECTANGLE     reduce using rule 38 (string_expression -> string_term .)
    K_CIRCLE        reduce using rule 38 (string_expression -> string_term .)
    K_POINT         reduce using rule 38 (string_expression -> string_term .)
    K_TEXT          reduce using rule 38 (string_expression -> string_term .)
    $end            reduce using rule 38 (string_expression -> string_term .)
    K_EL            reduce using rule 38 (string_expression -> string_term .)
    K_EF            reduce using rule 38 (string_expression -> string_term .)
    K_END           reduce using rule 38 (string_expression -> string_term .)


state 49

    (53) boolean_factor -> LPAREN . boolean_expression RPAREN
    (72) arithmetic_factor -> LPAREN . arithmetic_expression RPAREN
    (49) boolean_expression -> . boolean_expression OR boolean_term
    (50) boolean_expression -> . boolean_term
    (65) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (66) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (67) arithmetic_expression -> . arithmetic_term
    (51) boolean_term -> . boolean_term AND boolean_factor
    (52) boolean_term -> . boolean_factor
    (68) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (69) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (70) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (71) arithmetic_term -> . arithmetic_factor
    (53) boolean_factor -> . LPAREN boolean_expression RPAREN
    (54) boolean_factor -> . unary_expression comparator unary_expression
    (55) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (56) boolean_factor -> . string_expression comparator string_expression
    (57) boolean_factor -> . unary_expression
    (58) boolean_factor -> . NEG boolean_factor
    (72) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (73) arithmetic_factor -> . number
    (74) arithmetic_factor -> . ID
    (75) arithmetic_factor -> . function_call_statement
    (76) arithmetic_factor -> . MINUS arithmetic_factor
    (42) unary_expression -> . ID
    (43) unary_expression -> . STRING
    (44) unary_expression -> . INTEGER
    (45) unary_expression -> . function_call_statement
    (46) unary_expression -> . DOUBLE
    (47) unary_expression -> . K_TRUE
    (48) unary_expression -> . K_FALSE
    (37) string_expression -> . string_expression PLUS string_term
    (38) string_expression -> . string_term
    (77) number -> . INTEGER
    (78) number -> . DOUBLE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (39) string_term -> . function_call_statement
    (40) string_term -> . STRING
    (41) string_term -> . ID

    LPAREN          shift and go to state 49
    NEG             shift and go to state 38
    ID              shift and go to state 93
    MINUS           shift and go to state 42
    STRING          shift and go to state 47
    INTEGER         shift and go to state 44
    DOUBLE          shift and go to state 54
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 56

    arithmetic_expression          shift and go to state 92
    string_expression              shift and go to state 46
    unary_expression               shift and go to state 37
    arithmetic_factor              shift and go to state 43
    boolean_expression             shift and go to state 94
    boolean_term                   shift and go to state 39
    arithmetic_term                shift and go to state 41
    number                         shift and go to state 51
    string_term                    shift and go to state 48
    function_call_statement        shift and go to state 91
    boolean_factor                 shift and go to state 50

state 50

    (52) boolean_term -> boolean_factor .

    AND             reduce using rule 52 (boolean_term -> boolean_factor .)
    RPAREN          reduce using rule 52 (boolean_term -> boolean_factor .)
    OR              reduce using rule 52 (boolean_term -> boolean_factor .)
    K_LIST          reduce using rule 52 (boolean_term -> boolean_factor .)
    K_DICT          reduce using rule 52 (boolean_term -> boolean_factor .)
    K_SET           reduce using rule 52 (boolean_term -> boolean_factor .)
    ID              reduce using rule 52 (boolean_term -> boolean_factor .)
    K_IF            reduce using rule 52 (boolean_term -> boolean_factor .)
    K_WHILE         reduce using rule 52 (boolean_term -> boolean_factor .)
    K_CONTINUE      reduce using rule 52 (boolean_term -> boolean_factor .)
    K_BREAK         reduce using rule 52 (boolean_term -> boolean_factor .)
    K_DONE          reduce using rule 52 (boolean_term -> boolean_factor .)
    K_INT           reduce using rule 52 (boolean_term -> boolean_factor .)
    K_DOUBLE        reduce using rule 52 (boolean_term -> boolean_factor .)
    K_STRING        reduce using rule 52 (boolean_term -> boolean_factor .)
    K_BOOL          reduce using rule 52 (boolean_term -> boolean_factor .)
    K_WINDOW        reduce using rule 52 (boolean_term -> boolean_factor .)
    K_SHAPE         reduce using rule 52 (boolean_term -> boolean_factor .)
    K_TRIANGLE      reduce using rule 52 (boolean_term -> boolean_factor .)
    K_RECTANGLE     reduce using rule 52 (boolean_term -> boolean_factor .)
    K_CIRCLE        reduce using rule 52 (boolean_term -> boolean_factor .)
    K_POINT         reduce using rule 52 (boolean_term -> boolean_factor .)
    K_TEXT          reduce using rule 52 (boolean_term -> boolean_factor .)
    $end            reduce using rule 52 (boolean_term -> boolean_factor .)
    K_EL            reduce using rule 52 (boolean_term -> boolean_factor .)
    K_EF            reduce using rule 52 (boolean_term -> boolean_factor .)
    K_END           reduce using rule 52 (boolean_term -> boolean_factor .)
    COMMA           reduce using rule 52 (boolean_term -> boolean_factor .)


state 51

    (73) arithmetic_factor -> number .

    TIMES           reduce using rule 73 (arithmetic_factor -> number .)
    DIVIDE          reduce using rule 73 (arithmetic_factor -> number .)
    MOD             reduce using rule 73 (arithmetic_factor -> number .)
    PLUS            reduce using rule 73 (arithmetic_factor -> number .)
    MINUS           reduce using rule 73 (arithmetic_factor -> number .)
    GT              reduce using rule 73 (arithmetic_factor -> number .)
    LT              reduce using rule 73 (arithmetic_factor -> number .)
    GEQ             reduce using rule 73 (arithmetic_factor -> number .)
    LEQ             reduce using rule 73 (arithmetic_factor -> number .)
    EQ              reduce using rule 73 (arithmetic_factor -> number .)
    NEQ             reduce using rule 73 (arithmetic_factor -> number .)
    K_LIST          reduce using rule 73 (arithmetic_factor -> number .)
    K_DICT          reduce using rule 73 (arithmetic_factor -> number .)
    K_SET           reduce using rule 73 (arithmetic_factor -> number .)
    ID              reduce using rule 73 (arithmetic_factor -> number .)
    K_IF            reduce using rule 73 (arithmetic_factor -> number .)
    K_WHILE         reduce using rule 73 (arithmetic_factor -> number .)
    K_CONTINUE      reduce using rule 73 (arithmetic_factor -> number .)
    K_BREAK         reduce using rule 73 (arithmetic_factor -> number .)
    K_DONE          reduce using rule 73 (arithmetic_factor -> number .)
    K_INT           reduce using rule 73 (arithmetic_factor -> number .)
    K_DOUBLE        reduce using rule 73 (arithmetic_factor -> number .)
    K_STRING        reduce using rule 73 (arithmetic_factor -> number .)
    K_BOOL          reduce using rule 73 (arithmetic_factor -> number .)
    K_WINDOW        reduce using rule 73 (arithmetic_factor -> number .)
    K_SHAPE         reduce using rule 73 (arithmetic_factor -> number .)
    K_TRIANGLE      reduce using rule 73 (arithmetic_factor -> number .)
    K_RECTANGLE     reduce using rule 73 (arithmetic_factor -> number .)
    K_CIRCLE        reduce using rule 73 (arithmetic_factor -> number .)
    K_POINT         reduce using rule 73 (arithmetic_factor -> number .)
    K_TEXT          reduce using rule 73 (arithmetic_factor -> number .)
    $end            reduce using rule 73 (arithmetic_factor -> number .)
    K_EL            reduce using rule 73 (arithmetic_factor -> number .)
    K_EF            reduce using rule 73 (arithmetic_factor -> number .)
    K_END           reduce using rule 73 (arithmetic_factor -> number .)
    RPAREN          reduce using rule 73 (arithmetic_factor -> number .)
    COMMA           reduce using rule 73 (arithmetic_factor -> number .)
    AND             reduce using rule 73 (arithmetic_factor -> number .)
    OR              reduce using rule 73 (arithmetic_factor -> number .)


state 52

    (42) unary_expression -> ID .
    (11) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (12) function_call_statement -> ID . LPAREN RPAREN
    (41) string_term -> ID .
    (74) arithmetic_factor -> ID .

  ! reduce/reduce conflict for GT resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for LT resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for GEQ resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for LEQ resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for EQ resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for NEQ resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for GT resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for LT resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for GEQ resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for LEQ resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for EQ resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for NEQ resolved using rule 41 (string_term -> ID .)
    AND             reduce using rule 42 (unary_expression -> ID .)
    RPAREN          reduce using rule 42 (unary_expression -> ID .)
    OR              reduce using rule 42 (unary_expression -> ID .)
    K_LIST          reduce using rule 42 (unary_expression -> ID .)
    K_DICT          reduce using rule 42 (unary_expression -> ID .)
    K_SET           reduce using rule 42 (unary_expression -> ID .)
    ID              reduce using rule 42 (unary_expression -> ID .)
    K_IF            reduce using rule 42 (unary_expression -> ID .)
    K_WHILE         reduce using rule 42 (unary_expression -> ID .)
    K_CONTINUE      reduce using rule 42 (unary_expression -> ID .)
    K_BREAK         reduce using rule 42 (unary_expression -> ID .)
    K_DONE          reduce using rule 42 (unary_expression -> ID .)
    K_INT           reduce using rule 42 (unary_expression -> ID .)
    K_DOUBLE        reduce using rule 42 (unary_expression -> ID .)
    K_STRING        reduce using rule 42 (unary_expression -> ID .)
    K_BOOL          reduce using rule 42 (unary_expression -> ID .)
    K_WINDOW        reduce using rule 42 (unary_expression -> ID .)
    K_SHAPE         reduce using rule 42 (unary_expression -> ID .)
    K_TRIANGLE      reduce using rule 42 (unary_expression -> ID .)
    K_RECTANGLE     reduce using rule 42 (unary_expression -> ID .)
    K_CIRCLE        reduce using rule 42 (unary_expression -> ID .)
    K_POINT         reduce using rule 42 (unary_expression -> ID .)
    K_TEXT          reduce using rule 42 (unary_expression -> ID .)
    $end            reduce using rule 42 (unary_expression -> ID .)
    K_EL            reduce using rule 42 (unary_expression -> ID .)
    K_EF            reduce using rule 42 (unary_expression -> ID .)
    K_END           reduce using rule 42 (unary_expression -> ID .)
    COMMA           reduce using rule 42 (unary_expression -> ID .)
    LPAREN          shift and go to state 36
    PLUS            reduce using rule 41 (string_term -> ID .)
    GT              reduce using rule 41 (string_term -> ID .)
    LT              reduce using rule 41 (string_term -> ID .)
    GEQ             reduce using rule 41 (string_term -> ID .)
    LEQ             reduce using rule 41 (string_term -> ID .)
    EQ              reduce using rule 41 (string_term -> ID .)
    NEQ             reduce using rule 41 (string_term -> ID .)
    TIMES           reduce using rule 74 (arithmetic_factor -> ID .)
    DIVIDE          reduce using rule 74 (arithmetic_factor -> ID .)
    MOD             reduce using rule 74 (arithmetic_factor -> ID .)
    MINUS           reduce using rule 74 (arithmetic_factor -> ID .)

  ! GT              [ reduce using rule 42 (unary_expression -> ID .) ]
  ! LT              [ reduce using rule 42 (unary_expression -> ID .) ]
  ! GEQ             [ reduce using rule 42 (unary_expression -> ID .) ]
  ! LEQ             [ reduce using rule 42 (unary_expression -> ID .) ]
  ! EQ              [ reduce using rule 42 (unary_expression -> ID .) ]
  ! NEQ             [ reduce using rule 42 (unary_expression -> ID .) ]
  ! PLUS            [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! GT              [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! LT              [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! GEQ             [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! LEQ             [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! EQ              [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! NEQ             [ reduce using rule 74 (arithmetic_factor -> ID .) ]


state 53

    (79) selection_statement -> K_IF LPAREN boolean_expression . RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (49) boolean_expression -> boolean_expression . OR boolean_term

    RPAREN          shift and go to state 95
    OR              shift and go to state 96


state 54

    (46) unary_expression -> DOUBLE .
    (78) number -> DOUBLE .

  ! reduce/reduce conflict for GT resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for LT resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for GEQ resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for LEQ resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for EQ resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for NEQ resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_LIST resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_DICT resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_SET resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for ID resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_IF resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_WHILE resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_CONTINUE resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_BREAK resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_DONE resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_INT resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_STRING resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_POINT resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for $end resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_EL resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_EF resolved using rule 46 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_END resolved using rule 46 (unary_expression -> DOUBLE .)
    GT              reduce using rule 46 (unary_expression -> DOUBLE .)
    LT              reduce using rule 46 (unary_expression -> DOUBLE .)
    GEQ             reduce using rule 46 (unary_expression -> DOUBLE .)
    LEQ             reduce using rule 46 (unary_expression -> DOUBLE .)
    EQ              reduce using rule 46 (unary_expression -> DOUBLE .)
    NEQ             reduce using rule 46 (unary_expression -> DOUBLE .)
    AND             reduce using rule 46 (unary_expression -> DOUBLE .)
    RPAREN          reduce using rule 46 (unary_expression -> DOUBLE .)
    OR              reduce using rule 46 (unary_expression -> DOUBLE .)
    K_LIST          reduce using rule 46 (unary_expression -> DOUBLE .)
    K_DICT          reduce using rule 46 (unary_expression -> DOUBLE .)
    K_SET           reduce using rule 46 (unary_expression -> DOUBLE .)
    ID              reduce using rule 46 (unary_expression -> DOUBLE .)
    K_IF            reduce using rule 46 (unary_expression -> DOUBLE .)
    K_WHILE         reduce using rule 46 (unary_expression -> DOUBLE .)
    K_CONTINUE      reduce using rule 46 (unary_expression -> DOUBLE .)
    K_BREAK         reduce using rule 46 (unary_expression -> DOUBLE .)
    K_DONE          reduce using rule 46 (unary_expression -> DOUBLE .)
    K_INT           reduce using rule 46 (unary_expression -> DOUBLE .)
    K_DOUBLE        reduce using rule 46 (unary_expression -> DOUBLE .)
    K_STRING        reduce using rule 46 (unary_expression -> DOUBLE .)
    K_BOOL          reduce using rule 46 (unary_expression -> DOUBLE .)
    K_WINDOW        reduce using rule 46 (unary_expression -> DOUBLE .)
    K_SHAPE         reduce using rule 46 (unary_expression -> DOUBLE .)
    K_TRIANGLE      reduce using rule 46 (unary_expression -> DOUBLE .)
    K_RECTANGLE     reduce using rule 46 (unary_expression -> DOUBLE .)
    K_CIRCLE        reduce using rule 46 (unary_expression -> DOUBLE .)
    K_POINT         reduce using rule 46 (unary_expression -> DOUBLE .)
    K_TEXT          reduce using rule 46 (unary_expression -> DOUBLE .)
    $end            reduce using rule 46 (unary_expression -> DOUBLE .)
    K_EL            reduce using rule 46 (unary_expression -> DOUBLE .)
    K_EF            reduce using rule 46 (unary_expression -> DOUBLE .)
    K_END           reduce using rule 46 (unary_expression -> DOUBLE .)
    COMMA           reduce using rule 46 (unary_expression -> DOUBLE .)
    TIMES           reduce using rule 78 (number -> DOUBLE .)
    DIVIDE          reduce using rule 78 (number -> DOUBLE .)
    MOD             reduce using rule 78 (number -> DOUBLE .)
    PLUS            reduce using rule 78 (number -> DOUBLE .)
    MINUS           reduce using rule 78 (number -> DOUBLE .)

  ! GT              [ reduce using rule 78 (number -> DOUBLE .) ]
  ! LT              [ reduce using rule 78 (number -> DOUBLE .) ]
  ! GEQ             [ reduce using rule 78 (number -> DOUBLE .) ]
  ! LEQ             [ reduce using rule 78 (number -> DOUBLE .) ]
  ! EQ              [ reduce using rule 78 (number -> DOUBLE .) ]
  ! NEQ             [ reduce using rule 78 (number -> DOUBLE .) ]
  ! RPAREN          [ reduce using rule 78 (number -> DOUBLE .) ]
  ! COMMA           [ reduce using rule 78 (number -> DOUBLE .) ]
  ! K_LIST          [ reduce using rule 78 (number -> DOUBLE .) ]
  ! K_DICT          [ reduce using rule 78 (number -> DOUBLE .) ]
  ! K_SET           [ reduce using rule 78 (number -> DOUBLE .) ]
  ! ID              [ reduce using rule 78 (number -> DOUBLE .) ]
  ! K_IF            [ reduce using rule 78 (number -> DOUBLE .) ]
  ! K_WHILE         [ reduce using rule 78 (number -> DOUBLE .) ]
  ! K_CONTINUE      [ reduce using rule 78 (number -> DOUBLE .) ]
  ! K_BREAK         [ reduce using rule 78 (number -> DOUBLE .) ]
  ! K_DONE          [ reduce using rule 78 (number -> DOUBLE .) ]
  ! K_INT           [ reduce using rule 78 (number -> DOUBLE .) ]
  ! K_DOUBLE        [ reduce using rule 78 (number -> DOUBLE .) ]
  ! K_STRING        [ reduce using rule 78 (number -> DOUBLE .) ]
  ! K_BOOL          [ reduce using rule 78 (number -> DOUBLE .) ]
  ! K_WINDOW        [ reduce using rule 78 (number -> DOUBLE .) ]
  ! K_SHAPE         [ reduce using rule 78 (number -> DOUBLE .) ]
  ! K_TRIANGLE      [ reduce using rule 78 (number -> DOUBLE .) ]
  ! K_RECTANGLE     [ reduce using rule 78 (number -> DOUBLE .) ]
  ! K_CIRCLE        [ reduce using rule 78 (number -> DOUBLE .) ]
  ! K_POINT         [ reduce using rule 78 (number -> DOUBLE .) ]
  ! K_TEXT          [ reduce using rule 78 (number -> DOUBLE .) ]
  ! $end            [ reduce using rule 78 (number -> DOUBLE .) ]
  ! K_EL            [ reduce using rule 78 (number -> DOUBLE .) ]
  ! K_EF            [ reduce using rule 78 (number -> DOUBLE .) ]
  ! K_END           [ reduce using rule 78 (number -> DOUBLE .) ]


state 55

    (45) unary_expression -> function_call_statement .
    (39) string_term -> function_call_statement .
    (75) arithmetic_factor -> function_call_statement .

  ! reduce/reduce conflict for GT resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for LT resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for GEQ resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for LEQ resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for EQ resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for NEQ resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for RPAREN resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for COMMA resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_LIST resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_DICT resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_SET resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for ID resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_IF resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_WHILE resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_CONTINUE resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_BREAK resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_DONE resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_INT resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_STRING resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_POINT resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for $end resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_EL resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_EF resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_END resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for PLUS resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for GT resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for LT resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for GEQ resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for LEQ resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for EQ resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for NEQ resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_LIST resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_DICT resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_SET resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for ID resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_IF resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_WHILE resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_CONTINUE resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_BREAK resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_DONE resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_INT resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_STRING resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_POINT resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for $end resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_EL resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_EF resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for K_END resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for RPAREN resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for COMMA resolved using rule 39 (string_term -> function_call_statement .)
    AND             reduce using rule 45 (unary_expression -> function_call_statement .)
    OR              reduce using rule 45 (unary_expression -> function_call_statement .)
    PLUS            reduce using rule 39 (string_term -> function_call_statement .)
    GT              reduce using rule 39 (string_term -> function_call_statement .)
    LT              reduce using rule 39 (string_term -> function_call_statement .)
    GEQ             reduce using rule 39 (string_term -> function_call_statement .)
    LEQ             reduce using rule 39 (string_term -> function_call_statement .)
    EQ              reduce using rule 39 (string_term -> function_call_statement .)
    NEQ             reduce using rule 39 (string_term -> function_call_statement .)
    RPAREN          reduce using rule 39 (string_term -> function_call_statement .)
    COMMA           reduce using rule 39 (string_term -> function_call_statement .)
    K_LIST          reduce using rule 39 (string_term -> function_call_statement .)
    K_DICT          reduce using rule 39 (string_term -> function_call_statement .)
    K_SET           reduce using rule 39 (string_term -> function_call_statement .)
    ID              reduce using rule 39 (string_term -> function_call_statement .)
    K_IF            reduce using rule 39 (string_term -> function_call_statement .)
    K_WHILE         reduce using rule 39 (string_term -> function_call_statement .)
    K_CONTINUE      reduce using rule 39 (string_term -> function_call_statement .)
    K_BREAK         reduce using rule 39 (string_term -> function_call_statement .)
    K_DONE          reduce using rule 39 (string_term -> function_call_statement .)
    K_INT           reduce using rule 39 (string_term -> function_call_statement .)
    K_DOUBLE        reduce using rule 39 (string_term -> function_call_statement .)
    K_STRING        reduce using rule 39 (string_term -> function_call_statement .)
    K_BOOL          reduce using rule 39 (string_term -> function_call_statement .)
    K_WINDOW        reduce using rule 39 (string_term -> function_call_statement .)
    K_SHAPE         reduce using rule 39 (string_term -> function_call_statement .)
    K_TRIANGLE      reduce using rule 39 (string_term -> function_call_statement .)
    K_RECTANGLE     reduce using rule 39 (string_term -> function_call_statement .)
    K_CIRCLE        reduce using rule 39 (string_term -> function_call_statement .)
    K_POINT         reduce using rule 39 (string_term -> function_call_statement .)
    K_TEXT          reduce using rule 39 (string_term -> function_call_statement .)
    $end            reduce using rule 39 (string_term -> function_call_statement .)
    K_EL            reduce using rule 39 (string_term -> function_call_statement .)
    K_EF            reduce using rule 39 (string_term -> function_call_statement .)
    K_END           reduce using rule 39 (string_term -> function_call_statement .)
    TIMES           reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    DIVIDE          reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    MOD             reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    MINUS           reduce using rule 75 (arithmetic_factor -> function_call_statement .)

  ! GT              [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! LT              [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! GEQ             [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! LEQ             [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! EQ              [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! NEQ             [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! RPAREN          [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! K_LIST          [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! K_DICT          [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! K_SET           [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! ID              [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! K_IF            [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! K_WHILE         [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! K_CONTINUE      [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! K_BREAK         [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! K_DONE          [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! K_INT           [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! K_DOUBLE        [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! K_STRING        [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! K_BOOL          [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! K_WINDOW        [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! K_SHAPE         [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! K_TRIANGLE      [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! K_RECTANGLE     [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! K_CIRCLE        [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! K_POINT         [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! K_TEXT          [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! $end            [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! K_EL            [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! K_EF            [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! K_END           [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! COMMA           [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! PLUS            [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! GT              [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! LT              [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! GEQ             [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! LEQ             [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! EQ              [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! NEQ             [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! K_LIST          [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! K_DICT          [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! K_SET           [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! ID              [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! K_IF            [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! K_WHILE         [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! K_CONTINUE      [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! K_BREAK         [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! K_DONE          [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! K_INT           [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! K_DOUBLE        [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! K_STRING        [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! K_BOOL          [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! K_WINDOW        [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! K_SHAPE         [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! K_TRIANGLE      [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! K_RECTANGLE     [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! K_CIRCLE        [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! K_POINT         [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! K_TEXT          [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! $end            [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! K_EL            [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! K_EF            [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! K_END           [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! RPAREN          [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! COMMA           [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]


state 56

    (48) unary_expression -> K_FALSE .

    GT              reduce using rule 48 (unary_expression -> K_FALSE .)
    LT              reduce using rule 48 (unary_expression -> K_FALSE .)
    GEQ             reduce using rule 48 (unary_expression -> K_FALSE .)
    LEQ             reduce using rule 48 (unary_expression -> K_FALSE .)
    EQ              reduce using rule 48 (unary_expression -> K_FALSE .)
    NEQ             reduce using rule 48 (unary_expression -> K_FALSE .)
    AND             reduce using rule 48 (unary_expression -> K_FALSE .)
    RPAREN          reduce using rule 48 (unary_expression -> K_FALSE .)
    OR              reduce using rule 48 (unary_expression -> K_FALSE .)
    K_LIST          reduce using rule 48 (unary_expression -> K_FALSE .)
    K_DICT          reduce using rule 48 (unary_expression -> K_FALSE .)
    K_SET           reduce using rule 48 (unary_expression -> K_FALSE .)
    ID              reduce using rule 48 (unary_expression -> K_FALSE .)
    K_IF            reduce using rule 48 (unary_expression -> K_FALSE .)
    K_WHILE         reduce using rule 48 (unary_expression -> K_FALSE .)
    K_CONTINUE      reduce using rule 48 (unary_expression -> K_FALSE .)
    K_BREAK         reduce using rule 48 (unary_expression -> K_FALSE .)
    K_DONE          reduce using rule 48 (unary_expression -> K_FALSE .)
    K_INT           reduce using rule 48 (unary_expression -> K_FALSE .)
    K_DOUBLE        reduce using rule 48 (unary_expression -> K_FALSE .)
    K_STRING        reduce using rule 48 (unary_expression -> K_FALSE .)
    K_BOOL          reduce using rule 48 (unary_expression -> K_FALSE .)
    K_WINDOW        reduce using rule 48 (unary_expression -> K_FALSE .)
    K_SHAPE         reduce using rule 48 (unary_expression -> K_FALSE .)
    K_TRIANGLE      reduce using rule 48 (unary_expression -> K_FALSE .)
    K_RECTANGLE     reduce using rule 48 (unary_expression -> K_FALSE .)
    K_CIRCLE        reduce using rule 48 (unary_expression -> K_FALSE .)
    K_POINT         reduce using rule 48 (unary_expression -> K_FALSE .)
    K_TEXT          reduce using rule 48 (unary_expression -> K_FALSE .)
    $end            reduce using rule 48 (unary_expression -> K_FALSE .)
    K_EL            reduce using rule 48 (unary_expression -> K_FALSE .)
    K_EF            reduce using rule 48 (unary_expression -> K_FALSE .)
    K_END           reduce using rule 48 (unary_expression -> K_FALSE .)
    COMMA           reduce using rule 48 (unary_expression -> K_FALSE .)


state 57

    (87) iteration_statement -> K_WHILE LPAREN boolean_expression . RPAREN compound_statement_list K_END
    (49) boolean_expression -> boolean_expression . OR boolean_term

    RPAREN          shift and go to state 97
    OR              shift and go to state 96


state 58

    (91) function_declaration -> pre_type_modifier type ID . LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END
    (92) function_declaration -> pre_type_modifier type ID . LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END
    (15) variable_declaration -> pre_type_modifier type ID .
    (16) variable_declaration -> pre_type_modifier type ID . ASSIGN expression

    LPAREN          shift and go to state 99
    K_LIST          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DICT          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_SET           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    ID              reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_IF            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_WHILE         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_CONTINUE      reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_BREAK         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DONE          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_INT           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DOUBLE        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_STRING        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_BOOL          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_WINDOW        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_SHAPE         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_TRIANGLE      reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_RECTANGLE     reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_CIRCLE        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_POINT         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_TEXT          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    $end            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    ASSIGN          shift and go to state 98


state 59

    (34) expression -> unary_expression .
    (54) boolean_factor -> unary_expression . comparator unary_expression
    (57) boolean_factor -> unary_expression .
    (59) comparator -> . GT
    (60) comparator -> . LT
    (61) comparator -> . GEQ
    (62) comparator -> . LEQ
    (63) comparator -> . EQ
    (64) comparator -> . NEQ

  ! reduce/reduce conflict for K_LIST resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_DICT resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_SET resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for ID resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_IF resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_WHILE resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_CONTINUE resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_BREAK resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_DONE resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_INT resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_STRING resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_POINT resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for $end resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_EL resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_EF resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_END resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 34 (expression -> unary_expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 34 (expression -> unary_expression .)
    RPAREN          reduce using rule 34 (expression -> unary_expression .)
    COMMA           reduce using rule 34 (expression -> unary_expression .)
    K_LIST          reduce using rule 34 (expression -> unary_expression .)
    K_DICT          reduce using rule 34 (expression -> unary_expression .)
    K_SET           reduce using rule 34 (expression -> unary_expression .)
    ID              reduce using rule 34 (expression -> unary_expression .)
    K_IF            reduce using rule 34 (expression -> unary_expression .)
    K_WHILE         reduce using rule 34 (expression -> unary_expression .)
    K_CONTINUE      reduce using rule 34 (expression -> unary_expression .)
    K_BREAK         reduce using rule 34 (expression -> unary_expression .)
    K_DONE          reduce using rule 34 (expression -> unary_expression .)
    K_INT           reduce using rule 34 (expression -> unary_expression .)
    K_DOUBLE        reduce using rule 34 (expression -> unary_expression .)
    K_STRING        reduce using rule 34 (expression -> unary_expression .)
    K_BOOL          reduce using rule 34 (expression -> unary_expression .)
    K_WINDOW        reduce using rule 34 (expression -> unary_expression .)
    K_SHAPE         reduce using rule 34 (expression -> unary_expression .)
    K_TRIANGLE      reduce using rule 34 (expression -> unary_expression .)
    K_RECTANGLE     reduce using rule 34 (expression -> unary_expression .)
    K_CIRCLE        reduce using rule 34 (expression -> unary_expression .)
    K_POINT         reduce using rule 34 (expression -> unary_expression .)
    K_TEXT          reduce using rule 34 (expression -> unary_expression .)
    $end            reduce using rule 34 (expression -> unary_expression .)
    K_EL            reduce using rule 34 (expression -> unary_expression .)
    K_EF            reduce using rule 34 (expression -> unary_expression .)
    K_END           reduce using rule 34 (expression -> unary_expression .)
    AND             reduce using rule 57 (boolean_factor -> unary_expression .)
    OR              reduce using rule 57 (boolean_factor -> unary_expression .)
    GT              shift and go to state 69
    LT              shift and go to state 72
    GEQ             shift and go to state 68
    LEQ             shift and go to state 71
    EQ              shift and go to state 73
    NEQ             shift and go to state 74

  ! K_LIST          [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! K_DICT          [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! K_SET           [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! ID              [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! K_IF            [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! K_WHILE         [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! K_CONTINUE      [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! K_BREAK         [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! K_DONE          [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! K_INT           [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! K_DOUBLE        [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! K_STRING        [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! K_BOOL          [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! K_WINDOW        [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! K_SHAPE         [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! K_TRIANGLE      [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! K_RECTANGLE     [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! K_CIRCLE        [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! K_POINT         [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! K_TEXT          [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! $end            [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! K_EL            [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! K_EF            [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! K_END           [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! RPAREN          [ reduce using rule 57 (boolean_factor -> unary_expression .) ]
  ! COMMA           [ reduce using rule 57 (boolean_factor -> unary_expression .) ]

    comparator                     shift and go to state 70

state 60

    (36) expression -> arithmetic_expression .
    (65) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (66) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term
    (55) boolean_factor -> arithmetic_expression . comparator arithmetic_expression
    (59) comparator -> . GT
    (60) comparator -> . LT
    (61) comparator -> . GEQ
    (62) comparator -> . LEQ
    (63) comparator -> . EQ
    (64) comparator -> . NEQ

    RPAREN          reduce using rule 36 (expression -> arithmetic_expression .)
    COMMA           reduce using rule 36 (expression -> arithmetic_expression .)
    K_LIST          reduce using rule 36 (expression -> arithmetic_expression .)
    K_DICT          reduce using rule 36 (expression -> arithmetic_expression .)
    K_SET           reduce using rule 36 (expression -> arithmetic_expression .)
    ID              reduce using rule 36 (expression -> arithmetic_expression .)
    K_IF            reduce using rule 36 (expression -> arithmetic_expression .)
    K_WHILE         reduce using rule 36 (expression -> arithmetic_expression .)
    K_CONTINUE      reduce using rule 36 (expression -> arithmetic_expression .)
    K_BREAK         reduce using rule 36 (expression -> arithmetic_expression .)
    K_DONE          reduce using rule 36 (expression -> arithmetic_expression .)
    K_INT           reduce using rule 36 (expression -> arithmetic_expression .)
    K_DOUBLE        reduce using rule 36 (expression -> arithmetic_expression .)
    K_STRING        reduce using rule 36 (expression -> arithmetic_expression .)
    K_BOOL          reduce using rule 36 (expression -> arithmetic_expression .)
    K_WINDOW        reduce using rule 36 (expression -> arithmetic_expression .)
    K_SHAPE         reduce using rule 36 (expression -> arithmetic_expression .)
    K_TRIANGLE      reduce using rule 36 (expression -> arithmetic_expression .)
    K_RECTANGLE     reduce using rule 36 (expression -> arithmetic_expression .)
    K_CIRCLE        reduce using rule 36 (expression -> arithmetic_expression .)
    K_POINT         reduce using rule 36 (expression -> arithmetic_expression .)
    K_TEXT          reduce using rule 36 (expression -> arithmetic_expression .)
    $end            reduce using rule 36 (expression -> arithmetic_expression .)
    K_EL            reduce using rule 36 (expression -> arithmetic_expression .)
    K_EF            reduce using rule 36 (expression -> arithmetic_expression .)
    K_END           reduce using rule 36 (expression -> arithmetic_expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    GT              shift and go to state 69
    LT              shift and go to state 72
    GEQ             shift and go to state 68
    LEQ             shift and go to state 71
    EQ              shift and go to state 73
    NEQ             shift and go to state 74

    comparator                     shift and go to state 86

state 61

    (33) expression -> string_expression .
    (37) string_expression -> string_expression . PLUS string_term
    (56) boolean_factor -> string_expression . comparator string_expression
    (59) comparator -> . GT
    (60) comparator -> . LT
    (61) comparator -> . GEQ
    (62) comparator -> . LEQ
    (63) comparator -> . EQ
    (64) comparator -> . NEQ

    RPAREN          reduce using rule 33 (expression -> string_expression .)
    COMMA           reduce using rule 33 (expression -> string_expression .)
    K_LIST          reduce using rule 33 (expression -> string_expression .)
    K_DICT          reduce using rule 33 (expression -> string_expression .)
    K_SET           reduce using rule 33 (expression -> string_expression .)
    ID              reduce using rule 33 (expression -> string_expression .)
    K_IF            reduce using rule 33 (expression -> string_expression .)
    K_WHILE         reduce using rule 33 (expression -> string_expression .)
    K_CONTINUE      reduce using rule 33 (expression -> string_expression .)
    K_BREAK         reduce using rule 33 (expression -> string_expression .)
    K_DONE          reduce using rule 33 (expression -> string_expression .)
    K_INT           reduce using rule 33 (expression -> string_expression .)
    K_DOUBLE        reduce using rule 33 (expression -> string_expression .)
    K_STRING        reduce using rule 33 (expression -> string_expression .)
    K_BOOL          reduce using rule 33 (expression -> string_expression .)
    K_WINDOW        reduce using rule 33 (expression -> string_expression .)
    K_SHAPE         reduce using rule 33 (expression -> string_expression .)
    K_TRIANGLE      reduce using rule 33 (expression -> string_expression .)
    K_RECTANGLE     reduce using rule 33 (expression -> string_expression .)
    K_CIRCLE        reduce using rule 33 (expression -> string_expression .)
    K_POINT         reduce using rule 33 (expression -> string_expression .)
    K_TEXT          reduce using rule 33 (expression -> string_expression .)
    $end            reduce using rule 33 (expression -> string_expression .)
    K_EL            reduce using rule 33 (expression -> string_expression .)
    K_EF            reduce using rule 33 (expression -> string_expression .)
    K_END           reduce using rule 33 (expression -> string_expression .)
    PLUS            shift and go to state 90
    GT              shift and go to state 69
    LT              shift and go to state 72
    GEQ             shift and go to state 68
    LEQ             shift and go to state 71
    EQ              shift and go to state 73
    NEQ             shift and go to state 74

    comparator                     shift and go to state 89

state 62

    (42) unary_expression -> ID .
    (41) string_term -> ID .
    (11) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (12) function_call_statement -> ID . LPAREN RPAREN
    (74) arithmetic_factor -> ID .

  ! reduce/reduce conflict for GT resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for LT resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for GEQ resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for LEQ resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for EQ resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for NEQ resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_LIST resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_DICT resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_SET resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_IF resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_WHILE resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_CONTINUE resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_BREAK resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_DONE resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_INT resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_STRING resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_POINT resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_EL resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_EF resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_END resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for GT resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for LT resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for GEQ resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for LEQ resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for EQ resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for NEQ resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_LIST resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_DICT resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_SET resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_IF resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_WHILE resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_CONTINUE resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_BREAK resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_DONE resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_INT resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_STRING resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_POINT resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_EL resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_EF resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for K_END resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 41 (string_term -> ID .)
    AND             reduce using rule 42 (unary_expression -> ID .)
    OR              reduce using rule 42 (unary_expression -> ID .)
    PLUS            reduce using rule 41 (string_term -> ID .)
    GT              reduce using rule 41 (string_term -> ID .)
    LT              reduce using rule 41 (string_term -> ID .)
    GEQ             reduce using rule 41 (string_term -> ID .)
    LEQ             reduce using rule 41 (string_term -> ID .)
    EQ              reduce using rule 41 (string_term -> ID .)
    NEQ             reduce using rule 41 (string_term -> ID .)
    RPAREN          reduce using rule 41 (string_term -> ID .)
    COMMA           reduce using rule 41 (string_term -> ID .)
    K_LIST          reduce using rule 41 (string_term -> ID .)
    K_DICT          reduce using rule 41 (string_term -> ID .)
    K_SET           reduce using rule 41 (string_term -> ID .)
    ID              reduce using rule 41 (string_term -> ID .)
    K_IF            reduce using rule 41 (string_term -> ID .)
    K_WHILE         reduce using rule 41 (string_term -> ID .)
    K_CONTINUE      reduce using rule 41 (string_term -> ID .)
    K_BREAK         reduce using rule 41 (string_term -> ID .)
    K_DONE          reduce using rule 41 (string_term -> ID .)
    K_INT           reduce using rule 41 (string_term -> ID .)
    K_DOUBLE        reduce using rule 41 (string_term -> ID .)
    K_STRING        reduce using rule 41 (string_term -> ID .)
    K_BOOL          reduce using rule 41 (string_term -> ID .)
    K_WINDOW        reduce using rule 41 (string_term -> ID .)
    K_SHAPE         reduce using rule 41 (string_term -> ID .)
    K_TRIANGLE      reduce using rule 41 (string_term -> ID .)
    K_RECTANGLE     reduce using rule 41 (string_term -> ID .)
    K_CIRCLE        reduce using rule 41 (string_term -> ID .)
    K_POINT         reduce using rule 41 (string_term -> ID .)
    K_TEXT          reduce using rule 41 (string_term -> ID .)
    $end            reduce using rule 41 (string_term -> ID .)
    K_EL            reduce using rule 41 (string_term -> ID .)
    K_EF            reduce using rule 41 (string_term -> ID .)
    K_END           reduce using rule 41 (string_term -> ID .)
    LPAREN          shift and go to state 36
    TIMES           reduce using rule 74 (arithmetic_factor -> ID .)
    DIVIDE          reduce using rule 74 (arithmetic_factor -> ID .)
    MOD             reduce using rule 74 (arithmetic_factor -> ID .)
    MINUS           reduce using rule 74 (arithmetic_factor -> ID .)

  ! GT              [ reduce using rule 42 (unary_expression -> ID .) ]
  ! LT              [ reduce using rule 42 (unary_expression -> ID .) ]
  ! GEQ             [ reduce using rule 42 (unary_expression -> ID .) ]
  ! LEQ             [ reduce using rule 42 (unary_expression -> ID .) ]
  ! EQ              [ reduce using rule 42 (unary_expression -> ID .) ]
  ! NEQ             [ reduce using rule 42 (unary_expression -> ID .) ]
  ! RPAREN          [ reduce using rule 42 (unary_expression -> ID .) ]
  ! COMMA           [ reduce using rule 42 (unary_expression -> ID .) ]
  ! K_LIST          [ reduce using rule 42 (unary_expression -> ID .) ]
  ! K_DICT          [ reduce using rule 42 (unary_expression -> ID .) ]
  ! K_SET           [ reduce using rule 42 (unary_expression -> ID .) ]
  ! ID              [ reduce using rule 42 (unary_expression -> ID .) ]
  ! K_IF            [ reduce using rule 42 (unary_expression -> ID .) ]
  ! K_WHILE         [ reduce using rule 42 (unary_expression -> ID .) ]
  ! K_CONTINUE      [ reduce using rule 42 (unary_expression -> ID .) ]
  ! K_BREAK         [ reduce using rule 42 (unary_expression -> ID .) ]
  ! K_DONE          [ reduce using rule 42 (unary_expression -> ID .) ]
  ! K_INT           [ reduce using rule 42 (unary_expression -> ID .) ]
  ! K_DOUBLE        [ reduce using rule 42 (unary_expression -> ID .) ]
  ! K_STRING        [ reduce using rule 42 (unary_expression -> ID .) ]
  ! K_BOOL          [ reduce using rule 42 (unary_expression -> ID .) ]
  ! K_WINDOW        [ reduce using rule 42 (unary_expression -> ID .) ]
  ! K_SHAPE         [ reduce using rule 42 (unary_expression -> ID .) ]
  ! K_TRIANGLE      [ reduce using rule 42 (unary_expression -> ID .) ]
  ! K_RECTANGLE     [ reduce using rule 42 (unary_expression -> ID .) ]
  ! K_CIRCLE        [ reduce using rule 42 (unary_expression -> ID .) ]
  ! K_POINT         [ reduce using rule 42 (unary_expression -> ID .) ]
  ! K_TEXT          [ reduce using rule 42 (unary_expression -> ID .) ]
  ! $end            [ reduce using rule 42 (unary_expression -> ID .) ]
  ! K_EL            [ reduce using rule 42 (unary_expression -> ID .) ]
  ! K_EF            [ reduce using rule 42 (unary_expression -> ID .) ]
  ! K_END           [ reduce using rule 42 (unary_expression -> ID .) ]
  ! PLUS            [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! GT              [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! LT              [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! GEQ             [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! LEQ             [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! EQ              [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! NEQ             [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! K_LIST          [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! K_DICT          [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! K_SET           [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! ID              [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! K_IF            [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! K_WHILE         [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! K_CONTINUE      [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! K_BREAK         [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! K_DONE          [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! K_INT           [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! K_DOUBLE        [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! K_STRING        [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! K_BOOL          [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! K_WINDOW        [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! K_SHAPE         [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! K_TRIANGLE      [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! K_RECTANGLE     [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! K_CIRCLE        [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! K_POINT         [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! K_TEXT          [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! $end            [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! K_EL            [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! K_EF            [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! K_END           [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! RPAREN          [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! COMMA           [ reduce using rule 74 (arithmetic_factor -> ID .) ]


state 63

    (35) expression -> boolean_expression .
    (49) boolean_expression -> boolean_expression . OR boolean_term

    RPAREN          reduce using rule 35 (expression -> boolean_expression .)
    COMMA           reduce using rule 35 (expression -> boolean_expression .)
    K_LIST          reduce using rule 35 (expression -> boolean_expression .)
    K_DICT          reduce using rule 35 (expression -> boolean_expression .)
    K_SET           reduce using rule 35 (expression -> boolean_expression .)
    ID              reduce using rule 35 (expression -> boolean_expression .)
    K_IF            reduce using rule 35 (expression -> boolean_expression .)
    K_WHILE         reduce using rule 35 (expression -> boolean_expression .)
    K_CONTINUE      reduce using rule 35 (expression -> boolean_expression .)
    K_BREAK         reduce using rule 35 (expression -> boolean_expression .)
    K_DONE          reduce using rule 35 (expression -> boolean_expression .)
    K_INT           reduce using rule 35 (expression -> boolean_expression .)
    K_DOUBLE        reduce using rule 35 (expression -> boolean_expression .)
    K_STRING        reduce using rule 35 (expression -> boolean_expression .)
    K_BOOL          reduce using rule 35 (expression -> boolean_expression .)
    K_WINDOW        reduce using rule 35 (expression -> boolean_expression .)
    K_SHAPE         reduce using rule 35 (expression -> boolean_expression .)
    K_TRIANGLE      reduce using rule 35 (expression -> boolean_expression .)
    K_RECTANGLE     reduce using rule 35 (expression -> boolean_expression .)
    K_CIRCLE        reduce using rule 35 (expression -> boolean_expression .)
    K_POINT         reduce using rule 35 (expression -> boolean_expression .)
    K_TEXT          reduce using rule 35 (expression -> boolean_expression .)
    $end            reduce using rule 35 (expression -> boolean_expression .)
    K_EL            reduce using rule 35 (expression -> boolean_expression .)
    K_EF            reduce using rule 35 (expression -> boolean_expression .)
    K_END           reduce using rule 35 (expression -> boolean_expression .)
    OR              shift and go to state 96


state 64

    (17) variable_declaration -> ID ASSIGN expression .

    ID              reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_IF            reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_WHILE         reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_CONTINUE      reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_BREAK         reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_DONE          reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_LIST          reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_DICT          reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_SET           reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_INT           reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_DOUBLE        reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_STRING        reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_BOOL          reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_WINDOW        reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_SHAPE         reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_TRIANGLE      reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_RECTANGLE     reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_CIRCLE        reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_POINT         reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_TEXT          reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_END           reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    $end            reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_EL            reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_EF            reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)


state 65

    (12) function_call_statement -> ID LPAREN RPAREN .

    K_END           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    ID              reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_IF            reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_WHILE         reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_CONTINUE      reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_BREAK         reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_DONE          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_LIST          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_DICT          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_SET           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_INT           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_DOUBLE        reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_STRING        reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_BOOL          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_WINDOW        reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_SHAPE         reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_TRIANGLE      reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_RECTANGLE     reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_CIRCLE        reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_POINT         reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_TEXT          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    GT              reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    LT              reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    GEQ             reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    LEQ             reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    EQ              reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    NEQ             reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    AND             reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    OR              reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    MOD             reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    $end            reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_EL            reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_EF            reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)


state 66

    (11) function_call_statement -> ID LPAREN parameter_list . RPAREN
    (13) parameter_list -> parameter_list . COMMA expression

    RPAREN          shift and go to state 100
    COMMA           shift and go to state 101


state 67

    (14) parameter_list -> expression .

    RPAREN          reduce using rule 14 (parameter_list -> expression .)
    COMMA           reduce using rule 14 (parameter_list -> expression .)


state 68

    (61) comparator -> GEQ .

    ID              reduce using rule 61 (comparator -> GEQ .)
    STRING          reduce using rule 61 (comparator -> GEQ .)
    INTEGER         reduce using rule 61 (comparator -> GEQ .)
    DOUBLE          reduce using rule 61 (comparator -> GEQ .)
    K_TRUE          reduce using rule 61 (comparator -> GEQ .)
    K_FALSE         reduce using rule 61 (comparator -> GEQ .)
    LPAREN          reduce using rule 61 (comparator -> GEQ .)
    MINUS           reduce using rule 61 (comparator -> GEQ .)


state 69

    (59) comparator -> GT .

    ID              reduce using rule 59 (comparator -> GT .)
    STRING          reduce using rule 59 (comparator -> GT .)
    INTEGER         reduce using rule 59 (comparator -> GT .)
    DOUBLE          reduce using rule 59 (comparator -> GT .)
    K_TRUE          reduce using rule 59 (comparator -> GT .)
    K_FALSE         reduce using rule 59 (comparator -> GT .)
    LPAREN          reduce using rule 59 (comparator -> GT .)
    MINUS           reduce using rule 59 (comparator -> GT .)


state 70

    (54) boolean_factor -> unary_expression comparator . unary_expression
    (42) unary_expression -> . ID
    (43) unary_expression -> . STRING
    (44) unary_expression -> . INTEGER
    (45) unary_expression -> . function_call_statement
    (46) unary_expression -> . DOUBLE
    (47) unary_expression -> . K_TRUE
    (48) unary_expression -> . K_FALSE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    ID              shift and go to state 107
    STRING          shift and go to state 102
    INTEGER         shift and go to state 105
    DOUBLE          shift and go to state 103
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 56

    function_call_statement        shift and go to state 104
    unary_expression               shift and go to state 106

state 71

    (62) comparator -> LEQ .

    ID              reduce using rule 62 (comparator -> LEQ .)
    STRING          reduce using rule 62 (comparator -> LEQ .)
    INTEGER         reduce using rule 62 (comparator -> LEQ .)
    DOUBLE          reduce using rule 62 (comparator -> LEQ .)
    K_TRUE          reduce using rule 62 (comparator -> LEQ .)
    K_FALSE         reduce using rule 62 (comparator -> LEQ .)
    LPAREN          reduce using rule 62 (comparator -> LEQ .)
    MINUS           reduce using rule 62 (comparator -> LEQ .)


state 72

    (60) comparator -> LT .

    ID              reduce using rule 60 (comparator -> LT .)
    STRING          reduce using rule 60 (comparator -> LT .)
    INTEGER         reduce using rule 60 (comparator -> LT .)
    DOUBLE          reduce using rule 60 (comparator -> LT .)
    K_TRUE          reduce using rule 60 (comparator -> LT .)
    K_FALSE         reduce using rule 60 (comparator -> LT .)
    LPAREN          reduce using rule 60 (comparator -> LT .)
    MINUS           reduce using rule 60 (comparator -> LT .)


state 73

    (63) comparator -> EQ .

    ID              reduce using rule 63 (comparator -> EQ .)
    STRING          reduce using rule 63 (comparator -> EQ .)
    INTEGER         reduce using rule 63 (comparator -> EQ .)
    DOUBLE          reduce using rule 63 (comparator -> EQ .)
    K_TRUE          reduce using rule 63 (comparator -> EQ .)
    K_FALSE         reduce using rule 63 (comparator -> EQ .)
    LPAREN          reduce using rule 63 (comparator -> EQ .)
    MINUS           reduce using rule 63 (comparator -> EQ .)


state 74

    (64) comparator -> NEQ .

    ID              reduce using rule 64 (comparator -> NEQ .)
    STRING          reduce using rule 64 (comparator -> NEQ .)
    INTEGER         reduce using rule 64 (comparator -> NEQ .)
    DOUBLE          reduce using rule 64 (comparator -> NEQ .)
    K_TRUE          reduce using rule 64 (comparator -> NEQ .)
    K_FALSE         reduce using rule 64 (comparator -> NEQ .)
    LPAREN          reduce using rule 64 (comparator -> NEQ .)
    MINUS           reduce using rule 64 (comparator -> NEQ .)


state 75

    (58) boolean_factor -> NEG boolean_factor .

    AND             reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    RPAREN          reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    OR              reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    K_LIST          reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    K_DICT          reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    K_SET           reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    ID              reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    K_IF            reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    K_WHILE         reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    K_CONTINUE      reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    K_BREAK         reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    K_DONE          reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    K_INT           reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    K_DOUBLE        reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    K_STRING        reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    K_BOOL          reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    K_WINDOW        reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    K_SHAPE         reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    K_TRIANGLE      reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    K_RECTANGLE     reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    K_CIRCLE        reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    K_POINT         reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    K_TEXT          reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    $end            reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    K_EL            reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    K_EF            reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    K_END           reduce using rule 58 (boolean_factor -> NEG boolean_factor .)
    COMMA           reduce using rule 58 (boolean_factor -> NEG boolean_factor .)


state 76

    (51) boolean_term -> boolean_term AND . boolean_factor
    (53) boolean_factor -> . LPAREN boolean_expression RPAREN
    (54) boolean_factor -> . unary_expression comparator unary_expression
    (55) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (56) boolean_factor -> . string_expression comparator string_expression
    (57) boolean_factor -> . unary_expression
    (58) boolean_factor -> . NEG boolean_factor
    (42) unary_expression -> . ID
    (43) unary_expression -> . STRING
    (44) unary_expression -> . INTEGER
    (45) unary_expression -> . function_call_statement
    (46) unary_expression -> . DOUBLE
    (47) unary_expression -> . K_TRUE
    (48) unary_expression -> . K_FALSE
    (65) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (66) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (67) arithmetic_expression -> . arithmetic_term
    (37) string_expression -> . string_expression PLUS string_term
    (38) string_expression -> . string_term
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (68) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (69) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (70) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (71) arithmetic_term -> . arithmetic_factor
    (39) string_term -> . function_call_statement
    (40) string_term -> . STRING
    (41) string_term -> . ID
    (72) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (73) arithmetic_factor -> . number
    (74) arithmetic_factor -> . ID
    (75) arithmetic_factor -> . function_call_statement
    (76) arithmetic_factor -> . MINUS arithmetic_factor
    (77) number -> . INTEGER
    (78) number -> . DOUBLE

    LPAREN          shift and go to state 49
    NEG             shift and go to state 38
    ID              shift and go to state 52
    STRING          shift and go to state 47
    INTEGER         shift and go to state 44
    DOUBLE          shift and go to state 54
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 56
    MINUS           shift and go to state 42

    arithmetic_expression          shift and go to state 45
    string_expression              shift and go to state 46
    unary_expression               shift and go to state 37
    arithmetic_factor              shift and go to state 43
    function_call_statement        shift and go to state 55
    number                         shift and go to state 51
    string_term                    shift and go to state 48
    arithmetic_term                shift and go to state 41
    boolean_factor                 shift and go to state 108

state 77

    (70) arithmetic_term -> arithmetic_term MOD . arithmetic_factor
    (72) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (73) arithmetic_factor -> . number
    (74) arithmetic_factor -> . ID
    (75) arithmetic_factor -> . function_call_statement
    (76) arithmetic_factor -> . MINUS arithmetic_factor
    (77) number -> . INTEGER
    (78) number -> . DOUBLE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 84
    ID              shift and go to state 83
    MINUS           shift and go to state 42
    INTEGER         shift and go to state 85
    DOUBLE          shift and go to state 81

    arithmetic_factor              shift and go to state 109
    number                         shift and go to state 51
    function_call_statement        shift and go to state 82

state 78

    (69) arithmetic_term -> arithmetic_term DIVIDE . arithmetic_factor
    (72) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (73) arithmetic_factor -> . number
    (74) arithmetic_factor -> . ID
    (75) arithmetic_factor -> . function_call_statement
    (76) arithmetic_factor -> . MINUS arithmetic_factor
    (77) number -> . INTEGER
    (78) number -> . DOUBLE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 84
    ID              shift and go to state 83
    MINUS           shift and go to state 42
    INTEGER         shift and go to state 85
    DOUBLE          shift and go to state 81

    arithmetic_factor              shift and go to state 110
    number                         shift and go to state 51
    function_call_statement        shift and go to state 82

state 79

    (68) arithmetic_term -> arithmetic_term TIMES . arithmetic_factor
    (72) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (73) arithmetic_factor -> . number
    (74) arithmetic_factor -> . ID
    (75) arithmetic_factor -> . function_call_statement
    (76) arithmetic_factor -> . MINUS arithmetic_factor
    (77) number -> . INTEGER
    (78) number -> . DOUBLE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 84
    ID              shift and go to state 83
    MINUS           shift and go to state 42
    INTEGER         shift and go to state 85
    DOUBLE          shift and go to state 81

    arithmetic_factor              shift and go to state 111
    number                         shift and go to state 51
    function_call_statement        shift and go to state 82

state 80

    (76) arithmetic_factor -> MINUS arithmetic_factor .

    TIMES           reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    DIVIDE          reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    MOD             reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    PLUS            reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    MINUS           reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    GT              reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    LT              reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    GEQ             reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    LEQ             reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    EQ              reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    NEQ             reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_LIST          reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_DICT          reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_SET           reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    ID              reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_IF            reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_WHILE         reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_CONTINUE      reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_BREAK         reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_DONE          reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_INT           reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_DOUBLE        reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_STRING        reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_BOOL          reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_WINDOW        reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_SHAPE         reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_TRIANGLE      reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_RECTANGLE     reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_CIRCLE        reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_POINT         reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_TEXT          reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    $end            reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_EL            reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_EF            reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_END           reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    RPAREN          reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    COMMA           reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    AND             reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)
    OR              reduce using rule 76 (arithmetic_factor -> MINUS arithmetic_factor .)


state 81

    (78) number -> DOUBLE .

    TIMES           reduce using rule 78 (number -> DOUBLE .)
    DIVIDE          reduce using rule 78 (number -> DOUBLE .)
    MOD             reduce using rule 78 (number -> DOUBLE .)
    PLUS            reduce using rule 78 (number -> DOUBLE .)
    MINUS           reduce using rule 78 (number -> DOUBLE .)
    AND             reduce using rule 78 (number -> DOUBLE .)
    RPAREN          reduce using rule 78 (number -> DOUBLE .)
    OR              reduce using rule 78 (number -> DOUBLE .)
    K_LIST          reduce using rule 78 (number -> DOUBLE .)
    K_DICT          reduce using rule 78 (number -> DOUBLE .)
    K_SET           reduce using rule 78 (number -> DOUBLE .)
    ID              reduce using rule 78 (number -> DOUBLE .)
    K_IF            reduce using rule 78 (number -> DOUBLE .)
    K_WHILE         reduce using rule 78 (number -> DOUBLE .)
    K_CONTINUE      reduce using rule 78 (number -> DOUBLE .)
    K_BREAK         reduce using rule 78 (number -> DOUBLE .)
    K_DONE          reduce using rule 78 (number -> DOUBLE .)
    K_INT           reduce using rule 78 (number -> DOUBLE .)
    K_DOUBLE        reduce using rule 78 (number -> DOUBLE .)
    K_STRING        reduce using rule 78 (number -> DOUBLE .)
    K_BOOL          reduce using rule 78 (number -> DOUBLE .)
    K_WINDOW        reduce using rule 78 (number -> DOUBLE .)
    K_SHAPE         reduce using rule 78 (number -> DOUBLE .)
    K_TRIANGLE      reduce using rule 78 (number -> DOUBLE .)
    K_RECTANGLE     reduce using rule 78 (number -> DOUBLE .)
    K_CIRCLE        reduce using rule 78 (number -> DOUBLE .)
    K_POINT         reduce using rule 78 (number -> DOUBLE .)
    K_TEXT          reduce using rule 78 (number -> DOUBLE .)
    $end            reduce using rule 78 (number -> DOUBLE .)
    K_EL            reduce using rule 78 (number -> DOUBLE .)
    K_EF            reduce using rule 78 (number -> DOUBLE .)
    K_END           reduce using rule 78 (number -> DOUBLE .)
    COMMA           reduce using rule 78 (number -> DOUBLE .)
    GT              reduce using rule 78 (number -> DOUBLE .)
    LT              reduce using rule 78 (number -> DOUBLE .)
    GEQ             reduce using rule 78 (number -> DOUBLE .)
    LEQ             reduce using rule 78 (number -> DOUBLE .)
    EQ              reduce using rule 78 (number -> DOUBLE .)
    NEQ             reduce using rule 78 (number -> DOUBLE .)


state 82

    (75) arithmetic_factor -> function_call_statement .

    TIMES           reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    DIVIDE          reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    MOD             reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    PLUS            reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    MINUS           reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    GT              reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    LT              reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    GEQ             reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    LEQ             reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    EQ              reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    NEQ             reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    K_LIST          reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    K_DICT          reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    K_SET           reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    ID              reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    K_IF            reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    K_WHILE         reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    K_CONTINUE      reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    K_BREAK         reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    K_DONE          reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    K_INT           reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    K_DOUBLE        reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    K_STRING        reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    K_BOOL          reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    K_WINDOW        reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    K_SHAPE         reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    K_TRIANGLE      reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    K_RECTANGLE     reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    K_CIRCLE        reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    K_POINT         reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    K_TEXT          reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    $end            reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    K_EL            reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    K_EF            reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    K_END           reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    RPAREN          reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    COMMA           reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    AND             reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    OR              reduce using rule 75 (arithmetic_factor -> function_call_statement .)


state 83

    (74) arithmetic_factor -> ID .
    (11) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (12) function_call_statement -> ID . LPAREN RPAREN

    TIMES           reduce using rule 74 (arithmetic_factor -> ID .)
    DIVIDE          reduce using rule 74 (arithmetic_factor -> ID .)
    MOD             reduce using rule 74 (arithmetic_factor -> ID .)
    PLUS            reduce using rule 74 (arithmetic_factor -> ID .)
    MINUS           reduce using rule 74 (arithmetic_factor -> ID .)
    GT              reduce using rule 74 (arithmetic_factor -> ID .)
    LT              reduce using rule 74 (arithmetic_factor -> ID .)
    GEQ             reduce using rule 74 (arithmetic_factor -> ID .)
    LEQ             reduce using rule 74 (arithmetic_factor -> ID .)
    EQ              reduce using rule 74 (arithmetic_factor -> ID .)
    NEQ             reduce using rule 74 (arithmetic_factor -> ID .)
    K_LIST          reduce using rule 74 (arithmetic_factor -> ID .)
    K_DICT          reduce using rule 74 (arithmetic_factor -> ID .)
    K_SET           reduce using rule 74 (arithmetic_factor -> ID .)
    ID              reduce using rule 74 (arithmetic_factor -> ID .)
    K_IF            reduce using rule 74 (arithmetic_factor -> ID .)
    K_WHILE         reduce using rule 74 (arithmetic_factor -> ID .)
    K_CONTINUE      reduce using rule 74 (arithmetic_factor -> ID .)
    K_BREAK         reduce using rule 74 (arithmetic_factor -> ID .)
    K_DONE          reduce using rule 74 (arithmetic_factor -> ID .)
    K_INT           reduce using rule 74 (arithmetic_factor -> ID .)
    K_DOUBLE        reduce using rule 74 (arithmetic_factor -> ID .)
    K_STRING        reduce using rule 74 (arithmetic_factor -> ID .)
    K_BOOL          reduce using rule 74 (arithmetic_factor -> ID .)
    K_WINDOW        reduce using rule 74 (arithmetic_factor -> ID .)
    K_SHAPE         reduce using rule 74 (arithmetic_factor -> ID .)
    K_TRIANGLE      reduce using rule 74 (arithmetic_factor -> ID .)
    K_RECTANGLE     reduce using rule 74 (arithmetic_factor -> ID .)
    K_CIRCLE        reduce using rule 74 (arithmetic_factor -> ID .)
    K_POINT         reduce using rule 74 (arithmetic_factor -> ID .)
    K_TEXT          reduce using rule 74 (arithmetic_factor -> ID .)
    $end            reduce using rule 74 (arithmetic_factor -> ID .)
    K_EL            reduce using rule 74 (arithmetic_factor -> ID .)
    K_EF            reduce using rule 74 (arithmetic_factor -> ID .)
    K_END           reduce using rule 74 (arithmetic_factor -> ID .)
    RPAREN          reduce using rule 74 (arithmetic_factor -> ID .)
    COMMA           reduce using rule 74 (arithmetic_factor -> ID .)
    AND             reduce using rule 74 (arithmetic_factor -> ID .)
    OR              reduce using rule 74 (arithmetic_factor -> ID .)
    LPAREN          shift and go to state 36


state 84

    (72) arithmetic_factor -> LPAREN . arithmetic_expression RPAREN
    (65) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (66) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (67) arithmetic_expression -> . arithmetic_term
    (68) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (69) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (70) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (71) arithmetic_term -> . arithmetic_factor
    (72) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (73) arithmetic_factor -> . number
    (74) arithmetic_factor -> . ID
    (75) arithmetic_factor -> . function_call_statement
    (76) arithmetic_factor -> . MINUS arithmetic_factor
    (77) number -> . INTEGER
    (78) number -> . DOUBLE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 84
    ID              shift and go to state 83
    MINUS           shift and go to state 42
    INTEGER         shift and go to state 85
    DOUBLE          shift and go to state 81

    arithmetic_expression          shift and go to state 112
    arithmetic_factor              shift and go to state 43
    number                         shift and go to state 51
    function_call_statement        shift and go to state 82
    arithmetic_term                shift and go to state 41

state 85

    (77) number -> INTEGER .

    TIMES           reduce using rule 77 (number -> INTEGER .)
    DIVIDE          reduce using rule 77 (number -> INTEGER .)
    MOD             reduce using rule 77 (number -> INTEGER .)
    PLUS            reduce using rule 77 (number -> INTEGER .)
    MINUS           reduce using rule 77 (number -> INTEGER .)
    AND             reduce using rule 77 (number -> INTEGER .)
    RPAREN          reduce using rule 77 (number -> INTEGER .)
    OR              reduce using rule 77 (number -> INTEGER .)
    K_LIST          reduce using rule 77 (number -> INTEGER .)
    K_DICT          reduce using rule 77 (number -> INTEGER .)
    K_SET           reduce using rule 77 (number -> INTEGER .)
    ID              reduce using rule 77 (number -> INTEGER .)
    K_IF            reduce using rule 77 (number -> INTEGER .)
    K_WHILE         reduce using rule 77 (number -> INTEGER .)
    K_CONTINUE      reduce using rule 77 (number -> INTEGER .)
    K_BREAK         reduce using rule 77 (number -> INTEGER .)
    K_DONE          reduce using rule 77 (number -> INTEGER .)
    K_INT           reduce using rule 77 (number -> INTEGER .)
    K_DOUBLE        reduce using rule 77 (number -> INTEGER .)
    K_STRING        reduce using rule 77 (number -> INTEGER .)
    K_BOOL          reduce using rule 77 (number -> INTEGER .)
    K_WINDOW        reduce using rule 77 (number -> INTEGER .)
    K_SHAPE         reduce using rule 77 (number -> INTEGER .)
    K_TRIANGLE      reduce using rule 77 (number -> INTEGER .)
    K_RECTANGLE     reduce using rule 77 (number -> INTEGER .)
    K_CIRCLE        reduce using rule 77 (number -> INTEGER .)
    K_POINT         reduce using rule 77 (number -> INTEGER .)
    K_TEXT          reduce using rule 77 (number -> INTEGER .)
    $end            reduce using rule 77 (number -> INTEGER .)
    K_EL            reduce using rule 77 (number -> INTEGER .)
    K_EF            reduce using rule 77 (number -> INTEGER .)
    K_END           reduce using rule 77 (number -> INTEGER .)
    COMMA           reduce using rule 77 (number -> INTEGER .)
    GT              reduce using rule 77 (number -> INTEGER .)
    LT              reduce using rule 77 (number -> INTEGER .)
    GEQ             reduce using rule 77 (number -> INTEGER .)
    LEQ             reduce using rule 77 (number -> INTEGER .)
    EQ              reduce using rule 77 (number -> INTEGER .)
    NEQ             reduce using rule 77 (number -> INTEGER .)


state 86

    (55) boolean_factor -> arithmetic_expression comparator . arithmetic_expression
    (65) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (66) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (67) arithmetic_expression -> . arithmetic_term
    (68) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (69) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (70) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (71) arithmetic_term -> . arithmetic_factor
    (72) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (73) arithmetic_factor -> . number
    (74) arithmetic_factor -> . ID
    (75) arithmetic_factor -> . function_call_statement
    (76) arithmetic_factor -> . MINUS arithmetic_factor
    (77) number -> . INTEGER
    (78) number -> . DOUBLE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 84
    ID              shift and go to state 83
    MINUS           shift and go to state 42
    INTEGER         shift and go to state 85
    DOUBLE          shift and go to state 81

    arithmetic_expression          shift and go to state 113
    arithmetic_factor              shift and go to state 43
    number                         shift and go to state 51
    function_call_statement        shift and go to state 82
    arithmetic_term                shift and go to state 41

state 87

    (65) arithmetic_expression -> arithmetic_expression PLUS . arithmetic_term
    (68) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (69) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (70) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (71) arithmetic_term -> . arithmetic_factor
    (72) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (73) arithmetic_factor -> . number
    (74) arithmetic_factor -> . ID
    (75) arithmetic_factor -> . function_call_statement
    (76) arithmetic_factor -> . MINUS arithmetic_factor
    (77) number -> . INTEGER
    (78) number -> . DOUBLE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 84
    ID              shift and go to state 83
    MINUS           shift and go to state 42
    INTEGER         shift and go to state 85
    DOUBLE          shift and go to state 81

    arithmetic_factor              shift and go to state 43
    number                         shift and go to state 51
    function_call_statement        shift and go to state 82
    arithmetic_term                shift and go to state 114

state 88

    (66) arithmetic_expression -> arithmetic_expression MINUS . arithmetic_term
    (68) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (69) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (70) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (71) arithmetic_term -> . arithmetic_factor
    (72) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (73) arithmetic_factor -> . number
    (74) arithmetic_factor -> . ID
    (75) arithmetic_factor -> . function_call_statement
    (76) arithmetic_factor -> . MINUS arithmetic_factor
    (77) number -> . INTEGER
    (78) number -> . DOUBLE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 84
    ID              shift and go to state 83
    MINUS           shift and go to state 42
    INTEGER         shift and go to state 85
    DOUBLE          shift and go to state 81

    arithmetic_factor              shift and go to state 43
    number                         shift and go to state 51
    function_call_statement        shift and go to state 82
    arithmetic_term                shift and go to state 115

state 89

    (56) boolean_factor -> string_expression comparator . string_expression
    (37) string_expression -> . string_expression PLUS string_term
    (38) string_expression -> . string_term
    (39) string_term -> . function_call_statement
    (40) string_term -> . STRING
    (41) string_term -> . ID
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    STRING          shift and go to state 117
    ID              shift and go to state 119

    string_expression              shift and go to state 116
    string_term                    shift and go to state 48
    function_call_statement        shift and go to state 118

state 90

    (37) string_expression -> string_expression PLUS . string_term
    (39) string_term -> . function_call_statement
    (40) string_term -> . STRING
    (41) string_term -> . ID
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    STRING          shift and go to state 117
    ID              shift and go to state 119

    string_term                    shift and go to state 120
    function_call_statement        shift and go to state 118

state 91

    (75) arithmetic_factor -> function_call_statement .
    (45) unary_expression -> function_call_statement .
    (39) string_term -> function_call_statement .

  ! reduce/reduce conflict for GT resolved using rule 45 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for LT resolved using rule 45 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for GEQ resolved using rule 45 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for LEQ resolved using rule 45 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for EQ resolved using rule 45 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for NEQ resolved using rule 45 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for RPAREN resolved using rule 45 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for PLUS resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for GT resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for LT resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for GEQ resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for LEQ resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for EQ resolved using rule 39 (string_term -> function_call_statement .)
  ! reduce/reduce conflict for NEQ resolved using rule 39 (string_term -> function_call_statement .)
    TIMES           reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    DIVIDE          reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    MOD             reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    MINUS           reduce using rule 75 (arithmetic_factor -> function_call_statement .)
    AND             reduce using rule 45 (unary_expression -> function_call_statement .)
    RPAREN          reduce using rule 45 (unary_expression -> function_call_statement .)
    OR              reduce using rule 45 (unary_expression -> function_call_statement .)
    PLUS            reduce using rule 39 (string_term -> function_call_statement .)
    GT              reduce using rule 39 (string_term -> function_call_statement .)
    LT              reduce using rule 39 (string_term -> function_call_statement .)
    GEQ             reduce using rule 39 (string_term -> function_call_statement .)
    LEQ             reduce using rule 39 (string_term -> function_call_statement .)
    EQ              reduce using rule 39 (string_term -> function_call_statement .)
    NEQ             reduce using rule 39 (string_term -> function_call_statement .)

  ! RPAREN          [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! PLUS            [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! GT              [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! LT              [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! GEQ             [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! LEQ             [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! EQ              [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! NEQ             [ reduce using rule 75 (arithmetic_factor -> function_call_statement .) ]
  ! GT              [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! LT              [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! GEQ             [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! LEQ             [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! EQ              [ reduce using rule 45 (unary_expression -> function_call_statement .) ]
  ! NEQ             [ reduce using rule 45 (unary_expression -> function_call_statement .) ]


state 92

    (72) arithmetic_factor -> LPAREN arithmetic_expression . RPAREN
    (65) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (66) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term
    (55) boolean_factor -> arithmetic_expression . comparator arithmetic_expression
    (59) comparator -> . GT
    (60) comparator -> . LT
    (61) comparator -> . GEQ
    (62) comparator -> . LEQ
    (63) comparator -> . EQ
    (64) comparator -> . NEQ

    RPAREN          shift and go to state 121
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    GT              shift and go to state 69
    LT              shift and go to state 72
    GEQ             shift and go to state 68
    LEQ             shift and go to state 71
    EQ              shift and go to state 73
    NEQ             shift and go to state 74

    comparator                     shift and go to state 86

state 93

    (74) arithmetic_factor -> ID .
    (42) unary_expression -> ID .
    (11) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (12) function_call_statement -> ID . LPAREN RPAREN
    (41) string_term -> ID .

  ! reduce/reduce conflict for GT resolved using rule 42 (unary_expression -> ID .)
  ! reduce/reduce conflict for LT resolved using rule 42 (unary_expression -> ID .)
  ! reduce/reduce conflict for GEQ resolved using rule 42 (unary_expression -> ID .)
  ! reduce/reduce conflict for LEQ resolved using rule 42 (unary_expression -> ID .)
  ! reduce/reduce conflict for EQ resolved using rule 42 (unary_expression -> ID .)
  ! reduce/reduce conflict for NEQ resolved using rule 42 (unary_expression -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 42 (unary_expression -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for GT resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for LT resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for GEQ resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for LEQ resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for EQ resolved using rule 41 (string_term -> ID .)
  ! reduce/reduce conflict for NEQ resolved using rule 41 (string_term -> ID .)
    TIMES           reduce using rule 74 (arithmetic_factor -> ID .)
    DIVIDE          reduce using rule 74 (arithmetic_factor -> ID .)
    MOD             reduce using rule 74 (arithmetic_factor -> ID .)
    MINUS           reduce using rule 74 (arithmetic_factor -> ID .)
    AND             reduce using rule 42 (unary_expression -> ID .)
    RPAREN          reduce using rule 42 (unary_expression -> ID .)
    OR              reduce using rule 42 (unary_expression -> ID .)
    LPAREN          shift and go to state 36
    PLUS            reduce using rule 41 (string_term -> ID .)
    GT              reduce using rule 41 (string_term -> ID .)
    LT              reduce using rule 41 (string_term -> ID .)
    GEQ             reduce using rule 41 (string_term -> ID .)
    LEQ             reduce using rule 41 (string_term -> ID .)
    EQ              reduce using rule 41 (string_term -> ID .)
    NEQ             reduce using rule 41 (string_term -> ID .)

  ! RPAREN          [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! PLUS            [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! GT              [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! LT              [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! GEQ             [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! LEQ             [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! EQ              [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! NEQ             [ reduce using rule 74 (arithmetic_factor -> ID .) ]
  ! GT              [ reduce using rule 42 (unary_expression -> ID .) ]
  ! LT              [ reduce using rule 42 (unary_expression -> ID .) ]
  ! GEQ             [ reduce using rule 42 (unary_expression -> ID .) ]
  ! LEQ             [ reduce using rule 42 (unary_expression -> ID .) ]
  ! EQ              [ reduce using rule 42 (unary_expression -> ID .) ]
  ! NEQ             [ reduce using rule 42 (unary_expression -> ID .) ]


state 94

    (53) boolean_factor -> LPAREN boolean_expression . RPAREN
    (49) boolean_expression -> boolean_expression . OR boolean_term

    RPAREN          shift and go to state 122
    OR              shift and go to state 96


state 95

    (79) selection_statement -> K_IF LPAREN boolean_expression RPAREN . compound_statement_list else_if_statement_list else_statement K_END
    (85) compound_statement_list -> .
    (86) compound_statement_list -> . compound_statement_list compound_statement

    ID              reduce using rule 85 (compound_statement_list -> .)
    K_IF            reduce using rule 85 (compound_statement_list -> .)
    K_WHILE         reduce using rule 85 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 85 (compound_statement_list -> .)
    K_BREAK         reduce using rule 85 (compound_statement_list -> .)
    K_DONE          reduce using rule 85 (compound_statement_list -> .)
    K_LIST          reduce using rule 85 (compound_statement_list -> .)
    K_DICT          reduce using rule 85 (compound_statement_list -> .)
    K_SET           reduce using rule 85 (compound_statement_list -> .)
    K_EL            reduce using rule 85 (compound_statement_list -> .)
    K_EF            reduce using rule 85 (compound_statement_list -> .)
    K_END           reduce using rule 85 (compound_statement_list -> .)
    K_INT           reduce using rule 85 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 85 (compound_statement_list -> .)
    K_STRING        reduce using rule 85 (compound_statement_list -> .)
    K_BOOL          reduce using rule 85 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 85 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 85 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 85 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 85 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 85 (compound_statement_list -> .)
    K_POINT         reduce using rule 85 (compound_statement_list -> .)
    K_TEXT          reduce using rule 85 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 123

state 96

    (49) boolean_expression -> boolean_expression OR . boolean_term
    (51) boolean_term -> . boolean_term AND boolean_factor
    (52) boolean_term -> . boolean_factor
    (53) boolean_factor -> . LPAREN boolean_expression RPAREN
    (54) boolean_factor -> . unary_expression comparator unary_expression
    (55) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (56) boolean_factor -> . string_expression comparator string_expression
    (57) boolean_factor -> . unary_expression
    (58) boolean_factor -> . NEG boolean_factor
    (42) unary_expression -> . ID
    (43) unary_expression -> . STRING
    (44) unary_expression -> . INTEGER
    (45) unary_expression -> . function_call_statement
    (46) unary_expression -> . DOUBLE
    (47) unary_expression -> . K_TRUE
    (48) unary_expression -> . K_FALSE
    (65) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (66) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (67) arithmetic_expression -> . arithmetic_term
    (37) string_expression -> . string_expression PLUS string_term
    (38) string_expression -> . string_term
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (68) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (69) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (70) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (71) arithmetic_term -> . arithmetic_factor
    (39) string_term -> . function_call_statement
    (40) string_term -> . STRING
    (41) string_term -> . ID
    (72) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (73) arithmetic_factor -> . number
    (74) arithmetic_factor -> . ID
    (75) arithmetic_factor -> . function_call_statement
    (76) arithmetic_factor -> . MINUS arithmetic_factor
    (77) number -> . INTEGER
    (78) number -> . DOUBLE

    LPAREN          shift and go to state 49
    NEG             shift and go to state 38
    ID              shift and go to state 52
    STRING          shift and go to state 47
    INTEGER         shift and go to state 44
    DOUBLE          shift and go to state 54
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 56
    MINUS           shift and go to state 42

    arithmetic_expression          shift and go to state 45
    string_expression              shift and go to state 46
    unary_expression               shift and go to state 37
    arithmetic_factor              shift and go to state 43
    boolean_term                   shift and go to state 124
    function_call_statement        shift and go to state 55
    number                         shift and go to state 51
    string_term                    shift and go to state 48
    arithmetic_term                shift and go to state 41
    boolean_factor                 shift and go to state 50

state 97

    (87) iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN . compound_statement_list K_END
    (85) compound_statement_list -> .
    (86) compound_statement_list -> . compound_statement_list compound_statement

    K_END           reduce using rule 85 (compound_statement_list -> .)
    ID              reduce using rule 85 (compound_statement_list -> .)
    K_IF            reduce using rule 85 (compound_statement_list -> .)
    K_WHILE         reduce using rule 85 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 85 (compound_statement_list -> .)
    K_BREAK         reduce using rule 85 (compound_statement_list -> .)
    K_DONE          reduce using rule 85 (compound_statement_list -> .)
    K_LIST          reduce using rule 85 (compound_statement_list -> .)
    K_DICT          reduce using rule 85 (compound_statement_list -> .)
    K_SET           reduce using rule 85 (compound_statement_list -> .)
    K_INT           reduce using rule 85 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 85 (compound_statement_list -> .)
    K_STRING        reduce using rule 85 (compound_statement_list -> .)
    K_BOOL          reduce using rule 85 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 85 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 85 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 85 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 85 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 85 (compound_statement_list -> .)
    K_POINT         reduce using rule 85 (compound_statement_list -> .)
    K_TEXT          reduce using rule 85 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 125

state 98

    (16) variable_declaration -> pre_type_modifier type ID ASSIGN . expression
    (33) expression -> . string_expression
    (34) expression -> . unary_expression
    (35) expression -> . boolean_expression
    (36) expression -> . arithmetic_expression
    (37) string_expression -> . string_expression PLUS string_term
    (38) string_expression -> . string_term
    (42) unary_expression -> . ID
    (43) unary_expression -> . STRING
    (44) unary_expression -> . INTEGER
    (45) unary_expression -> . function_call_statement
    (46) unary_expression -> . DOUBLE
    (47) unary_expression -> . K_TRUE
    (48) unary_expression -> . K_FALSE
    (49) boolean_expression -> . boolean_expression OR boolean_term
    (50) boolean_expression -> . boolean_term
    (65) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (66) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (67) arithmetic_expression -> . arithmetic_term
    (39) string_term -> . function_call_statement
    (40) string_term -> . STRING
    (41) string_term -> . ID
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (51) boolean_term -> . boolean_term AND boolean_factor
    (52) boolean_term -> . boolean_factor
    (68) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (69) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (70) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (71) arithmetic_term -> . arithmetic_factor
    (53) boolean_factor -> . LPAREN boolean_expression RPAREN
    (54) boolean_factor -> . unary_expression comparator unary_expression
    (55) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (56) boolean_factor -> . string_expression comparator string_expression
    (57) boolean_factor -> . unary_expression
    (58) boolean_factor -> . NEG boolean_factor
    (72) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (73) arithmetic_factor -> . number
    (74) arithmetic_factor -> . ID
    (75) arithmetic_factor -> . function_call_statement
    (76) arithmetic_factor -> . MINUS arithmetic_factor
    (77) number -> . INTEGER
    (78) number -> . DOUBLE

    ID              shift and go to state 62
    STRING          shift and go to state 47
    INTEGER         shift and go to state 44
    DOUBLE          shift and go to state 54
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 56
    LPAREN          shift and go to state 49
    NEG             shift and go to state 38
    MINUS           shift and go to state 42

    arithmetic_expression          shift and go to state 60
    string_expression              shift and go to state 61
    number                         shift and go to state 51
    unary_expression               shift and go to state 59
    boolean_expression             shift and go to state 63
    arithmetic_factor              shift and go to state 43
    boolean_term                   shift and go to state 39
    function_call_statement        shift and go to state 55
    string_term                    shift and go to state 48
    arithmetic_term                shift and go to state 41
    boolean_factor                 shift and go to state 50
    expression                     shift and go to state 126

state 99

    (91) function_declaration -> pre_type_modifier type ID LPAREN . argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END
    (92) function_declaration -> pre_type_modifier type ID LPAREN . RPAREN ASSIGN unary_expression compound_statement_list K_END
    (93) argument_list -> . argument_list COMMA argument
    (94) argument_list -> . argument
    (95) argument -> . pre_type_modifier type ID
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    RPAREN          shift and go to state 127
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    argument                       shift and go to state 128
    argument_list                  shift and go to state 129
    pre_type_modifier              shift and go to state 130

state 100

    (11) function_call_statement -> ID LPAREN parameter_list RPAREN .

    K_END           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    ID              reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_IF            reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_WHILE         reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_CONTINUE      reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_BREAK         reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_DONE          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_LIST          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_DICT          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_SET           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_INT           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_DOUBLE        reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_STRING        reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_BOOL          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_WINDOW        reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_SHAPE         reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_TRIANGLE      reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_RECTANGLE     reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_CIRCLE        reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_POINT         reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_TEXT          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    GT              reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    LT              reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    GEQ             reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    LEQ             reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    EQ              reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    NEQ             reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    AND             reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    OR              reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    MOD             reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    $end            reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_EL            reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_EF            reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)


state 101

    (13) parameter_list -> parameter_list COMMA . expression
    (33) expression -> . string_expression
    (34) expression -> . unary_expression
    (35) expression -> . boolean_expression
    (36) expression -> . arithmetic_expression
    (37) string_expression -> . string_expression PLUS string_term
    (38) string_expression -> . string_term
    (42) unary_expression -> . ID
    (43) unary_expression -> . STRING
    (44) unary_expression -> . INTEGER
    (45) unary_expression -> . function_call_statement
    (46) unary_expression -> . DOUBLE
    (47) unary_expression -> . K_TRUE
    (48) unary_expression -> . K_FALSE
    (49) boolean_expression -> . boolean_expression OR boolean_term
    (50) boolean_expression -> . boolean_term
    (65) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (66) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (67) arithmetic_expression -> . arithmetic_term
    (39) string_term -> . function_call_statement
    (40) string_term -> . STRING
    (41) string_term -> . ID
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (51) boolean_term -> . boolean_term AND boolean_factor
    (52) boolean_term -> . boolean_factor
    (68) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (69) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (70) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (71) arithmetic_term -> . arithmetic_factor
    (53) boolean_factor -> . LPAREN boolean_expression RPAREN
    (54) boolean_factor -> . unary_expression comparator unary_expression
    (55) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (56) boolean_factor -> . string_expression comparator string_expression
    (57) boolean_factor -> . unary_expression
    (58) boolean_factor -> . NEG boolean_factor
    (72) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (73) arithmetic_factor -> . number
    (74) arithmetic_factor -> . ID
    (75) arithmetic_factor -> . function_call_statement
    (76) arithmetic_factor -> . MINUS arithmetic_factor
    (77) number -> . INTEGER
    (78) number -> . DOUBLE

    ID              shift and go to state 62
    STRING          shift and go to state 47
    INTEGER         shift and go to state 44
    DOUBLE          shift and go to state 54
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 56
    LPAREN          shift and go to state 49
    NEG             shift and go to state 38
    MINUS           shift and go to state 42

    arithmetic_expression          shift and go to state 60
    string_expression              shift and go to state 61
    number                         shift and go to state 51
    unary_expression               shift and go to state 59
    boolean_expression             shift and go to state 63
    arithmetic_factor              shift and go to state 43
    boolean_term                   shift and go to state 39
    function_call_statement        shift and go to state 55
    string_term                    shift and go to state 48
    arithmetic_term                shift and go to state 41
    boolean_factor                 shift and go to state 50
    expression                     shift and go to state 131

state 102

    (43) unary_expression -> STRING .

    AND             reduce using rule 43 (unary_expression -> STRING .)
    RPAREN          reduce using rule 43 (unary_expression -> STRING .)
    OR              reduce using rule 43 (unary_expression -> STRING .)
    K_LIST          reduce using rule 43 (unary_expression -> STRING .)
    K_DICT          reduce using rule 43 (unary_expression -> STRING .)
    K_SET           reduce using rule 43 (unary_expression -> STRING .)
    ID              reduce using rule 43 (unary_expression -> STRING .)
    K_IF            reduce using rule 43 (unary_expression -> STRING .)
    K_WHILE         reduce using rule 43 (unary_expression -> STRING .)
    K_CONTINUE      reduce using rule 43 (unary_expression -> STRING .)
    K_BREAK         reduce using rule 43 (unary_expression -> STRING .)
    K_DONE          reduce using rule 43 (unary_expression -> STRING .)
    K_INT           reduce using rule 43 (unary_expression -> STRING .)
    K_DOUBLE        reduce using rule 43 (unary_expression -> STRING .)
    K_STRING        reduce using rule 43 (unary_expression -> STRING .)
    K_BOOL          reduce using rule 43 (unary_expression -> STRING .)
    K_WINDOW        reduce using rule 43 (unary_expression -> STRING .)
    K_SHAPE         reduce using rule 43 (unary_expression -> STRING .)
    K_TRIANGLE      reduce using rule 43 (unary_expression -> STRING .)
    K_RECTANGLE     reduce using rule 43 (unary_expression -> STRING .)
    K_CIRCLE        reduce using rule 43 (unary_expression -> STRING .)
    K_POINT         reduce using rule 43 (unary_expression -> STRING .)
    K_TEXT          reduce using rule 43 (unary_expression -> STRING .)
    $end            reduce using rule 43 (unary_expression -> STRING .)
    K_EL            reduce using rule 43 (unary_expression -> STRING .)
    K_EF            reduce using rule 43 (unary_expression -> STRING .)
    K_END           reduce using rule 43 (unary_expression -> STRING .)
    COMMA           reduce using rule 43 (unary_expression -> STRING .)


state 103

    (46) unary_expression -> DOUBLE .

    AND             reduce using rule 46 (unary_expression -> DOUBLE .)
    RPAREN          reduce using rule 46 (unary_expression -> DOUBLE .)
    OR              reduce using rule 46 (unary_expression -> DOUBLE .)
    K_LIST          reduce using rule 46 (unary_expression -> DOUBLE .)
    K_DICT          reduce using rule 46 (unary_expression -> DOUBLE .)
    K_SET           reduce using rule 46 (unary_expression -> DOUBLE .)
    ID              reduce using rule 46 (unary_expression -> DOUBLE .)
    K_IF            reduce using rule 46 (unary_expression -> DOUBLE .)
    K_WHILE         reduce using rule 46 (unary_expression -> DOUBLE .)
    K_CONTINUE      reduce using rule 46 (unary_expression -> DOUBLE .)
    K_BREAK         reduce using rule 46 (unary_expression -> DOUBLE .)
    K_DONE          reduce using rule 46 (unary_expression -> DOUBLE .)
    K_INT           reduce using rule 46 (unary_expression -> DOUBLE .)
    K_DOUBLE        reduce using rule 46 (unary_expression -> DOUBLE .)
    K_STRING        reduce using rule 46 (unary_expression -> DOUBLE .)
    K_BOOL          reduce using rule 46 (unary_expression -> DOUBLE .)
    K_WINDOW        reduce using rule 46 (unary_expression -> DOUBLE .)
    K_SHAPE         reduce using rule 46 (unary_expression -> DOUBLE .)
    K_TRIANGLE      reduce using rule 46 (unary_expression -> DOUBLE .)
    K_RECTANGLE     reduce using rule 46 (unary_expression -> DOUBLE .)
    K_CIRCLE        reduce using rule 46 (unary_expression -> DOUBLE .)
    K_POINT         reduce using rule 46 (unary_expression -> DOUBLE .)
    K_TEXT          reduce using rule 46 (unary_expression -> DOUBLE .)
    $end            reduce using rule 46 (unary_expression -> DOUBLE .)
    K_EL            reduce using rule 46 (unary_expression -> DOUBLE .)
    K_EF            reduce using rule 46 (unary_expression -> DOUBLE .)
    K_END           reduce using rule 46 (unary_expression -> DOUBLE .)
    COMMA           reduce using rule 46 (unary_expression -> DOUBLE .)


state 104

    (45) unary_expression -> function_call_statement .

    AND             reduce using rule 45 (unary_expression -> function_call_statement .)
    RPAREN          reduce using rule 45 (unary_expression -> function_call_statement .)
    OR              reduce using rule 45 (unary_expression -> function_call_statement .)
    K_LIST          reduce using rule 45 (unary_expression -> function_call_statement .)
    K_DICT          reduce using rule 45 (unary_expression -> function_call_statement .)
    K_SET           reduce using rule 45 (unary_expression -> function_call_statement .)
    ID              reduce using rule 45 (unary_expression -> function_call_statement .)
    K_IF            reduce using rule 45 (unary_expression -> function_call_statement .)
    K_WHILE         reduce using rule 45 (unary_expression -> function_call_statement .)
    K_CONTINUE      reduce using rule 45 (unary_expression -> function_call_statement .)
    K_BREAK         reduce using rule 45 (unary_expression -> function_call_statement .)
    K_DONE          reduce using rule 45 (unary_expression -> function_call_statement .)
    K_INT           reduce using rule 45 (unary_expression -> function_call_statement .)
    K_DOUBLE        reduce using rule 45 (unary_expression -> function_call_statement .)
    K_STRING        reduce using rule 45 (unary_expression -> function_call_statement .)
    K_BOOL          reduce using rule 45 (unary_expression -> function_call_statement .)
    K_WINDOW        reduce using rule 45 (unary_expression -> function_call_statement .)
    K_SHAPE         reduce using rule 45 (unary_expression -> function_call_statement .)
    K_TRIANGLE      reduce using rule 45 (unary_expression -> function_call_statement .)
    K_RECTANGLE     reduce using rule 45 (unary_expression -> function_call_statement .)
    K_CIRCLE        reduce using rule 45 (unary_expression -> function_call_statement .)
    K_POINT         reduce using rule 45 (unary_expression -> function_call_statement .)
    K_TEXT          reduce using rule 45 (unary_expression -> function_call_statement .)
    $end            reduce using rule 45 (unary_expression -> function_call_statement .)
    K_EL            reduce using rule 45 (unary_expression -> function_call_statement .)
    K_EF            reduce using rule 45 (unary_expression -> function_call_statement .)
    K_END           reduce using rule 45 (unary_expression -> function_call_statement .)
    COMMA           reduce using rule 45 (unary_expression -> function_call_statement .)


state 105

    (44) unary_expression -> INTEGER .

    AND             reduce using rule 44 (unary_expression -> INTEGER .)
    RPAREN          reduce using rule 44 (unary_expression -> INTEGER .)
    OR              reduce using rule 44 (unary_expression -> INTEGER .)
    K_LIST          reduce using rule 44 (unary_expression -> INTEGER .)
    K_DICT          reduce using rule 44 (unary_expression -> INTEGER .)
    K_SET           reduce using rule 44 (unary_expression -> INTEGER .)
    ID              reduce using rule 44 (unary_expression -> INTEGER .)
    K_IF            reduce using rule 44 (unary_expression -> INTEGER .)
    K_WHILE         reduce using rule 44 (unary_expression -> INTEGER .)
    K_CONTINUE      reduce using rule 44 (unary_expression -> INTEGER .)
    K_BREAK         reduce using rule 44 (unary_expression -> INTEGER .)
    K_DONE          reduce using rule 44 (unary_expression -> INTEGER .)
    K_INT           reduce using rule 44 (unary_expression -> INTEGER .)
    K_DOUBLE        reduce using rule 44 (unary_expression -> INTEGER .)
    K_STRING        reduce using rule 44 (unary_expression -> INTEGER .)
    K_BOOL          reduce using rule 44 (unary_expression -> INTEGER .)
    K_WINDOW        reduce using rule 44 (unary_expression -> INTEGER .)
    K_SHAPE         reduce using rule 44 (unary_expression -> INTEGER .)
    K_TRIANGLE      reduce using rule 44 (unary_expression -> INTEGER .)
    K_RECTANGLE     reduce using rule 44 (unary_expression -> INTEGER .)
    K_CIRCLE        reduce using rule 44 (unary_expression -> INTEGER .)
    K_POINT         reduce using rule 44 (unary_expression -> INTEGER .)
    K_TEXT          reduce using rule 44 (unary_expression -> INTEGER .)
    $end            reduce using rule 44 (unary_expression -> INTEGER .)
    K_EL            reduce using rule 44 (unary_expression -> INTEGER .)
    K_EF            reduce using rule 44 (unary_expression -> INTEGER .)
    K_END           reduce using rule 44 (unary_expression -> INTEGER .)
    COMMA           reduce using rule 44 (unary_expression -> INTEGER .)


state 106

    (54) boolean_factor -> unary_expression comparator unary_expression .

    AND             reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    RPAREN          reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    OR              reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    K_LIST          reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    K_DICT          reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    K_SET           reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    ID              reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    K_IF            reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    K_WHILE         reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    K_CONTINUE      reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    K_BREAK         reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    K_DONE          reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    K_INT           reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    K_DOUBLE        reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    K_STRING        reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    K_BOOL          reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    K_WINDOW        reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    K_SHAPE         reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    K_TRIANGLE      reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    K_RECTANGLE     reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    K_CIRCLE        reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    K_POINT         reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    K_TEXT          reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    $end            reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    K_EL            reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    K_EF            reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    K_END           reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)
    COMMA           reduce using rule 54 (boolean_factor -> unary_expression comparator unary_expression .)


state 107

    (42) unary_expression -> ID .
    (11) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (12) function_call_statement -> ID . LPAREN RPAREN

    AND             reduce using rule 42 (unary_expression -> ID .)
    RPAREN          reduce using rule 42 (unary_expression -> ID .)
    OR              reduce using rule 42 (unary_expression -> ID .)
    K_LIST          reduce using rule 42 (unary_expression -> ID .)
    K_DICT          reduce using rule 42 (unary_expression -> ID .)
    K_SET           reduce using rule 42 (unary_expression -> ID .)
    ID              reduce using rule 42 (unary_expression -> ID .)
    K_IF            reduce using rule 42 (unary_expression -> ID .)
    K_WHILE         reduce using rule 42 (unary_expression -> ID .)
    K_CONTINUE      reduce using rule 42 (unary_expression -> ID .)
    K_BREAK         reduce using rule 42 (unary_expression -> ID .)
    K_DONE          reduce using rule 42 (unary_expression -> ID .)
    K_INT           reduce using rule 42 (unary_expression -> ID .)
    K_DOUBLE        reduce using rule 42 (unary_expression -> ID .)
    K_STRING        reduce using rule 42 (unary_expression -> ID .)
    K_BOOL          reduce using rule 42 (unary_expression -> ID .)
    K_WINDOW        reduce using rule 42 (unary_expression -> ID .)
    K_SHAPE         reduce using rule 42 (unary_expression -> ID .)
    K_TRIANGLE      reduce using rule 42 (unary_expression -> ID .)
    K_RECTANGLE     reduce using rule 42 (unary_expression -> ID .)
    K_CIRCLE        reduce using rule 42 (unary_expression -> ID .)
    K_POINT         reduce using rule 42 (unary_expression -> ID .)
    K_TEXT          reduce using rule 42 (unary_expression -> ID .)
    $end            reduce using rule 42 (unary_expression -> ID .)
    K_EL            reduce using rule 42 (unary_expression -> ID .)
    K_EF            reduce using rule 42 (unary_expression -> ID .)
    K_END           reduce using rule 42 (unary_expression -> ID .)
    COMMA           reduce using rule 42 (unary_expression -> ID .)
    LPAREN          shift and go to state 36


state 108

    (51) boolean_term -> boolean_term AND boolean_factor .

    AND             reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    RPAREN          reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    OR              reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    K_LIST          reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    K_DICT          reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    K_SET           reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    ID              reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    K_IF            reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    K_WHILE         reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    K_CONTINUE      reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    K_BREAK         reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    K_DONE          reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    K_INT           reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    K_DOUBLE        reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    K_STRING        reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    K_BOOL          reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    K_WINDOW        reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    K_SHAPE         reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    K_TRIANGLE      reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    K_RECTANGLE     reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    K_CIRCLE        reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    K_POINT         reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    K_TEXT          reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    $end            reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    K_EL            reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    K_EF            reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    K_END           reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)
    COMMA           reduce using rule 51 (boolean_term -> boolean_term AND boolean_factor .)


state 109

    (70) arithmetic_term -> arithmetic_term MOD arithmetic_factor .

    TIMES           reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    DIVIDE          reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    MOD             reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    PLUS            reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    MINUS           reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    GT              reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    LT              reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    GEQ             reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    LEQ             reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    EQ              reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    NEQ             reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_LIST          reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_DICT          reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_SET           reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    ID              reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_IF            reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_WHILE         reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_CONTINUE      reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_BREAK         reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_DONE          reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_INT           reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_DOUBLE        reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_STRING        reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_BOOL          reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_WINDOW        reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_SHAPE         reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_TRIANGLE      reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_RECTANGLE     reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_CIRCLE        reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_POINT         reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_TEXT          reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    $end            reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_EL            reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_EF            reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_END           reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    RPAREN          reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    COMMA           reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    AND             reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    OR              reduce using rule 70 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)


state 110

    (69) arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .

    TIMES           reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    DIVIDE          reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    MOD             reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    PLUS            reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    MINUS           reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    GT              reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    LT              reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    GEQ             reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    LEQ             reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    EQ              reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    NEQ             reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_LIST          reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_DICT          reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_SET           reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    ID              reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_IF            reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_WHILE         reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_CONTINUE      reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_BREAK         reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_DONE          reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_INT           reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_DOUBLE        reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_STRING        reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_BOOL          reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_WINDOW        reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_SHAPE         reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_TRIANGLE      reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_RECTANGLE     reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_CIRCLE        reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_POINT         reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_TEXT          reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    $end            reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_EL            reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_EF            reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_END           reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    RPAREN          reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    COMMA           reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    AND             reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    OR              reduce using rule 69 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)


state 111

    (68) arithmetic_term -> arithmetic_term TIMES arithmetic_factor .

    TIMES           reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    DIVIDE          reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    MOD             reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    PLUS            reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    MINUS           reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    GT              reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    LT              reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    GEQ             reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    LEQ             reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    EQ              reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    NEQ             reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_LIST          reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_DICT          reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_SET           reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    ID              reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_IF            reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_WHILE         reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_CONTINUE      reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_BREAK         reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_DONE          reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_INT           reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_DOUBLE        reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_STRING        reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_BOOL          reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_WINDOW        reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_SHAPE         reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_TRIANGLE      reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_RECTANGLE     reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_CIRCLE        reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_POINT         reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_TEXT          reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    $end            reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_EL            reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_EF            reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_END           reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    RPAREN          reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    COMMA           reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    AND             reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    OR              reduce using rule 68 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)


state 112

    (72) arithmetic_factor -> LPAREN arithmetic_expression . RPAREN
    (65) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (66) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term

    RPAREN          shift and go to state 121
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88


state 113

    (55) boolean_factor -> arithmetic_expression comparator arithmetic_expression .
    (65) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (66) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term

    AND             reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    RPAREN          reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    OR              reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_LIST          reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_DICT          reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_SET           reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    ID              reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_IF            reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_WHILE         reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_CONTINUE      reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_BREAK         reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_DONE          reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_INT           reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_DOUBLE        reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_STRING        reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_BOOL          reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_WINDOW        reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_SHAPE         reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_TRIANGLE      reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_RECTANGLE     reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_CIRCLE        reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_POINT         reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_TEXT          reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    $end            reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_EL            reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_EF            reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_END           reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    COMMA           reduce using rule 55 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88


state 114

    (65) arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .
    (68) arithmetic_term -> arithmetic_term . TIMES arithmetic_factor
    (69) arithmetic_term -> arithmetic_term . DIVIDE arithmetic_factor
    (70) arithmetic_term -> arithmetic_term . MOD arithmetic_factor

    PLUS            reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    MINUS           reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    GT              reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    LT              reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    GEQ             reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    LEQ             reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    EQ              reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    NEQ             reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_LIST          reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_DICT          reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_SET           reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    ID              reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_IF            reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_WHILE         reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_CONTINUE      reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_BREAK         reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_DONE          reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_INT           reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_DOUBLE        reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_STRING        reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_BOOL          reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_WINDOW        reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_SHAPE         reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_TRIANGLE      reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_RECTANGLE     reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_CIRCLE        reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_POINT         reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_TEXT          reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    $end            reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_EL            reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_EF            reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_END           reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    RPAREN          reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    AND             reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    OR              reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    COMMA           reduce using rule 65 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 78
    MOD             shift and go to state 77


state 115

    (66) arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .
    (68) arithmetic_term -> arithmetic_term . TIMES arithmetic_factor
    (69) arithmetic_term -> arithmetic_term . DIVIDE arithmetic_factor
    (70) arithmetic_term -> arithmetic_term . MOD arithmetic_factor

    PLUS            reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    MINUS           reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    GT              reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    LT              reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    GEQ             reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    LEQ             reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    EQ              reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    NEQ             reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_LIST          reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_DICT          reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_SET           reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    ID              reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_IF            reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_WHILE         reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_CONTINUE      reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_BREAK         reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_DONE          reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_INT           reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_DOUBLE        reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_STRING        reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_BOOL          reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_WINDOW        reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_SHAPE         reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_TRIANGLE      reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_RECTANGLE     reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_CIRCLE        reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_POINT         reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_TEXT          reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    $end            reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_EL            reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_EF            reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_END           reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    RPAREN          reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    AND             reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    OR              reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    COMMA           reduce using rule 66 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 78
    MOD             shift and go to state 77


state 116

    (56) boolean_factor -> string_expression comparator string_expression .
    (37) string_expression -> string_expression . PLUS string_term

    AND             reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    RPAREN          reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    OR              reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    K_LIST          reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    K_DICT          reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    K_SET           reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    ID              reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    K_IF            reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    K_WHILE         reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    K_CONTINUE      reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    K_BREAK         reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    K_DONE          reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    K_INT           reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    K_DOUBLE        reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    K_STRING        reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    K_BOOL          reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    K_WINDOW        reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    K_SHAPE         reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    K_TRIANGLE      reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    K_RECTANGLE     reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    K_CIRCLE        reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    K_POINT         reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    K_TEXT          reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    $end            reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    K_EL            reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    K_EF            reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    K_END           reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    COMMA           reduce using rule 56 (boolean_factor -> string_expression comparator string_expression .)
    PLUS            shift and go to state 90


state 117

    (40) string_term -> STRING .

    PLUS            reduce using rule 40 (string_term -> STRING .)
    AND             reduce using rule 40 (string_term -> STRING .)
    RPAREN          reduce using rule 40 (string_term -> STRING .)
    OR              reduce using rule 40 (string_term -> STRING .)
    K_LIST          reduce using rule 40 (string_term -> STRING .)
    K_DICT          reduce using rule 40 (string_term -> STRING .)
    K_SET           reduce using rule 40 (string_term -> STRING .)
    ID              reduce using rule 40 (string_term -> STRING .)
    K_IF            reduce using rule 40 (string_term -> STRING .)
    K_WHILE         reduce using rule 40 (string_term -> STRING .)
    K_CONTINUE      reduce using rule 40 (string_term -> STRING .)
    K_BREAK         reduce using rule 40 (string_term -> STRING .)
    K_DONE          reduce using rule 40 (string_term -> STRING .)
    K_INT           reduce using rule 40 (string_term -> STRING .)
    K_DOUBLE        reduce using rule 40 (string_term -> STRING .)
    K_STRING        reduce using rule 40 (string_term -> STRING .)
    K_BOOL          reduce using rule 40 (string_term -> STRING .)
    K_WINDOW        reduce using rule 40 (string_term -> STRING .)
    K_SHAPE         reduce using rule 40 (string_term -> STRING .)
    K_TRIANGLE      reduce using rule 40 (string_term -> STRING .)
    K_RECTANGLE     reduce using rule 40 (string_term -> STRING .)
    K_CIRCLE        reduce using rule 40 (string_term -> STRING .)
    K_POINT         reduce using rule 40 (string_term -> STRING .)
    K_TEXT          reduce using rule 40 (string_term -> STRING .)
    $end            reduce using rule 40 (string_term -> STRING .)
    K_EL            reduce using rule 40 (string_term -> STRING .)
    K_EF            reduce using rule 40 (string_term -> STRING .)
    K_END           reduce using rule 40 (string_term -> STRING .)
    COMMA           reduce using rule 40 (string_term -> STRING .)
    GT              reduce using rule 40 (string_term -> STRING .)
    LT              reduce using rule 40 (string_term -> STRING .)
    GEQ             reduce using rule 40 (string_term -> STRING .)
    LEQ             reduce using rule 40 (string_term -> STRING .)
    EQ              reduce using rule 40 (string_term -> STRING .)
    NEQ             reduce using rule 40 (string_term -> STRING .)


state 118

    (39) string_term -> function_call_statement .

    PLUS            reduce using rule 39 (string_term -> function_call_statement .)
    AND             reduce using rule 39 (string_term -> function_call_statement .)
    RPAREN          reduce using rule 39 (string_term -> function_call_statement .)
    OR              reduce using rule 39 (string_term -> function_call_statement .)
    K_LIST          reduce using rule 39 (string_term -> function_call_statement .)
    K_DICT          reduce using rule 39 (string_term -> function_call_statement .)
    K_SET           reduce using rule 39 (string_term -> function_call_statement .)
    ID              reduce using rule 39 (string_term -> function_call_statement .)
    K_IF            reduce using rule 39 (string_term -> function_call_statement .)
    K_WHILE         reduce using rule 39 (string_term -> function_call_statement .)
    K_CONTINUE      reduce using rule 39 (string_term -> function_call_statement .)
    K_BREAK         reduce using rule 39 (string_term -> function_call_statement .)
    K_DONE          reduce using rule 39 (string_term -> function_call_statement .)
    K_INT           reduce using rule 39 (string_term -> function_call_statement .)
    K_DOUBLE        reduce using rule 39 (string_term -> function_call_statement .)
    K_STRING        reduce using rule 39 (string_term -> function_call_statement .)
    K_BOOL          reduce using rule 39 (string_term -> function_call_statement .)
    K_WINDOW        reduce using rule 39 (string_term -> function_call_statement .)
    K_SHAPE         reduce using rule 39 (string_term -> function_call_statement .)
    K_TRIANGLE      reduce using rule 39 (string_term -> function_call_statement .)
    K_RECTANGLE     reduce using rule 39 (string_term -> function_call_statement .)
    K_CIRCLE        reduce using rule 39 (string_term -> function_call_statement .)
    K_POINT         reduce using rule 39 (string_term -> function_call_statement .)
    K_TEXT          reduce using rule 39 (string_term -> function_call_statement .)
    $end            reduce using rule 39 (string_term -> function_call_statement .)
    K_EL            reduce using rule 39 (string_term -> function_call_statement .)
    K_EF            reduce using rule 39 (string_term -> function_call_statement .)
    K_END           reduce using rule 39 (string_term -> function_call_statement .)
    COMMA           reduce using rule 39 (string_term -> function_call_statement .)
    GT              reduce using rule 39 (string_term -> function_call_statement .)
    LT              reduce using rule 39 (string_term -> function_call_statement .)
    GEQ             reduce using rule 39 (string_term -> function_call_statement .)
    LEQ             reduce using rule 39 (string_term -> function_call_statement .)
    EQ              reduce using rule 39 (string_term -> function_call_statement .)
    NEQ             reduce using rule 39 (string_term -> function_call_statement .)


state 119

    (41) string_term -> ID .
    (11) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (12) function_call_statement -> ID . LPAREN RPAREN

    PLUS            reduce using rule 41 (string_term -> ID .)
    AND             reduce using rule 41 (string_term -> ID .)
    RPAREN          reduce using rule 41 (string_term -> ID .)
    OR              reduce using rule 41 (string_term -> ID .)
    K_LIST          reduce using rule 41 (string_term -> ID .)
    K_DICT          reduce using rule 41 (string_term -> ID .)
    K_SET           reduce using rule 41 (string_term -> ID .)
    ID              reduce using rule 41 (string_term -> ID .)
    K_IF            reduce using rule 41 (string_term -> ID .)
    K_WHILE         reduce using rule 41 (string_term -> ID .)
    K_CONTINUE      reduce using rule 41 (string_term -> ID .)
    K_BREAK         reduce using rule 41 (string_term -> ID .)
    K_DONE          reduce using rule 41 (string_term -> ID .)
    K_INT           reduce using rule 41 (string_term -> ID .)
    K_DOUBLE        reduce using rule 41 (string_term -> ID .)
    K_STRING        reduce using rule 41 (string_term -> ID .)
    K_BOOL          reduce using rule 41 (string_term -> ID .)
    K_WINDOW        reduce using rule 41 (string_term -> ID .)
    K_SHAPE         reduce using rule 41 (string_term -> ID .)
    K_TRIANGLE      reduce using rule 41 (string_term -> ID .)
    K_RECTANGLE     reduce using rule 41 (string_term -> ID .)
    K_CIRCLE        reduce using rule 41 (string_term -> ID .)
    K_POINT         reduce using rule 41 (string_term -> ID .)
    K_TEXT          reduce using rule 41 (string_term -> ID .)
    $end            reduce using rule 41 (string_term -> ID .)
    K_EL            reduce using rule 41 (string_term -> ID .)
    K_EF            reduce using rule 41 (string_term -> ID .)
    K_END           reduce using rule 41 (string_term -> ID .)
    COMMA           reduce using rule 41 (string_term -> ID .)
    GT              reduce using rule 41 (string_term -> ID .)
    LT              reduce using rule 41 (string_term -> ID .)
    GEQ             reduce using rule 41 (string_term -> ID .)
    LEQ             reduce using rule 41 (string_term -> ID .)
    EQ              reduce using rule 41 (string_term -> ID .)
    NEQ             reduce using rule 41 (string_term -> ID .)
    LPAREN          shift and go to state 36


state 120

    (37) string_expression -> string_expression PLUS string_term .

    PLUS            reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    GT              reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    LT              reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    GEQ             reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    LEQ             reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    EQ              reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    NEQ             reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    RPAREN          reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    COMMA           reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    AND             reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    OR              reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    K_LIST          reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    K_DICT          reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    K_SET           reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    ID              reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    K_IF            reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    K_WHILE         reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    K_CONTINUE      reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    K_BREAK         reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    K_DONE          reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    K_INT           reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    K_DOUBLE        reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    K_STRING        reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    K_BOOL          reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    K_WINDOW        reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    K_SHAPE         reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    K_TRIANGLE      reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    K_RECTANGLE     reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    K_CIRCLE        reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    K_POINT         reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    K_TEXT          reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    $end            reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    K_EL            reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    K_EF            reduce using rule 37 (string_expression -> string_expression PLUS string_term .)
    K_END           reduce using rule 37 (string_expression -> string_expression PLUS string_term .)


state 121

    (72) arithmetic_factor -> LPAREN arithmetic_expression RPAREN .

    TIMES           reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    DIVIDE          reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    MOD             reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    PLUS            reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    MINUS           reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    GT              reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    LT              reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    GEQ             reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    LEQ             reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    EQ              reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    NEQ             reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_LIST          reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_DICT          reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_SET           reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    ID              reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_IF            reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_WHILE         reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_CONTINUE      reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_BREAK         reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_DONE          reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_INT           reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_DOUBLE        reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_STRING        reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_BOOL          reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_WINDOW        reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_SHAPE         reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_TRIANGLE      reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_RECTANGLE     reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_CIRCLE        reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_POINT         reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_TEXT          reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    $end            reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_EL            reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_EF            reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_END           reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    RPAREN          reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    COMMA           reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    AND             reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    OR              reduce using rule 72 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)


state 122

    (53) boolean_factor -> LPAREN boolean_expression RPAREN .

    AND             reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    RPAREN          reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    OR              reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_LIST          reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_DICT          reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_SET           reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    ID              reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_IF            reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_WHILE         reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_CONTINUE      reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_BREAK         reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_DONE          reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_INT           reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_DOUBLE        reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_STRING        reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_BOOL          reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_WINDOW        reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_SHAPE         reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_TRIANGLE      reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_RECTANGLE     reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_CIRCLE        reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_POINT         reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_TEXT          reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    $end            reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_EL            reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_EF            reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_END           reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    COMMA           reduce using rule 53 (boolean_factor -> LPAREN boolean_expression RPAREN .)


state 123

    (79) selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list . else_if_statement_list else_statement K_END
    (86) compound_statement_list -> compound_statement_list . compound_statement
    (80) else_if_statement_list -> .
    (81) else_if_statement_list -> . else_if_statement_list else_if_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (79) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (87) iteration_statement -> . K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END
    (88) jump_statement -> . K_CONTINUE
    (89) jump_statement -> . K_BREAK
    (90) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_EL            reduce using rule 80 (else_if_statement_list -> .)
    K_EF            reduce using rule 80 (else_if_statement_list -> .)
    K_END           reduce using rule 80 (else_if_statement_list -> .)
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 20
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    jump_statement                 shift and go to state 17
    selection_statement            shift and go to state 3
    compound_statement             shift and go to state 132
    function_call_statement        shift and go to state 19
    pre_type_modifier              shift and go to state 134
    iteration_statement            shift and go to state 5
    variable_declaration           shift and go to state 6
    else_if_statement_list         shift and go to state 133

state 124

    (49) boolean_expression -> boolean_expression OR boolean_term .
    (51) boolean_term -> boolean_term . AND boolean_factor

    RPAREN          reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    OR              reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    K_LIST          reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    K_DICT          reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    K_SET           reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    ID              reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    K_IF            reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    K_WHILE         reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    K_CONTINUE      reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    K_BREAK         reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    K_DONE          reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    K_INT           reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    K_DOUBLE        reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    K_STRING        reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    K_BOOL          reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    K_WINDOW        reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    K_SHAPE         reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    K_TRIANGLE      reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    K_RECTANGLE     reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    K_CIRCLE        reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    K_POINT         reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    K_TEXT          reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    $end            reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    K_EL            reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    K_EF            reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    K_END           reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    COMMA           reduce using rule 49 (boolean_expression -> boolean_expression OR boolean_term .)
    AND             shift and go to state 76


state 125

    (87) iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list . K_END
    (86) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (79) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (87) iteration_statement -> . K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END
    (88) jump_statement -> . K_CONTINUE
    (89) jump_statement -> . K_BREAK
    (90) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_END           shift and go to state 135
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 20
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    jump_statement                 shift and go to state 17
    compound_statement             shift and go to state 132
    selection_statement            shift and go to state 3
    function_call_statement        shift and go to state 19
    pre_type_modifier              shift and go to state 134
    iteration_statement            shift and go to state 5
    variable_declaration           shift and go to state 6

state 126

    (16) variable_declaration -> pre_type_modifier type ID ASSIGN expression .

    ID              reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_IF            reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_WHILE         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_CONTINUE      reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_BREAK         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_DONE          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_LIST          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_DICT          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_SET           reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_INT           reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_DOUBLE        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_STRING        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_BOOL          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_WINDOW        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_SHAPE         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_TRIANGLE      reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_RECTANGLE     reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_CIRCLE        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_POINT         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_TEXT          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_END           reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    $end            reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_EL            reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_EF            reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)


state 127

    (92) function_declaration -> pre_type_modifier type ID LPAREN RPAREN . ASSIGN unary_expression compound_statement_list K_END

    ASSIGN          shift and go to state 136


state 128

    (94) argument_list -> argument .

    RPAREN          reduce using rule 94 (argument_list -> argument .)
    COMMA           reduce using rule 94 (argument_list -> argument .)


state 129

    (91) function_declaration -> pre_type_modifier type ID LPAREN argument_list . RPAREN ASSIGN unary_expression compound_statement_list K_END
    (93) argument_list -> argument_list . COMMA argument

    RPAREN          shift and go to state 137
    COMMA           shift and go to state 138


state 130

    (95) argument -> pre_type_modifier . type ID
    (22) type -> . K_INT
    (23) type -> . K_DOUBLE
    (24) type -> . K_STRING
    (25) type -> . K_BOOL
    (26) type -> . K_WINDOW
    (27) type -> . K_SHAPE
    (28) type -> . K_TRIANGLE
    (29) type -> . K_RECTANGLE
    (30) type -> . K_CIRCLE
    (31) type -> . K_POINT
    (32) type -> . K_TEXT

    K_INT           shift and go to state 30
    K_DOUBLE        shift and go to state 23
    K_STRING        shift and go to state 24
    K_BOOL          shift and go to state 31
    K_WINDOW        shift and go to state 34
    K_SHAPE         shift and go to state 27
    K_TRIANGLE      shift and go to state 25
    K_RECTANGLE     shift and go to state 33
    K_CIRCLE        shift and go to state 26
    K_POINT         shift and go to state 29
    K_TEXT          shift and go to state 28

    type                           shift and go to state 139

state 131

    (13) parameter_list -> parameter_list COMMA expression .

    RPAREN          reduce using rule 13 (parameter_list -> parameter_list COMMA expression .)
    COMMA           reduce using rule 13 (parameter_list -> parameter_list COMMA expression .)


state 132

    (86) compound_statement_list -> compound_statement_list compound_statement .

    ID              reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)
    K_IF            reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)
    K_WHILE         reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)
    K_CONTINUE      reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)
    K_BREAK         reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)
    K_DONE          reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)
    K_LIST          reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)
    K_DICT          reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)
    K_SET           reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)
    K_EL            reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)
    K_EF            reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)
    K_END           reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)
    K_INT           reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)
    K_DOUBLE        reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)
    K_STRING        reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)
    K_BOOL          reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)
    K_WINDOW        reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)
    K_SHAPE         reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)
    K_TRIANGLE      reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)
    K_RECTANGLE     reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)
    K_CIRCLE        reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)
    K_POINT         reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)
    K_TEXT          reduce using rule 86 (compound_statement_list -> compound_statement_list compound_statement .)


state 133

    (79) selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list . else_statement K_END
    (81) else_if_statement_list -> else_if_statement_list . else_if_statement
    (83) else_statement -> .
    (84) else_statement -> . K_EL compound_statement_list
    (82) else_if_statement -> . K_EF LPAREN boolean_expression RPAREN compound_statement_list

    K_END           reduce using rule 83 (else_statement -> .)
    K_EL            shift and go to state 141
    K_EF            shift and go to state 143

    else_statement                 shift and go to state 140
    else_if_statement              shift and go to state 142

state 134

    (15) variable_declaration -> pre_type_modifier . type ID
    (16) variable_declaration -> pre_type_modifier . type ID ASSIGN expression
    (22) type -> . K_INT
    (23) type -> . K_DOUBLE
    (24) type -> . K_STRING
    (25) type -> . K_BOOL
    (26) type -> . K_WINDOW
    (27) type -> . K_SHAPE
    (28) type -> . K_TRIANGLE
    (29) type -> . K_RECTANGLE
    (30) type -> . K_CIRCLE
    (31) type -> . K_POINT
    (32) type -> . K_TEXT

    K_INT           shift and go to state 30
    K_DOUBLE        shift and go to state 23
    K_STRING        shift and go to state 24
    K_BOOL          shift and go to state 31
    K_WINDOW        shift and go to state 34
    K_SHAPE         shift and go to state 27
    K_TRIANGLE      shift and go to state 25
    K_RECTANGLE     shift and go to state 33
    K_CIRCLE        shift and go to state 26
    K_POINT         shift and go to state 29
    K_TEXT          shift and go to state 28

    type                           shift and go to state 144

state 135

    (87) iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .

    K_LIST          reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_DICT          reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_SET           reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    ID              reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_IF            reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_WHILE         reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_CONTINUE      reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_BREAK         reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_DONE          reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_INT           reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_DOUBLE        reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_STRING        reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_BOOL          reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_WINDOW        reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_SHAPE         reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_TRIANGLE      reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_RECTANGLE     reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_CIRCLE        reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_POINT         reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_TEXT          reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    $end            reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_END           reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_EL            reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_EF            reduce using rule 87 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)


state 136

    (92) function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN . unary_expression compound_statement_list K_END
    (42) unary_expression -> . ID
    (43) unary_expression -> . STRING
    (44) unary_expression -> . INTEGER
    (45) unary_expression -> . function_call_statement
    (46) unary_expression -> . DOUBLE
    (47) unary_expression -> . K_TRUE
    (48) unary_expression -> . K_FALSE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    ID              shift and go to state 107
    STRING          shift and go to state 102
    INTEGER         shift and go to state 105
    DOUBLE          shift and go to state 103
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 56

    unary_expression               shift and go to state 145
    function_call_statement        shift and go to state 104

state 137

    (91) function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN . ASSIGN unary_expression compound_statement_list K_END

    ASSIGN          shift and go to state 146


state 138

    (93) argument_list -> argument_list COMMA . argument
    (95) argument -> . pre_type_modifier type ID
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    pre_type_modifier              shift and go to state 130
    argument                       shift and go to state 147

state 139

    (95) argument -> pre_type_modifier type . ID

    ID              shift and go to state 148


state 140

    (79) selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement . K_END

    K_END           shift and go to state 149


state 141

    (84) else_statement -> K_EL . compound_statement_list
    (85) compound_statement_list -> .
    (86) compound_statement_list -> . compound_statement_list compound_statement

    ID              reduce using rule 85 (compound_statement_list -> .)
    K_IF            reduce using rule 85 (compound_statement_list -> .)
    K_WHILE         reduce using rule 85 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 85 (compound_statement_list -> .)
    K_BREAK         reduce using rule 85 (compound_statement_list -> .)
    K_DONE          reduce using rule 85 (compound_statement_list -> .)
    K_LIST          reduce using rule 85 (compound_statement_list -> .)
    K_DICT          reduce using rule 85 (compound_statement_list -> .)
    K_SET           reduce using rule 85 (compound_statement_list -> .)
    K_INT           reduce using rule 85 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 85 (compound_statement_list -> .)
    K_STRING        reduce using rule 85 (compound_statement_list -> .)
    K_BOOL          reduce using rule 85 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 85 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 85 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 85 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 85 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 85 (compound_statement_list -> .)
    K_POINT         reduce using rule 85 (compound_statement_list -> .)
    K_TEXT          reduce using rule 85 (compound_statement_list -> .)
    K_END           reduce using rule 85 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 150

state 142

    (81) else_if_statement_list -> else_if_statement_list else_if_statement .

    K_EL            reduce using rule 81 (else_if_statement_list -> else_if_statement_list else_if_statement .)
    K_EF            reduce using rule 81 (else_if_statement_list -> else_if_statement_list else_if_statement .)
    K_END           reduce using rule 81 (else_if_statement_list -> else_if_statement_list else_if_statement .)


state 143

    (82) else_if_statement -> K_EF . LPAREN boolean_expression RPAREN compound_statement_list

    LPAREN          shift and go to state 151


state 144

    (15) variable_declaration -> pre_type_modifier type . ID
    (16) variable_declaration -> pre_type_modifier type . ID ASSIGN expression

    ID              shift and go to state 152


state 145

    (92) function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression . compound_statement_list K_END
    (85) compound_statement_list -> .
    (86) compound_statement_list -> . compound_statement_list compound_statement

    K_END           reduce using rule 85 (compound_statement_list -> .)
    ID              reduce using rule 85 (compound_statement_list -> .)
    K_IF            reduce using rule 85 (compound_statement_list -> .)
    K_WHILE         reduce using rule 85 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 85 (compound_statement_list -> .)
    K_BREAK         reduce using rule 85 (compound_statement_list -> .)
    K_DONE          reduce using rule 85 (compound_statement_list -> .)
    K_LIST          reduce using rule 85 (compound_statement_list -> .)
    K_DICT          reduce using rule 85 (compound_statement_list -> .)
    K_SET           reduce using rule 85 (compound_statement_list -> .)
    K_INT           reduce using rule 85 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 85 (compound_statement_list -> .)
    K_STRING        reduce using rule 85 (compound_statement_list -> .)
    K_BOOL          reduce using rule 85 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 85 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 85 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 85 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 85 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 85 (compound_statement_list -> .)
    K_POINT         reduce using rule 85 (compound_statement_list -> .)
    K_TEXT          reduce using rule 85 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 153

state 146

    (91) function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN . unary_expression compound_statement_list K_END
    (42) unary_expression -> . ID
    (43) unary_expression -> . STRING
    (44) unary_expression -> . INTEGER
    (45) unary_expression -> . function_call_statement
    (46) unary_expression -> . DOUBLE
    (47) unary_expression -> . K_TRUE
    (48) unary_expression -> . K_FALSE
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN

    ID              shift and go to state 107
    STRING          shift and go to state 102
    INTEGER         shift and go to state 105
    DOUBLE          shift and go to state 103
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 56

    unary_expression               shift and go to state 154
    function_call_statement        shift and go to state 104

state 147

    (93) argument_list -> argument_list COMMA argument .

    RPAREN          reduce using rule 93 (argument_list -> argument_list COMMA argument .)
    COMMA           reduce using rule 93 (argument_list -> argument_list COMMA argument .)


state 148

    (95) argument -> pre_type_modifier type ID .

    RPAREN          reduce using rule 95 (argument -> pre_type_modifier type ID .)
    COMMA           reduce using rule 95 (argument -> pre_type_modifier type ID .)


state 149

    (79) selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .

    K_END           reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    ID              reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_IF            reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_WHILE         reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_CONTINUE      reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_BREAK         reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_DONE          reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_LIST          reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_DICT          reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_SET           reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_INT           reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_DOUBLE        reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_STRING        reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_BOOL          reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_WINDOW        reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_SHAPE         reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_TRIANGLE      reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_RECTANGLE     reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_CIRCLE        reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_POINT         reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_TEXT          reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_EL            reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_EF            reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    $end            reduce using rule 79 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)


state 150

    (84) else_statement -> K_EL compound_statement_list .
    (86) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (79) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (87) iteration_statement -> . K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END
    (88) jump_statement -> . K_CONTINUE
    (89) jump_statement -> . K_BREAK
    (90) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_END           reduce using rule 84 (else_statement -> K_EL compound_statement_list .)
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 20
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    jump_statement                 shift and go to state 17
    compound_statement             shift and go to state 132
    selection_statement            shift and go to state 3
    function_call_statement        shift and go to state 19
    pre_type_modifier              shift and go to state 134
    iteration_statement            shift and go to state 5
    variable_declaration           shift and go to state 6

state 151

    (82) else_if_statement -> K_EF LPAREN . boolean_expression RPAREN compound_statement_list
    (49) boolean_expression -> . boolean_expression OR boolean_term
    (50) boolean_expression -> . boolean_term
    (51) boolean_term -> . boolean_term AND boolean_factor
    (52) boolean_term -> . boolean_factor
    (53) boolean_factor -> . LPAREN boolean_expression RPAREN
    (54) boolean_factor -> . unary_expression comparator unary_expression
    (55) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (56) boolean_factor -> . string_expression comparator string_expression
    (57) boolean_factor -> . unary_expression
    (58) boolean_factor -> . NEG boolean_factor
    (42) unary_expression -> . ID
    (43) unary_expression -> . STRING
    (44) unary_expression -> . INTEGER
    (45) unary_expression -> . function_call_statement
    (46) unary_expression -> . DOUBLE
    (47) unary_expression -> . K_TRUE
    (48) unary_expression -> . K_FALSE
    (65) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (66) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (67) arithmetic_expression -> . arithmetic_term
    (37) string_expression -> . string_expression PLUS string_term
    (38) string_expression -> . string_term
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (68) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (69) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (70) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (71) arithmetic_term -> . arithmetic_factor
    (39) string_term -> . function_call_statement
    (40) string_term -> . STRING
    (41) string_term -> . ID
    (72) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (73) arithmetic_factor -> . number
    (74) arithmetic_factor -> . ID
    (75) arithmetic_factor -> . function_call_statement
    (76) arithmetic_factor -> . MINUS arithmetic_factor
    (77) number -> . INTEGER
    (78) number -> . DOUBLE

    LPAREN          shift and go to state 49
    NEG             shift and go to state 38
    ID              shift and go to state 52
    STRING          shift and go to state 47
    INTEGER         shift and go to state 44
    DOUBLE          shift and go to state 54
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 56
    MINUS           shift and go to state 42

    arithmetic_expression          shift and go to state 45
    string_expression              shift and go to state 46
    unary_expression               shift and go to state 37
    boolean_expression             shift and go to state 155
    arithmetic_factor              shift and go to state 43
    boolean_term                   shift and go to state 39
    function_call_statement        shift and go to state 55
    number                         shift and go to state 51
    string_term                    shift and go to state 48
    arithmetic_term                shift and go to state 41
    boolean_factor                 shift and go to state 50

state 152

    (15) variable_declaration -> pre_type_modifier type ID .
    (16) variable_declaration -> pre_type_modifier type ID . ASSIGN expression

    ID              reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_IF            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_WHILE         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_CONTINUE      reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_BREAK         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DONE          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_LIST          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DICT          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_SET           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_INT           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DOUBLE        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_STRING        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_BOOL          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_WINDOW        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_SHAPE         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_TRIANGLE      reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_RECTANGLE     reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_CIRCLE        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_POINT         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_TEXT          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_END           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_EL            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_EF            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    ASSIGN          shift and go to state 98


state 153

    (92) function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list . K_END
    (86) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (79) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (87) iteration_statement -> . K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END
    (88) jump_statement -> . K_CONTINUE
    (89) jump_statement -> . K_BREAK
    (90) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_END           shift and go to state 156
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 20
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    jump_statement                 shift and go to state 17
    compound_statement             shift and go to state 132
    iteration_statement            shift and go to state 5
    selection_statement            shift and go to state 3
    function_call_statement        shift and go to state 19
    pre_type_modifier              shift and go to state 134
    variable_declaration           shift and go to state 6

state 154

    (91) function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression . compound_statement_list K_END
    (85) compound_statement_list -> .
    (86) compound_statement_list -> . compound_statement_list compound_statement

    K_END           reduce using rule 85 (compound_statement_list -> .)
    ID              reduce using rule 85 (compound_statement_list -> .)
    K_IF            reduce using rule 85 (compound_statement_list -> .)
    K_WHILE         reduce using rule 85 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 85 (compound_statement_list -> .)
    K_BREAK         reduce using rule 85 (compound_statement_list -> .)
    K_DONE          reduce using rule 85 (compound_statement_list -> .)
    K_LIST          reduce using rule 85 (compound_statement_list -> .)
    K_DICT          reduce using rule 85 (compound_statement_list -> .)
    K_SET           reduce using rule 85 (compound_statement_list -> .)
    K_INT           reduce using rule 85 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 85 (compound_statement_list -> .)
    K_STRING        reduce using rule 85 (compound_statement_list -> .)
    K_BOOL          reduce using rule 85 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 85 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 85 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 85 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 85 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 85 (compound_statement_list -> .)
    K_POINT         reduce using rule 85 (compound_statement_list -> .)
    K_TEXT          reduce using rule 85 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 157

state 155

    (82) else_if_statement -> K_EF LPAREN boolean_expression . RPAREN compound_statement_list
    (49) boolean_expression -> boolean_expression . OR boolean_term

    RPAREN          shift and go to state 158
    OR              shift and go to state 96


state 156

    (92) function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .

    K_LIST          reduce using rule 92 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_DICT          reduce using rule 92 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_SET           reduce using rule 92 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    ID              reduce using rule 92 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_IF            reduce using rule 92 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_WHILE         reduce using rule 92 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_CONTINUE      reduce using rule 92 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_BREAK         reduce using rule 92 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_DONE          reduce using rule 92 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_INT           reduce using rule 92 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_DOUBLE        reduce using rule 92 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_STRING        reduce using rule 92 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_BOOL          reduce using rule 92 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_WINDOW        reduce using rule 92 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_SHAPE         reduce using rule 92 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_TRIANGLE      reduce using rule 92 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_RECTANGLE     reduce using rule 92 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_CIRCLE        reduce using rule 92 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_POINT         reduce using rule 92 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_TEXT          reduce using rule 92 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    $end            reduce using rule 92 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)


state 157

    (91) function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list . K_END
    (86) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (79) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (87) iteration_statement -> . K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END
    (88) jump_statement -> . K_CONTINUE
    (89) jump_statement -> . K_BREAK
    (90) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_END           shift and go to state 159
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 20
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    jump_statement                 shift and go to state 17
    compound_statement             shift and go to state 132
    iteration_statement            shift and go to state 5
    selection_statement            shift and go to state 3
    function_call_statement        shift and go to state 19
    pre_type_modifier              shift and go to state 134
    variable_declaration           shift and go to state 6

state 158

    (82) else_if_statement -> K_EF LPAREN boolean_expression RPAREN . compound_statement_list
    (85) compound_statement_list -> .
    (86) compound_statement_list -> . compound_statement_list compound_statement

    ID              reduce using rule 85 (compound_statement_list -> .)
    K_IF            reduce using rule 85 (compound_statement_list -> .)
    K_WHILE         reduce using rule 85 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 85 (compound_statement_list -> .)
    K_BREAK         reduce using rule 85 (compound_statement_list -> .)
    K_DONE          reduce using rule 85 (compound_statement_list -> .)
    K_LIST          reduce using rule 85 (compound_statement_list -> .)
    K_DICT          reduce using rule 85 (compound_statement_list -> .)
    K_SET           reduce using rule 85 (compound_statement_list -> .)
    K_INT           reduce using rule 85 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 85 (compound_statement_list -> .)
    K_STRING        reduce using rule 85 (compound_statement_list -> .)
    K_BOOL          reduce using rule 85 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 85 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 85 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 85 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 85 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 85 (compound_statement_list -> .)
    K_POINT         reduce using rule 85 (compound_statement_list -> .)
    K_TEXT          reduce using rule 85 (compound_statement_list -> .)
    K_EL            reduce using rule 85 (compound_statement_list -> .)
    K_EF            reduce using rule 85 (compound_statement_list -> .)
    K_END           reduce using rule 85 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 160

state 159

    (91) function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .

    K_LIST          reduce using rule 91 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_DICT          reduce using rule 91 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_SET           reduce using rule 91 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    ID              reduce using rule 91 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_IF            reduce using rule 91 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_WHILE         reduce using rule 91 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_CONTINUE      reduce using rule 91 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_BREAK         reduce using rule 91 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_DONE          reduce using rule 91 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_INT           reduce using rule 91 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_DOUBLE        reduce using rule 91 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_STRING        reduce using rule 91 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_BOOL          reduce using rule 91 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_WINDOW        reduce using rule 91 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_SHAPE         reduce using rule 91 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_TRIANGLE      reduce using rule 91 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_RECTANGLE     reduce using rule 91 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_CIRCLE        reduce using rule 91 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_POINT         reduce using rule 91 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_TEXT          reduce using rule 91 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    $end            reduce using rule 91 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)


state 160

    (82) else_if_statement -> K_EF LPAREN boolean_expression RPAREN compound_statement_list .
    (86) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (79) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (87) iteration_statement -> . K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END
    (88) jump_statement -> . K_CONTINUE
    (89) jump_statement -> . K_BREAK
    (90) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_EL            reduce using rule 82 (else_if_statement -> K_EF LPAREN boolean_expression RPAREN compound_statement_list .)
    K_EF            reduce using rule 82 (else_if_statement -> K_EF LPAREN boolean_expression RPAREN compound_statement_list .)
    K_END           reduce using rule 82 (else_if_statement -> K_EF LPAREN boolean_expression RPAREN compound_statement_list .)
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 20
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    jump_statement                 shift and go to state 17
    compound_statement             shift and go to state 132
    selection_statement            shift and go to state 3
    function_call_statement        shift and go to state 19
    pre_type_modifier              shift and go to state 134
    iteration_statement            shift and go to state 5
    variable_declaration           shift and go to state 6
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 44 resolved using rule (unary_expression -> INTEGER)
WARNING: rejected rule (number -> INTEGER) in state 44
WARNING: reduce/reduce conflict in state 47 resolved using rule (string_term -> STRING)
WARNING: rejected rule (unary_expression -> STRING) in state 47
WARNING: reduce/reduce conflict in state 52 resolved using rule (string_term -> ID)
WARNING: rejected rule (unary_expression -> ID) in state 52
WARNING: reduce/reduce conflict in state 52 resolved using rule (string_term -> ID)
WARNING: rejected rule (arithmetic_factor -> ID) in state 52
WARNING: reduce/reduce conflict in state 54 resolved using rule (unary_expression -> DOUBLE)
WARNING: rejected rule (number -> DOUBLE) in state 54
WARNING: reduce/reduce conflict in state 55 resolved using rule (string_term -> function_call_statement)
WARNING: rejected rule (unary_expression -> function_call_statement) in state 55
WARNING: reduce/reduce conflict in state 55 resolved using rule (string_term -> function_call_statement)
WARNING: rejected rule (arithmetic_factor -> function_call_statement) in state 55
WARNING: reduce/reduce conflict in state 59 resolved using rule (expression -> unary_expression)
WARNING: rejected rule (boolean_factor -> unary_expression) in state 59
WARNING: reduce/reduce conflict in state 62 resolved using rule (string_term -> ID)
WARNING: rejected rule (unary_expression -> ID) in state 62
WARNING: reduce/reduce conflict in state 62 resolved using rule (string_term -> ID)
WARNING: rejected rule (arithmetic_factor -> ID) in state 62
WARNING: reduce/reduce conflict in state 91 resolved using rule (unary_expression -> function_call_statement)
WARNING: rejected rule (arithmetic_factor -> function_call_statement) in state 91
WARNING: reduce/reduce conflict in state 91 resolved using rule (string_term -> function_call_statement)
WARNING: rejected rule (arithmetic_factor -> function_call_statement) in state 91
WARNING: reduce/reduce conflict in state 91 resolved using rule (string_term -> function_call_statement)
WARNING: rejected rule (unary_expression -> function_call_statement) in state 91
WARNING: reduce/reduce conflict in state 93 resolved using rule (unary_expression -> ID)
WARNING: rejected rule (arithmetic_factor -> ID) in state 93
WARNING: reduce/reduce conflict in state 93 resolved using rule (string_term -> ID)
WARNING: rejected rule (arithmetic_factor -> ID) in state 93
WARNING: reduce/reduce conflict in state 93 resolved using rule (string_term -> ID)
WARNING: rejected rule (unary_expression -> ID) in state 93
