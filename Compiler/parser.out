Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    K_NULL
    K_END
    K_IF
    COMMENT
    K_EL
    K_EF
    K_CONTINUE
    K_WHILE
    K_POINT
    K_DONE

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> <empty>
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> compound_statement
Rule 5     compound_statement -> function_call_statement
Rule 6     compound_statement -> variable_declaration
Rule 7     function_call_statement -> ID LPAREN parameter_list RPAREN
Rule 8     function_call_statement -> ID LPAREN RPAREN
Rule 9     parameter_list -> parameter_list COMMA expression
Rule 10    parameter_list -> expression
Rule 11    variable_declaration -> pre_type_modifier type ID
Rule 12    variable_declaration -> pre_type_modifier type ID ASSIGN expression
Rule 13    variable_declaration -> ID ASSIGN expression
Rule 14    pre_type_modifier -> <empty>
Rule 15    pre_type_modifier -> K_LIST
Rule 16    pre_type_modifier -> K_DICT
Rule 17    pre_type_modifier -> K_SET
Rule 18    type -> K_INT
Rule 19    type -> K_DOUBLE
Rule 20    type -> K_STRING
Rule 21    type -> K_BOOL
Rule 22    type -> K_WINDOW
Rule 23    type -> K_SHAPE
Rule 24    type -> K_TRIANGLE
Rule 25    type -> K_RECTANGLE
Rule 26    type -> K_CIRCLE
Rule 27    type -> K_TEXT
Rule 28    expression -> string_expression
Rule 29    expression -> unary_expression
Rule 30    expression -> boolean_expression
Rule 31    expression -> arithmetic_expression
Rule 32    string_expression -> string_expression PLUS string_term
Rule 33    string_expression -> STRING
Rule 34    string_term -> function_call_statement
Rule 35    string_term -> STRING
Rule 36    unary_expression -> ID
Rule 37    unary_expression -> STRING
Rule 38    unary_expression -> INTEGER
Rule 39    unary_expression -> function_call_statement
Rule 40    unary_expression -> DOUBLE
Rule 41    unary_expression -> K_TRUE
Rule 42    unary_expression -> K_FALSE
Rule 43    boolean_expression -> boolean_expression OR boolean_term
Rule 44    boolean_expression -> boolean_term
Rule 45    boolean_term -> boolean_term AND boolean_factor
Rule 46    boolean_term -> boolean_factor
Rule 47    boolean_factor -> LPAREN boolean_expression RPAREN
Rule 48    boolean_factor -> unary_expression comparator unary_expression
Rule 49    boolean_factor -> arithmetic_expression comparator arithmetic_expression
Rule 50    boolean_factor -> string_expression comparator string_expression
Rule 51    boolean_factor -> unary_expression
Rule 52    boolean_factor -> NEG boolean_factor
Rule 53    comparator -> GT
Rule 54    comparator -> LT
Rule 55    comparator -> GEQ
Rule 56    comparator -> LEQ
Rule 57    comparator -> EQ
Rule 58    comparator -> NEQ
Rule 59    arithmetic_expression -> arithmetic_expression PLUS arithmetic_term
Rule 60    arithmetic_expression -> arithmetic_expression MINUS arithmetic_term
Rule 61    arithmetic_expression -> arithmetic_term
Rule 62    arithmetic_term -> arithmetic_term TIMES arithmetic_factor
Rule 63    arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor
Rule 64    arithmetic_term -> arithmetic_term MOD arithmetic_factor
Rule 65    arithmetic_term -> arithmetic_factor
Rule 66    arithmetic_factor -> LPAREN arithmetic_expression RPAREN
Rule 67    arithmetic_factor -> number
Rule 68    arithmetic_factor -> function_call_statement
Rule 69    arithmetic_factor -> MINUS arithmetic_factor
Rule 70    number -> INTEGER
Rule 71    number -> DOUBLE

Terminals, with rules where they appear

AND                  : 45
ASSIGN               : 12 13
COMMA                : 9
COMMENT              : 
DIVIDE               : 63
DOUBLE               : 40 71
EQ                   : 57
GEQ                  : 55
GT                   : 53
ID                   : 7 8 11 12 13 36
INTEGER              : 38 70
K_BOOL               : 21
K_CIRCLE             : 26
K_CONTINUE           : 
K_DICT               : 16
K_DONE               : 
K_DOUBLE             : 19
K_EF                 : 
K_EL                 : 
K_END                : 
K_FALSE              : 42
K_IF                 : 
K_INT                : 18
K_LIST               : 15
K_NULL               : 
K_POINT              : 
K_RECTANGLE          : 25
K_SET                : 17
K_SHAPE              : 23
K_STRING             : 20
K_TEXT               : 27
K_TRIANGLE           : 24
K_TRUE               : 41
K_WHILE              : 
K_WINDOW             : 22
LEQ                  : 56
LPAREN               : 7 8 47 66
LT                   : 54
MINUS                : 60 69
MOD                  : 64
NEG                  : 52
NEQ                  : 58
OR                   : 43
PLUS                 : 32 59
RPAREN               : 7 8 47 66
STRING               : 33 35 37
TIMES                : 62
error                : 

Nonterminals, with rules where they appear

arithmetic_expression : 31 49 49 59 60 66
arithmetic_factor    : 62 63 64 65 69
arithmetic_term      : 59 60 61 62 63 64
boolean_expression   : 30 43 47
boolean_factor       : 45 46 52
boolean_term         : 43 44 45
comparator           : 48 49 50
compound_statement   : 4
expression           : 9 10 12 13
function_call_statement : 5 34 39 68
number               : 67
parameter_list       : 7 9
pre_type_modifier    : 11 12
program              : 0
statement            : 3
statement_list       : 1 3
string_expression    : 28 32 50 50
string_term          : 32
type                 : 11 12
unary_expression     : 29 48 48 51
variable_declaration : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> .
    (3) statement_list -> . statement_list statement

    ID              reduce using rule 2 (statement_list -> .)
    K_LIST          reduce using rule 2 (statement_list -> .)
    K_DICT          reduce using rule 2 (statement_list -> .)
    K_SET           reduce using rule 2 (statement_list -> .)
    K_INT           reduce using rule 2 (statement_list -> .)
    K_DOUBLE        reduce using rule 2 (statement_list -> .)
    K_STRING        reduce using rule 2 (statement_list -> .)
    K_BOOL          reduce using rule 2 (statement_list -> .)
    K_WINDOW        reduce using rule 2 (statement_list -> .)
    K_SHAPE         reduce using rule 2 (statement_list -> .)
    K_TRIANGLE      reduce using rule 2 (statement_list -> .)
    K_RECTANGLE     reduce using rule 2 (statement_list -> .)
    K_CIRCLE        reduce using rule 2 (statement_list -> .)
    K_TEXT          reduce using rule 2 (statement_list -> .)
    $end            reduce using rule 2 (statement_list -> .)

    statement_list                 shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . compound_statement
    (5) compound_statement -> . function_call_statement
    (6) compound_statement -> . variable_declaration
    (7) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (8) function_call_statement -> . ID LPAREN RPAREN
    (11) variable_declaration -> . pre_type_modifier type ID
    (12) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (13) variable_declaration -> . ID ASSIGN expression
    (14) pre_type_modifier -> .
    (15) pre_type_modifier -> . K_LIST
    (16) pre_type_modifier -> . K_DICT
    (17) pre_type_modifier -> . K_SET

    $end            reduce using rule 1 (program -> statement_list .)
    ID              shift and go to state 11
    K_INT           reduce using rule 14 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 14 (pre_type_modifier -> .)
    K_STRING        reduce using rule 14 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 14 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 14 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 14 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 14 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 14 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 14 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 14 (pre_type_modifier -> .)
    K_LIST          shift and go to state 9
    K_DICT          shift and go to state 7
    K_SET           shift and go to state 4

    compound_statement             shift and go to state 3
    function_call_statement        shift and go to state 5
    statement                      shift and go to state 8
    pre_type_modifier              shift and go to state 10
    variable_declaration           shift and go to state 6

state 2

    (0) S' -> program .



state 3

    (4) statement -> compound_statement .

    ID              reduce using rule 4 (statement -> compound_statement .)
    K_LIST          reduce using rule 4 (statement -> compound_statement .)
    K_DICT          reduce using rule 4 (statement -> compound_statement .)
    K_SET           reduce using rule 4 (statement -> compound_statement .)
    K_INT           reduce using rule 4 (statement -> compound_statement .)
    K_DOUBLE        reduce using rule 4 (statement -> compound_statement .)
    K_STRING        reduce using rule 4 (statement -> compound_statement .)
    K_BOOL          reduce using rule 4 (statement -> compound_statement .)
    K_WINDOW        reduce using rule 4 (statement -> compound_statement .)
    K_SHAPE         reduce using rule 4 (statement -> compound_statement .)
    K_TRIANGLE      reduce using rule 4 (statement -> compound_statement .)
    K_RECTANGLE     reduce using rule 4 (statement -> compound_statement .)
    K_CIRCLE        reduce using rule 4 (statement -> compound_statement .)
    K_TEXT          reduce using rule 4 (statement -> compound_statement .)
    $end            reduce using rule 4 (statement -> compound_statement .)


state 4

    (17) pre_type_modifier -> K_SET .

    K_INT           reduce using rule 17 (pre_type_modifier -> K_SET .)
    K_DOUBLE        reduce using rule 17 (pre_type_modifier -> K_SET .)
    K_STRING        reduce using rule 17 (pre_type_modifier -> K_SET .)
    K_BOOL          reduce using rule 17 (pre_type_modifier -> K_SET .)
    K_WINDOW        reduce using rule 17 (pre_type_modifier -> K_SET .)
    K_SHAPE         reduce using rule 17 (pre_type_modifier -> K_SET .)
    K_TRIANGLE      reduce using rule 17 (pre_type_modifier -> K_SET .)
    K_RECTANGLE     reduce using rule 17 (pre_type_modifier -> K_SET .)
    K_CIRCLE        reduce using rule 17 (pre_type_modifier -> K_SET .)
    K_TEXT          reduce using rule 17 (pre_type_modifier -> K_SET .)


state 5

    (5) compound_statement -> function_call_statement .

    ID              reduce using rule 5 (compound_statement -> function_call_statement .)
    K_LIST          reduce using rule 5 (compound_statement -> function_call_statement .)
    K_DICT          reduce using rule 5 (compound_statement -> function_call_statement .)
    K_SET           reduce using rule 5 (compound_statement -> function_call_statement .)
    K_INT           reduce using rule 5 (compound_statement -> function_call_statement .)
    K_DOUBLE        reduce using rule 5 (compound_statement -> function_call_statement .)
    K_STRING        reduce using rule 5 (compound_statement -> function_call_statement .)
    K_BOOL          reduce using rule 5 (compound_statement -> function_call_statement .)
    K_WINDOW        reduce using rule 5 (compound_statement -> function_call_statement .)
    K_SHAPE         reduce using rule 5 (compound_statement -> function_call_statement .)
    K_TRIANGLE      reduce using rule 5 (compound_statement -> function_call_statement .)
    K_RECTANGLE     reduce using rule 5 (compound_statement -> function_call_statement .)
    K_CIRCLE        reduce using rule 5 (compound_statement -> function_call_statement .)
    K_TEXT          reduce using rule 5 (compound_statement -> function_call_statement .)
    $end            reduce using rule 5 (compound_statement -> function_call_statement .)


state 6

    (6) compound_statement -> variable_declaration .

    ID              reduce using rule 6 (compound_statement -> variable_declaration .)
    K_LIST          reduce using rule 6 (compound_statement -> variable_declaration .)
    K_DICT          reduce using rule 6 (compound_statement -> variable_declaration .)
    K_SET           reduce using rule 6 (compound_statement -> variable_declaration .)
    K_INT           reduce using rule 6 (compound_statement -> variable_declaration .)
    K_DOUBLE        reduce using rule 6 (compound_statement -> variable_declaration .)
    K_STRING        reduce using rule 6 (compound_statement -> variable_declaration .)
    K_BOOL          reduce using rule 6 (compound_statement -> variable_declaration .)
    K_WINDOW        reduce using rule 6 (compound_statement -> variable_declaration .)
    K_SHAPE         reduce using rule 6 (compound_statement -> variable_declaration .)
    K_TRIANGLE      reduce using rule 6 (compound_statement -> variable_declaration .)
    K_RECTANGLE     reduce using rule 6 (compound_statement -> variable_declaration .)
    K_CIRCLE        reduce using rule 6 (compound_statement -> variable_declaration .)
    K_TEXT          reduce using rule 6 (compound_statement -> variable_declaration .)
    $end            reduce using rule 6 (compound_statement -> variable_declaration .)


state 7

    (16) pre_type_modifier -> K_DICT .

    K_INT           reduce using rule 16 (pre_type_modifier -> K_DICT .)
    K_DOUBLE        reduce using rule 16 (pre_type_modifier -> K_DICT .)
    K_STRING        reduce using rule 16 (pre_type_modifier -> K_DICT .)
    K_BOOL          reduce using rule 16 (pre_type_modifier -> K_DICT .)
    K_WINDOW        reduce using rule 16 (pre_type_modifier -> K_DICT .)
    K_SHAPE         reduce using rule 16 (pre_type_modifier -> K_DICT .)
    K_TRIANGLE      reduce using rule 16 (pre_type_modifier -> K_DICT .)
    K_RECTANGLE     reduce using rule 16 (pre_type_modifier -> K_DICT .)
    K_CIRCLE        reduce using rule 16 (pre_type_modifier -> K_DICT .)
    K_TEXT          reduce using rule 16 (pre_type_modifier -> K_DICT .)


state 8

    (3) statement_list -> statement_list statement .

    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    K_LIST          reduce using rule 3 (statement_list -> statement_list statement .)
    K_DICT          reduce using rule 3 (statement_list -> statement_list statement .)
    K_SET           reduce using rule 3 (statement_list -> statement_list statement .)
    K_INT           reduce using rule 3 (statement_list -> statement_list statement .)
    K_DOUBLE        reduce using rule 3 (statement_list -> statement_list statement .)
    K_STRING        reduce using rule 3 (statement_list -> statement_list statement .)
    K_BOOL          reduce using rule 3 (statement_list -> statement_list statement .)
    K_WINDOW        reduce using rule 3 (statement_list -> statement_list statement .)
    K_SHAPE         reduce using rule 3 (statement_list -> statement_list statement .)
    K_TRIANGLE      reduce using rule 3 (statement_list -> statement_list statement .)
    K_RECTANGLE     reduce using rule 3 (statement_list -> statement_list statement .)
    K_CIRCLE        reduce using rule 3 (statement_list -> statement_list statement .)
    K_TEXT          reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)


state 9

    (15) pre_type_modifier -> K_LIST .

    K_INT           reduce using rule 15 (pre_type_modifier -> K_LIST .)
    K_DOUBLE        reduce using rule 15 (pre_type_modifier -> K_LIST .)
    K_STRING        reduce using rule 15 (pre_type_modifier -> K_LIST .)
    K_BOOL          reduce using rule 15 (pre_type_modifier -> K_LIST .)
    K_WINDOW        reduce using rule 15 (pre_type_modifier -> K_LIST .)
    K_SHAPE         reduce using rule 15 (pre_type_modifier -> K_LIST .)
    K_TRIANGLE      reduce using rule 15 (pre_type_modifier -> K_LIST .)
    K_RECTANGLE     reduce using rule 15 (pre_type_modifier -> K_LIST .)
    K_CIRCLE        reduce using rule 15 (pre_type_modifier -> K_LIST .)
    K_TEXT          reduce using rule 15 (pre_type_modifier -> K_LIST .)


state 10

    (11) variable_declaration -> pre_type_modifier . type ID
    (12) variable_declaration -> pre_type_modifier . type ID ASSIGN expression
    (18) type -> . K_INT
    (19) type -> . K_DOUBLE
    (20) type -> . K_STRING
    (21) type -> . K_BOOL
    (22) type -> . K_WINDOW
    (23) type -> . K_SHAPE
    (24) type -> . K_TRIANGLE
    (25) type -> . K_RECTANGLE
    (26) type -> . K_CIRCLE
    (27) type -> . K_TEXT

    K_INT           shift and go to state 19
    K_DOUBLE        shift and go to state 13
    K_STRING        shift and go to state 20
    K_BOOL          shift and go to state 12
    K_WINDOW        shift and go to state 21
    K_SHAPE         shift and go to state 16
    K_TRIANGLE      shift and go to state 14
    K_RECTANGLE     shift and go to state 18
    K_CIRCLE        shift and go to state 22
    K_TEXT          shift and go to state 17

    type                           shift and go to state 15

state 11

    (7) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (8) function_call_statement -> ID . LPAREN RPAREN
    (13) variable_declaration -> ID . ASSIGN expression

    LPAREN          shift and go to state 24
    ASSIGN          shift and go to state 23


state 12

    (21) type -> K_BOOL .

    ID              reduce using rule 21 (type -> K_BOOL .)


state 13

    (19) type -> K_DOUBLE .

    ID              reduce using rule 19 (type -> K_DOUBLE .)


state 14

    (24) type -> K_TRIANGLE .

    ID              reduce using rule 24 (type -> K_TRIANGLE .)


state 15

    (11) variable_declaration -> pre_type_modifier type . ID
    (12) variable_declaration -> pre_type_modifier type . ID ASSIGN expression

    ID              shift and go to state 25


state 16

    (23) type -> K_SHAPE .

    ID              reduce using rule 23 (type -> K_SHAPE .)


state 17

    (27) type -> K_TEXT .

    ID              reduce using rule 27 (type -> K_TEXT .)


state 18

    (25) type -> K_RECTANGLE .

    ID              reduce using rule 25 (type -> K_RECTANGLE .)


state 19

    (18) type -> K_INT .

    ID              reduce using rule 18 (type -> K_INT .)


state 20

    (20) type -> K_STRING .

    ID              reduce using rule 20 (type -> K_STRING .)


state 21

    (22) type -> K_WINDOW .

    ID              reduce using rule 22 (type -> K_WINDOW .)


state 22

    (26) type -> K_CIRCLE .

    ID              reduce using rule 26 (type -> K_CIRCLE .)


state 23

    (13) variable_declaration -> ID ASSIGN . expression
    (28) expression -> . string_expression
    (29) expression -> . unary_expression
    (30) expression -> . boolean_expression
    (31) expression -> . arithmetic_expression
    (32) string_expression -> . string_expression PLUS string_term
    (33) string_expression -> . STRING
    (36) unary_expression -> . ID
    (37) unary_expression -> . STRING
    (38) unary_expression -> . INTEGER
    (39) unary_expression -> . function_call_statement
    (40) unary_expression -> . DOUBLE
    (41) unary_expression -> . K_TRUE
    (42) unary_expression -> . K_FALSE
    (43) boolean_expression -> . boolean_expression OR boolean_term
    (44) boolean_expression -> . boolean_term
    (59) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (60) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (61) arithmetic_expression -> . arithmetic_term
    (7) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (8) function_call_statement -> . ID LPAREN RPAREN
    (45) boolean_term -> . boolean_term AND boolean_factor
    (46) boolean_term -> . boolean_factor
    (62) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (63) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (65) arithmetic_term -> . arithmetic_factor
    (47) boolean_factor -> . LPAREN boolean_expression RPAREN
    (48) boolean_factor -> . unary_expression comparator unary_expression
    (49) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (50) boolean_factor -> . string_expression comparator string_expression
    (51) boolean_factor -> . unary_expression
    (52) boolean_factor -> . NEG boolean_factor
    (66) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (67) arithmetic_factor -> . number
    (68) arithmetic_factor -> . function_call_statement
    (69) arithmetic_factor -> . MINUS arithmetic_factor
    (70) number -> . INTEGER
    (71) number -> . DOUBLE

    STRING          shift and go to state 37
    ID              shift and go to state 41
    INTEGER         shift and go to state 34
    DOUBLE          shift and go to state 43
    K_TRUE          shift and go to state 30
    K_FALSE         shift and go to state 26
    LPAREN          shift and go to state 38
    NEG             shift and go to state 28
    MINUS           shift and go to state 32

    arithmetic_expression          shift and go to state 35
    string_expression              shift and go to state 36
    number                         shift and go to state 40
    unary_expression               shift and go to state 27
    boolean_expression             shift and go to state 42
    arithmetic_factor              shift and go to state 33
    boolean_term                   shift and go to state 29
    function_call_statement        shift and go to state 44
    arithmetic_term                shift and go to state 31
    boolean_factor                 shift and go to state 39
    expression                     shift and go to state 45

state 24

    (7) function_call_statement -> ID LPAREN . parameter_list RPAREN
    (8) function_call_statement -> ID LPAREN . RPAREN
    (9) parameter_list -> . parameter_list COMMA expression
    (10) parameter_list -> . expression
    (28) expression -> . string_expression
    (29) expression -> . unary_expression
    (30) expression -> . boolean_expression
    (31) expression -> . arithmetic_expression
    (32) string_expression -> . string_expression PLUS string_term
    (33) string_expression -> . STRING
    (36) unary_expression -> . ID
    (37) unary_expression -> . STRING
    (38) unary_expression -> . INTEGER
    (39) unary_expression -> . function_call_statement
    (40) unary_expression -> . DOUBLE
    (41) unary_expression -> . K_TRUE
    (42) unary_expression -> . K_FALSE
    (43) boolean_expression -> . boolean_expression OR boolean_term
    (44) boolean_expression -> . boolean_term
    (59) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (60) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (61) arithmetic_expression -> . arithmetic_term
    (7) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (8) function_call_statement -> . ID LPAREN RPAREN
    (45) boolean_term -> . boolean_term AND boolean_factor
    (46) boolean_term -> . boolean_factor
    (62) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (63) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (65) arithmetic_term -> . arithmetic_factor
    (47) boolean_factor -> . LPAREN boolean_expression RPAREN
    (48) boolean_factor -> . unary_expression comparator unary_expression
    (49) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (50) boolean_factor -> . string_expression comparator string_expression
    (51) boolean_factor -> . unary_expression
    (52) boolean_factor -> . NEG boolean_factor
    (66) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (67) arithmetic_factor -> . number
    (68) arithmetic_factor -> . function_call_statement
    (69) arithmetic_factor -> . MINUS arithmetic_factor
    (70) number -> . INTEGER
    (71) number -> . DOUBLE

    RPAREN          shift and go to state 46
    STRING          shift and go to state 37
    ID              shift and go to state 41
    INTEGER         shift and go to state 34
    DOUBLE          shift and go to state 43
    K_TRUE          shift and go to state 30
    K_FALSE         shift and go to state 26
    LPAREN          shift and go to state 38
    NEG             shift and go to state 28
    MINUS           shift and go to state 32

    arithmetic_expression          shift and go to state 35
    string_expression              shift and go to state 36
    number                         shift and go to state 40
    parameter_list                 shift and go to state 47
    unary_expression               shift and go to state 27
    boolean_expression             shift and go to state 42
    arithmetic_factor              shift and go to state 33
    boolean_term                   shift and go to state 29
    function_call_statement        shift and go to state 44
    arithmetic_term                shift and go to state 31
    boolean_factor                 shift and go to state 39
    expression                     shift and go to state 48

state 25

    (11) variable_declaration -> pre_type_modifier type ID .
    (12) variable_declaration -> pre_type_modifier type ID . ASSIGN expression

    ID              reduce using rule 11 (variable_declaration -> pre_type_modifier type ID .)
    K_LIST          reduce using rule 11 (variable_declaration -> pre_type_modifier type ID .)
    K_DICT          reduce using rule 11 (variable_declaration -> pre_type_modifier type ID .)
    K_SET           reduce using rule 11 (variable_declaration -> pre_type_modifier type ID .)
    K_INT           reduce using rule 11 (variable_declaration -> pre_type_modifier type ID .)
    K_DOUBLE        reduce using rule 11 (variable_declaration -> pre_type_modifier type ID .)
    K_STRING        reduce using rule 11 (variable_declaration -> pre_type_modifier type ID .)
    K_BOOL          reduce using rule 11 (variable_declaration -> pre_type_modifier type ID .)
    K_WINDOW        reduce using rule 11 (variable_declaration -> pre_type_modifier type ID .)
    K_SHAPE         reduce using rule 11 (variable_declaration -> pre_type_modifier type ID .)
    K_TRIANGLE      reduce using rule 11 (variable_declaration -> pre_type_modifier type ID .)
    K_RECTANGLE     reduce using rule 11 (variable_declaration -> pre_type_modifier type ID .)
    K_CIRCLE        reduce using rule 11 (variable_declaration -> pre_type_modifier type ID .)
    K_TEXT          reduce using rule 11 (variable_declaration -> pre_type_modifier type ID .)
    $end            reduce using rule 11 (variable_declaration -> pre_type_modifier type ID .)
    ASSIGN          shift and go to state 49


state 26

    (42) unary_expression -> K_FALSE .

    AND             reduce using rule 42 (unary_expression -> K_FALSE .)
    OR              reduce using rule 42 (unary_expression -> K_FALSE .)
    ID              reduce using rule 42 (unary_expression -> K_FALSE .)
    K_LIST          reduce using rule 42 (unary_expression -> K_FALSE .)
    K_DICT          reduce using rule 42 (unary_expression -> K_FALSE .)
    K_SET           reduce using rule 42 (unary_expression -> K_FALSE .)
    K_INT           reduce using rule 42 (unary_expression -> K_FALSE .)
    K_DOUBLE        reduce using rule 42 (unary_expression -> K_FALSE .)
    K_STRING        reduce using rule 42 (unary_expression -> K_FALSE .)
    K_BOOL          reduce using rule 42 (unary_expression -> K_FALSE .)
    K_WINDOW        reduce using rule 42 (unary_expression -> K_FALSE .)
    K_SHAPE         reduce using rule 42 (unary_expression -> K_FALSE .)
    K_TRIANGLE      reduce using rule 42 (unary_expression -> K_FALSE .)
    K_RECTANGLE     reduce using rule 42 (unary_expression -> K_FALSE .)
    K_CIRCLE        reduce using rule 42 (unary_expression -> K_FALSE .)
    K_TEXT          reduce using rule 42 (unary_expression -> K_FALSE .)
    $end            reduce using rule 42 (unary_expression -> K_FALSE .)
    RPAREN          reduce using rule 42 (unary_expression -> K_FALSE .)
    COMMA           reduce using rule 42 (unary_expression -> K_FALSE .)
    GT              reduce using rule 42 (unary_expression -> K_FALSE .)
    LT              reduce using rule 42 (unary_expression -> K_FALSE .)
    GEQ             reduce using rule 42 (unary_expression -> K_FALSE .)
    LEQ             reduce using rule 42 (unary_expression -> K_FALSE .)
    EQ              reduce using rule 42 (unary_expression -> K_FALSE .)
    NEQ             reduce using rule 42 (unary_expression -> K_FALSE .)


state 27

    (29) expression -> unary_expression .
    (48) boolean_factor -> unary_expression . comparator unary_expression
    (51) boolean_factor -> unary_expression .
    (53) comparator -> . GT
    (54) comparator -> . LT
    (55) comparator -> . GEQ
    (56) comparator -> . LEQ
    (57) comparator -> . EQ
    (58) comparator -> . NEQ

  ! reduce/reduce conflict for ID resolved using rule 29 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_LIST resolved using rule 29 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_DICT resolved using rule 29 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_SET resolved using rule 29 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_INT resolved using rule 29 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 29 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_STRING resolved using rule 29 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 29 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 29 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 29 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 29 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 29 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 29 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 29 (expression -> unary_expression .)
  ! reduce/reduce conflict for $end resolved using rule 29 (expression -> unary_expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 29 (expression -> unary_expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 29 (expression -> unary_expression .)
    RPAREN          reduce using rule 29 (expression -> unary_expression .)
    COMMA           reduce using rule 29 (expression -> unary_expression .)
    ID              reduce using rule 29 (expression -> unary_expression .)
    K_LIST          reduce using rule 29 (expression -> unary_expression .)
    K_DICT          reduce using rule 29 (expression -> unary_expression .)
    K_SET           reduce using rule 29 (expression -> unary_expression .)
    K_INT           reduce using rule 29 (expression -> unary_expression .)
    K_DOUBLE        reduce using rule 29 (expression -> unary_expression .)
    K_STRING        reduce using rule 29 (expression -> unary_expression .)
    K_BOOL          reduce using rule 29 (expression -> unary_expression .)
    K_WINDOW        reduce using rule 29 (expression -> unary_expression .)
    K_SHAPE         reduce using rule 29 (expression -> unary_expression .)
    K_TRIANGLE      reduce using rule 29 (expression -> unary_expression .)
    K_RECTANGLE     reduce using rule 29 (expression -> unary_expression .)
    K_CIRCLE        reduce using rule 29 (expression -> unary_expression .)
    K_TEXT          reduce using rule 29 (expression -> unary_expression .)
    $end            reduce using rule 29 (expression -> unary_expression .)
    AND             reduce using rule 51 (boolean_factor -> unary_expression .)
    OR              reduce using rule 51 (boolean_factor -> unary_expression .)
    GT              shift and go to state 51
    LT              shift and go to state 54
    GEQ             shift and go to state 50
    LEQ             shift and go to state 53
    EQ              shift and go to state 55
    NEQ             shift and go to state 56

  ! ID              [ reduce using rule 51 (boolean_factor -> unary_expression .) ]
  ! K_LIST          [ reduce using rule 51 (boolean_factor -> unary_expression .) ]
  ! K_DICT          [ reduce using rule 51 (boolean_factor -> unary_expression .) ]
  ! K_SET           [ reduce using rule 51 (boolean_factor -> unary_expression .) ]
  ! K_INT           [ reduce using rule 51 (boolean_factor -> unary_expression .) ]
  ! K_DOUBLE        [ reduce using rule 51 (boolean_factor -> unary_expression .) ]
  ! K_STRING        [ reduce using rule 51 (boolean_factor -> unary_expression .) ]
  ! K_BOOL          [ reduce using rule 51 (boolean_factor -> unary_expression .) ]
  ! K_WINDOW        [ reduce using rule 51 (boolean_factor -> unary_expression .) ]
  ! K_SHAPE         [ reduce using rule 51 (boolean_factor -> unary_expression .) ]
  ! K_TRIANGLE      [ reduce using rule 51 (boolean_factor -> unary_expression .) ]
  ! K_RECTANGLE     [ reduce using rule 51 (boolean_factor -> unary_expression .) ]
  ! K_CIRCLE        [ reduce using rule 51 (boolean_factor -> unary_expression .) ]
  ! K_TEXT          [ reduce using rule 51 (boolean_factor -> unary_expression .) ]
  ! $end            [ reduce using rule 51 (boolean_factor -> unary_expression .) ]
  ! RPAREN          [ reduce using rule 51 (boolean_factor -> unary_expression .) ]
  ! COMMA           [ reduce using rule 51 (boolean_factor -> unary_expression .) ]

    comparator                     shift and go to state 52

state 28

    (52) boolean_factor -> NEG . boolean_factor
    (47) boolean_factor -> . LPAREN boolean_expression RPAREN
    (48) boolean_factor -> . unary_expression comparator unary_expression
    (49) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (50) boolean_factor -> . string_expression comparator string_expression
    (51) boolean_factor -> . unary_expression
    (52) boolean_factor -> . NEG boolean_factor
    (36) unary_expression -> . ID
    (37) unary_expression -> . STRING
    (38) unary_expression -> . INTEGER
    (39) unary_expression -> . function_call_statement
    (40) unary_expression -> . DOUBLE
    (41) unary_expression -> . K_TRUE
    (42) unary_expression -> . K_FALSE
    (59) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (60) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (61) arithmetic_expression -> . arithmetic_term
    (32) string_expression -> . string_expression PLUS string_term
    (33) string_expression -> . STRING
    (7) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (8) function_call_statement -> . ID LPAREN RPAREN
    (62) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (63) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (65) arithmetic_term -> . arithmetic_factor
    (66) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (67) arithmetic_factor -> . number
    (68) arithmetic_factor -> . function_call_statement
    (69) arithmetic_factor -> . MINUS arithmetic_factor
    (70) number -> . INTEGER
    (71) number -> . DOUBLE

    LPAREN          shift and go to state 38
    NEG             shift and go to state 28
    ID              shift and go to state 41
    STRING          shift and go to state 60
    INTEGER         shift and go to state 34
    DOUBLE          shift and go to state 43
    K_TRUE          shift and go to state 30
    K_FALSE         shift and go to state 26
    MINUS           shift and go to state 32

    arithmetic_expression          shift and go to state 58
    string_expression              shift and go to state 59
    unary_expression               shift and go to state 57
    arithmetic_factor              shift and go to state 33
    function_call_statement        shift and go to state 44
    number                         shift and go to state 40
    arithmetic_term                shift and go to state 31
    boolean_factor                 shift and go to state 61

state 29

    (44) boolean_expression -> boolean_term .
    (45) boolean_term -> boolean_term . AND boolean_factor

    OR              reduce using rule 44 (boolean_expression -> boolean_term .)
    ID              reduce using rule 44 (boolean_expression -> boolean_term .)
    K_LIST          reduce using rule 44 (boolean_expression -> boolean_term .)
    K_DICT          reduce using rule 44 (boolean_expression -> boolean_term .)
    K_SET           reduce using rule 44 (boolean_expression -> boolean_term .)
    K_INT           reduce using rule 44 (boolean_expression -> boolean_term .)
    K_DOUBLE        reduce using rule 44 (boolean_expression -> boolean_term .)
    K_STRING        reduce using rule 44 (boolean_expression -> boolean_term .)
    K_BOOL          reduce using rule 44 (boolean_expression -> boolean_term .)
    K_WINDOW        reduce using rule 44 (boolean_expression -> boolean_term .)
    K_SHAPE         reduce using rule 44 (boolean_expression -> boolean_term .)
    K_TRIANGLE      reduce using rule 44 (boolean_expression -> boolean_term .)
    K_RECTANGLE     reduce using rule 44 (boolean_expression -> boolean_term .)
    K_CIRCLE        reduce using rule 44 (boolean_expression -> boolean_term .)
    K_TEXT          reduce using rule 44 (boolean_expression -> boolean_term .)
    $end            reduce using rule 44 (boolean_expression -> boolean_term .)
    RPAREN          reduce using rule 44 (boolean_expression -> boolean_term .)
    COMMA           reduce using rule 44 (boolean_expression -> boolean_term .)
    AND             shift and go to state 62


state 30

    (41) unary_expression -> K_TRUE .

    AND             reduce using rule 41 (unary_expression -> K_TRUE .)
    OR              reduce using rule 41 (unary_expression -> K_TRUE .)
    ID              reduce using rule 41 (unary_expression -> K_TRUE .)
    K_LIST          reduce using rule 41 (unary_expression -> K_TRUE .)
    K_DICT          reduce using rule 41 (unary_expression -> K_TRUE .)
    K_SET           reduce using rule 41 (unary_expression -> K_TRUE .)
    K_INT           reduce using rule 41 (unary_expression -> K_TRUE .)
    K_DOUBLE        reduce using rule 41 (unary_expression -> K_TRUE .)
    K_STRING        reduce using rule 41 (unary_expression -> K_TRUE .)
    K_BOOL          reduce using rule 41 (unary_expression -> K_TRUE .)
    K_WINDOW        reduce using rule 41 (unary_expression -> K_TRUE .)
    K_SHAPE         reduce using rule 41 (unary_expression -> K_TRUE .)
    K_TRIANGLE      reduce using rule 41 (unary_expression -> K_TRUE .)
    K_RECTANGLE     reduce using rule 41 (unary_expression -> K_TRUE .)
    K_CIRCLE        reduce using rule 41 (unary_expression -> K_TRUE .)
    K_TEXT          reduce using rule 41 (unary_expression -> K_TRUE .)
    $end            reduce using rule 41 (unary_expression -> K_TRUE .)
    RPAREN          reduce using rule 41 (unary_expression -> K_TRUE .)
    COMMA           reduce using rule 41 (unary_expression -> K_TRUE .)
    GT              reduce using rule 41 (unary_expression -> K_TRUE .)
    LT              reduce using rule 41 (unary_expression -> K_TRUE .)
    GEQ             reduce using rule 41 (unary_expression -> K_TRUE .)
    LEQ             reduce using rule 41 (unary_expression -> K_TRUE .)
    EQ              reduce using rule 41 (unary_expression -> K_TRUE .)
    NEQ             reduce using rule 41 (unary_expression -> K_TRUE .)


state 31

    (61) arithmetic_expression -> arithmetic_term .
    (62) arithmetic_term -> arithmetic_term . TIMES arithmetic_factor
    (63) arithmetic_term -> arithmetic_term . DIVIDE arithmetic_factor
    (64) arithmetic_term -> arithmetic_term . MOD arithmetic_factor

    PLUS            reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    MINUS           reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    GT              reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    LT              reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    GEQ             reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    LEQ             reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    EQ              reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    NEQ             reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    AND             reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    OR              reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    ID              reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    K_LIST          reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    K_DICT          reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    K_SET           reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    K_INT           reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    K_DOUBLE        reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    K_STRING        reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    K_BOOL          reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    K_WINDOW        reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    K_SHAPE         reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    K_TRIANGLE      reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    K_RECTANGLE     reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    K_CIRCLE        reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    K_TEXT          reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    $end            reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    RPAREN          reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    COMMA           reduce using rule 61 (arithmetic_expression -> arithmetic_term .)
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 63


state 32

    (69) arithmetic_factor -> MINUS . arithmetic_factor
    (66) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (67) arithmetic_factor -> . number
    (68) arithmetic_factor -> . function_call_statement
    (69) arithmetic_factor -> . MINUS arithmetic_factor
    (70) number -> . INTEGER
    (71) number -> . DOUBLE
    (7) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (8) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 70
    MINUS           shift and go to state 32
    INTEGER         shift and go to state 71
    DOUBLE          shift and go to state 67
    ID              shift and go to state 69

    number                         shift and go to state 40
    function_call_statement        shift and go to state 68
    arithmetic_factor              shift and go to state 66

state 33

    (65) arithmetic_term -> arithmetic_factor .

    TIMES           reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    DIVIDE          reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    MOD             reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    PLUS            reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    MINUS           reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    GT              reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    LT              reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    GEQ             reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    LEQ             reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    EQ              reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    NEQ             reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    ID              reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    K_LIST          reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    K_DICT          reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    K_SET           reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    K_INT           reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    K_DOUBLE        reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    K_STRING        reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    K_BOOL          reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    K_WINDOW        reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    K_SHAPE         reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    K_TRIANGLE      reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    K_RECTANGLE     reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    K_CIRCLE        reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    K_TEXT          reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    $end            reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    RPAREN          reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    COMMA           reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    AND             reduce using rule 65 (arithmetic_term -> arithmetic_factor .)
    OR              reduce using rule 65 (arithmetic_term -> arithmetic_factor .)


state 34

    (38) unary_expression -> INTEGER .
    (70) number -> INTEGER .

  ! reduce/reduce conflict for GT resolved using rule 38 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for LT resolved using rule 38 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for GEQ resolved using rule 38 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for LEQ resolved using rule 38 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for EQ resolved using rule 38 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for NEQ resolved using rule 38 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for ID resolved using rule 38 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_LIST resolved using rule 38 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_DICT resolved using rule 38 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_SET resolved using rule 38 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_INT resolved using rule 38 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 38 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_STRING resolved using rule 38 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 38 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 38 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 38 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 38 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 38 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 38 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 38 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for $end resolved using rule 38 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 38 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 38 (unary_expression -> INTEGER .)
    GT              reduce using rule 38 (unary_expression -> INTEGER .)
    LT              reduce using rule 38 (unary_expression -> INTEGER .)
    GEQ             reduce using rule 38 (unary_expression -> INTEGER .)
    LEQ             reduce using rule 38 (unary_expression -> INTEGER .)
    EQ              reduce using rule 38 (unary_expression -> INTEGER .)
    NEQ             reduce using rule 38 (unary_expression -> INTEGER .)
    AND             reduce using rule 38 (unary_expression -> INTEGER .)
    RPAREN          reduce using rule 38 (unary_expression -> INTEGER .)
    OR              reduce using rule 38 (unary_expression -> INTEGER .)
    ID              reduce using rule 38 (unary_expression -> INTEGER .)
    K_LIST          reduce using rule 38 (unary_expression -> INTEGER .)
    K_DICT          reduce using rule 38 (unary_expression -> INTEGER .)
    K_SET           reduce using rule 38 (unary_expression -> INTEGER .)
    K_INT           reduce using rule 38 (unary_expression -> INTEGER .)
    K_DOUBLE        reduce using rule 38 (unary_expression -> INTEGER .)
    K_STRING        reduce using rule 38 (unary_expression -> INTEGER .)
    K_BOOL          reduce using rule 38 (unary_expression -> INTEGER .)
    K_WINDOW        reduce using rule 38 (unary_expression -> INTEGER .)
    K_SHAPE         reduce using rule 38 (unary_expression -> INTEGER .)
    K_TRIANGLE      reduce using rule 38 (unary_expression -> INTEGER .)
    K_RECTANGLE     reduce using rule 38 (unary_expression -> INTEGER .)
    K_CIRCLE        reduce using rule 38 (unary_expression -> INTEGER .)
    K_TEXT          reduce using rule 38 (unary_expression -> INTEGER .)
    $end            reduce using rule 38 (unary_expression -> INTEGER .)
    COMMA           reduce using rule 38 (unary_expression -> INTEGER .)
    TIMES           reduce using rule 70 (number -> INTEGER .)
    DIVIDE          reduce using rule 70 (number -> INTEGER .)
    MOD             reduce using rule 70 (number -> INTEGER .)
    PLUS            reduce using rule 70 (number -> INTEGER .)
    MINUS           reduce using rule 70 (number -> INTEGER .)

  ! GT              [ reduce using rule 70 (number -> INTEGER .) ]
  ! LT              [ reduce using rule 70 (number -> INTEGER .) ]
  ! GEQ             [ reduce using rule 70 (number -> INTEGER .) ]
  ! LEQ             [ reduce using rule 70 (number -> INTEGER .) ]
  ! EQ              [ reduce using rule 70 (number -> INTEGER .) ]
  ! NEQ             [ reduce using rule 70 (number -> INTEGER .) ]
  ! ID              [ reduce using rule 70 (number -> INTEGER .) ]
  ! K_LIST          [ reduce using rule 70 (number -> INTEGER .) ]
  ! K_DICT          [ reduce using rule 70 (number -> INTEGER .) ]
  ! K_SET           [ reduce using rule 70 (number -> INTEGER .) ]
  ! K_INT           [ reduce using rule 70 (number -> INTEGER .) ]
  ! K_DOUBLE        [ reduce using rule 70 (number -> INTEGER .) ]
  ! K_STRING        [ reduce using rule 70 (number -> INTEGER .) ]
  ! K_BOOL          [ reduce using rule 70 (number -> INTEGER .) ]
  ! K_WINDOW        [ reduce using rule 70 (number -> INTEGER .) ]
  ! K_SHAPE         [ reduce using rule 70 (number -> INTEGER .) ]
  ! K_TRIANGLE      [ reduce using rule 70 (number -> INTEGER .) ]
  ! K_RECTANGLE     [ reduce using rule 70 (number -> INTEGER .) ]
  ! K_CIRCLE        [ reduce using rule 70 (number -> INTEGER .) ]
  ! K_TEXT          [ reduce using rule 70 (number -> INTEGER .) ]
  ! $end            [ reduce using rule 70 (number -> INTEGER .) ]
  ! RPAREN          [ reduce using rule 70 (number -> INTEGER .) ]
  ! COMMA           [ reduce using rule 70 (number -> INTEGER .) ]


state 35

    (31) expression -> arithmetic_expression .
    (59) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (60) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term
    (49) boolean_factor -> arithmetic_expression . comparator arithmetic_expression
    (53) comparator -> . GT
    (54) comparator -> . LT
    (55) comparator -> . GEQ
    (56) comparator -> . LEQ
    (57) comparator -> . EQ
    (58) comparator -> . NEQ

    RPAREN          reduce using rule 31 (expression -> arithmetic_expression .)
    COMMA           reduce using rule 31 (expression -> arithmetic_expression .)
    ID              reduce using rule 31 (expression -> arithmetic_expression .)
    K_LIST          reduce using rule 31 (expression -> arithmetic_expression .)
    K_DICT          reduce using rule 31 (expression -> arithmetic_expression .)
    K_SET           reduce using rule 31 (expression -> arithmetic_expression .)
    K_INT           reduce using rule 31 (expression -> arithmetic_expression .)
    K_DOUBLE        reduce using rule 31 (expression -> arithmetic_expression .)
    K_STRING        reduce using rule 31 (expression -> arithmetic_expression .)
    K_BOOL          reduce using rule 31 (expression -> arithmetic_expression .)
    K_WINDOW        reduce using rule 31 (expression -> arithmetic_expression .)
    K_SHAPE         reduce using rule 31 (expression -> arithmetic_expression .)
    K_TRIANGLE      reduce using rule 31 (expression -> arithmetic_expression .)
    K_RECTANGLE     reduce using rule 31 (expression -> arithmetic_expression .)
    K_CIRCLE        reduce using rule 31 (expression -> arithmetic_expression .)
    K_TEXT          reduce using rule 31 (expression -> arithmetic_expression .)
    $end            reduce using rule 31 (expression -> arithmetic_expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    GT              shift and go to state 51
    LT              shift and go to state 54
    GEQ             shift and go to state 50
    LEQ             shift and go to state 53
    EQ              shift and go to state 55
    NEQ             shift and go to state 56

    comparator                     shift and go to state 72

state 36

    (28) expression -> string_expression .
    (32) string_expression -> string_expression . PLUS string_term
    (50) boolean_factor -> string_expression . comparator string_expression
    (53) comparator -> . GT
    (54) comparator -> . LT
    (55) comparator -> . GEQ
    (56) comparator -> . LEQ
    (57) comparator -> . EQ
    (58) comparator -> . NEQ

    RPAREN          reduce using rule 28 (expression -> string_expression .)
    COMMA           reduce using rule 28 (expression -> string_expression .)
    ID              reduce using rule 28 (expression -> string_expression .)
    K_LIST          reduce using rule 28 (expression -> string_expression .)
    K_DICT          reduce using rule 28 (expression -> string_expression .)
    K_SET           reduce using rule 28 (expression -> string_expression .)
    K_INT           reduce using rule 28 (expression -> string_expression .)
    K_DOUBLE        reduce using rule 28 (expression -> string_expression .)
    K_STRING        reduce using rule 28 (expression -> string_expression .)
    K_BOOL          reduce using rule 28 (expression -> string_expression .)
    K_WINDOW        reduce using rule 28 (expression -> string_expression .)
    K_SHAPE         reduce using rule 28 (expression -> string_expression .)
    K_TRIANGLE      reduce using rule 28 (expression -> string_expression .)
    K_RECTANGLE     reduce using rule 28 (expression -> string_expression .)
    K_CIRCLE        reduce using rule 28 (expression -> string_expression .)
    K_TEXT          reduce using rule 28 (expression -> string_expression .)
    $end            reduce using rule 28 (expression -> string_expression .)
    PLUS            shift and go to state 76
    GT              shift and go to state 51
    LT              shift and go to state 54
    GEQ             shift and go to state 50
    LEQ             shift and go to state 53
    EQ              shift and go to state 55
    NEQ             shift and go to state 56

    comparator                     shift and go to state 75

state 37

    (33) string_expression -> STRING .
    (37) unary_expression -> STRING .

  ! reduce/reduce conflict for GT resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for LT resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for GEQ resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for LEQ resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for EQ resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for NEQ resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for ID resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_LIST resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_DICT resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_SET resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_INT resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_STRING resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for $end resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 33 (string_expression -> STRING .)
    PLUS            reduce using rule 33 (string_expression -> STRING .)
    GT              reduce using rule 33 (string_expression -> STRING .)
    LT              reduce using rule 33 (string_expression -> STRING .)
    GEQ             reduce using rule 33 (string_expression -> STRING .)
    LEQ             reduce using rule 33 (string_expression -> STRING .)
    EQ              reduce using rule 33 (string_expression -> STRING .)
    NEQ             reduce using rule 33 (string_expression -> STRING .)
    ID              reduce using rule 33 (string_expression -> STRING .)
    K_LIST          reduce using rule 33 (string_expression -> STRING .)
    K_DICT          reduce using rule 33 (string_expression -> STRING .)
    K_SET           reduce using rule 33 (string_expression -> STRING .)
    K_INT           reduce using rule 33 (string_expression -> STRING .)
    K_DOUBLE        reduce using rule 33 (string_expression -> STRING .)
    K_STRING        reduce using rule 33 (string_expression -> STRING .)
    K_BOOL          reduce using rule 33 (string_expression -> STRING .)
    K_WINDOW        reduce using rule 33 (string_expression -> STRING .)
    K_SHAPE         reduce using rule 33 (string_expression -> STRING .)
    K_TRIANGLE      reduce using rule 33 (string_expression -> STRING .)
    K_RECTANGLE     reduce using rule 33 (string_expression -> STRING .)
    K_CIRCLE        reduce using rule 33 (string_expression -> STRING .)
    K_TEXT          reduce using rule 33 (string_expression -> STRING .)
    $end            reduce using rule 33 (string_expression -> STRING .)
    RPAREN          reduce using rule 33 (string_expression -> STRING .)
    COMMA           reduce using rule 33 (string_expression -> STRING .)
    AND             reduce using rule 37 (unary_expression -> STRING .)
    OR              reduce using rule 37 (unary_expression -> STRING .)

  ! GT              [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! LT              [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! GEQ             [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! LEQ             [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! EQ              [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! NEQ             [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! ID              [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! K_LIST          [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! K_DICT          [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! K_SET           [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! K_INT           [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! K_DOUBLE        [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! K_STRING        [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! K_BOOL          [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! K_WINDOW        [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! K_SHAPE         [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! K_TRIANGLE      [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! K_RECTANGLE     [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! K_CIRCLE        [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! K_TEXT          [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! $end            [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! RPAREN          [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! COMMA           [ reduce using rule 37 (unary_expression -> STRING .) ]


state 38

    (47) boolean_factor -> LPAREN . boolean_expression RPAREN
    (66) arithmetic_factor -> LPAREN . arithmetic_expression RPAREN
    (43) boolean_expression -> . boolean_expression OR boolean_term
    (44) boolean_expression -> . boolean_term
    (59) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (60) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (61) arithmetic_expression -> . arithmetic_term
    (45) boolean_term -> . boolean_term AND boolean_factor
    (46) boolean_term -> . boolean_factor
    (62) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (63) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (65) arithmetic_term -> . arithmetic_factor
    (47) boolean_factor -> . LPAREN boolean_expression RPAREN
    (48) boolean_factor -> . unary_expression comparator unary_expression
    (49) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (50) boolean_factor -> . string_expression comparator string_expression
    (51) boolean_factor -> . unary_expression
    (52) boolean_factor -> . NEG boolean_factor
    (66) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (67) arithmetic_factor -> . number
    (68) arithmetic_factor -> . function_call_statement
    (69) arithmetic_factor -> . MINUS arithmetic_factor
    (36) unary_expression -> . ID
    (37) unary_expression -> . STRING
    (38) unary_expression -> . INTEGER
    (39) unary_expression -> . function_call_statement
    (40) unary_expression -> . DOUBLE
    (41) unary_expression -> . K_TRUE
    (42) unary_expression -> . K_FALSE
    (32) string_expression -> . string_expression PLUS string_term
    (33) string_expression -> . STRING
    (70) number -> . INTEGER
    (71) number -> . DOUBLE
    (7) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (8) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 38
    NEG             shift and go to state 28
    MINUS           shift and go to state 32
    ID              shift and go to state 41
    STRING          shift and go to state 60
    INTEGER         shift and go to state 34
    DOUBLE          shift and go to state 43
    K_TRUE          shift and go to state 30
    K_FALSE         shift and go to state 26

    arithmetic_expression          shift and go to state 78
    string_expression              shift and go to state 59
    unary_expression               shift and go to state 57
    arithmetic_factor              shift and go to state 33
    boolean_expression             shift and go to state 79
    boolean_term                   shift and go to state 29
    arithmetic_term                shift and go to state 31
    number                         shift and go to state 40
    function_call_statement        shift and go to state 77
    boolean_factor                 shift and go to state 39

state 39

    (46) boolean_term -> boolean_factor .

    AND             reduce using rule 46 (boolean_term -> boolean_factor .)
    RPAREN          reduce using rule 46 (boolean_term -> boolean_factor .)
    OR              reduce using rule 46 (boolean_term -> boolean_factor .)
    ID              reduce using rule 46 (boolean_term -> boolean_factor .)
    K_LIST          reduce using rule 46 (boolean_term -> boolean_factor .)
    K_DICT          reduce using rule 46 (boolean_term -> boolean_factor .)
    K_SET           reduce using rule 46 (boolean_term -> boolean_factor .)
    K_INT           reduce using rule 46 (boolean_term -> boolean_factor .)
    K_DOUBLE        reduce using rule 46 (boolean_term -> boolean_factor .)
    K_STRING        reduce using rule 46 (boolean_term -> boolean_factor .)
    K_BOOL          reduce using rule 46 (boolean_term -> boolean_factor .)
    K_WINDOW        reduce using rule 46 (boolean_term -> boolean_factor .)
    K_SHAPE         reduce using rule 46 (boolean_term -> boolean_factor .)
    K_TRIANGLE      reduce using rule 46 (boolean_term -> boolean_factor .)
    K_RECTANGLE     reduce using rule 46 (boolean_term -> boolean_factor .)
    K_CIRCLE        reduce using rule 46 (boolean_term -> boolean_factor .)
    K_TEXT          reduce using rule 46 (boolean_term -> boolean_factor .)
    $end            reduce using rule 46 (boolean_term -> boolean_factor .)
    COMMA           reduce using rule 46 (boolean_term -> boolean_factor .)


state 40

    (67) arithmetic_factor -> number .

    TIMES           reduce using rule 67 (arithmetic_factor -> number .)
    DIVIDE          reduce using rule 67 (arithmetic_factor -> number .)
    MOD             reduce using rule 67 (arithmetic_factor -> number .)
    PLUS            reduce using rule 67 (arithmetic_factor -> number .)
    MINUS           reduce using rule 67 (arithmetic_factor -> number .)
    GT              reduce using rule 67 (arithmetic_factor -> number .)
    LT              reduce using rule 67 (arithmetic_factor -> number .)
    GEQ             reduce using rule 67 (arithmetic_factor -> number .)
    LEQ             reduce using rule 67 (arithmetic_factor -> number .)
    EQ              reduce using rule 67 (arithmetic_factor -> number .)
    NEQ             reduce using rule 67 (arithmetic_factor -> number .)
    ID              reduce using rule 67 (arithmetic_factor -> number .)
    K_LIST          reduce using rule 67 (arithmetic_factor -> number .)
    K_DICT          reduce using rule 67 (arithmetic_factor -> number .)
    K_SET           reduce using rule 67 (arithmetic_factor -> number .)
    K_INT           reduce using rule 67 (arithmetic_factor -> number .)
    K_DOUBLE        reduce using rule 67 (arithmetic_factor -> number .)
    K_STRING        reduce using rule 67 (arithmetic_factor -> number .)
    K_BOOL          reduce using rule 67 (arithmetic_factor -> number .)
    K_WINDOW        reduce using rule 67 (arithmetic_factor -> number .)
    K_SHAPE         reduce using rule 67 (arithmetic_factor -> number .)
    K_TRIANGLE      reduce using rule 67 (arithmetic_factor -> number .)
    K_RECTANGLE     reduce using rule 67 (arithmetic_factor -> number .)
    K_CIRCLE        reduce using rule 67 (arithmetic_factor -> number .)
    K_TEXT          reduce using rule 67 (arithmetic_factor -> number .)
    $end            reduce using rule 67 (arithmetic_factor -> number .)
    RPAREN          reduce using rule 67 (arithmetic_factor -> number .)
    COMMA           reduce using rule 67 (arithmetic_factor -> number .)
    AND             reduce using rule 67 (arithmetic_factor -> number .)
    OR              reduce using rule 67 (arithmetic_factor -> number .)


state 41

    (36) unary_expression -> ID .
    (7) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (8) function_call_statement -> ID . LPAREN RPAREN

    AND             reduce using rule 36 (unary_expression -> ID .)
    OR              reduce using rule 36 (unary_expression -> ID .)
    ID              reduce using rule 36 (unary_expression -> ID .)
    K_LIST          reduce using rule 36 (unary_expression -> ID .)
    K_DICT          reduce using rule 36 (unary_expression -> ID .)
    K_SET           reduce using rule 36 (unary_expression -> ID .)
    K_INT           reduce using rule 36 (unary_expression -> ID .)
    K_DOUBLE        reduce using rule 36 (unary_expression -> ID .)
    K_STRING        reduce using rule 36 (unary_expression -> ID .)
    K_BOOL          reduce using rule 36 (unary_expression -> ID .)
    K_WINDOW        reduce using rule 36 (unary_expression -> ID .)
    K_SHAPE         reduce using rule 36 (unary_expression -> ID .)
    K_TRIANGLE      reduce using rule 36 (unary_expression -> ID .)
    K_RECTANGLE     reduce using rule 36 (unary_expression -> ID .)
    K_CIRCLE        reduce using rule 36 (unary_expression -> ID .)
    K_TEXT          reduce using rule 36 (unary_expression -> ID .)
    $end            reduce using rule 36 (unary_expression -> ID .)
    RPAREN          reduce using rule 36 (unary_expression -> ID .)
    COMMA           reduce using rule 36 (unary_expression -> ID .)
    GT              reduce using rule 36 (unary_expression -> ID .)
    LT              reduce using rule 36 (unary_expression -> ID .)
    GEQ             reduce using rule 36 (unary_expression -> ID .)
    LEQ             reduce using rule 36 (unary_expression -> ID .)
    EQ              reduce using rule 36 (unary_expression -> ID .)
    NEQ             reduce using rule 36 (unary_expression -> ID .)
    LPAREN          shift and go to state 24


state 42

    (30) expression -> boolean_expression .
    (43) boolean_expression -> boolean_expression . OR boolean_term

    RPAREN          reduce using rule 30 (expression -> boolean_expression .)
    COMMA           reduce using rule 30 (expression -> boolean_expression .)
    ID              reduce using rule 30 (expression -> boolean_expression .)
    K_LIST          reduce using rule 30 (expression -> boolean_expression .)
    K_DICT          reduce using rule 30 (expression -> boolean_expression .)
    K_SET           reduce using rule 30 (expression -> boolean_expression .)
    K_INT           reduce using rule 30 (expression -> boolean_expression .)
    K_DOUBLE        reduce using rule 30 (expression -> boolean_expression .)
    K_STRING        reduce using rule 30 (expression -> boolean_expression .)
    K_BOOL          reduce using rule 30 (expression -> boolean_expression .)
    K_WINDOW        reduce using rule 30 (expression -> boolean_expression .)
    K_SHAPE         reduce using rule 30 (expression -> boolean_expression .)
    K_TRIANGLE      reduce using rule 30 (expression -> boolean_expression .)
    K_RECTANGLE     reduce using rule 30 (expression -> boolean_expression .)
    K_CIRCLE        reduce using rule 30 (expression -> boolean_expression .)
    K_TEXT          reduce using rule 30 (expression -> boolean_expression .)
    $end            reduce using rule 30 (expression -> boolean_expression .)
    OR              shift and go to state 80


state 43

    (40) unary_expression -> DOUBLE .
    (71) number -> DOUBLE .

  ! reduce/reduce conflict for GT resolved using rule 40 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for LT resolved using rule 40 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for GEQ resolved using rule 40 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for LEQ resolved using rule 40 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for EQ resolved using rule 40 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for NEQ resolved using rule 40 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for ID resolved using rule 40 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_LIST resolved using rule 40 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_DICT resolved using rule 40 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_SET resolved using rule 40 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_INT resolved using rule 40 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 40 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_STRING resolved using rule 40 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 40 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 40 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 40 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 40 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 40 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 40 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 40 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for $end resolved using rule 40 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 40 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 40 (unary_expression -> DOUBLE .)
    GT              reduce using rule 40 (unary_expression -> DOUBLE .)
    LT              reduce using rule 40 (unary_expression -> DOUBLE .)
    GEQ             reduce using rule 40 (unary_expression -> DOUBLE .)
    LEQ             reduce using rule 40 (unary_expression -> DOUBLE .)
    EQ              reduce using rule 40 (unary_expression -> DOUBLE .)
    NEQ             reduce using rule 40 (unary_expression -> DOUBLE .)
    AND             reduce using rule 40 (unary_expression -> DOUBLE .)
    RPAREN          reduce using rule 40 (unary_expression -> DOUBLE .)
    OR              reduce using rule 40 (unary_expression -> DOUBLE .)
    ID              reduce using rule 40 (unary_expression -> DOUBLE .)
    K_LIST          reduce using rule 40 (unary_expression -> DOUBLE .)
    K_DICT          reduce using rule 40 (unary_expression -> DOUBLE .)
    K_SET           reduce using rule 40 (unary_expression -> DOUBLE .)
    K_INT           reduce using rule 40 (unary_expression -> DOUBLE .)
    K_DOUBLE        reduce using rule 40 (unary_expression -> DOUBLE .)
    K_STRING        reduce using rule 40 (unary_expression -> DOUBLE .)
    K_BOOL          reduce using rule 40 (unary_expression -> DOUBLE .)
    K_WINDOW        reduce using rule 40 (unary_expression -> DOUBLE .)
    K_SHAPE         reduce using rule 40 (unary_expression -> DOUBLE .)
    K_TRIANGLE      reduce using rule 40 (unary_expression -> DOUBLE .)
    K_RECTANGLE     reduce using rule 40 (unary_expression -> DOUBLE .)
    K_CIRCLE        reduce using rule 40 (unary_expression -> DOUBLE .)
    K_TEXT          reduce using rule 40 (unary_expression -> DOUBLE .)
    $end            reduce using rule 40 (unary_expression -> DOUBLE .)
    COMMA           reduce using rule 40 (unary_expression -> DOUBLE .)
    TIMES           reduce using rule 71 (number -> DOUBLE .)
    DIVIDE          reduce using rule 71 (number -> DOUBLE .)
    MOD             reduce using rule 71 (number -> DOUBLE .)
    PLUS            reduce using rule 71 (number -> DOUBLE .)
    MINUS           reduce using rule 71 (number -> DOUBLE .)

  ! GT              [ reduce using rule 71 (number -> DOUBLE .) ]
  ! LT              [ reduce using rule 71 (number -> DOUBLE .) ]
  ! GEQ             [ reduce using rule 71 (number -> DOUBLE .) ]
  ! LEQ             [ reduce using rule 71 (number -> DOUBLE .) ]
  ! EQ              [ reduce using rule 71 (number -> DOUBLE .) ]
  ! NEQ             [ reduce using rule 71 (number -> DOUBLE .) ]
  ! ID              [ reduce using rule 71 (number -> DOUBLE .) ]
  ! K_LIST          [ reduce using rule 71 (number -> DOUBLE .) ]
  ! K_DICT          [ reduce using rule 71 (number -> DOUBLE .) ]
  ! K_SET           [ reduce using rule 71 (number -> DOUBLE .) ]
  ! K_INT           [ reduce using rule 71 (number -> DOUBLE .) ]
  ! K_DOUBLE        [ reduce using rule 71 (number -> DOUBLE .) ]
  ! K_STRING        [ reduce using rule 71 (number -> DOUBLE .) ]
  ! K_BOOL          [ reduce using rule 71 (number -> DOUBLE .) ]
  ! K_WINDOW        [ reduce using rule 71 (number -> DOUBLE .) ]
  ! K_SHAPE         [ reduce using rule 71 (number -> DOUBLE .) ]
  ! K_TRIANGLE      [ reduce using rule 71 (number -> DOUBLE .) ]
  ! K_RECTANGLE     [ reduce using rule 71 (number -> DOUBLE .) ]
  ! K_CIRCLE        [ reduce using rule 71 (number -> DOUBLE .) ]
  ! K_TEXT          [ reduce using rule 71 (number -> DOUBLE .) ]
  ! $end            [ reduce using rule 71 (number -> DOUBLE .) ]
  ! RPAREN          [ reduce using rule 71 (number -> DOUBLE .) ]
  ! COMMA           [ reduce using rule 71 (number -> DOUBLE .) ]


state 44

    (39) unary_expression -> function_call_statement .
    (68) arithmetic_factor -> function_call_statement .

  ! reduce/reduce conflict for GT resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for LT resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for GEQ resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for LEQ resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for EQ resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for NEQ resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for ID resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_LIST resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_DICT resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_SET resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_INT resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_STRING resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for $end resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for RPAREN resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for COMMA resolved using rule 39 (unary_expression -> function_call_statement .)
    GT              reduce using rule 39 (unary_expression -> function_call_statement .)
    LT              reduce using rule 39 (unary_expression -> function_call_statement .)
    GEQ             reduce using rule 39 (unary_expression -> function_call_statement .)
    LEQ             reduce using rule 39 (unary_expression -> function_call_statement .)
    EQ              reduce using rule 39 (unary_expression -> function_call_statement .)
    NEQ             reduce using rule 39 (unary_expression -> function_call_statement .)
    ID              reduce using rule 39 (unary_expression -> function_call_statement .)
    K_LIST          reduce using rule 39 (unary_expression -> function_call_statement .)
    K_DICT          reduce using rule 39 (unary_expression -> function_call_statement .)
    K_SET           reduce using rule 39 (unary_expression -> function_call_statement .)
    K_INT           reduce using rule 39 (unary_expression -> function_call_statement .)
    K_DOUBLE        reduce using rule 39 (unary_expression -> function_call_statement .)
    K_STRING        reduce using rule 39 (unary_expression -> function_call_statement .)
    K_BOOL          reduce using rule 39 (unary_expression -> function_call_statement .)
    K_WINDOW        reduce using rule 39 (unary_expression -> function_call_statement .)
    K_SHAPE         reduce using rule 39 (unary_expression -> function_call_statement .)
    K_TRIANGLE      reduce using rule 39 (unary_expression -> function_call_statement .)
    K_RECTANGLE     reduce using rule 39 (unary_expression -> function_call_statement .)
    K_CIRCLE        reduce using rule 39 (unary_expression -> function_call_statement .)
    K_TEXT          reduce using rule 39 (unary_expression -> function_call_statement .)
    $end            reduce using rule 39 (unary_expression -> function_call_statement .)
    AND             reduce using rule 39 (unary_expression -> function_call_statement .)
    OR              reduce using rule 39 (unary_expression -> function_call_statement .)
    RPAREN          reduce using rule 39 (unary_expression -> function_call_statement .)
    COMMA           reduce using rule 39 (unary_expression -> function_call_statement .)
    TIMES           reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    DIVIDE          reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    MOD             reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    PLUS            reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    MINUS           reduce using rule 68 (arithmetic_factor -> function_call_statement .)

  ! GT              [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! LT              [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! GEQ             [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! LEQ             [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! EQ              [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! NEQ             [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! ID              [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! K_LIST          [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! K_DICT          [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! K_SET           [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! K_INT           [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! K_DOUBLE        [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! K_STRING        [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! K_BOOL          [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! K_WINDOW        [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! K_SHAPE         [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! K_TRIANGLE      [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! K_RECTANGLE     [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! K_CIRCLE        [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! K_TEXT          [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! $end            [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! RPAREN          [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! COMMA           [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]


state 45

    (13) variable_declaration -> ID ASSIGN expression .

    ID              reduce using rule 13 (variable_declaration -> ID ASSIGN expression .)
    K_LIST          reduce using rule 13 (variable_declaration -> ID ASSIGN expression .)
    K_DICT          reduce using rule 13 (variable_declaration -> ID ASSIGN expression .)
    K_SET           reduce using rule 13 (variable_declaration -> ID ASSIGN expression .)
    K_INT           reduce using rule 13 (variable_declaration -> ID ASSIGN expression .)
    K_DOUBLE        reduce using rule 13 (variable_declaration -> ID ASSIGN expression .)
    K_STRING        reduce using rule 13 (variable_declaration -> ID ASSIGN expression .)
    K_BOOL          reduce using rule 13 (variable_declaration -> ID ASSIGN expression .)
    K_WINDOW        reduce using rule 13 (variable_declaration -> ID ASSIGN expression .)
    K_SHAPE         reduce using rule 13 (variable_declaration -> ID ASSIGN expression .)
    K_TRIANGLE      reduce using rule 13 (variable_declaration -> ID ASSIGN expression .)
    K_RECTANGLE     reduce using rule 13 (variable_declaration -> ID ASSIGN expression .)
    K_CIRCLE        reduce using rule 13 (variable_declaration -> ID ASSIGN expression .)
    K_TEXT          reduce using rule 13 (variable_declaration -> ID ASSIGN expression .)
    $end            reduce using rule 13 (variable_declaration -> ID ASSIGN expression .)


state 46

    (8) function_call_statement -> ID LPAREN RPAREN .

    TIMES           reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    MOD             reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    GT              reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    LT              reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    GEQ             reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    LEQ             reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    EQ              reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    NEQ             reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    ID              reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    K_LIST          reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    K_DICT          reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    K_SET           reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    K_INT           reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    K_DOUBLE        reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    K_STRING        reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    K_BOOL          reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    K_WINDOW        reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    K_SHAPE         reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    K_TRIANGLE      reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    K_RECTANGLE     reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    K_CIRCLE        reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    K_TEXT          reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    $end            reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    AND             reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)
    OR              reduce using rule 8 (function_call_statement -> ID LPAREN RPAREN .)


state 47

    (7) function_call_statement -> ID LPAREN parameter_list . RPAREN
    (9) parameter_list -> parameter_list . COMMA expression

    RPAREN          shift and go to state 81
    COMMA           shift and go to state 82


state 48

    (10) parameter_list -> expression .

    RPAREN          reduce using rule 10 (parameter_list -> expression .)
    COMMA           reduce using rule 10 (parameter_list -> expression .)


state 49

    (12) variable_declaration -> pre_type_modifier type ID ASSIGN . expression
    (28) expression -> . string_expression
    (29) expression -> . unary_expression
    (30) expression -> . boolean_expression
    (31) expression -> . arithmetic_expression
    (32) string_expression -> . string_expression PLUS string_term
    (33) string_expression -> . STRING
    (36) unary_expression -> . ID
    (37) unary_expression -> . STRING
    (38) unary_expression -> . INTEGER
    (39) unary_expression -> . function_call_statement
    (40) unary_expression -> . DOUBLE
    (41) unary_expression -> . K_TRUE
    (42) unary_expression -> . K_FALSE
    (43) boolean_expression -> . boolean_expression OR boolean_term
    (44) boolean_expression -> . boolean_term
    (59) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (60) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (61) arithmetic_expression -> . arithmetic_term
    (7) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (8) function_call_statement -> . ID LPAREN RPAREN
    (45) boolean_term -> . boolean_term AND boolean_factor
    (46) boolean_term -> . boolean_factor
    (62) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (63) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (65) arithmetic_term -> . arithmetic_factor
    (47) boolean_factor -> . LPAREN boolean_expression RPAREN
    (48) boolean_factor -> . unary_expression comparator unary_expression
    (49) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (50) boolean_factor -> . string_expression comparator string_expression
    (51) boolean_factor -> . unary_expression
    (52) boolean_factor -> . NEG boolean_factor
    (66) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (67) arithmetic_factor -> . number
    (68) arithmetic_factor -> . function_call_statement
    (69) arithmetic_factor -> . MINUS arithmetic_factor
    (70) number -> . INTEGER
    (71) number -> . DOUBLE

    STRING          shift and go to state 37
    ID              shift and go to state 41
    INTEGER         shift and go to state 34
    DOUBLE          shift and go to state 43
    K_TRUE          shift and go to state 30
    K_FALSE         shift and go to state 26
    LPAREN          shift and go to state 38
    NEG             shift and go to state 28
    MINUS           shift and go to state 32

    arithmetic_expression          shift and go to state 35
    string_expression              shift and go to state 36
    number                         shift and go to state 40
    unary_expression               shift and go to state 27
    boolean_expression             shift and go to state 42
    arithmetic_factor              shift and go to state 33
    boolean_term                   shift and go to state 29
    function_call_statement        shift and go to state 44
    arithmetic_term                shift and go to state 31
    boolean_factor                 shift and go to state 39
    expression                     shift and go to state 83

state 50

    (55) comparator -> GEQ .

    LPAREN          reduce using rule 55 (comparator -> GEQ .)
    MINUS           reduce using rule 55 (comparator -> GEQ .)
    INTEGER         reduce using rule 55 (comparator -> GEQ .)
    DOUBLE          reduce using rule 55 (comparator -> GEQ .)
    ID              reduce using rule 55 (comparator -> GEQ .)
    STRING          reduce using rule 55 (comparator -> GEQ .)
    K_TRUE          reduce using rule 55 (comparator -> GEQ .)
    K_FALSE         reduce using rule 55 (comparator -> GEQ .)


state 51

    (53) comparator -> GT .

    LPAREN          reduce using rule 53 (comparator -> GT .)
    MINUS           reduce using rule 53 (comparator -> GT .)
    INTEGER         reduce using rule 53 (comparator -> GT .)
    DOUBLE          reduce using rule 53 (comparator -> GT .)
    ID              reduce using rule 53 (comparator -> GT .)
    STRING          reduce using rule 53 (comparator -> GT .)
    K_TRUE          reduce using rule 53 (comparator -> GT .)
    K_FALSE         reduce using rule 53 (comparator -> GT .)


state 52

    (48) boolean_factor -> unary_expression comparator . unary_expression
    (36) unary_expression -> . ID
    (37) unary_expression -> . STRING
    (38) unary_expression -> . INTEGER
    (39) unary_expression -> . function_call_statement
    (40) unary_expression -> . DOUBLE
    (41) unary_expression -> . K_TRUE
    (42) unary_expression -> . K_FALSE
    (7) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (8) function_call_statement -> . ID LPAREN RPAREN

    ID              shift and go to state 41
    STRING          shift and go to state 84
    INTEGER         shift and go to state 87
    DOUBLE          shift and go to state 85
    K_TRUE          shift and go to state 30
    K_FALSE         shift and go to state 26

    function_call_statement        shift and go to state 86
    unary_expression               shift and go to state 88

state 53

    (56) comparator -> LEQ .

    LPAREN          reduce using rule 56 (comparator -> LEQ .)
    MINUS           reduce using rule 56 (comparator -> LEQ .)
    INTEGER         reduce using rule 56 (comparator -> LEQ .)
    DOUBLE          reduce using rule 56 (comparator -> LEQ .)
    ID              reduce using rule 56 (comparator -> LEQ .)
    STRING          reduce using rule 56 (comparator -> LEQ .)
    K_TRUE          reduce using rule 56 (comparator -> LEQ .)
    K_FALSE         reduce using rule 56 (comparator -> LEQ .)


state 54

    (54) comparator -> LT .

    LPAREN          reduce using rule 54 (comparator -> LT .)
    MINUS           reduce using rule 54 (comparator -> LT .)
    INTEGER         reduce using rule 54 (comparator -> LT .)
    DOUBLE          reduce using rule 54 (comparator -> LT .)
    ID              reduce using rule 54 (comparator -> LT .)
    STRING          reduce using rule 54 (comparator -> LT .)
    K_TRUE          reduce using rule 54 (comparator -> LT .)
    K_FALSE         reduce using rule 54 (comparator -> LT .)


state 55

    (57) comparator -> EQ .

    LPAREN          reduce using rule 57 (comparator -> EQ .)
    MINUS           reduce using rule 57 (comparator -> EQ .)
    INTEGER         reduce using rule 57 (comparator -> EQ .)
    DOUBLE          reduce using rule 57 (comparator -> EQ .)
    ID              reduce using rule 57 (comparator -> EQ .)
    STRING          reduce using rule 57 (comparator -> EQ .)
    K_TRUE          reduce using rule 57 (comparator -> EQ .)
    K_FALSE         reduce using rule 57 (comparator -> EQ .)


state 56

    (58) comparator -> NEQ .

    LPAREN          reduce using rule 58 (comparator -> NEQ .)
    MINUS           reduce using rule 58 (comparator -> NEQ .)
    INTEGER         reduce using rule 58 (comparator -> NEQ .)
    DOUBLE          reduce using rule 58 (comparator -> NEQ .)
    ID              reduce using rule 58 (comparator -> NEQ .)
    STRING          reduce using rule 58 (comparator -> NEQ .)
    K_TRUE          reduce using rule 58 (comparator -> NEQ .)
    K_FALSE         reduce using rule 58 (comparator -> NEQ .)


state 57

    (48) boolean_factor -> unary_expression . comparator unary_expression
    (51) boolean_factor -> unary_expression .
    (53) comparator -> . GT
    (54) comparator -> . LT
    (55) comparator -> . GEQ
    (56) comparator -> . LEQ
    (57) comparator -> . EQ
    (58) comparator -> . NEQ

    AND             reduce using rule 51 (boolean_factor -> unary_expression .)
    OR              reduce using rule 51 (boolean_factor -> unary_expression .)
    ID              reduce using rule 51 (boolean_factor -> unary_expression .)
    K_LIST          reduce using rule 51 (boolean_factor -> unary_expression .)
    K_DICT          reduce using rule 51 (boolean_factor -> unary_expression .)
    K_SET           reduce using rule 51 (boolean_factor -> unary_expression .)
    K_INT           reduce using rule 51 (boolean_factor -> unary_expression .)
    K_DOUBLE        reduce using rule 51 (boolean_factor -> unary_expression .)
    K_STRING        reduce using rule 51 (boolean_factor -> unary_expression .)
    K_BOOL          reduce using rule 51 (boolean_factor -> unary_expression .)
    K_WINDOW        reduce using rule 51 (boolean_factor -> unary_expression .)
    K_SHAPE         reduce using rule 51 (boolean_factor -> unary_expression .)
    K_TRIANGLE      reduce using rule 51 (boolean_factor -> unary_expression .)
    K_RECTANGLE     reduce using rule 51 (boolean_factor -> unary_expression .)
    K_CIRCLE        reduce using rule 51 (boolean_factor -> unary_expression .)
    K_TEXT          reduce using rule 51 (boolean_factor -> unary_expression .)
    $end            reduce using rule 51 (boolean_factor -> unary_expression .)
    RPAREN          reduce using rule 51 (boolean_factor -> unary_expression .)
    COMMA           reduce using rule 51 (boolean_factor -> unary_expression .)
    GT              shift and go to state 51
    LT              shift and go to state 54
    GEQ             shift and go to state 50
    LEQ             shift and go to state 53
    EQ              shift and go to state 55
    NEQ             shift and go to state 56

    comparator                     shift and go to state 52

state 58

    (49) boolean_factor -> arithmetic_expression . comparator arithmetic_expression
    (59) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (60) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term
    (53) comparator -> . GT
    (54) comparator -> . LT
    (55) comparator -> . GEQ
    (56) comparator -> . LEQ
    (57) comparator -> . EQ
    (58) comparator -> . NEQ

    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    GT              shift and go to state 51
    LT              shift and go to state 54
    GEQ             shift and go to state 50
    LEQ             shift and go to state 53
    EQ              shift and go to state 55
    NEQ             shift and go to state 56

    comparator                     shift and go to state 72

state 59

    (50) boolean_factor -> string_expression . comparator string_expression
    (32) string_expression -> string_expression . PLUS string_term
    (53) comparator -> . GT
    (54) comparator -> . LT
    (55) comparator -> . GEQ
    (56) comparator -> . LEQ
    (57) comparator -> . EQ
    (58) comparator -> . NEQ

    PLUS            shift and go to state 76
    GT              shift and go to state 51
    LT              shift and go to state 54
    GEQ             shift and go to state 50
    LEQ             shift and go to state 53
    EQ              shift and go to state 55
    NEQ             shift and go to state 56

    comparator                     shift and go to state 75

state 60

    (37) unary_expression -> STRING .
    (33) string_expression -> STRING .

  ! reduce/reduce conflict for GT resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for LT resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for GEQ resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for LEQ resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for EQ resolved using rule 33 (string_expression -> STRING .)
  ! reduce/reduce conflict for NEQ resolved using rule 33 (string_expression -> STRING .)
    AND             reduce using rule 37 (unary_expression -> STRING .)
    RPAREN          reduce using rule 37 (unary_expression -> STRING .)
    OR              reduce using rule 37 (unary_expression -> STRING .)
    ID              reduce using rule 37 (unary_expression -> STRING .)
    K_LIST          reduce using rule 37 (unary_expression -> STRING .)
    K_DICT          reduce using rule 37 (unary_expression -> STRING .)
    K_SET           reduce using rule 37 (unary_expression -> STRING .)
    K_INT           reduce using rule 37 (unary_expression -> STRING .)
    K_DOUBLE        reduce using rule 37 (unary_expression -> STRING .)
    K_STRING        reduce using rule 37 (unary_expression -> STRING .)
    K_BOOL          reduce using rule 37 (unary_expression -> STRING .)
    K_WINDOW        reduce using rule 37 (unary_expression -> STRING .)
    K_SHAPE         reduce using rule 37 (unary_expression -> STRING .)
    K_TRIANGLE      reduce using rule 37 (unary_expression -> STRING .)
    K_RECTANGLE     reduce using rule 37 (unary_expression -> STRING .)
    K_CIRCLE        reduce using rule 37 (unary_expression -> STRING .)
    K_TEXT          reduce using rule 37 (unary_expression -> STRING .)
    $end            reduce using rule 37 (unary_expression -> STRING .)
    COMMA           reduce using rule 37 (unary_expression -> STRING .)
    PLUS            reduce using rule 33 (string_expression -> STRING .)
    GT              reduce using rule 33 (string_expression -> STRING .)
    LT              reduce using rule 33 (string_expression -> STRING .)
    GEQ             reduce using rule 33 (string_expression -> STRING .)
    LEQ             reduce using rule 33 (string_expression -> STRING .)
    EQ              reduce using rule 33 (string_expression -> STRING .)
    NEQ             reduce using rule 33 (string_expression -> STRING .)

  ! GT              [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! LT              [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! GEQ             [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! LEQ             [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! EQ              [ reduce using rule 37 (unary_expression -> STRING .) ]
  ! NEQ             [ reduce using rule 37 (unary_expression -> STRING .) ]


state 61

    (52) boolean_factor -> NEG boolean_factor .

    AND             reduce using rule 52 (boolean_factor -> NEG boolean_factor .)
    OR              reduce using rule 52 (boolean_factor -> NEG boolean_factor .)
    ID              reduce using rule 52 (boolean_factor -> NEG boolean_factor .)
    K_LIST          reduce using rule 52 (boolean_factor -> NEG boolean_factor .)
    K_DICT          reduce using rule 52 (boolean_factor -> NEG boolean_factor .)
    K_SET           reduce using rule 52 (boolean_factor -> NEG boolean_factor .)
    K_INT           reduce using rule 52 (boolean_factor -> NEG boolean_factor .)
    K_DOUBLE        reduce using rule 52 (boolean_factor -> NEG boolean_factor .)
    K_STRING        reduce using rule 52 (boolean_factor -> NEG boolean_factor .)
    K_BOOL          reduce using rule 52 (boolean_factor -> NEG boolean_factor .)
    K_WINDOW        reduce using rule 52 (boolean_factor -> NEG boolean_factor .)
    K_SHAPE         reduce using rule 52 (boolean_factor -> NEG boolean_factor .)
    K_TRIANGLE      reduce using rule 52 (boolean_factor -> NEG boolean_factor .)
    K_RECTANGLE     reduce using rule 52 (boolean_factor -> NEG boolean_factor .)
    K_CIRCLE        reduce using rule 52 (boolean_factor -> NEG boolean_factor .)
    K_TEXT          reduce using rule 52 (boolean_factor -> NEG boolean_factor .)
    $end            reduce using rule 52 (boolean_factor -> NEG boolean_factor .)
    RPAREN          reduce using rule 52 (boolean_factor -> NEG boolean_factor .)
    COMMA           reduce using rule 52 (boolean_factor -> NEG boolean_factor .)


state 62

    (45) boolean_term -> boolean_term AND . boolean_factor
    (47) boolean_factor -> . LPAREN boolean_expression RPAREN
    (48) boolean_factor -> . unary_expression comparator unary_expression
    (49) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (50) boolean_factor -> . string_expression comparator string_expression
    (51) boolean_factor -> . unary_expression
    (52) boolean_factor -> . NEG boolean_factor
    (36) unary_expression -> . ID
    (37) unary_expression -> . STRING
    (38) unary_expression -> . INTEGER
    (39) unary_expression -> . function_call_statement
    (40) unary_expression -> . DOUBLE
    (41) unary_expression -> . K_TRUE
    (42) unary_expression -> . K_FALSE
    (59) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (60) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (61) arithmetic_expression -> . arithmetic_term
    (32) string_expression -> . string_expression PLUS string_term
    (33) string_expression -> . STRING
    (7) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (8) function_call_statement -> . ID LPAREN RPAREN
    (62) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (63) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (65) arithmetic_term -> . arithmetic_factor
    (66) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (67) arithmetic_factor -> . number
    (68) arithmetic_factor -> . function_call_statement
    (69) arithmetic_factor -> . MINUS arithmetic_factor
    (70) number -> . INTEGER
    (71) number -> . DOUBLE

    LPAREN          shift and go to state 38
    NEG             shift and go to state 28
    ID              shift and go to state 41
    STRING          shift and go to state 60
    INTEGER         shift and go to state 34
    DOUBLE          shift and go to state 43
    K_TRUE          shift and go to state 30
    K_FALSE         shift and go to state 26
    MINUS           shift and go to state 32

    arithmetic_expression          shift and go to state 58
    string_expression              shift and go to state 59
    unary_expression               shift and go to state 57
    arithmetic_factor              shift and go to state 33
    function_call_statement        shift and go to state 44
    number                         shift and go to state 40
    arithmetic_term                shift and go to state 31
    boolean_factor                 shift and go to state 89

state 63

    (64) arithmetic_term -> arithmetic_term MOD . arithmetic_factor
    (66) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (67) arithmetic_factor -> . number
    (68) arithmetic_factor -> . function_call_statement
    (69) arithmetic_factor -> . MINUS arithmetic_factor
    (70) number -> . INTEGER
    (71) number -> . DOUBLE
    (7) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (8) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 70
    MINUS           shift and go to state 32
    INTEGER         shift and go to state 71
    DOUBLE          shift and go to state 67
    ID              shift and go to state 69

    arithmetic_factor              shift and go to state 90
    number                         shift and go to state 40
    function_call_statement        shift and go to state 68

state 64

    (63) arithmetic_term -> arithmetic_term DIVIDE . arithmetic_factor
    (66) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (67) arithmetic_factor -> . number
    (68) arithmetic_factor -> . function_call_statement
    (69) arithmetic_factor -> . MINUS arithmetic_factor
    (70) number -> . INTEGER
    (71) number -> . DOUBLE
    (7) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (8) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 70
    MINUS           shift and go to state 32
    INTEGER         shift and go to state 71
    DOUBLE          shift and go to state 67
    ID              shift and go to state 69

    arithmetic_factor              shift and go to state 91
    number                         shift and go to state 40
    function_call_statement        shift and go to state 68

state 65

    (62) arithmetic_term -> arithmetic_term TIMES . arithmetic_factor
    (66) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (67) arithmetic_factor -> . number
    (68) arithmetic_factor -> . function_call_statement
    (69) arithmetic_factor -> . MINUS arithmetic_factor
    (70) number -> . INTEGER
    (71) number -> . DOUBLE
    (7) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (8) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 70
    MINUS           shift and go to state 32
    INTEGER         shift and go to state 71
    DOUBLE          shift and go to state 67
    ID              shift and go to state 69

    arithmetic_factor              shift and go to state 92
    number                         shift and go to state 40
    function_call_statement        shift and go to state 68

state 66

    (69) arithmetic_factor -> MINUS arithmetic_factor .

    TIMES           reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    DIVIDE          reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    MOD             reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    PLUS            reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    MINUS           reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    GT              reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    LT              reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    GEQ             reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    LEQ             reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    EQ              reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    NEQ             reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    ID              reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_LIST          reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_DICT          reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_SET           reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_INT           reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_DOUBLE        reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_STRING        reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_BOOL          reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_WINDOW        reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_SHAPE         reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_TRIANGLE      reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_RECTANGLE     reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_CIRCLE        reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_TEXT          reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    $end            reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    RPAREN          reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    COMMA           reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    AND             reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)
    OR              reduce using rule 69 (arithmetic_factor -> MINUS arithmetic_factor .)


state 67

    (71) number -> DOUBLE .

    TIMES           reduce using rule 71 (number -> DOUBLE .)
    DIVIDE          reduce using rule 71 (number -> DOUBLE .)
    MOD             reduce using rule 71 (number -> DOUBLE .)
    PLUS            reduce using rule 71 (number -> DOUBLE .)
    MINUS           reduce using rule 71 (number -> DOUBLE .)
    GT              reduce using rule 71 (number -> DOUBLE .)
    LT              reduce using rule 71 (number -> DOUBLE .)
    GEQ             reduce using rule 71 (number -> DOUBLE .)
    LEQ             reduce using rule 71 (number -> DOUBLE .)
    EQ              reduce using rule 71 (number -> DOUBLE .)
    NEQ             reduce using rule 71 (number -> DOUBLE .)
    ID              reduce using rule 71 (number -> DOUBLE .)
    K_LIST          reduce using rule 71 (number -> DOUBLE .)
    K_DICT          reduce using rule 71 (number -> DOUBLE .)
    K_SET           reduce using rule 71 (number -> DOUBLE .)
    K_INT           reduce using rule 71 (number -> DOUBLE .)
    K_DOUBLE        reduce using rule 71 (number -> DOUBLE .)
    K_STRING        reduce using rule 71 (number -> DOUBLE .)
    K_BOOL          reduce using rule 71 (number -> DOUBLE .)
    K_WINDOW        reduce using rule 71 (number -> DOUBLE .)
    K_SHAPE         reduce using rule 71 (number -> DOUBLE .)
    K_TRIANGLE      reduce using rule 71 (number -> DOUBLE .)
    K_RECTANGLE     reduce using rule 71 (number -> DOUBLE .)
    K_CIRCLE        reduce using rule 71 (number -> DOUBLE .)
    K_TEXT          reduce using rule 71 (number -> DOUBLE .)
    $end            reduce using rule 71 (number -> DOUBLE .)
    RPAREN          reduce using rule 71 (number -> DOUBLE .)
    COMMA           reduce using rule 71 (number -> DOUBLE .)
    AND             reduce using rule 71 (number -> DOUBLE .)
    OR              reduce using rule 71 (number -> DOUBLE .)


state 68

    (68) arithmetic_factor -> function_call_statement .

    TIMES           reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    DIVIDE          reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    MOD             reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    PLUS            reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    MINUS           reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    GT              reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    LT              reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    GEQ             reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    LEQ             reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    EQ              reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    NEQ             reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    ID              reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    K_LIST          reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    K_DICT          reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    K_SET           reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    K_INT           reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    K_DOUBLE        reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    K_STRING        reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    K_BOOL          reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    K_WINDOW        reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    K_SHAPE         reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    K_TRIANGLE      reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    K_RECTANGLE     reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    K_CIRCLE        reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    K_TEXT          reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    $end            reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    RPAREN          reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    COMMA           reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    AND             reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    OR              reduce using rule 68 (arithmetic_factor -> function_call_statement .)


state 69

    (7) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (8) function_call_statement -> ID . LPAREN RPAREN

    LPAREN          shift and go to state 24


state 70

    (66) arithmetic_factor -> LPAREN . arithmetic_expression RPAREN
    (59) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (60) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (61) arithmetic_expression -> . arithmetic_term
    (62) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (63) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (65) arithmetic_term -> . arithmetic_factor
    (66) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (67) arithmetic_factor -> . number
    (68) arithmetic_factor -> . function_call_statement
    (69) arithmetic_factor -> . MINUS arithmetic_factor
    (70) number -> . INTEGER
    (71) number -> . DOUBLE
    (7) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (8) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 70
    MINUS           shift and go to state 32
    INTEGER         shift and go to state 71
    DOUBLE          shift and go to state 67
    ID              shift and go to state 69

    arithmetic_expression          shift and go to state 93
    arithmetic_factor              shift and go to state 33
    number                         shift and go to state 40
    function_call_statement        shift and go to state 68
    arithmetic_term                shift and go to state 31

state 71

    (70) number -> INTEGER .

    TIMES           reduce using rule 70 (number -> INTEGER .)
    DIVIDE          reduce using rule 70 (number -> INTEGER .)
    MOD             reduce using rule 70 (number -> INTEGER .)
    PLUS            reduce using rule 70 (number -> INTEGER .)
    MINUS           reduce using rule 70 (number -> INTEGER .)
    GT              reduce using rule 70 (number -> INTEGER .)
    LT              reduce using rule 70 (number -> INTEGER .)
    GEQ             reduce using rule 70 (number -> INTEGER .)
    LEQ             reduce using rule 70 (number -> INTEGER .)
    EQ              reduce using rule 70 (number -> INTEGER .)
    NEQ             reduce using rule 70 (number -> INTEGER .)
    ID              reduce using rule 70 (number -> INTEGER .)
    K_LIST          reduce using rule 70 (number -> INTEGER .)
    K_DICT          reduce using rule 70 (number -> INTEGER .)
    K_SET           reduce using rule 70 (number -> INTEGER .)
    K_INT           reduce using rule 70 (number -> INTEGER .)
    K_DOUBLE        reduce using rule 70 (number -> INTEGER .)
    K_STRING        reduce using rule 70 (number -> INTEGER .)
    K_BOOL          reduce using rule 70 (number -> INTEGER .)
    K_WINDOW        reduce using rule 70 (number -> INTEGER .)
    K_SHAPE         reduce using rule 70 (number -> INTEGER .)
    K_TRIANGLE      reduce using rule 70 (number -> INTEGER .)
    K_RECTANGLE     reduce using rule 70 (number -> INTEGER .)
    K_CIRCLE        reduce using rule 70 (number -> INTEGER .)
    K_TEXT          reduce using rule 70 (number -> INTEGER .)
    $end            reduce using rule 70 (number -> INTEGER .)
    RPAREN          reduce using rule 70 (number -> INTEGER .)
    COMMA           reduce using rule 70 (number -> INTEGER .)
    AND             reduce using rule 70 (number -> INTEGER .)
    OR              reduce using rule 70 (number -> INTEGER .)


state 72

    (49) boolean_factor -> arithmetic_expression comparator . arithmetic_expression
    (59) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (60) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (61) arithmetic_expression -> . arithmetic_term
    (62) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (63) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (65) arithmetic_term -> . arithmetic_factor
    (66) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (67) arithmetic_factor -> . number
    (68) arithmetic_factor -> . function_call_statement
    (69) arithmetic_factor -> . MINUS arithmetic_factor
    (70) number -> . INTEGER
    (71) number -> . DOUBLE
    (7) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (8) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 70
    MINUS           shift and go to state 32
    INTEGER         shift and go to state 71
    DOUBLE          shift and go to state 67
    ID              shift and go to state 69

    arithmetic_expression          shift and go to state 94
    arithmetic_factor              shift and go to state 33
    number                         shift and go to state 40
    function_call_statement        shift and go to state 68
    arithmetic_term                shift and go to state 31

state 73

    (59) arithmetic_expression -> arithmetic_expression PLUS . arithmetic_term
    (62) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (63) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (65) arithmetic_term -> . arithmetic_factor
    (66) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (67) arithmetic_factor -> . number
    (68) arithmetic_factor -> . function_call_statement
    (69) arithmetic_factor -> . MINUS arithmetic_factor
    (70) number -> . INTEGER
    (71) number -> . DOUBLE
    (7) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (8) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 70
    MINUS           shift and go to state 32
    INTEGER         shift and go to state 71
    DOUBLE          shift and go to state 67
    ID              shift and go to state 69

    arithmetic_factor              shift and go to state 33
    number                         shift and go to state 40
    function_call_statement        shift and go to state 68
    arithmetic_term                shift and go to state 95

state 74

    (60) arithmetic_expression -> arithmetic_expression MINUS . arithmetic_term
    (62) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (63) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (65) arithmetic_term -> . arithmetic_factor
    (66) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (67) arithmetic_factor -> . number
    (68) arithmetic_factor -> . function_call_statement
    (69) arithmetic_factor -> . MINUS arithmetic_factor
    (70) number -> . INTEGER
    (71) number -> . DOUBLE
    (7) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (8) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 70
    MINUS           shift and go to state 32
    INTEGER         shift and go to state 71
    DOUBLE          shift and go to state 67
    ID              shift and go to state 69

    arithmetic_factor              shift and go to state 33
    number                         shift and go to state 40
    function_call_statement        shift and go to state 68
    arithmetic_term                shift and go to state 96

state 75

    (50) boolean_factor -> string_expression comparator . string_expression
    (32) string_expression -> . string_expression PLUS string_term
    (33) string_expression -> . STRING

    STRING          shift and go to state 98

    string_expression              shift and go to state 97

state 76

    (32) string_expression -> string_expression PLUS . string_term
    (34) string_term -> . function_call_statement
    (35) string_term -> . STRING
    (7) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (8) function_call_statement -> . ID LPAREN RPAREN

    STRING          shift and go to state 99
    ID              shift and go to state 69

    string_term                    shift and go to state 101
    function_call_statement        shift and go to state 100

state 77

    (68) arithmetic_factor -> function_call_statement .
    (39) unary_expression -> function_call_statement .

  ! reduce/reduce conflict for GT resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for LT resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for GEQ resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for LEQ resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for EQ resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for NEQ resolved using rule 39 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for RPAREN resolved using rule 39 (unary_expression -> function_call_statement .)
    TIMES           reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    DIVIDE          reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    MOD             reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    PLUS            reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    MINUS           reduce using rule 68 (arithmetic_factor -> function_call_statement .)
    GT              reduce using rule 39 (unary_expression -> function_call_statement .)
    LT              reduce using rule 39 (unary_expression -> function_call_statement .)
    GEQ             reduce using rule 39 (unary_expression -> function_call_statement .)
    LEQ             reduce using rule 39 (unary_expression -> function_call_statement .)
    EQ              reduce using rule 39 (unary_expression -> function_call_statement .)
    NEQ             reduce using rule 39 (unary_expression -> function_call_statement .)
    AND             reduce using rule 39 (unary_expression -> function_call_statement .)
    RPAREN          reduce using rule 39 (unary_expression -> function_call_statement .)
    OR              reduce using rule 39 (unary_expression -> function_call_statement .)

  ! RPAREN          [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! GT              [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! LT              [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! GEQ             [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! LEQ             [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! EQ              [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]
  ! NEQ             [ reduce using rule 68 (arithmetic_factor -> function_call_statement .) ]


state 78

    (66) arithmetic_factor -> LPAREN arithmetic_expression . RPAREN
    (59) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (60) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term
    (49) boolean_factor -> arithmetic_expression . comparator arithmetic_expression
    (53) comparator -> . GT
    (54) comparator -> . LT
    (55) comparator -> . GEQ
    (56) comparator -> . LEQ
    (57) comparator -> . EQ
    (58) comparator -> . NEQ

    RPAREN          shift and go to state 102
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    GT              shift and go to state 51
    LT              shift and go to state 54
    GEQ             shift and go to state 50
    LEQ             shift and go to state 53
    EQ              shift and go to state 55
    NEQ             shift and go to state 56

    comparator                     shift and go to state 72

state 79

    (47) boolean_factor -> LPAREN boolean_expression . RPAREN
    (43) boolean_expression -> boolean_expression . OR boolean_term

    RPAREN          shift and go to state 103
    OR              shift and go to state 80


state 80

    (43) boolean_expression -> boolean_expression OR . boolean_term
    (45) boolean_term -> . boolean_term AND boolean_factor
    (46) boolean_term -> . boolean_factor
    (47) boolean_factor -> . LPAREN boolean_expression RPAREN
    (48) boolean_factor -> . unary_expression comparator unary_expression
    (49) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (50) boolean_factor -> . string_expression comparator string_expression
    (51) boolean_factor -> . unary_expression
    (52) boolean_factor -> . NEG boolean_factor
    (36) unary_expression -> . ID
    (37) unary_expression -> . STRING
    (38) unary_expression -> . INTEGER
    (39) unary_expression -> . function_call_statement
    (40) unary_expression -> . DOUBLE
    (41) unary_expression -> . K_TRUE
    (42) unary_expression -> . K_FALSE
    (59) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (60) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (61) arithmetic_expression -> . arithmetic_term
    (32) string_expression -> . string_expression PLUS string_term
    (33) string_expression -> . STRING
    (7) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (8) function_call_statement -> . ID LPAREN RPAREN
    (62) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (63) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (65) arithmetic_term -> . arithmetic_factor
    (66) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (67) arithmetic_factor -> . number
    (68) arithmetic_factor -> . function_call_statement
    (69) arithmetic_factor -> . MINUS arithmetic_factor
    (70) number -> . INTEGER
    (71) number -> . DOUBLE

    LPAREN          shift and go to state 38
    NEG             shift and go to state 28
    ID              shift and go to state 41
    STRING          shift and go to state 60
    INTEGER         shift and go to state 34
    DOUBLE          shift and go to state 43
    K_TRUE          shift and go to state 30
    K_FALSE         shift and go to state 26
    MINUS           shift and go to state 32

    arithmetic_expression          shift and go to state 58
    string_expression              shift and go to state 59
    unary_expression               shift and go to state 57
    arithmetic_factor              shift and go to state 33
    boolean_term                   shift and go to state 104
    function_call_statement        shift and go to state 44
    number                         shift and go to state 40
    arithmetic_term                shift and go to state 31
    boolean_factor                 shift and go to state 39

state 81

    (7) function_call_statement -> ID LPAREN parameter_list RPAREN .

    TIMES           reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    MOD             reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    GT              reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    LT              reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    GEQ             reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    LEQ             reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    EQ              reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    NEQ             reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    ID              reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_LIST          reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_DICT          reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_SET           reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_INT           reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_DOUBLE        reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_STRING        reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_BOOL          reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_WINDOW        reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_SHAPE         reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_TRIANGLE      reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_RECTANGLE     reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_CIRCLE        reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_TEXT          reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    $end            reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    AND             reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    OR              reduce using rule 7 (function_call_statement -> ID LPAREN parameter_list RPAREN .)


state 82

    (9) parameter_list -> parameter_list COMMA . expression
    (28) expression -> . string_expression
    (29) expression -> . unary_expression
    (30) expression -> . boolean_expression
    (31) expression -> . arithmetic_expression
    (32) string_expression -> . string_expression PLUS string_term
    (33) string_expression -> . STRING
    (36) unary_expression -> . ID
    (37) unary_expression -> . STRING
    (38) unary_expression -> . INTEGER
    (39) unary_expression -> . function_call_statement
    (40) unary_expression -> . DOUBLE
    (41) unary_expression -> . K_TRUE
    (42) unary_expression -> . K_FALSE
    (43) boolean_expression -> . boolean_expression OR boolean_term
    (44) boolean_expression -> . boolean_term
    (59) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (60) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (61) arithmetic_expression -> . arithmetic_term
    (7) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (8) function_call_statement -> . ID LPAREN RPAREN
    (45) boolean_term -> . boolean_term AND boolean_factor
    (46) boolean_term -> . boolean_factor
    (62) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (63) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (65) arithmetic_term -> . arithmetic_factor
    (47) boolean_factor -> . LPAREN boolean_expression RPAREN
    (48) boolean_factor -> . unary_expression comparator unary_expression
    (49) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (50) boolean_factor -> . string_expression comparator string_expression
    (51) boolean_factor -> . unary_expression
    (52) boolean_factor -> . NEG boolean_factor
    (66) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (67) arithmetic_factor -> . number
    (68) arithmetic_factor -> . function_call_statement
    (69) arithmetic_factor -> . MINUS arithmetic_factor
    (70) number -> . INTEGER
    (71) number -> . DOUBLE

    STRING          shift and go to state 37
    ID              shift and go to state 41
    INTEGER         shift and go to state 34
    DOUBLE          shift and go to state 43
    K_TRUE          shift and go to state 30
    K_FALSE         shift and go to state 26
    LPAREN          shift and go to state 38
    NEG             shift and go to state 28
    MINUS           shift and go to state 32

    arithmetic_expression          shift and go to state 35
    string_expression              shift and go to state 36
    number                         shift and go to state 40
    unary_expression               shift and go to state 27
    boolean_expression             shift and go to state 42
    arithmetic_factor              shift and go to state 33
    boolean_term                   shift and go to state 29
    function_call_statement        shift and go to state 44
    arithmetic_term                shift and go to state 31
    boolean_factor                 shift and go to state 39
    expression                     shift and go to state 105

state 83

    (12) variable_declaration -> pre_type_modifier type ID ASSIGN expression .

    ID              reduce using rule 12 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_LIST          reduce using rule 12 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_DICT          reduce using rule 12 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_SET           reduce using rule 12 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_INT           reduce using rule 12 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_DOUBLE        reduce using rule 12 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_STRING        reduce using rule 12 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_BOOL          reduce using rule 12 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_WINDOW        reduce using rule 12 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_SHAPE         reduce using rule 12 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_TRIANGLE      reduce using rule 12 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_RECTANGLE     reduce using rule 12 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_CIRCLE        reduce using rule 12 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_TEXT          reduce using rule 12 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    $end            reduce using rule 12 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)


state 84

    (37) unary_expression -> STRING .

    AND             reduce using rule 37 (unary_expression -> STRING .)
    OR              reduce using rule 37 (unary_expression -> STRING .)
    ID              reduce using rule 37 (unary_expression -> STRING .)
    K_LIST          reduce using rule 37 (unary_expression -> STRING .)
    K_DICT          reduce using rule 37 (unary_expression -> STRING .)
    K_SET           reduce using rule 37 (unary_expression -> STRING .)
    K_INT           reduce using rule 37 (unary_expression -> STRING .)
    K_DOUBLE        reduce using rule 37 (unary_expression -> STRING .)
    K_STRING        reduce using rule 37 (unary_expression -> STRING .)
    K_BOOL          reduce using rule 37 (unary_expression -> STRING .)
    K_WINDOW        reduce using rule 37 (unary_expression -> STRING .)
    K_SHAPE         reduce using rule 37 (unary_expression -> STRING .)
    K_TRIANGLE      reduce using rule 37 (unary_expression -> STRING .)
    K_RECTANGLE     reduce using rule 37 (unary_expression -> STRING .)
    K_CIRCLE        reduce using rule 37 (unary_expression -> STRING .)
    K_TEXT          reduce using rule 37 (unary_expression -> STRING .)
    $end            reduce using rule 37 (unary_expression -> STRING .)
    RPAREN          reduce using rule 37 (unary_expression -> STRING .)
    COMMA           reduce using rule 37 (unary_expression -> STRING .)


state 85

    (40) unary_expression -> DOUBLE .

    AND             reduce using rule 40 (unary_expression -> DOUBLE .)
    OR              reduce using rule 40 (unary_expression -> DOUBLE .)
    ID              reduce using rule 40 (unary_expression -> DOUBLE .)
    K_LIST          reduce using rule 40 (unary_expression -> DOUBLE .)
    K_DICT          reduce using rule 40 (unary_expression -> DOUBLE .)
    K_SET           reduce using rule 40 (unary_expression -> DOUBLE .)
    K_INT           reduce using rule 40 (unary_expression -> DOUBLE .)
    K_DOUBLE        reduce using rule 40 (unary_expression -> DOUBLE .)
    K_STRING        reduce using rule 40 (unary_expression -> DOUBLE .)
    K_BOOL          reduce using rule 40 (unary_expression -> DOUBLE .)
    K_WINDOW        reduce using rule 40 (unary_expression -> DOUBLE .)
    K_SHAPE         reduce using rule 40 (unary_expression -> DOUBLE .)
    K_TRIANGLE      reduce using rule 40 (unary_expression -> DOUBLE .)
    K_RECTANGLE     reduce using rule 40 (unary_expression -> DOUBLE .)
    K_CIRCLE        reduce using rule 40 (unary_expression -> DOUBLE .)
    K_TEXT          reduce using rule 40 (unary_expression -> DOUBLE .)
    $end            reduce using rule 40 (unary_expression -> DOUBLE .)
    RPAREN          reduce using rule 40 (unary_expression -> DOUBLE .)
    COMMA           reduce using rule 40 (unary_expression -> DOUBLE .)


state 86

    (39) unary_expression -> function_call_statement .

    AND             reduce using rule 39 (unary_expression -> function_call_statement .)
    OR              reduce using rule 39 (unary_expression -> function_call_statement .)
    ID              reduce using rule 39 (unary_expression -> function_call_statement .)
    K_LIST          reduce using rule 39 (unary_expression -> function_call_statement .)
    K_DICT          reduce using rule 39 (unary_expression -> function_call_statement .)
    K_SET           reduce using rule 39 (unary_expression -> function_call_statement .)
    K_INT           reduce using rule 39 (unary_expression -> function_call_statement .)
    K_DOUBLE        reduce using rule 39 (unary_expression -> function_call_statement .)
    K_STRING        reduce using rule 39 (unary_expression -> function_call_statement .)
    K_BOOL          reduce using rule 39 (unary_expression -> function_call_statement .)
    K_WINDOW        reduce using rule 39 (unary_expression -> function_call_statement .)
    K_SHAPE         reduce using rule 39 (unary_expression -> function_call_statement .)
    K_TRIANGLE      reduce using rule 39 (unary_expression -> function_call_statement .)
    K_RECTANGLE     reduce using rule 39 (unary_expression -> function_call_statement .)
    K_CIRCLE        reduce using rule 39 (unary_expression -> function_call_statement .)
    K_TEXT          reduce using rule 39 (unary_expression -> function_call_statement .)
    $end            reduce using rule 39 (unary_expression -> function_call_statement .)
    RPAREN          reduce using rule 39 (unary_expression -> function_call_statement .)
    COMMA           reduce using rule 39 (unary_expression -> function_call_statement .)


state 87

    (38) unary_expression -> INTEGER .

    AND             reduce using rule 38 (unary_expression -> INTEGER .)
    OR              reduce using rule 38 (unary_expression -> INTEGER .)
    ID              reduce using rule 38 (unary_expression -> INTEGER .)
    K_LIST          reduce using rule 38 (unary_expression -> INTEGER .)
    K_DICT          reduce using rule 38 (unary_expression -> INTEGER .)
    K_SET           reduce using rule 38 (unary_expression -> INTEGER .)
    K_INT           reduce using rule 38 (unary_expression -> INTEGER .)
    K_DOUBLE        reduce using rule 38 (unary_expression -> INTEGER .)
    K_STRING        reduce using rule 38 (unary_expression -> INTEGER .)
    K_BOOL          reduce using rule 38 (unary_expression -> INTEGER .)
    K_WINDOW        reduce using rule 38 (unary_expression -> INTEGER .)
    K_SHAPE         reduce using rule 38 (unary_expression -> INTEGER .)
    K_TRIANGLE      reduce using rule 38 (unary_expression -> INTEGER .)
    K_RECTANGLE     reduce using rule 38 (unary_expression -> INTEGER .)
    K_CIRCLE        reduce using rule 38 (unary_expression -> INTEGER .)
    K_TEXT          reduce using rule 38 (unary_expression -> INTEGER .)
    $end            reduce using rule 38 (unary_expression -> INTEGER .)
    RPAREN          reduce using rule 38 (unary_expression -> INTEGER .)
    COMMA           reduce using rule 38 (unary_expression -> INTEGER .)


state 88

    (48) boolean_factor -> unary_expression comparator unary_expression .

    AND             reduce using rule 48 (boolean_factor -> unary_expression comparator unary_expression .)
    OR              reduce using rule 48 (boolean_factor -> unary_expression comparator unary_expression .)
    ID              reduce using rule 48 (boolean_factor -> unary_expression comparator unary_expression .)
    K_LIST          reduce using rule 48 (boolean_factor -> unary_expression comparator unary_expression .)
    K_DICT          reduce using rule 48 (boolean_factor -> unary_expression comparator unary_expression .)
    K_SET           reduce using rule 48 (boolean_factor -> unary_expression comparator unary_expression .)
    K_INT           reduce using rule 48 (boolean_factor -> unary_expression comparator unary_expression .)
    K_DOUBLE        reduce using rule 48 (boolean_factor -> unary_expression comparator unary_expression .)
    K_STRING        reduce using rule 48 (boolean_factor -> unary_expression comparator unary_expression .)
    K_BOOL          reduce using rule 48 (boolean_factor -> unary_expression comparator unary_expression .)
    K_WINDOW        reduce using rule 48 (boolean_factor -> unary_expression comparator unary_expression .)
    K_SHAPE         reduce using rule 48 (boolean_factor -> unary_expression comparator unary_expression .)
    K_TRIANGLE      reduce using rule 48 (boolean_factor -> unary_expression comparator unary_expression .)
    K_RECTANGLE     reduce using rule 48 (boolean_factor -> unary_expression comparator unary_expression .)
    K_CIRCLE        reduce using rule 48 (boolean_factor -> unary_expression comparator unary_expression .)
    K_TEXT          reduce using rule 48 (boolean_factor -> unary_expression comparator unary_expression .)
    $end            reduce using rule 48 (boolean_factor -> unary_expression comparator unary_expression .)
    RPAREN          reduce using rule 48 (boolean_factor -> unary_expression comparator unary_expression .)
    COMMA           reduce using rule 48 (boolean_factor -> unary_expression comparator unary_expression .)


state 89

    (45) boolean_term -> boolean_term AND boolean_factor .

    AND             reduce using rule 45 (boolean_term -> boolean_term AND boolean_factor .)
    RPAREN          reduce using rule 45 (boolean_term -> boolean_term AND boolean_factor .)
    OR              reduce using rule 45 (boolean_term -> boolean_term AND boolean_factor .)
    ID              reduce using rule 45 (boolean_term -> boolean_term AND boolean_factor .)
    K_LIST          reduce using rule 45 (boolean_term -> boolean_term AND boolean_factor .)
    K_DICT          reduce using rule 45 (boolean_term -> boolean_term AND boolean_factor .)
    K_SET           reduce using rule 45 (boolean_term -> boolean_term AND boolean_factor .)
    K_INT           reduce using rule 45 (boolean_term -> boolean_term AND boolean_factor .)
    K_DOUBLE        reduce using rule 45 (boolean_term -> boolean_term AND boolean_factor .)
    K_STRING        reduce using rule 45 (boolean_term -> boolean_term AND boolean_factor .)
    K_BOOL          reduce using rule 45 (boolean_term -> boolean_term AND boolean_factor .)
    K_WINDOW        reduce using rule 45 (boolean_term -> boolean_term AND boolean_factor .)
    K_SHAPE         reduce using rule 45 (boolean_term -> boolean_term AND boolean_factor .)
    K_TRIANGLE      reduce using rule 45 (boolean_term -> boolean_term AND boolean_factor .)
    K_RECTANGLE     reduce using rule 45 (boolean_term -> boolean_term AND boolean_factor .)
    K_CIRCLE        reduce using rule 45 (boolean_term -> boolean_term AND boolean_factor .)
    K_TEXT          reduce using rule 45 (boolean_term -> boolean_term AND boolean_factor .)
    $end            reduce using rule 45 (boolean_term -> boolean_term AND boolean_factor .)
    COMMA           reduce using rule 45 (boolean_term -> boolean_term AND boolean_factor .)


state 90

    (64) arithmetic_term -> arithmetic_term MOD arithmetic_factor .

    TIMES           reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    DIVIDE          reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    MOD             reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    PLUS            reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    MINUS           reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    GT              reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    LT              reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    GEQ             reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    LEQ             reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    EQ              reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    NEQ             reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    ID              reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_LIST          reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_DICT          reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_SET           reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_INT           reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_DOUBLE        reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_STRING        reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_BOOL          reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_WINDOW        reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_SHAPE         reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_TRIANGLE      reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_RECTANGLE     reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_CIRCLE        reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_TEXT          reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    $end            reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    RPAREN          reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    COMMA           reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    AND             reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    OR              reduce using rule 64 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)


state 91

    (63) arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .

    TIMES           reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    DIVIDE          reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    MOD             reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    PLUS            reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    MINUS           reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    GT              reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    LT              reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    GEQ             reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    LEQ             reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    EQ              reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    NEQ             reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    ID              reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_LIST          reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_DICT          reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_SET           reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_INT           reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_DOUBLE        reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_STRING        reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_BOOL          reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_WINDOW        reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_SHAPE         reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_TRIANGLE      reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_RECTANGLE     reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_CIRCLE        reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_TEXT          reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    $end            reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    RPAREN          reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    COMMA           reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    AND             reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    OR              reduce using rule 63 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)


state 92

    (62) arithmetic_term -> arithmetic_term TIMES arithmetic_factor .

    TIMES           reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    DIVIDE          reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    MOD             reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    PLUS            reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    MINUS           reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    GT              reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    LT              reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    GEQ             reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    LEQ             reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    EQ              reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    NEQ             reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    ID              reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_LIST          reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_DICT          reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_SET           reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_INT           reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_DOUBLE        reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_STRING        reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_BOOL          reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_WINDOW        reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_SHAPE         reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_TRIANGLE      reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_RECTANGLE     reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_CIRCLE        reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_TEXT          reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    $end            reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    RPAREN          reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    COMMA           reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    AND             reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    OR              reduce using rule 62 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)


state 93

    (66) arithmetic_factor -> LPAREN arithmetic_expression . RPAREN
    (59) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (60) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term

    RPAREN          shift and go to state 102
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74


state 94

    (49) boolean_factor -> arithmetic_expression comparator arithmetic_expression .
    (59) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (60) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term

    AND             reduce using rule 49 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    OR              reduce using rule 49 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    ID              reduce using rule 49 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_LIST          reduce using rule 49 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_DICT          reduce using rule 49 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_SET           reduce using rule 49 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_INT           reduce using rule 49 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_DOUBLE        reduce using rule 49 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_STRING        reduce using rule 49 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_BOOL          reduce using rule 49 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_WINDOW        reduce using rule 49 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_SHAPE         reduce using rule 49 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_TRIANGLE      reduce using rule 49 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_RECTANGLE     reduce using rule 49 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_CIRCLE        reduce using rule 49 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_TEXT          reduce using rule 49 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    $end            reduce using rule 49 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    RPAREN          reduce using rule 49 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    COMMA           reduce using rule 49 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74


state 95

    (59) arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .
    (62) arithmetic_term -> arithmetic_term . TIMES arithmetic_factor
    (63) arithmetic_term -> arithmetic_term . DIVIDE arithmetic_factor
    (64) arithmetic_term -> arithmetic_term . MOD arithmetic_factor

    PLUS            reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    MINUS           reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    GT              reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    LT              reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    GEQ             reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    LEQ             reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    EQ              reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    NEQ             reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    AND             reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    OR              reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    ID              reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_LIST          reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_DICT          reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_SET           reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_INT           reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_DOUBLE        reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_STRING        reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_BOOL          reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_WINDOW        reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_SHAPE         reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_TRIANGLE      reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_RECTANGLE     reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_CIRCLE        reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_TEXT          reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    $end            reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    RPAREN          reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    COMMA           reduce using rule 59 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 63


state 96

    (60) arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .
    (62) arithmetic_term -> arithmetic_term . TIMES arithmetic_factor
    (63) arithmetic_term -> arithmetic_term . DIVIDE arithmetic_factor
    (64) arithmetic_term -> arithmetic_term . MOD arithmetic_factor

    PLUS            reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    MINUS           reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    GT              reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    LT              reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    GEQ             reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    LEQ             reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    EQ              reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    NEQ             reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    AND             reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    OR              reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    ID              reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_LIST          reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_DICT          reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_SET           reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_INT           reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_DOUBLE        reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_STRING        reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_BOOL          reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_WINDOW        reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_SHAPE         reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_TRIANGLE      reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_RECTANGLE     reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_CIRCLE        reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_TEXT          reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    $end            reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    RPAREN          reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    COMMA           reduce using rule 60 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 63


state 97

    (50) boolean_factor -> string_expression comparator string_expression .
    (32) string_expression -> string_expression . PLUS string_term

    AND             reduce using rule 50 (boolean_factor -> string_expression comparator string_expression .)
    OR              reduce using rule 50 (boolean_factor -> string_expression comparator string_expression .)
    ID              reduce using rule 50 (boolean_factor -> string_expression comparator string_expression .)
    K_LIST          reduce using rule 50 (boolean_factor -> string_expression comparator string_expression .)
    K_DICT          reduce using rule 50 (boolean_factor -> string_expression comparator string_expression .)
    K_SET           reduce using rule 50 (boolean_factor -> string_expression comparator string_expression .)
    K_INT           reduce using rule 50 (boolean_factor -> string_expression comparator string_expression .)
    K_DOUBLE        reduce using rule 50 (boolean_factor -> string_expression comparator string_expression .)
    K_STRING        reduce using rule 50 (boolean_factor -> string_expression comparator string_expression .)
    K_BOOL          reduce using rule 50 (boolean_factor -> string_expression comparator string_expression .)
    K_WINDOW        reduce using rule 50 (boolean_factor -> string_expression comparator string_expression .)
    K_SHAPE         reduce using rule 50 (boolean_factor -> string_expression comparator string_expression .)
    K_TRIANGLE      reduce using rule 50 (boolean_factor -> string_expression comparator string_expression .)
    K_RECTANGLE     reduce using rule 50 (boolean_factor -> string_expression comparator string_expression .)
    K_CIRCLE        reduce using rule 50 (boolean_factor -> string_expression comparator string_expression .)
    K_TEXT          reduce using rule 50 (boolean_factor -> string_expression comparator string_expression .)
    $end            reduce using rule 50 (boolean_factor -> string_expression comparator string_expression .)
    RPAREN          reduce using rule 50 (boolean_factor -> string_expression comparator string_expression .)
    COMMA           reduce using rule 50 (boolean_factor -> string_expression comparator string_expression .)
    PLUS            shift and go to state 76


state 98

    (33) string_expression -> STRING .

    PLUS            reduce using rule 33 (string_expression -> STRING .)
    AND             reduce using rule 33 (string_expression -> STRING .)
    OR              reduce using rule 33 (string_expression -> STRING .)
    ID              reduce using rule 33 (string_expression -> STRING .)
    K_LIST          reduce using rule 33 (string_expression -> STRING .)
    K_DICT          reduce using rule 33 (string_expression -> STRING .)
    K_SET           reduce using rule 33 (string_expression -> STRING .)
    K_INT           reduce using rule 33 (string_expression -> STRING .)
    K_DOUBLE        reduce using rule 33 (string_expression -> STRING .)
    K_STRING        reduce using rule 33 (string_expression -> STRING .)
    K_BOOL          reduce using rule 33 (string_expression -> STRING .)
    K_WINDOW        reduce using rule 33 (string_expression -> STRING .)
    K_SHAPE         reduce using rule 33 (string_expression -> STRING .)
    K_TRIANGLE      reduce using rule 33 (string_expression -> STRING .)
    K_RECTANGLE     reduce using rule 33 (string_expression -> STRING .)
    K_CIRCLE        reduce using rule 33 (string_expression -> STRING .)
    K_TEXT          reduce using rule 33 (string_expression -> STRING .)
    $end            reduce using rule 33 (string_expression -> STRING .)
    RPAREN          reduce using rule 33 (string_expression -> STRING .)
    COMMA           reduce using rule 33 (string_expression -> STRING .)


state 99

    (35) string_term -> STRING .

    PLUS            reduce using rule 35 (string_term -> STRING .)
    GT              reduce using rule 35 (string_term -> STRING .)
    LT              reduce using rule 35 (string_term -> STRING .)
    GEQ             reduce using rule 35 (string_term -> STRING .)
    LEQ             reduce using rule 35 (string_term -> STRING .)
    EQ              reduce using rule 35 (string_term -> STRING .)
    NEQ             reduce using rule 35 (string_term -> STRING .)
    ID              reduce using rule 35 (string_term -> STRING .)
    K_LIST          reduce using rule 35 (string_term -> STRING .)
    K_DICT          reduce using rule 35 (string_term -> STRING .)
    K_SET           reduce using rule 35 (string_term -> STRING .)
    K_INT           reduce using rule 35 (string_term -> STRING .)
    K_DOUBLE        reduce using rule 35 (string_term -> STRING .)
    K_STRING        reduce using rule 35 (string_term -> STRING .)
    K_BOOL          reduce using rule 35 (string_term -> STRING .)
    K_WINDOW        reduce using rule 35 (string_term -> STRING .)
    K_SHAPE         reduce using rule 35 (string_term -> STRING .)
    K_TRIANGLE      reduce using rule 35 (string_term -> STRING .)
    K_RECTANGLE     reduce using rule 35 (string_term -> STRING .)
    K_CIRCLE        reduce using rule 35 (string_term -> STRING .)
    K_TEXT          reduce using rule 35 (string_term -> STRING .)
    $end            reduce using rule 35 (string_term -> STRING .)
    RPAREN          reduce using rule 35 (string_term -> STRING .)
    COMMA           reduce using rule 35 (string_term -> STRING .)
    AND             reduce using rule 35 (string_term -> STRING .)
    OR              reduce using rule 35 (string_term -> STRING .)


state 100

    (34) string_term -> function_call_statement .

    PLUS            reduce using rule 34 (string_term -> function_call_statement .)
    GT              reduce using rule 34 (string_term -> function_call_statement .)
    LT              reduce using rule 34 (string_term -> function_call_statement .)
    GEQ             reduce using rule 34 (string_term -> function_call_statement .)
    LEQ             reduce using rule 34 (string_term -> function_call_statement .)
    EQ              reduce using rule 34 (string_term -> function_call_statement .)
    NEQ             reduce using rule 34 (string_term -> function_call_statement .)
    ID              reduce using rule 34 (string_term -> function_call_statement .)
    K_LIST          reduce using rule 34 (string_term -> function_call_statement .)
    K_DICT          reduce using rule 34 (string_term -> function_call_statement .)
    K_SET           reduce using rule 34 (string_term -> function_call_statement .)
    K_INT           reduce using rule 34 (string_term -> function_call_statement .)
    K_DOUBLE        reduce using rule 34 (string_term -> function_call_statement .)
    K_STRING        reduce using rule 34 (string_term -> function_call_statement .)
    K_BOOL          reduce using rule 34 (string_term -> function_call_statement .)
    K_WINDOW        reduce using rule 34 (string_term -> function_call_statement .)
    K_SHAPE         reduce using rule 34 (string_term -> function_call_statement .)
    K_TRIANGLE      reduce using rule 34 (string_term -> function_call_statement .)
    K_RECTANGLE     reduce using rule 34 (string_term -> function_call_statement .)
    K_CIRCLE        reduce using rule 34 (string_term -> function_call_statement .)
    K_TEXT          reduce using rule 34 (string_term -> function_call_statement .)
    $end            reduce using rule 34 (string_term -> function_call_statement .)
    RPAREN          reduce using rule 34 (string_term -> function_call_statement .)
    COMMA           reduce using rule 34 (string_term -> function_call_statement .)
    AND             reduce using rule 34 (string_term -> function_call_statement .)
    OR              reduce using rule 34 (string_term -> function_call_statement .)


state 101

    (32) string_expression -> string_expression PLUS string_term .

    PLUS            reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    GT              reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    LT              reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    GEQ             reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    LEQ             reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    EQ              reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    NEQ             reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    ID              reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    K_LIST          reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    K_DICT          reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    K_SET           reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    K_INT           reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    K_DOUBLE        reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    K_STRING        reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    K_BOOL          reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    K_WINDOW        reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    K_SHAPE         reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    K_TRIANGLE      reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    K_RECTANGLE     reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    K_CIRCLE        reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    K_TEXT          reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    $end            reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    RPAREN          reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    COMMA           reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    AND             reduce using rule 32 (string_expression -> string_expression PLUS string_term .)
    OR              reduce using rule 32 (string_expression -> string_expression PLUS string_term .)


state 102

    (66) arithmetic_factor -> LPAREN arithmetic_expression RPAREN .

    TIMES           reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    DIVIDE          reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    MOD             reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    PLUS            reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    MINUS           reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    GT              reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    LT              reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    GEQ             reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    LEQ             reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    EQ              reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    NEQ             reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    ID              reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_LIST          reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_DICT          reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_SET           reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_INT           reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_DOUBLE        reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_STRING        reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_BOOL          reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_WINDOW        reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_SHAPE         reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_TRIANGLE      reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_RECTANGLE     reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_CIRCLE        reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_TEXT          reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    $end            reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    RPAREN          reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    COMMA           reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    AND             reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    OR              reduce using rule 66 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)


state 103

    (47) boolean_factor -> LPAREN boolean_expression RPAREN .

    AND             reduce using rule 47 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    OR              reduce using rule 47 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    ID              reduce using rule 47 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_LIST          reduce using rule 47 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_DICT          reduce using rule 47 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_SET           reduce using rule 47 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_INT           reduce using rule 47 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_DOUBLE        reduce using rule 47 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_STRING        reduce using rule 47 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_BOOL          reduce using rule 47 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_WINDOW        reduce using rule 47 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_SHAPE         reduce using rule 47 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_TRIANGLE      reduce using rule 47 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_RECTANGLE     reduce using rule 47 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_CIRCLE        reduce using rule 47 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_TEXT          reduce using rule 47 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    $end            reduce using rule 47 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    RPAREN          reduce using rule 47 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    COMMA           reduce using rule 47 (boolean_factor -> LPAREN boolean_expression RPAREN .)


state 104

    (43) boolean_expression -> boolean_expression OR boolean_term .
    (45) boolean_term -> boolean_term . AND boolean_factor

    OR              reduce using rule 43 (boolean_expression -> boolean_expression OR boolean_term .)
    ID              reduce using rule 43 (boolean_expression -> boolean_expression OR boolean_term .)
    K_LIST          reduce using rule 43 (boolean_expression -> boolean_expression OR boolean_term .)
    K_DICT          reduce using rule 43 (boolean_expression -> boolean_expression OR boolean_term .)
    K_SET           reduce using rule 43 (boolean_expression -> boolean_expression OR boolean_term .)
    K_INT           reduce using rule 43 (boolean_expression -> boolean_expression OR boolean_term .)
    K_DOUBLE        reduce using rule 43 (boolean_expression -> boolean_expression OR boolean_term .)
    K_STRING        reduce using rule 43 (boolean_expression -> boolean_expression OR boolean_term .)
    K_BOOL          reduce using rule 43 (boolean_expression -> boolean_expression OR boolean_term .)
    K_WINDOW        reduce using rule 43 (boolean_expression -> boolean_expression OR boolean_term .)
    K_SHAPE         reduce using rule 43 (boolean_expression -> boolean_expression OR boolean_term .)
    K_TRIANGLE      reduce using rule 43 (boolean_expression -> boolean_expression OR boolean_term .)
    K_RECTANGLE     reduce using rule 43 (boolean_expression -> boolean_expression OR boolean_term .)
    K_CIRCLE        reduce using rule 43 (boolean_expression -> boolean_expression OR boolean_term .)
    K_TEXT          reduce using rule 43 (boolean_expression -> boolean_expression OR boolean_term .)
    $end            reduce using rule 43 (boolean_expression -> boolean_expression OR boolean_term .)
    RPAREN          reduce using rule 43 (boolean_expression -> boolean_expression OR boolean_term .)
    COMMA           reduce using rule 43 (boolean_expression -> boolean_expression OR boolean_term .)
    AND             shift and go to state 62


state 105

    (9) parameter_list -> parameter_list COMMA expression .

    RPAREN          reduce using rule 9 (parameter_list -> parameter_list COMMA expression .)
    COMMA           reduce using rule 9 (parameter_list -> parameter_list COMMA expression .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 27 resolved using rule (expression -> unary_expression)
WARNING: rejected rule (boolean_factor -> unary_expression) in state 27
WARNING: reduce/reduce conflict in state 34 resolved using rule (unary_expression -> INTEGER)
WARNING: rejected rule (number -> INTEGER) in state 34
WARNING: reduce/reduce conflict in state 37 resolved using rule (string_expression -> STRING)
WARNING: rejected rule (unary_expression -> STRING) in state 37
WARNING: reduce/reduce conflict in state 43 resolved using rule (unary_expression -> DOUBLE)
WARNING: rejected rule (number -> DOUBLE) in state 43
WARNING: reduce/reduce conflict in state 44 resolved using rule (unary_expression -> function_call_statement)
WARNING: rejected rule (arithmetic_factor -> function_call_statement) in state 44
WARNING: reduce/reduce conflict in state 60 resolved using rule (string_expression -> STRING)
WARNING: rejected rule (unary_expression -> STRING) in state 60
WARNING: reduce/reduce conflict in state 77 resolved using rule (unary_expression -> function_call_statement)
WARNING: rejected rule (arithmetic_factor -> function_call_statement) in state 77
