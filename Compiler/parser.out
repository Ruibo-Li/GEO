Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    K_NULL
    COMMENT
    K_CONTINUE
    K_WHILE
    K_POINT
    K_DONE

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> <empty>
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> compound_statement
Rule 5     compound_statement -> function_call_statement
Rule 6     compound_statement -> variable_declaration
Rule 7     compound_statement -> selection_statement
Rule 8     function_call_statement -> ID LPAREN parameter_list RPAREN
Rule 9     function_call_statement -> ID LPAREN RPAREN
Rule 10    parameter_list -> parameter_list COMMA expression
Rule 11    parameter_list -> expression
Rule 12    variable_declaration -> pre_type_modifier type ID
Rule 13    variable_declaration -> pre_type_modifier type ID ASSIGN expression
Rule 14    variable_declaration -> ID ASSIGN expression
Rule 15    pre_type_modifier -> <empty>
Rule 16    pre_type_modifier -> K_LIST
Rule 17    pre_type_modifier -> K_DICT
Rule 18    pre_type_modifier -> K_SET
Rule 19    type -> K_INT
Rule 20    type -> K_DOUBLE
Rule 21    type -> K_STRING
Rule 22    type -> K_BOOL
Rule 23    type -> K_WINDOW
Rule 24    type -> K_SHAPE
Rule 25    type -> K_TRIANGLE
Rule 26    type -> K_RECTANGLE
Rule 27    type -> K_CIRCLE
Rule 28    type -> K_TEXT
Rule 29    expression -> string_expression
Rule 30    expression -> unary_expression
Rule 31    expression -> boolean_expression
Rule 32    expression -> arithmetic_expression
Rule 33    string_expression -> string_expression PLUS string_term
Rule 34    string_expression -> STRING
Rule 35    string_term -> function_call_statement
Rule 36    string_term -> STRING
Rule 37    unary_expression -> ID
Rule 38    unary_expression -> STRING
Rule 39    unary_expression -> INTEGER
Rule 40    unary_expression -> function_call_statement
Rule 41    unary_expression -> DOUBLE
Rule 42    unary_expression -> K_TRUE
Rule 43    unary_expression -> K_FALSE
Rule 44    boolean_expression -> boolean_expression OR boolean_term
Rule 45    boolean_expression -> boolean_term
Rule 46    boolean_term -> boolean_term AND boolean_factor
Rule 47    boolean_term -> boolean_factor
Rule 48    boolean_factor -> LPAREN boolean_expression RPAREN
Rule 49    boolean_factor -> unary_expression comparator unary_expression
Rule 50    boolean_factor -> arithmetic_expression comparator arithmetic_expression
Rule 51    boolean_factor -> string_expression comparator string_expression
Rule 52    boolean_factor -> unary_expression
Rule 53    boolean_factor -> NEG boolean_factor
Rule 54    comparator -> GT
Rule 55    comparator -> LT
Rule 56    comparator -> GEQ
Rule 57    comparator -> LEQ
Rule 58    comparator -> EQ
Rule 59    comparator -> NEQ
Rule 60    arithmetic_expression -> arithmetic_expression PLUS arithmetic_term
Rule 61    arithmetic_expression -> arithmetic_expression MINUS arithmetic_term
Rule 62    arithmetic_expression -> arithmetic_term
Rule 63    arithmetic_term -> arithmetic_term TIMES arithmetic_factor
Rule 64    arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor
Rule 65    arithmetic_term -> arithmetic_term MOD arithmetic_factor
Rule 66    arithmetic_term -> arithmetic_factor
Rule 67    arithmetic_factor -> LPAREN arithmetic_expression RPAREN
Rule 68    arithmetic_factor -> number
Rule 69    arithmetic_factor -> function_call_statement
Rule 70    arithmetic_factor -> MINUS arithmetic_factor
Rule 71    number -> INTEGER
Rule 72    number -> DOUBLE
Rule 73    selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
Rule 74    else_if_statement_list -> <empty>
Rule 75    else_if_statement_list -> else_if_statement_list else_if_statement
Rule 76    else_if_statement -> K_EF LPAREN boolean_expression RPAREN compound_statement_list
Rule 77    else_statement -> <empty>
Rule 78    else_statement -> K_EL compound_statement_list
Rule 79    compound_statement_list -> <empty>
Rule 80    compound_statement_list -> compound_statement_list compound_statement

Terminals, with rules where they appear

AND                  : 46
ASSIGN               : 13 14
COMMA                : 10
COMMENT              : 
DIVIDE               : 64
DOUBLE               : 41 72
EQ                   : 58
GEQ                  : 56
GT                   : 54
ID                   : 8 9 12 13 14 37
INTEGER              : 39 71
K_BOOL               : 22
K_CIRCLE             : 27
K_CONTINUE           : 
K_DICT               : 17
K_DONE               : 
K_DOUBLE             : 20
K_EF                 : 76
K_EL                 : 78
K_END                : 73
K_FALSE              : 43
K_IF                 : 73
K_INT                : 19
K_LIST               : 16
K_NULL               : 
K_POINT              : 
K_RECTANGLE          : 26
K_SET                : 18
K_SHAPE              : 24
K_STRING             : 21
K_TEXT               : 28
K_TRIANGLE           : 25
K_TRUE               : 42
K_WHILE              : 
K_WINDOW             : 23
LEQ                  : 57
LPAREN               : 8 9 48 67 73 76
LT                   : 55
MINUS                : 61 70
MOD                  : 65
NEG                  : 53
NEQ                  : 59
OR                   : 44
PLUS                 : 33 60
RPAREN               : 8 9 48 67 73 76
STRING               : 34 36 38
TIMES                : 63
error                : 

Nonterminals, with rules where they appear

arithmetic_expression : 32 50 50 60 61 67
arithmetic_factor    : 63 64 65 66 70
arithmetic_term      : 60 61 62 63 64 65
boolean_expression   : 31 44 48 73 76
boolean_factor       : 46 47 53
boolean_term         : 44 45 46
comparator           : 49 50 51
compound_statement   : 4 80
compound_statement_list : 73 76 78 80
else_if_statement    : 75
else_if_statement_list : 73 75
else_statement       : 73
expression           : 10 11 13 14
function_call_statement : 5 35 40 69
number               : 68
parameter_list       : 8 10
pre_type_modifier    : 12 13
program              : 0
selection_statement  : 7
statement            : 3
statement_list       : 1 3
string_expression    : 29 33 51 51
string_term          : 33
type                 : 12 13
unary_expression     : 30 49 49 52
variable_declaration : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> .
    (3) statement_list -> . statement_list statement

    ID              reduce using rule 2 (statement_list -> .)
    K_IF            reduce using rule 2 (statement_list -> .)
    K_LIST          reduce using rule 2 (statement_list -> .)
    K_DICT          reduce using rule 2 (statement_list -> .)
    K_SET           reduce using rule 2 (statement_list -> .)
    K_INT           reduce using rule 2 (statement_list -> .)
    K_DOUBLE        reduce using rule 2 (statement_list -> .)
    K_STRING        reduce using rule 2 (statement_list -> .)
    K_BOOL          reduce using rule 2 (statement_list -> .)
    K_WINDOW        reduce using rule 2 (statement_list -> .)
    K_SHAPE         reduce using rule 2 (statement_list -> .)
    K_TRIANGLE      reduce using rule 2 (statement_list -> .)
    K_RECTANGLE     reduce using rule 2 (statement_list -> .)
    K_CIRCLE        reduce using rule 2 (statement_list -> .)
    K_TEXT          reduce using rule 2 (statement_list -> .)
    $end            reduce using rule 2 (statement_list -> .)

    statement_list                 shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . compound_statement
    (5) compound_statement -> . function_call_statement
    (6) compound_statement -> . variable_declaration
    (7) compound_statement -> . selection_statement
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN
    (12) variable_declaration -> . pre_type_modifier type ID
    (13) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (14) variable_declaration -> . ID ASSIGN expression
    (73) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (15) pre_type_modifier -> .
    (16) pre_type_modifier -> . K_LIST
    (17) pre_type_modifier -> . K_DICT
    (18) pre_type_modifier -> . K_SET

    $end            reduce using rule 1 (program -> statement_list .)
    ID              shift and go to state 12
    K_IF            shift and go to state 4
    K_INT           reduce using rule 15 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 15 (pre_type_modifier -> .)
    K_STRING        reduce using rule 15 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 15 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 15 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 15 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 15 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 15 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 15 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 15 (pre_type_modifier -> .)
    K_LIST          shift and go to state 9
    K_DICT          shift and go to state 11
    K_SET           shift and go to state 3

    compound_statement             shift and go to state 6
    selection_statement            shift and go to state 7
    function_call_statement        shift and go to state 13
    statement                      shift and go to state 8
    pre_type_modifier              shift and go to state 10
    variable_declaration           shift and go to state 5

state 2

    (0) S' -> program .



state 3

    (18) pre_type_modifier -> K_SET .

    K_INT           reduce using rule 18 (pre_type_modifier -> K_SET .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> K_SET .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> K_SET .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> K_SET .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> K_SET .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> K_SET .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> K_SET .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> K_SET .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> K_SET .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> K_SET .)


state 4

    (73) selection_statement -> K_IF . LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END

    LPAREN          shift and go to state 14


state 5

    (6) compound_statement -> variable_declaration .

    ID              reduce using rule 6 (compound_statement -> variable_declaration .)
    K_IF            reduce using rule 6 (compound_statement -> variable_declaration .)
    K_LIST          reduce using rule 6 (compound_statement -> variable_declaration .)
    K_DICT          reduce using rule 6 (compound_statement -> variable_declaration .)
    K_SET           reduce using rule 6 (compound_statement -> variable_declaration .)
    K_INT           reduce using rule 6 (compound_statement -> variable_declaration .)
    K_DOUBLE        reduce using rule 6 (compound_statement -> variable_declaration .)
    K_STRING        reduce using rule 6 (compound_statement -> variable_declaration .)
    K_BOOL          reduce using rule 6 (compound_statement -> variable_declaration .)
    K_WINDOW        reduce using rule 6 (compound_statement -> variable_declaration .)
    K_SHAPE         reduce using rule 6 (compound_statement -> variable_declaration .)
    K_TRIANGLE      reduce using rule 6 (compound_statement -> variable_declaration .)
    K_RECTANGLE     reduce using rule 6 (compound_statement -> variable_declaration .)
    K_CIRCLE        reduce using rule 6 (compound_statement -> variable_declaration .)
    K_TEXT          reduce using rule 6 (compound_statement -> variable_declaration .)
    K_EL            reduce using rule 6 (compound_statement -> variable_declaration .)
    K_EF            reduce using rule 6 (compound_statement -> variable_declaration .)
    K_END           reduce using rule 6 (compound_statement -> variable_declaration .)
    $end            reduce using rule 6 (compound_statement -> variable_declaration .)


state 6

    (4) statement -> compound_statement .

    ID              reduce using rule 4 (statement -> compound_statement .)
    K_IF            reduce using rule 4 (statement -> compound_statement .)
    K_LIST          reduce using rule 4 (statement -> compound_statement .)
    K_DICT          reduce using rule 4 (statement -> compound_statement .)
    K_SET           reduce using rule 4 (statement -> compound_statement .)
    K_INT           reduce using rule 4 (statement -> compound_statement .)
    K_DOUBLE        reduce using rule 4 (statement -> compound_statement .)
    K_STRING        reduce using rule 4 (statement -> compound_statement .)
    K_BOOL          reduce using rule 4 (statement -> compound_statement .)
    K_WINDOW        reduce using rule 4 (statement -> compound_statement .)
    K_SHAPE         reduce using rule 4 (statement -> compound_statement .)
    K_TRIANGLE      reduce using rule 4 (statement -> compound_statement .)
    K_RECTANGLE     reduce using rule 4 (statement -> compound_statement .)
    K_CIRCLE        reduce using rule 4 (statement -> compound_statement .)
    K_TEXT          reduce using rule 4 (statement -> compound_statement .)
    $end            reduce using rule 4 (statement -> compound_statement .)


state 7

    (7) compound_statement -> selection_statement .

    ID              reduce using rule 7 (compound_statement -> selection_statement .)
    K_IF            reduce using rule 7 (compound_statement -> selection_statement .)
    K_LIST          reduce using rule 7 (compound_statement -> selection_statement .)
    K_DICT          reduce using rule 7 (compound_statement -> selection_statement .)
    K_SET           reduce using rule 7 (compound_statement -> selection_statement .)
    K_INT           reduce using rule 7 (compound_statement -> selection_statement .)
    K_DOUBLE        reduce using rule 7 (compound_statement -> selection_statement .)
    K_STRING        reduce using rule 7 (compound_statement -> selection_statement .)
    K_BOOL          reduce using rule 7 (compound_statement -> selection_statement .)
    K_WINDOW        reduce using rule 7 (compound_statement -> selection_statement .)
    K_SHAPE         reduce using rule 7 (compound_statement -> selection_statement .)
    K_TRIANGLE      reduce using rule 7 (compound_statement -> selection_statement .)
    K_RECTANGLE     reduce using rule 7 (compound_statement -> selection_statement .)
    K_CIRCLE        reduce using rule 7 (compound_statement -> selection_statement .)
    K_TEXT          reduce using rule 7 (compound_statement -> selection_statement .)
    K_EL            reduce using rule 7 (compound_statement -> selection_statement .)
    K_EF            reduce using rule 7 (compound_statement -> selection_statement .)
    K_END           reduce using rule 7 (compound_statement -> selection_statement .)
    $end            reduce using rule 7 (compound_statement -> selection_statement .)


state 8

    (3) statement_list -> statement_list statement .

    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    K_IF            reduce using rule 3 (statement_list -> statement_list statement .)
    K_LIST          reduce using rule 3 (statement_list -> statement_list statement .)
    K_DICT          reduce using rule 3 (statement_list -> statement_list statement .)
    K_SET           reduce using rule 3 (statement_list -> statement_list statement .)
    K_INT           reduce using rule 3 (statement_list -> statement_list statement .)
    K_DOUBLE        reduce using rule 3 (statement_list -> statement_list statement .)
    K_STRING        reduce using rule 3 (statement_list -> statement_list statement .)
    K_BOOL          reduce using rule 3 (statement_list -> statement_list statement .)
    K_WINDOW        reduce using rule 3 (statement_list -> statement_list statement .)
    K_SHAPE         reduce using rule 3 (statement_list -> statement_list statement .)
    K_TRIANGLE      reduce using rule 3 (statement_list -> statement_list statement .)
    K_RECTANGLE     reduce using rule 3 (statement_list -> statement_list statement .)
    K_CIRCLE        reduce using rule 3 (statement_list -> statement_list statement .)
    K_TEXT          reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)


state 9

    (16) pre_type_modifier -> K_LIST .

    K_INT           reduce using rule 16 (pre_type_modifier -> K_LIST .)
    K_DOUBLE        reduce using rule 16 (pre_type_modifier -> K_LIST .)
    K_STRING        reduce using rule 16 (pre_type_modifier -> K_LIST .)
    K_BOOL          reduce using rule 16 (pre_type_modifier -> K_LIST .)
    K_WINDOW        reduce using rule 16 (pre_type_modifier -> K_LIST .)
    K_SHAPE         reduce using rule 16 (pre_type_modifier -> K_LIST .)
    K_TRIANGLE      reduce using rule 16 (pre_type_modifier -> K_LIST .)
    K_RECTANGLE     reduce using rule 16 (pre_type_modifier -> K_LIST .)
    K_CIRCLE        reduce using rule 16 (pre_type_modifier -> K_LIST .)
    K_TEXT          reduce using rule 16 (pre_type_modifier -> K_LIST .)


state 10

    (12) variable_declaration -> pre_type_modifier . type ID
    (13) variable_declaration -> pre_type_modifier . type ID ASSIGN expression
    (19) type -> . K_INT
    (20) type -> . K_DOUBLE
    (21) type -> . K_STRING
    (22) type -> . K_BOOL
    (23) type -> . K_WINDOW
    (24) type -> . K_SHAPE
    (25) type -> . K_TRIANGLE
    (26) type -> . K_RECTANGLE
    (27) type -> . K_CIRCLE
    (28) type -> . K_TEXT

    K_INT           shift and go to state 22
    K_DOUBLE        shift and go to state 16
    K_STRING        shift and go to state 23
    K_BOOL          shift and go to state 15
    K_WINDOW        shift and go to state 24
    K_SHAPE         shift and go to state 19
    K_TRIANGLE      shift and go to state 17
    K_RECTANGLE     shift and go to state 21
    K_CIRCLE        shift and go to state 25
    K_TEXT          shift and go to state 20

    type                           shift and go to state 18

state 11

    (17) pre_type_modifier -> K_DICT .

    K_INT           reduce using rule 17 (pre_type_modifier -> K_DICT .)
    K_DOUBLE        reduce using rule 17 (pre_type_modifier -> K_DICT .)
    K_STRING        reduce using rule 17 (pre_type_modifier -> K_DICT .)
    K_BOOL          reduce using rule 17 (pre_type_modifier -> K_DICT .)
    K_WINDOW        reduce using rule 17 (pre_type_modifier -> K_DICT .)
    K_SHAPE         reduce using rule 17 (pre_type_modifier -> K_DICT .)
    K_TRIANGLE      reduce using rule 17 (pre_type_modifier -> K_DICT .)
    K_RECTANGLE     reduce using rule 17 (pre_type_modifier -> K_DICT .)
    K_CIRCLE        reduce using rule 17 (pre_type_modifier -> K_DICT .)
    K_TEXT          reduce using rule 17 (pre_type_modifier -> K_DICT .)


state 12

    (8) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (9) function_call_statement -> ID . LPAREN RPAREN
    (14) variable_declaration -> ID . ASSIGN expression

    LPAREN          shift and go to state 27
    ASSIGN          shift and go to state 26


state 13

    (5) compound_statement -> function_call_statement .

    ID              reduce using rule 5 (compound_statement -> function_call_statement .)
    K_IF            reduce using rule 5 (compound_statement -> function_call_statement .)
    K_LIST          reduce using rule 5 (compound_statement -> function_call_statement .)
    K_DICT          reduce using rule 5 (compound_statement -> function_call_statement .)
    K_SET           reduce using rule 5 (compound_statement -> function_call_statement .)
    K_INT           reduce using rule 5 (compound_statement -> function_call_statement .)
    K_DOUBLE        reduce using rule 5 (compound_statement -> function_call_statement .)
    K_STRING        reduce using rule 5 (compound_statement -> function_call_statement .)
    K_BOOL          reduce using rule 5 (compound_statement -> function_call_statement .)
    K_WINDOW        reduce using rule 5 (compound_statement -> function_call_statement .)
    K_SHAPE         reduce using rule 5 (compound_statement -> function_call_statement .)
    K_TRIANGLE      reduce using rule 5 (compound_statement -> function_call_statement .)
    K_RECTANGLE     reduce using rule 5 (compound_statement -> function_call_statement .)
    K_CIRCLE        reduce using rule 5 (compound_statement -> function_call_statement .)
    K_TEXT          reduce using rule 5 (compound_statement -> function_call_statement .)
    K_EL            reduce using rule 5 (compound_statement -> function_call_statement .)
    K_EF            reduce using rule 5 (compound_statement -> function_call_statement .)
    K_END           reduce using rule 5 (compound_statement -> function_call_statement .)
    $end            reduce using rule 5 (compound_statement -> function_call_statement .)


state 14

    (73) selection_statement -> K_IF LPAREN . boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (44) boolean_expression -> . boolean_expression OR boolean_term
    (45) boolean_expression -> . boolean_term
    (46) boolean_term -> . boolean_term AND boolean_factor
    (47) boolean_term -> . boolean_factor
    (48) boolean_factor -> . LPAREN boolean_expression RPAREN
    (49) boolean_factor -> . unary_expression comparator unary_expression
    (50) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (51) boolean_factor -> . string_expression comparator string_expression
    (52) boolean_factor -> . unary_expression
    (53) boolean_factor -> . NEG boolean_factor
    (37) unary_expression -> . ID
    (38) unary_expression -> . STRING
    (39) unary_expression -> . INTEGER
    (40) unary_expression -> . function_call_statement
    (41) unary_expression -> . DOUBLE
    (42) unary_expression -> . K_TRUE
    (43) unary_expression -> . K_FALSE
    (60) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (61) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (62) arithmetic_expression -> . arithmetic_term
    (33) string_expression -> . string_expression PLUS string_term
    (34) string_expression -> . STRING
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN
    (63) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (65) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (66) arithmetic_term -> . arithmetic_factor
    (67) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (68) arithmetic_factor -> . number
    (69) arithmetic_factor -> . function_call_statement
    (70) arithmetic_factor -> . MINUS arithmetic_factor
    (71) number -> . INTEGER
    (72) number -> . DOUBLE

    LPAREN          shift and go to state 39
    NEG             shift and go to state 29
    ID              shift and go to state 42
    STRING          shift and go to state 38
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 44
    K_TRUE          shift and go to state 31
    K_FALSE         shift and go to state 46
    MINUS           shift and go to state 33

    arithmetic_expression          shift and go to state 36
    string_expression              shift and go to state 37
    unary_expression               shift and go to state 28
    boolean_expression             shift and go to state 43
    arithmetic_factor              shift and go to state 34
    boolean_term                   shift and go to state 30
    function_call_statement        shift and go to state 45
    number                         shift and go to state 41
    arithmetic_term                shift and go to state 32
    boolean_factor                 shift and go to state 40

state 15

    (22) type -> K_BOOL .

    ID              reduce using rule 22 (type -> K_BOOL .)


state 16

    (20) type -> K_DOUBLE .

    ID              reduce using rule 20 (type -> K_DOUBLE .)


state 17

    (25) type -> K_TRIANGLE .

    ID              reduce using rule 25 (type -> K_TRIANGLE .)


state 18

    (12) variable_declaration -> pre_type_modifier type . ID
    (13) variable_declaration -> pre_type_modifier type . ID ASSIGN expression

    ID              shift and go to state 47


state 19

    (24) type -> K_SHAPE .

    ID              reduce using rule 24 (type -> K_SHAPE .)


state 20

    (28) type -> K_TEXT .

    ID              reduce using rule 28 (type -> K_TEXT .)


state 21

    (26) type -> K_RECTANGLE .

    ID              reduce using rule 26 (type -> K_RECTANGLE .)


state 22

    (19) type -> K_INT .

    ID              reduce using rule 19 (type -> K_INT .)


state 23

    (21) type -> K_STRING .

    ID              reduce using rule 21 (type -> K_STRING .)


state 24

    (23) type -> K_WINDOW .

    ID              reduce using rule 23 (type -> K_WINDOW .)


state 25

    (27) type -> K_CIRCLE .

    ID              reduce using rule 27 (type -> K_CIRCLE .)


state 26

    (14) variable_declaration -> ID ASSIGN . expression
    (29) expression -> . string_expression
    (30) expression -> . unary_expression
    (31) expression -> . boolean_expression
    (32) expression -> . arithmetic_expression
    (33) string_expression -> . string_expression PLUS string_term
    (34) string_expression -> . STRING
    (37) unary_expression -> . ID
    (38) unary_expression -> . STRING
    (39) unary_expression -> . INTEGER
    (40) unary_expression -> . function_call_statement
    (41) unary_expression -> . DOUBLE
    (42) unary_expression -> . K_TRUE
    (43) unary_expression -> . K_FALSE
    (44) boolean_expression -> . boolean_expression OR boolean_term
    (45) boolean_expression -> . boolean_term
    (60) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (61) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (62) arithmetic_expression -> . arithmetic_term
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN
    (46) boolean_term -> . boolean_term AND boolean_factor
    (47) boolean_term -> . boolean_factor
    (63) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (65) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (66) arithmetic_term -> . arithmetic_factor
    (48) boolean_factor -> . LPAREN boolean_expression RPAREN
    (49) boolean_factor -> . unary_expression comparator unary_expression
    (50) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (51) boolean_factor -> . string_expression comparator string_expression
    (52) boolean_factor -> . unary_expression
    (53) boolean_factor -> . NEG boolean_factor
    (67) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (68) arithmetic_factor -> . number
    (69) arithmetic_factor -> . function_call_statement
    (70) arithmetic_factor -> . MINUS arithmetic_factor
    (71) number -> . INTEGER
    (72) number -> . DOUBLE

    STRING          shift and go to state 51
    ID              shift and go to state 42
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 44
    K_TRUE          shift and go to state 31
    K_FALSE         shift and go to state 46
    LPAREN          shift and go to state 39
    NEG             shift and go to state 29
    MINUS           shift and go to state 33

    arithmetic_expression          shift and go to state 49
    string_expression              shift and go to state 50
    number                         shift and go to state 41
    unary_expression               shift and go to state 48
    boolean_expression             shift and go to state 52
    arithmetic_factor              shift and go to state 34
    boolean_term                   shift and go to state 30
    function_call_statement        shift and go to state 45
    arithmetic_term                shift and go to state 32
    boolean_factor                 shift and go to state 40
    expression                     shift and go to state 53

state 27

    (8) function_call_statement -> ID LPAREN . parameter_list RPAREN
    (9) function_call_statement -> ID LPAREN . RPAREN
    (10) parameter_list -> . parameter_list COMMA expression
    (11) parameter_list -> . expression
    (29) expression -> . string_expression
    (30) expression -> . unary_expression
    (31) expression -> . boolean_expression
    (32) expression -> . arithmetic_expression
    (33) string_expression -> . string_expression PLUS string_term
    (34) string_expression -> . STRING
    (37) unary_expression -> . ID
    (38) unary_expression -> . STRING
    (39) unary_expression -> . INTEGER
    (40) unary_expression -> . function_call_statement
    (41) unary_expression -> . DOUBLE
    (42) unary_expression -> . K_TRUE
    (43) unary_expression -> . K_FALSE
    (44) boolean_expression -> . boolean_expression OR boolean_term
    (45) boolean_expression -> . boolean_term
    (60) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (61) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (62) arithmetic_expression -> . arithmetic_term
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN
    (46) boolean_term -> . boolean_term AND boolean_factor
    (47) boolean_term -> . boolean_factor
    (63) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (65) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (66) arithmetic_term -> . arithmetic_factor
    (48) boolean_factor -> . LPAREN boolean_expression RPAREN
    (49) boolean_factor -> . unary_expression comparator unary_expression
    (50) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (51) boolean_factor -> . string_expression comparator string_expression
    (52) boolean_factor -> . unary_expression
    (53) boolean_factor -> . NEG boolean_factor
    (67) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (68) arithmetic_factor -> . number
    (69) arithmetic_factor -> . function_call_statement
    (70) arithmetic_factor -> . MINUS arithmetic_factor
    (71) number -> . INTEGER
    (72) number -> . DOUBLE

    RPAREN          shift and go to state 54
    STRING          shift and go to state 51
    ID              shift and go to state 42
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 44
    K_TRUE          shift and go to state 31
    K_FALSE         shift and go to state 46
    LPAREN          shift and go to state 39
    NEG             shift and go to state 29
    MINUS           shift and go to state 33

    arithmetic_expression          shift and go to state 49
    string_expression              shift and go to state 50
    number                         shift and go to state 41
    parameter_list                 shift and go to state 55
    unary_expression               shift and go to state 48
    boolean_expression             shift and go to state 52
    arithmetic_factor              shift and go to state 34
    boolean_term                   shift and go to state 30
    function_call_statement        shift and go to state 45
    arithmetic_term                shift and go to state 32
    boolean_factor                 shift and go to state 40
    expression                     shift and go to state 56

state 28

    (49) boolean_factor -> unary_expression . comparator unary_expression
    (52) boolean_factor -> unary_expression .
    (54) comparator -> . GT
    (55) comparator -> . LT
    (56) comparator -> . GEQ
    (57) comparator -> . LEQ
    (58) comparator -> . EQ
    (59) comparator -> . NEQ

    AND             reduce using rule 52 (boolean_factor -> unary_expression .)
    RPAREN          reduce using rule 52 (boolean_factor -> unary_expression .)
    OR              reduce using rule 52 (boolean_factor -> unary_expression .)
    ID              reduce using rule 52 (boolean_factor -> unary_expression .)
    K_IF            reduce using rule 52 (boolean_factor -> unary_expression .)
    K_LIST          reduce using rule 52 (boolean_factor -> unary_expression .)
    K_DICT          reduce using rule 52 (boolean_factor -> unary_expression .)
    K_SET           reduce using rule 52 (boolean_factor -> unary_expression .)
    K_INT           reduce using rule 52 (boolean_factor -> unary_expression .)
    K_DOUBLE        reduce using rule 52 (boolean_factor -> unary_expression .)
    K_STRING        reduce using rule 52 (boolean_factor -> unary_expression .)
    K_BOOL          reduce using rule 52 (boolean_factor -> unary_expression .)
    K_WINDOW        reduce using rule 52 (boolean_factor -> unary_expression .)
    K_SHAPE         reduce using rule 52 (boolean_factor -> unary_expression .)
    K_TRIANGLE      reduce using rule 52 (boolean_factor -> unary_expression .)
    K_RECTANGLE     reduce using rule 52 (boolean_factor -> unary_expression .)
    K_CIRCLE        reduce using rule 52 (boolean_factor -> unary_expression .)
    K_TEXT          reduce using rule 52 (boolean_factor -> unary_expression .)
    $end            reduce using rule 52 (boolean_factor -> unary_expression .)
    K_EL            reduce using rule 52 (boolean_factor -> unary_expression .)
    K_EF            reduce using rule 52 (boolean_factor -> unary_expression .)
    K_END           reduce using rule 52 (boolean_factor -> unary_expression .)
    COMMA           reduce using rule 52 (boolean_factor -> unary_expression .)
    GT              shift and go to state 58
    LT              shift and go to state 61
    GEQ             shift and go to state 57
    LEQ             shift and go to state 60
    EQ              shift and go to state 62
    NEQ             shift and go to state 63

    comparator                     shift and go to state 59

state 29

    (53) boolean_factor -> NEG . boolean_factor
    (48) boolean_factor -> . LPAREN boolean_expression RPAREN
    (49) boolean_factor -> . unary_expression comparator unary_expression
    (50) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (51) boolean_factor -> . string_expression comparator string_expression
    (52) boolean_factor -> . unary_expression
    (53) boolean_factor -> . NEG boolean_factor
    (37) unary_expression -> . ID
    (38) unary_expression -> . STRING
    (39) unary_expression -> . INTEGER
    (40) unary_expression -> . function_call_statement
    (41) unary_expression -> . DOUBLE
    (42) unary_expression -> . K_TRUE
    (43) unary_expression -> . K_FALSE
    (60) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (61) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (62) arithmetic_expression -> . arithmetic_term
    (33) string_expression -> . string_expression PLUS string_term
    (34) string_expression -> . STRING
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN
    (63) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (65) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (66) arithmetic_term -> . arithmetic_factor
    (67) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (68) arithmetic_factor -> . number
    (69) arithmetic_factor -> . function_call_statement
    (70) arithmetic_factor -> . MINUS arithmetic_factor
    (71) number -> . INTEGER
    (72) number -> . DOUBLE

    LPAREN          shift and go to state 39
    NEG             shift and go to state 29
    ID              shift and go to state 42
    STRING          shift and go to state 38
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 44
    K_TRUE          shift and go to state 31
    K_FALSE         shift and go to state 46
    MINUS           shift and go to state 33

    arithmetic_expression          shift and go to state 36
    string_expression              shift and go to state 37
    unary_expression               shift and go to state 28
    arithmetic_factor              shift and go to state 34
    function_call_statement        shift and go to state 45
    number                         shift and go to state 41
    arithmetic_term                shift and go to state 32
    boolean_factor                 shift and go to state 64

state 30

    (45) boolean_expression -> boolean_term .
    (46) boolean_term -> boolean_term . AND boolean_factor

    OR              reduce using rule 45 (boolean_expression -> boolean_term .)
    ID              reduce using rule 45 (boolean_expression -> boolean_term .)
    K_IF            reduce using rule 45 (boolean_expression -> boolean_term .)
    K_LIST          reduce using rule 45 (boolean_expression -> boolean_term .)
    K_DICT          reduce using rule 45 (boolean_expression -> boolean_term .)
    K_SET           reduce using rule 45 (boolean_expression -> boolean_term .)
    K_INT           reduce using rule 45 (boolean_expression -> boolean_term .)
    K_DOUBLE        reduce using rule 45 (boolean_expression -> boolean_term .)
    K_STRING        reduce using rule 45 (boolean_expression -> boolean_term .)
    K_BOOL          reduce using rule 45 (boolean_expression -> boolean_term .)
    K_WINDOW        reduce using rule 45 (boolean_expression -> boolean_term .)
    K_SHAPE         reduce using rule 45 (boolean_expression -> boolean_term .)
    K_TRIANGLE      reduce using rule 45 (boolean_expression -> boolean_term .)
    K_RECTANGLE     reduce using rule 45 (boolean_expression -> boolean_term .)
    K_CIRCLE        reduce using rule 45 (boolean_expression -> boolean_term .)
    K_TEXT          reduce using rule 45 (boolean_expression -> boolean_term .)
    $end            reduce using rule 45 (boolean_expression -> boolean_term .)
    K_EL            reduce using rule 45 (boolean_expression -> boolean_term .)
    K_EF            reduce using rule 45 (boolean_expression -> boolean_term .)
    K_END           reduce using rule 45 (boolean_expression -> boolean_term .)
    RPAREN          reduce using rule 45 (boolean_expression -> boolean_term .)
    COMMA           reduce using rule 45 (boolean_expression -> boolean_term .)
    AND             shift and go to state 65


state 31

    (42) unary_expression -> K_TRUE .

    GT              reduce using rule 42 (unary_expression -> K_TRUE .)
    LT              reduce using rule 42 (unary_expression -> K_TRUE .)
    GEQ             reduce using rule 42 (unary_expression -> K_TRUE .)
    LEQ             reduce using rule 42 (unary_expression -> K_TRUE .)
    EQ              reduce using rule 42 (unary_expression -> K_TRUE .)
    NEQ             reduce using rule 42 (unary_expression -> K_TRUE .)
    AND             reduce using rule 42 (unary_expression -> K_TRUE .)
    RPAREN          reduce using rule 42 (unary_expression -> K_TRUE .)
    OR              reduce using rule 42 (unary_expression -> K_TRUE .)
    ID              reduce using rule 42 (unary_expression -> K_TRUE .)
    K_IF            reduce using rule 42 (unary_expression -> K_TRUE .)
    K_LIST          reduce using rule 42 (unary_expression -> K_TRUE .)
    K_DICT          reduce using rule 42 (unary_expression -> K_TRUE .)
    K_SET           reduce using rule 42 (unary_expression -> K_TRUE .)
    K_INT           reduce using rule 42 (unary_expression -> K_TRUE .)
    K_DOUBLE        reduce using rule 42 (unary_expression -> K_TRUE .)
    K_STRING        reduce using rule 42 (unary_expression -> K_TRUE .)
    K_BOOL          reduce using rule 42 (unary_expression -> K_TRUE .)
    K_WINDOW        reduce using rule 42 (unary_expression -> K_TRUE .)
    K_SHAPE         reduce using rule 42 (unary_expression -> K_TRUE .)
    K_TRIANGLE      reduce using rule 42 (unary_expression -> K_TRUE .)
    K_RECTANGLE     reduce using rule 42 (unary_expression -> K_TRUE .)
    K_CIRCLE        reduce using rule 42 (unary_expression -> K_TRUE .)
    K_TEXT          reduce using rule 42 (unary_expression -> K_TRUE .)
    $end            reduce using rule 42 (unary_expression -> K_TRUE .)
    K_EL            reduce using rule 42 (unary_expression -> K_TRUE .)
    K_EF            reduce using rule 42 (unary_expression -> K_TRUE .)
    K_END           reduce using rule 42 (unary_expression -> K_TRUE .)
    COMMA           reduce using rule 42 (unary_expression -> K_TRUE .)


state 32

    (62) arithmetic_expression -> arithmetic_term .
    (63) arithmetic_term -> arithmetic_term . TIMES arithmetic_factor
    (64) arithmetic_term -> arithmetic_term . DIVIDE arithmetic_factor
    (65) arithmetic_term -> arithmetic_term . MOD arithmetic_factor

    PLUS            reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    MINUS           reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    GT              reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    LT              reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    GEQ             reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    LEQ             reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    EQ              reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    NEQ             reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    ID              reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    K_IF            reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    K_LIST          reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    K_DICT          reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    K_SET           reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    K_INT           reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    K_DOUBLE        reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    K_STRING        reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    K_BOOL          reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    K_WINDOW        reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    K_SHAPE         reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    K_TRIANGLE      reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    K_RECTANGLE     reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    K_CIRCLE        reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    K_TEXT          reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    $end            reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    K_EL            reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    K_EF            reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    K_END           reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    RPAREN          reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    COMMA           reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    AND             reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    OR              reduce using rule 62 (arithmetic_expression -> arithmetic_term .)
    TIMES           shift and go to state 68
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 66


state 33

    (70) arithmetic_factor -> MINUS . arithmetic_factor
    (67) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (68) arithmetic_factor -> . number
    (69) arithmetic_factor -> . function_call_statement
    (70) arithmetic_factor -> . MINUS arithmetic_factor
    (71) number -> . INTEGER
    (72) number -> . DOUBLE
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 73
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 74
    DOUBLE          shift and go to state 70
    ID              shift and go to state 72

    number                         shift and go to state 41
    function_call_statement        shift and go to state 71
    arithmetic_factor              shift and go to state 69

state 34

    (66) arithmetic_term -> arithmetic_factor .

    TIMES           reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    DIVIDE          reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    MOD             reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    PLUS            reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    MINUS           reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    GT              reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    LT              reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    GEQ             reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    LEQ             reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    EQ              reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    NEQ             reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    ID              reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    K_IF            reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    K_LIST          reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    K_DICT          reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    K_SET           reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    K_INT           reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    K_DOUBLE        reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    K_STRING        reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    K_BOOL          reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    K_WINDOW        reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    K_SHAPE         reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    K_TRIANGLE      reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    K_RECTANGLE     reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    K_CIRCLE        reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    K_TEXT          reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    $end            reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    K_EL            reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    K_EF            reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    K_END           reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    RPAREN          reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    COMMA           reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    AND             reduce using rule 66 (arithmetic_term -> arithmetic_factor .)
    OR              reduce using rule 66 (arithmetic_term -> arithmetic_factor .)


state 35

    (39) unary_expression -> INTEGER .
    (71) number -> INTEGER .

  ! reduce/reduce conflict for GT resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for LT resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for GEQ resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for LEQ resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for EQ resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for NEQ resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for ID resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_IF resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_LIST resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_DICT resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_SET resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_INT resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_STRING resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for $end resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_EL resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_EF resolved using rule 39 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_END resolved using rule 39 (unary_expression -> INTEGER .)
    GT              reduce using rule 39 (unary_expression -> INTEGER .)
    LT              reduce using rule 39 (unary_expression -> INTEGER .)
    GEQ             reduce using rule 39 (unary_expression -> INTEGER .)
    LEQ             reduce using rule 39 (unary_expression -> INTEGER .)
    EQ              reduce using rule 39 (unary_expression -> INTEGER .)
    NEQ             reduce using rule 39 (unary_expression -> INTEGER .)
    AND             reduce using rule 39 (unary_expression -> INTEGER .)
    RPAREN          reduce using rule 39 (unary_expression -> INTEGER .)
    OR              reduce using rule 39 (unary_expression -> INTEGER .)
    ID              reduce using rule 39 (unary_expression -> INTEGER .)
    K_IF            reduce using rule 39 (unary_expression -> INTEGER .)
    K_LIST          reduce using rule 39 (unary_expression -> INTEGER .)
    K_DICT          reduce using rule 39 (unary_expression -> INTEGER .)
    K_SET           reduce using rule 39 (unary_expression -> INTEGER .)
    K_INT           reduce using rule 39 (unary_expression -> INTEGER .)
    K_DOUBLE        reduce using rule 39 (unary_expression -> INTEGER .)
    K_STRING        reduce using rule 39 (unary_expression -> INTEGER .)
    K_BOOL          reduce using rule 39 (unary_expression -> INTEGER .)
    K_WINDOW        reduce using rule 39 (unary_expression -> INTEGER .)
    K_SHAPE         reduce using rule 39 (unary_expression -> INTEGER .)
    K_TRIANGLE      reduce using rule 39 (unary_expression -> INTEGER .)
    K_RECTANGLE     reduce using rule 39 (unary_expression -> INTEGER .)
    K_CIRCLE        reduce using rule 39 (unary_expression -> INTEGER .)
    K_TEXT          reduce using rule 39 (unary_expression -> INTEGER .)
    $end            reduce using rule 39 (unary_expression -> INTEGER .)
    K_EL            reduce using rule 39 (unary_expression -> INTEGER .)
    K_EF            reduce using rule 39 (unary_expression -> INTEGER .)
    K_END           reduce using rule 39 (unary_expression -> INTEGER .)
    COMMA           reduce using rule 39 (unary_expression -> INTEGER .)
    TIMES           reduce using rule 71 (number -> INTEGER .)
    DIVIDE          reduce using rule 71 (number -> INTEGER .)
    MOD             reduce using rule 71 (number -> INTEGER .)
    PLUS            reduce using rule 71 (number -> INTEGER .)
    MINUS           reduce using rule 71 (number -> INTEGER .)

  ! GT              [ reduce using rule 71 (number -> INTEGER .) ]
  ! LT              [ reduce using rule 71 (number -> INTEGER .) ]
  ! GEQ             [ reduce using rule 71 (number -> INTEGER .) ]
  ! LEQ             [ reduce using rule 71 (number -> INTEGER .) ]
  ! EQ              [ reduce using rule 71 (number -> INTEGER .) ]
  ! NEQ             [ reduce using rule 71 (number -> INTEGER .) ]
  ! RPAREN          [ reduce using rule 71 (number -> INTEGER .) ]
  ! COMMA           [ reduce using rule 71 (number -> INTEGER .) ]
  ! ID              [ reduce using rule 71 (number -> INTEGER .) ]
  ! K_IF            [ reduce using rule 71 (number -> INTEGER .) ]
  ! K_LIST          [ reduce using rule 71 (number -> INTEGER .) ]
  ! K_DICT          [ reduce using rule 71 (number -> INTEGER .) ]
  ! K_SET           [ reduce using rule 71 (number -> INTEGER .) ]
  ! K_INT           [ reduce using rule 71 (number -> INTEGER .) ]
  ! K_DOUBLE        [ reduce using rule 71 (number -> INTEGER .) ]
  ! K_STRING        [ reduce using rule 71 (number -> INTEGER .) ]
  ! K_BOOL          [ reduce using rule 71 (number -> INTEGER .) ]
  ! K_WINDOW        [ reduce using rule 71 (number -> INTEGER .) ]
  ! K_SHAPE         [ reduce using rule 71 (number -> INTEGER .) ]
  ! K_TRIANGLE      [ reduce using rule 71 (number -> INTEGER .) ]
  ! K_RECTANGLE     [ reduce using rule 71 (number -> INTEGER .) ]
  ! K_CIRCLE        [ reduce using rule 71 (number -> INTEGER .) ]
  ! K_TEXT          [ reduce using rule 71 (number -> INTEGER .) ]
  ! $end            [ reduce using rule 71 (number -> INTEGER .) ]
  ! K_EL            [ reduce using rule 71 (number -> INTEGER .) ]
  ! K_EF            [ reduce using rule 71 (number -> INTEGER .) ]
  ! K_END           [ reduce using rule 71 (number -> INTEGER .) ]


state 36

    (50) boolean_factor -> arithmetic_expression . comparator arithmetic_expression
    (60) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (61) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term
    (54) comparator -> . GT
    (55) comparator -> . LT
    (56) comparator -> . GEQ
    (57) comparator -> . LEQ
    (58) comparator -> . EQ
    (59) comparator -> . NEQ

    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    GT              shift and go to state 58
    LT              shift and go to state 61
    GEQ             shift and go to state 57
    LEQ             shift and go to state 60
    EQ              shift and go to state 62
    NEQ             shift and go to state 63

    comparator                     shift and go to state 75

state 37

    (51) boolean_factor -> string_expression . comparator string_expression
    (33) string_expression -> string_expression . PLUS string_term
    (54) comparator -> . GT
    (55) comparator -> . LT
    (56) comparator -> . GEQ
    (57) comparator -> . LEQ
    (58) comparator -> . EQ
    (59) comparator -> . NEQ

    PLUS            shift and go to state 79
    GT              shift and go to state 58
    LT              shift and go to state 61
    GEQ             shift and go to state 57
    LEQ             shift and go to state 60
    EQ              shift and go to state 62
    NEQ             shift and go to state 63

    comparator                     shift and go to state 78

state 38

    (38) unary_expression -> STRING .
    (34) string_expression -> STRING .

  ! reduce/reduce conflict for GT resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for LT resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for GEQ resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for LEQ resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for EQ resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for NEQ resolved using rule 34 (string_expression -> STRING .)
    AND             reduce using rule 38 (unary_expression -> STRING .)
    RPAREN          reduce using rule 38 (unary_expression -> STRING .)
    OR              reduce using rule 38 (unary_expression -> STRING .)
    ID              reduce using rule 38 (unary_expression -> STRING .)
    K_IF            reduce using rule 38 (unary_expression -> STRING .)
    K_LIST          reduce using rule 38 (unary_expression -> STRING .)
    K_DICT          reduce using rule 38 (unary_expression -> STRING .)
    K_SET           reduce using rule 38 (unary_expression -> STRING .)
    K_INT           reduce using rule 38 (unary_expression -> STRING .)
    K_DOUBLE        reduce using rule 38 (unary_expression -> STRING .)
    K_STRING        reduce using rule 38 (unary_expression -> STRING .)
    K_BOOL          reduce using rule 38 (unary_expression -> STRING .)
    K_WINDOW        reduce using rule 38 (unary_expression -> STRING .)
    K_SHAPE         reduce using rule 38 (unary_expression -> STRING .)
    K_TRIANGLE      reduce using rule 38 (unary_expression -> STRING .)
    K_RECTANGLE     reduce using rule 38 (unary_expression -> STRING .)
    K_CIRCLE        reduce using rule 38 (unary_expression -> STRING .)
    K_TEXT          reduce using rule 38 (unary_expression -> STRING .)
    $end            reduce using rule 38 (unary_expression -> STRING .)
    K_EL            reduce using rule 38 (unary_expression -> STRING .)
    K_EF            reduce using rule 38 (unary_expression -> STRING .)
    K_END           reduce using rule 38 (unary_expression -> STRING .)
    COMMA           reduce using rule 38 (unary_expression -> STRING .)
    PLUS            reduce using rule 34 (string_expression -> STRING .)
    GT              reduce using rule 34 (string_expression -> STRING .)
    LT              reduce using rule 34 (string_expression -> STRING .)
    GEQ             reduce using rule 34 (string_expression -> STRING .)
    LEQ             reduce using rule 34 (string_expression -> STRING .)
    EQ              reduce using rule 34 (string_expression -> STRING .)
    NEQ             reduce using rule 34 (string_expression -> STRING .)

  ! GT              [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! LT              [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! GEQ             [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! LEQ             [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! EQ              [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! NEQ             [ reduce using rule 38 (unary_expression -> STRING .) ]


state 39

    (48) boolean_factor -> LPAREN . boolean_expression RPAREN
    (67) arithmetic_factor -> LPAREN . arithmetic_expression RPAREN
    (44) boolean_expression -> . boolean_expression OR boolean_term
    (45) boolean_expression -> . boolean_term
    (60) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (61) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (62) arithmetic_expression -> . arithmetic_term
    (46) boolean_term -> . boolean_term AND boolean_factor
    (47) boolean_term -> . boolean_factor
    (63) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (65) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (66) arithmetic_term -> . arithmetic_factor
    (48) boolean_factor -> . LPAREN boolean_expression RPAREN
    (49) boolean_factor -> . unary_expression comparator unary_expression
    (50) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (51) boolean_factor -> . string_expression comparator string_expression
    (52) boolean_factor -> . unary_expression
    (53) boolean_factor -> . NEG boolean_factor
    (67) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (68) arithmetic_factor -> . number
    (69) arithmetic_factor -> . function_call_statement
    (70) arithmetic_factor -> . MINUS arithmetic_factor
    (37) unary_expression -> . ID
    (38) unary_expression -> . STRING
    (39) unary_expression -> . INTEGER
    (40) unary_expression -> . function_call_statement
    (41) unary_expression -> . DOUBLE
    (42) unary_expression -> . K_TRUE
    (43) unary_expression -> . K_FALSE
    (33) string_expression -> . string_expression PLUS string_term
    (34) string_expression -> . STRING
    (71) number -> . INTEGER
    (72) number -> . DOUBLE
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 39
    NEG             shift and go to state 29
    MINUS           shift and go to state 33
    ID              shift and go to state 42
    STRING          shift and go to state 38
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 44
    K_TRUE          shift and go to state 31
    K_FALSE         shift and go to state 46

    arithmetic_expression          shift and go to state 81
    string_expression              shift and go to state 37
    unary_expression               shift and go to state 28
    arithmetic_factor              shift and go to state 34
    boolean_expression             shift and go to state 82
    boolean_term                   shift and go to state 30
    arithmetic_term                shift and go to state 32
    number                         shift and go to state 41
    function_call_statement        shift and go to state 80
    boolean_factor                 shift and go to state 40

state 40

    (47) boolean_term -> boolean_factor .

    AND             reduce using rule 47 (boolean_term -> boolean_factor .)
    RPAREN          reduce using rule 47 (boolean_term -> boolean_factor .)
    OR              reduce using rule 47 (boolean_term -> boolean_factor .)
    ID              reduce using rule 47 (boolean_term -> boolean_factor .)
    K_IF            reduce using rule 47 (boolean_term -> boolean_factor .)
    K_LIST          reduce using rule 47 (boolean_term -> boolean_factor .)
    K_DICT          reduce using rule 47 (boolean_term -> boolean_factor .)
    K_SET           reduce using rule 47 (boolean_term -> boolean_factor .)
    K_INT           reduce using rule 47 (boolean_term -> boolean_factor .)
    K_DOUBLE        reduce using rule 47 (boolean_term -> boolean_factor .)
    K_STRING        reduce using rule 47 (boolean_term -> boolean_factor .)
    K_BOOL          reduce using rule 47 (boolean_term -> boolean_factor .)
    K_WINDOW        reduce using rule 47 (boolean_term -> boolean_factor .)
    K_SHAPE         reduce using rule 47 (boolean_term -> boolean_factor .)
    K_TRIANGLE      reduce using rule 47 (boolean_term -> boolean_factor .)
    K_RECTANGLE     reduce using rule 47 (boolean_term -> boolean_factor .)
    K_CIRCLE        reduce using rule 47 (boolean_term -> boolean_factor .)
    K_TEXT          reduce using rule 47 (boolean_term -> boolean_factor .)
    $end            reduce using rule 47 (boolean_term -> boolean_factor .)
    K_EL            reduce using rule 47 (boolean_term -> boolean_factor .)
    K_EF            reduce using rule 47 (boolean_term -> boolean_factor .)
    K_END           reduce using rule 47 (boolean_term -> boolean_factor .)
    COMMA           reduce using rule 47 (boolean_term -> boolean_factor .)


state 41

    (68) arithmetic_factor -> number .

    TIMES           reduce using rule 68 (arithmetic_factor -> number .)
    DIVIDE          reduce using rule 68 (arithmetic_factor -> number .)
    MOD             reduce using rule 68 (arithmetic_factor -> number .)
    PLUS            reduce using rule 68 (arithmetic_factor -> number .)
    MINUS           reduce using rule 68 (arithmetic_factor -> number .)
    GT              reduce using rule 68 (arithmetic_factor -> number .)
    LT              reduce using rule 68 (arithmetic_factor -> number .)
    GEQ             reduce using rule 68 (arithmetic_factor -> number .)
    LEQ             reduce using rule 68 (arithmetic_factor -> number .)
    EQ              reduce using rule 68 (arithmetic_factor -> number .)
    NEQ             reduce using rule 68 (arithmetic_factor -> number .)
    ID              reduce using rule 68 (arithmetic_factor -> number .)
    K_IF            reduce using rule 68 (arithmetic_factor -> number .)
    K_LIST          reduce using rule 68 (arithmetic_factor -> number .)
    K_DICT          reduce using rule 68 (arithmetic_factor -> number .)
    K_SET           reduce using rule 68 (arithmetic_factor -> number .)
    K_INT           reduce using rule 68 (arithmetic_factor -> number .)
    K_DOUBLE        reduce using rule 68 (arithmetic_factor -> number .)
    K_STRING        reduce using rule 68 (arithmetic_factor -> number .)
    K_BOOL          reduce using rule 68 (arithmetic_factor -> number .)
    K_WINDOW        reduce using rule 68 (arithmetic_factor -> number .)
    K_SHAPE         reduce using rule 68 (arithmetic_factor -> number .)
    K_TRIANGLE      reduce using rule 68 (arithmetic_factor -> number .)
    K_RECTANGLE     reduce using rule 68 (arithmetic_factor -> number .)
    K_CIRCLE        reduce using rule 68 (arithmetic_factor -> number .)
    K_TEXT          reduce using rule 68 (arithmetic_factor -> number .)
    $end            reduce using rule 68 (arithmetic_factor -> number .)
    K_EL            reduce using rule 68 (arithmetic_factor -> number .)
    K_EF            reduce using rule 68 (arithmetic_factor -> number .)
    K_END           reduce using rule 68 (arithmetic_factor -> number .)
    RPAREN          reduce using rule 68 (arithmetic_factor -> number .)
    COMMA           reduce using rule 68 (arithmetic_factor -> number .)
    AND             reduce using rule 68 (arithmetic_factor -> number .)
    OR              reduce using rule 68 (arithmetic_factor -> number .)


state 42

    (37) unary_expression -> ID .
    (8) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (9) function_call_statement -> ID . LPAREN RPAREN

    GT              reduce using rule 37 (unary_expression -> ID .)
    LT              reduce using rule 37 (unary_expression -> ID .)
    GEQ             reduce using rule 37 (unary_expression -> ID .)
    LEQ             reduce using rule 37 (unary_expression -> ID .)
    EQ              reduce using rule 37 (unary_expression -> ID .)
    NEQ             reduce using rule 37 (unary_expression -> ID .)
    AND             reduce using rule 37 (unary_expression -> ID .)
    RPAREN          reduce using rule 37 (unary_expression -> ID .)
    OR              reduce using rule 37 (unary_expression -> ID .)
    ID              reduce using rule 37 (unary_expression -> ID .)
    K_IF            reduce using rule 37 (unary_expression -> ID .)
    K_LIST          reduce using rule 37 (unary_expression -> ID .)
    K_DICT          reduce using rule 37 (unary_expression -> ID .)
    K_SET           reduce using rule 37 (unary_expression -> ID .)
    K_INT           reduce using rule 37 (unary_expression -> ID .)
    K_DOUBLE        reduce using rule 37 (unary_expression -> ID .)
    K_STRING        reduce using rule 37 (unary_expression -> ID .)
    K_BOOL          reduce using rule 37 (unary_expression -> ID .)
    K_WINDOW        reduce using rule 37 (unary_expression -> ID .)
    K_SHAPE         reduce using rule 37 (unary_expression -> ID .)
    K_TRIANGLE      reduce using rule 37 (unary_expression -> ID .)
    K_RECTANGLE     reduce using rule 37 (unary_expression -> ID .)
    K_CIRCLE        reduce using rule 37 (unary_expression -> ID .)
    K_TEXT          reduce using rule 37 (unary_expression -> ID .)
    $end            reduce using rule 37 (unary_expression -> ID .)
    K_EL            reduce using rule 37 (unary_expression -> ID .)
    K_EF            reduce using rule 37 (unary_expression -> ID .)
    K_END           reduce using rule 37 (unary_expression -> ID .)
    COMMA           reduce using rule 37 (unary_expression -> ID .)
    LPAREN          shift and go to state 27


state 43

    (73) selection_statement -> K_IF LPAREN boolean_expression . RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (44) boolean_expression -> boolean_expression . OR boolean_term

    RPAREN          shift and go to state 83
    OR              shift and go to state 84


state 44

    (41) unary_expression -> DOUBLE .
    (72) number -> DOUBLE .

  ! reduce/reduce conflict for GT resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for LT resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for GEQ resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for LEQ resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for EQ resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for NEQ resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for ID resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_IF resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_LIST resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_DICT resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_SET resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_INT resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_STRING resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for $end resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_EL resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_EF resolved using rule 41 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_END resolved using rule 41 (unary_expression -> DOUBLE .)
    GT              reduce using rule 41 (unary_expression -> DOUBLE .)
    LT              reduce using rule 41 (unary_expression -> DOUBLE .)
    GEQ             reduce using rule 41 (unary_expression -> DOUBLE .)
    LEQ             reduce using rule 41 (unary_expression -> DOUBLE .)
    EQ              reduce using rule 41 (unary_expression -> DOUBLE .)
    NEQ             reduce using rule 41 (unary_expression -> DOUBLE .)
    AND             reduce using rule 41 (unary_expression -> DOUBLE .)
    RPAREN          reduce using rule 41 (unary_expression -> DOUBLE .)
    OR              reduce using rule 41 (unary_expression -> DOUBLE .)
    ID              reduce using rule 41 (unary_expression -> DOUBLE .)
    K_IF            reduce using rule 41 (unary_expression -> DOUBLE .)
    K_LIST          reduce using rule 41 (unary_expression -> DOUBLE .)
    K_DICT          reduce using rule 41 (unary_expression -> DOUBLE .)
    K_SET           reduce using rule 41 (unary_expression -> DOUBLE .)
    K_INT           reduce using rule 41 (unary_expression -> DOUBLE .)
    K_DOUBLE        reduce using rule 41 (unary_expression -> DOUBLE .)
    K_STRING        reduce using rule 41 (unary_expression -> DOUBLE .)
    K_BOOL          reduce using rule 41 (unary_expression -> DOUBLE .)
    K_WINDOW        reduce using rule 41 (unary_expression -> DOUBLE .)
    K_SHAPE         reduce using rule 41 (unary_expression -> DOUBLE .)
    K_TRIANGLE      reduce using rule 41 (unary_expression -> DOUBLE .)
    K_RECTANGLE     reduce using rule 41 (unary_expression -> DOUBLE .)
    K_CIRCLE        reduce using rule 41 (unary_expression -> DOUBLE .)
    K_TEXT          reduce using rule 41 (unary_expression -> DOUBLE .)
    $end            reduce using rule 41 (unary_expression -> DOUBLE .)
    K_EL            reduce using rule 41 (unary_expression -> DOUBLE .)
    K_EF            reduce using rule 41 (unary_expression -> DOUBLE .)
    K_END           reduce using rule 41 (unary_expression -> DOUBLE .)
    COMMA           reduce using rule 41 (unary_expression -> DOUBLE .)
    TIMES           reduce using rule 72 (number -> DOUBLE .)
    DIVIDE          reduce using rule 72 (number -> DOUBLE .)
    MOD             reduce using rule 72 (number -> DOUBLE .)
    PLUS            reduce using rule 72 (number -> DOUBLE .)
    MINUS           reduce using rule 72 (number -> DOUBLE .)

  ! GT              [ reduce using rule 72 (number -> DOUBLE .) ]
  ! LT              [ reduce using rule 72 (number -> DOUBLE .) ]
  ! GEQ             [ reduce using rule 72 (number -> DOUBLE .) ]
  ! LEQ             [ reduce using rule 72 (number -> DOUBLE .) ]
  ! EQ              [ reduce using rule 72 (number -> DOUBLE .) ]
  ! NEQ             [ reduce using rule 72 (number -> DOUBLE .) ]
  ! RPAREN          [ reduce using rule 72 (number -> DOUBLE .) ]
  ! COMMA           [ reduce using rule 72 (number -> DOUBLE .) ]
  ! ID              [ reduce using rule 72 (number -> DOUBLE .) ]
  ! K_IF            [ reduce using rule 72 (number -> DOUBLE .) ]
  ! K_LIST          [ reduce using rule 72 (number -> DOUBLE .) ]
  ! K_DICT          [ reduce using rule 72 (number -> DOUBLE .) ]
  ! K_SET           [ reduce using rule 72 (number -> DOUBLE .) ]
  ! K_INT           [ reduce using rule 72 (number -> DOUBLE .) ]
  ! K_DOUBLE        [ reduce using rule 72 (number -> DOUBLE .) ]
  ! K_STRING        [ reduce using rule 72 (number -> DOUBLE .) ]
  ! K_BOOL          [ reduce using rule 72 (number -> DOUBLE .) ]
  ! K_WINDOW        [ reduce using rule 72 (number -> DOUBLE .) ]
  ! K_SHAPE         [ reduce using rule 72 (number -> DOUBLE .) ]
  ! K_TRIANGLE      [ reduce using rule 72 (number -> DOUBLE .) ]
  ! K_RECTANGLE     [ reduce using rule 72 (number -> DOUBLE .) ]
  ! K_CIRCLE        [ reduce using rule 72 (number -> DOUBLE .) ]
  ! K_TEXT          [ reduce using rule 72 (number -> DOUBLE .) ]
  ! $end            [ reduce using rule 72 (number -> DOUBLE .) ]
  ! K_EL            [ reduce using rule 72 (number -> DOUBLE .) ]
  ! K_EF            [ reduce using rule 72 (number -> DOUBLE .) ]
  ! K_END           [ reduce using rule 72 (number -> DOUBLE .) ]


state 45

    (40) unary_expression -> function_call_statement .
    (69) arithmetic_factor -> function_call_statement .

  ! reduce/reduce conflict for GT resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for LT resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for GEQ resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for LEQ resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for EQ resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for NEQ resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for ID resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_IF resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_LIST resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_DICT resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_SET resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_INT resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_STRING resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for $end resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_EL resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_EF resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_END resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for RPAREN resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for COMMA resolved using rule 40 (unary_expression -> function_call_statement .)
    GT              reduce using rule 40 (unary_expression -> function_call_statement .)
    LT              reduce using rule 40 (unary_expression -> function_call_statement .)
    GEQ             reduce using rule 40 (unary_expression -> function_call_statement .)
    LEQ             reduce using rule 40 (unary_expression -> function_call_statement .)
    EQ              reduce using rule 40 (unary_expression -> function_call_statement .)
    NEQ             reduce using rule 40 (unary_expression -> function_call_statement .)
    AND             reduce using rule 40 (unary_expression -> function_call_statement .)
    RPAREN          reduce using rule 40 (unary_expression -> function_call_statement .)
    OR              reduce using rule 40 (unary_expression -> function_call_statement .)
    ID              reduce using rule 40 (unary_expression -> function_call_statement .)
    K_IF            reduce using rule 40 (unary_expression -> function_call_statement .)
    K_LIST          reduce using rule 40 (unary_expression -> function_call_statement .)
    K_DICT          reduce using rule 40 (unary_expression -> function_call_statement .)
    K_SET           reduce using rule 40 (unary_expression -> function_call_statement .)
    K_INT           reduce using rule 40 (unary_expression -> function_call_statement .)
    K_DOUBLE        reduce using rule 40 (unary_expression -> function_call_statement .)
    K_STRING        reduce using rule 40 (unary_expression -> function_call_statement .)
    K_BOOL          reduce using rule 40 (unary_expression -> function_call_statement .)
    K_WINDOW        reduce using rule 40 (unary_expression -> function_call_statement .)
    K_SHAPE         reduce using rule 40 (unary_expression -> function_call_statement .)
    K_TRIANGLE      reduce using rule 40 (unary_expression -> function_call_statement .)
    K_RECTANGLE     reduce using rule 40 (unary_expression -> function_call_statement .)
    K_CIRCLE        reduce using rule 40 (unary_expression -> function_call_statement .)
    K_TEXT          reduce using rule 40 (unary_expression -> function_call_statement .)
    $end            reduce using rule 40 (unary_expression -> function_call_statement .)
    K_EL            reduce using rule 40 (unary_expression -> function_call_statement .)
    K_EF            reduce using rule 40 (unary_expression -> function_call_statement .)
    K_END           reduce using rule 40 (unary_expression -> function_call_statement .)
    COMMA           reduce using rule 40 (unary_expression -> function_call_statement .)
    TIMES           reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    DIVIDE          reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    MOD             reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    PLUS            reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    MINUS           reduce using rule 69 (arithmetic_factor -> function_call_statement .)

  ! GT              [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! LT              [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! GEQ             [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! LEQ             [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! EQ              [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! NEQ             [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! ID              [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! K_IF            [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! K_LIST          [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! K_DICT          [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! K_SET           [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! K_INT           [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! K_DOUBLE        [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! K_STRING        [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! K_BOOL          [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! K_WINDOW        [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! K_SHAPE         [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! K_TRIANGLE      [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! K_RECTANGLE     [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! K_CIRCLE        [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! K_TEXT          [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! $end            [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! K_EL            [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! K_EF            [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! K_END           [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! RPAREN          [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! COMMA           [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]


state 46

    (43) unary_expression -> K_FALSE .

    GT              reduce using rule 43 (unary_expression -> K_FALSE .)
    LT              reduce using rule 43 (unary_expression -> K_FALSE .)
    GEQ             reduce using rule 43 (unary_expression -> K_FALSE .)
    LEQ             reduce using rule 43 (unary_expression -> K_FALSE .)
    EQ              reduce using rule 43 (unary_expression -> K_FALSE .)
    NEQ             reduce using rule 43 (unary_expression -> K_FALSE .)
    AND             reduce using rule 43 (unary_expression -> K_FALSE .)
    RPAREN          reduce using rule 43 (unary_expression -> K_FALSE .)
    OR              reduce using rule 43 (unary_expression -> K_FALSE .)
    ID              reduce using rule 43 (unary_expression -> K_FALSE .)
    K_IF            reduce using rule 43 (unary_expression -> K_FALSE .)
    K_LIST          reduce using rule 43 (unary_expression -> K_FALSE .)
    K_DICT          reduce using rule 43 (unary_expression -> K_FALSE .)
    K_SET           reduce using rule 43 (unary_expression -> K_FALSE .)
    K_INT           reduce using rule 43 (unary_expression -> K_FALSE .)
    K_DOUBLE        reduce using rule 43 (unary_expression -> K_FALSE .)
    K_STRING        reduce using rule 43 (unary_expression -> K_FALSE .)
    K_BOOL          reduce using rule 43 (unary_expression -> K_FALSE .)
    K_WINDOW        reduce using rule 43 (unary_expression -> K_FALSE .)
    K_SHAPE         reduce using rule 43 (unary_expression -> K_FALSE .)
    K_TRIANGLE      reduce using rule 43 (unary_expression -> K_FALSE .)
    K_RECTANGLE     reduce using rule 43 (unary_expression -> K_FALSE .)
    K_CIRCLE        reduce using rule 43 (unary_expression -> K_FALSE .)
    K_TEXT          reduce using rule 43 (unary_expression -> K_FALSE .)
    $end            reduce using rule 43 (unary_expression -> K_FALSE .)
    K_EL            reduce using rule 43 (unary_expression -> K_FALSE .)
    K_EF            reduce using rule 43 (unary_expression -> K_FALSE .)
    K_END           reduce using rule 43 (unary_expression -> K_FALSE .)
    COMMA           reduce using rule 43 (unary_expression -> K_FALSE .)


state 47

    (12) variable_declaration -> pre_type_modifier type ID .
    (13) variable_declaration -> pre_type_modifier type ID . ASSIGN expression

    ID              reduce using rule 12 (variable_declaration -> pre_type_modifier type ID .)
    K_IF            reduce using rule 12 (variable_declaration -> pre_type_modifier type ID .)
    K_LIST          reduce using rule 12 (variable_declaration -> pre_type_modifier type ID .)
    K_DICT          reduce using rule 12 (variable_declaration -> pre_type_modifier type ID .)
    K_SET           reduce using rule 12 (variable_declaration -> pre_type_modifier type ID .)
    K_INT           reduce using rule 12 (variable_declaration -> pre_type_modifier type ID .)
    K_DOUBLE        reduce using rule 12 (variable_declaration -> pre_type_modifier type ID .)
    K_STRING        reduce using rule 12 (variable_declaration -> pre_type_modifier type ID .)
    K_BOOL          reduce using rule 12 (variable_declaration -> pre_type_modifier type ID .)
    K_WINDOW        reduce using rule 12 (variable_declaration -> pre_type_modifier type ID .)
    K_SHAPE         reduce using rule 12 (variable_declaration -> pre_type_modifier type ID .)
    K_TRIANGLE      reduce using rule 12 (variable_declaration -> pre_type_modifier type ID .)
    K_RECTANGLE     reduce using rule 12 (variable_declaration -> pre_type_modifier type ID .)
    K_CIRCLE        reduce using rule 12 (variable_declaration -> pre_type_modifier type ID .)
    K_TEXT          reduce using rule 12 (variable_declaration -> pre_type_modifier type ID .)
    K_END           reduce using rule 12 (variable_declaration -> pre_type_modifier type ID .)
    $end            reduce using rule 12 (variable_declaration -> pre_type_modifier type ID .)
    K_EL            reduce using rule 12 (variable_declaration -> pre_type_modifier type ID .)
    K_EF            reduce using rule 12 (variable_declaration -> pre_type_modifier type ID .)
    ASSIGN          shift and go to state 85


state 48

    (30) expression -> unary_expression .
    (49) boolean_factor -> unary_expression . comparator unary_expression
    (52) boolean_factor -> unary_expression .
    (54) comparator -> . GT
    (55) comparator -> . LT
    (56) comparator -> . GEQ
    (57) comparator -> . LEQ
    (58) comparator -> . EQ
    (59) comparator -> . NEQ

  ! reduce/reduce conflict for ID resolved using rule 30 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_IF resolved using rule 30 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_LIST resolved using rule 30 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_DICT resolved using rule 30 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_SET resolved using rule 30 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_INT resolved using rule 30 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 30 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_STRING resolved using rule 30 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 30 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 30 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 30 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 30 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 30 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 30 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 30 (expression -> unary_expression .)
  ! reduce/reduce conflict for $end resolved using rule 30 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_EL resolved using rule 30 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_EF resolved using rule 30 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_END resolved using rule 30 (expression -> unary_expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 30 (expression -> unary_expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 30 (expression -> unary_expression .)
    RPAREN          reduce using rule 30 (expression -> unary_expression .)
    COMMA           reduce using rule 30 (expression -> unary_expression .)
    ID              reduce using rule 30 (expression -> unary_expression .)
    K_IF            reduce using rule 30 (expression -> unary_expression .)
    K_LIST          reduce using rule 30 (expression -> unary_expression .)
    K_DICT          reduce using rule 30 (expression -> unary_expression .)
    K_SET           reduce using rule 30 (expression -> unary_expression .)
    K_INT           reduce using rule 30 (expression -> unary_expression .)
    K_DOUBLE        reduce using rule 30 (expression -> unary_expression .)
    K_STRING        reduce using rule 30 (expression -> unary_expression .)
    K_BOOL          reduce using rule 30 (expression -> unary_expression .)
    K_WINDOW        reduce using rule 30 (expression -> unary_expression .)
    K_SHAPE         reduce using rule 30 (expression -> unary_expression .)
    K_TRIANGLE      reduce using rule 30 (expression -> unary_expression .)
    K_RECTANGLE     reduce using rule 30 (expression -> unary_expression .)
    K_CIRCLE        reduce using rule 30 (expression -> unary_expression .)
    K_TEXT          reduce using rule 30 (expression -> unary_expression .)
    $end            reduce using rule 30 (expression -> unary_expression .)
    K_EL            reduce using rule 30 (expression -> unary_expression .)
    K_EF            reduce using rule 30 (expression -> unary_expression .)
    K_END           reduce using rule 30 (expression -> unary_expression .)
    AND             reduce using rule 52 (boolean_factor -> unary_expression .)
    OR              reduce using rule 52 (boolean_factor -> unary_expression .)
    GT              shift and go to state 58
    LT              shift and go to state 61
    GEQ             shift and go to state 57
    LEQ             shift and go to state 60
    EQ              shift and go to state 62
    NEQ             shift and go to state 63

  ! ID              [ reduce using rule 52 (boolean_factor -> unary_expression .) ]
  ! K_IF            [ reduce using rule 52 (boolean_factor -> unary_expression .) ]
  ! K_LIST          [ reduce using rule 52 (boolean_factor -> unary_expression .) ]
  ! K_DICT          [ reduce using rule 52 (boolean_factor -> unary_expression .) ]
  ! K_SET           [ reduce using rule 52 (boolean_factor -> unary_expression .) ]
  ! K_INT           [ reduce using rule 52 (boolean_factor -> unary_expression .) ]
  ! K_DOUBLE        [ reduce using rule 52 (boolean_factor -> unary_expression .) ]
  ! K_STRING        [ reduce using rule 52 (boolean_factor -> unary_expression .) ]
  ! K_BOOL          [ reduce using rule 52 (boolean_factor -> unary_expression .) ]
  ! K_WINDOW        [ reduce using rule 52 (boolean_factor -> unary_expression .) ]
  ! K_SHAPE         [ reduce using rule 52 (boolean_factor -> unary_expression .) ]
  ! K_TRIANGLE      [ reduce using rule 52 (boolean_factor -> unary_expression .) ]
  ! K_RECTANGLE     [ reduce using rule 52 (boolean_factor -> unary_expression .) ]
  ! K_CIRCLE        [ reduce using rule 52 (boolean_factor -> unary_expression .) ]
  ! K_TEXT          [ reduce using rule 52 (boolean_factor -> unary_expression .) ]
  ! $end            [ reduce using rule 52 (boolean_factor -> unary_expression .) ]
  ! K_EL            [ reduce using rule 52 (boolean_factor -> unary_expression .) ]
  ! K_EF            [ reduce using rule 52 (boolean_factor -> unary_expression .) ]
  ! K_END           [ reduce using rule 52 (boolean_factor -> unary_expression .) ]
  ! RPAREN          [ reduce using rule 52 (boolean_factor -> unary_expression .) ]
  ! COMMA           [ reduce using rule 52 (boolean_factor -> unary_expression .) ]

    comparator                     shift and go to state 59

state 49

    (32) expression -> arithmetic_expression .
    (60) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (61) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term
    (50) boolean_factor -> arithmetic_expression . comparator arithmetic_expression
    (54) comparator -> . GT
    (55) comparator -> . LT
    (56) comparator -> . GEQ
    (57) comparator -> . LEQ
    (58) comparator -> . EQ
    (59) comparator -> . NEQ

    RPAREN          reduce using rule 32 (expression -> arithmetic_expression .)
    COMMA           reduce using rule 32 (expression -> arithmetic_expression .)
    ID              reduce using rule 32 (expression -> arithmetic_expression .)
    K_IF            reduce using rule 32 (expression -> arithmetic_expression .)
    K_LIST          reduce using rule 32 (expression -> arithmetic_expression .)
    K_DICT          reduce using rule 32 (expression -> arithmetic_expression .)
    K_SET           reduce using rule 32 (expression -> arithmetic_expression .)
    K_INT           reduce using rule 32 (expression -> arithmetic_expression .)
    K_DOUBLE        reduce using rule 32 (expression -> arithmetic_expression .)
    K_STRING        reduce using rule 32 (expression -> arithmetic_expression .)
    K_BOOL          reduce using rule 32 (expression -> arithmetic_expression .)
    K_WINDOW        reduce using rule 32 (expression -> arithmetic_expression .)
    K_SHAPE         reduce using rule 32 (expression -> arithmetic_expression .)
    K_TRIANGLE      reduce using rule 32 (expression -> arithmetic_expression .)
    K_RECTANGLE     reduce using rule 32 (expression -> arithmetic_expression .)
    K_CIRCLE        reduce using rule 32 (expression -> arithmetic_expression .)
    K_TEXT          reduce using rule 32 (expression -> arithmetic_expression .)
    $end            reduce using rule 32 (expression -> arithmetic_expression .)
    K_EL            reduce using rule 32 (expression -> arithmetic_expression .)
    K_EF            reduce using rule 32 (expression -> arithmetic_expression .)
    K_END           reduce using rule 32 (expression -> arithmetic_expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    GT              shift and go to state 58
    LT              shift and go to state 61
    GEQ             shift and go to state 57
    LEQ             shift and go to state 60
    EQ              shift and go to state 62
    NEQ             shift and go to state 63

    comparator                     shift and go to state 75

state 50

    (29) expression -> string_expression .
    (33) string_expression -> string_expression . PLUS string_term
    (51) boolean_factor -> string_expression . comparator string_expression
    (54) comparator -> . GT
    (55) comparator -> . LT
    (56) comparator -> . GEQ
    (57) comparator -> . LEQ
    (58) comparator -> . EQ
    (59) comparator -> . NEQ

    RPAREN          reduce using rule 29 (expression -> string_expression .)
    COMMA           reduce using rule 29 (expression -> string_expression .)
    ID              reduce using rule 29 (expression -> string_expression .)
    K_IF            reduce using rule 29 (expression -> string_expression .)
    K_LIST          reduce using rule 29 (expression -> string_expression .)
    K_DICT          reduce using rule 29 (expression -> string_expression .)
    K_SET           reduce using rule 29 (expression -> string_expression .)
    K_INT           reduce using rule 29 (expression -> string_expression .)
    K_DOUBLE        reduce using rule 29 (expression -> string_expression .)
    K_STRING        reduce using rule 29 (expression -> string_expression .)
    K_BOOL          reduce using rule 29 (expression -> string_expression .)
    K_WINDOW        reduce using rule 29 (expression -> string_expression .)
    K_SHAPE         reduce using rule 29 (expression -> string_expression .)
    K_TRIANGLE      reduce using rule 29 (expression -> string_expression .)
    K_RECTANGLE     reduce using rule 29 (expression -> string_expression .)
    K_CIRCLE        reduce using rule 29 (expression -> string_expression .)
    K_TEXT          reduce using rule 29 (expression -> string_expression .)
    $end            reduce using rule 29 (expression -> string_expression .)
    K_EL            reduce using rule 29 (expression -> string_expression .)
    K_EF            reduce using rule 29 (expression -> string_expression .)
    K_END           reduce using rule 29 (expression -> string_expression .)
    PLUS            shift and go to state 79
    GT              shift and go to state 58
    LT              shift and go to state 61
    GEQ             shift and go to state 57
    LEQ             shift and go to state 60
    EQ              shift and go to state 62
    NEQ             shift and go to state 63

    comparator                     shift and go to state 78

state 51

    (34) string_expression -> STRING .
    (38) unary_expression -> STRING .

  ! reduce/reduce conflict for GT resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for LT resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for GEQ resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for LEQ resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for EQ resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for NEQ resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for ID resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_IF resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_LIST resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_DICT resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_SET resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_INT resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_STRING resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for $end resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_EL resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_EF resolved using rule 34 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_END resolved using rule 34 (string_expression -> STRING .)
    PLUS            reduce using rule 34 (string_expression -> STRING .)
    GT              reduce using rule 34 (string_expression -> STRING .)
    LT              reduce using rule 34 (string_expression -> STRING .)
    GEQ             reduce using rule 34 (string_expression -> STRING .)
    LEQ             reduce using rule 34 (string_expression -> STRING .)
    EQ              reduce using rule 34 (string_expression -> STRING .)
    NEQ             reduce using rule 34 (string_expression -> STRING .)
    RPAREN          reduce using rule 34 (string_expression -> STRING .)
    COMMA           reduce using rule 34 (string_expression -> STRING .)
    ID              reduce using rule 34 (string_expression -> STRING .)
    K_IF            reduce using rule 34 (string_expression -> STRING .)
    K_LIST          reduce using rule 34 (string_expression -> STRING .)
    K_DICT          reduce using rule 34 (string_expression -> STRING .)
    K_SET           reduce using rule 34 (string_expression -> STRING .)
    K_INT           reduce using rule 34 (string_expression -> STRING .)
    K_DOUBLE        reduce using rule 34 (string_expression -> STRING .)
    K_STRING        reduce using rule 34 (string_expression -> STRING .)
    K_BOOL          reduce using rule 34 (string_expression -> STRING .)
    K_WINDOW        reduce using rule 34 (string_expression -> STRING .)
    K_SHAPE         reduce using rule 34 (string_expression -> STRING .)
    K_TRIANGLE      reduce using rule 34 (string_expression -> STRING .)
    K_RECTANGLE     reduce using rule 34 (string_expression -> STRING .)
    K_CIRCLE        reduce using rule 34 (string_expression -> STRING .)
    K_TEXT          reduce using rule 34 (string_expression -> STRING .)
    $end            reduce using rule 34 (string_expression -> STRING .)
    K_EL            reduce using rule 34 (string_expression -> STRING .)
    K_EF            reduce using rule 34 (string_expression -> STRING .)
    K_END           reduce using rule 34 (string_expression -> STRING .)
    AND             reduce using rule 38 (unary_expression -> STRING .)
    OR              reduce using rule 38 (unary_expression -> STRING .)

  ! GT              [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! LT              [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! GEQ             [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! LEQ             [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! EQ              [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! NEQ             [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! RPAREN          [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! COMMA           [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! ID              [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! K_IF            [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! K_LIST          [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! K_DICT          [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! K_SET           [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! K_INT           [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! K_DOUBLE        [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! K_STRING        [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! K_BOOL          [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! K_WINDOW        [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! K_SHAPE         [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! K_TRIANGLE      [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! K_RECTANGLE     [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! K_CIRCLE        [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! K_TEXT          [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! $end            [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! K_EL            [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! K_EF            [ reduce using rule 38 (unary_expression -> STRING .) ]
  ! K_END           [ reduce using rule 38 (unary_expression -> STRING .) ]


state 52

    (31) expression -> boolean_expression .
    (44) boolean_expression -> boolean_expression . OR boolean_term

    RPAREN          reduce using rule 31 (expression -> boolean_expression .)
    COMMA           reduce using rule 31 (expression -> boolean_expression .)
    ID              reduce using rule 31 (expression -> boolean_expression .)
    K_IF            reduce using rule 31 (expression -> boolean_expression .)
    K_LIST          reduce using rule 31 (expression -> boolean_expression .)
    K_DICT          reduce using rule 31 (expression -> boolean_expression .)
    K_SET           reduce using rule 31 (expression -> boolean_expression .)
    K_INT           reduce using rule 31 (expression -> boolean_expression .)
    K_DOUBLE        reduce using rule 31 (expression -> boolean_expression .)
    K_STRING        reduce using rule 31 (expression -> boolean_expression .)
    K_BOOL          reduce using rule 31 (expression -> boolean_expression .)
    K_WINDOW        reduce using rule 31 (expression -> boolean_expression .)
    K_SHAPE         reduce using rule 31 (expression -> boolean_expression .)
    K_TRIANGLE      reduce using rule 31 (expression -> boolean_expression .)
    K_RECTANGLE     reduce using rule 31 (expression -> boolean_expression .)
    K_CIRCLE        reduce using rule 31 (expression -> boolean_expression .)
    K_TEXT          reduce using rule 31 (expression -> boolean_expression .)
    $end            reduce using rule 31 (expression -> boolean_expression .)
    K_EL            reduce using rule 31 (expression -> boolean_expression .)
    K_EF            reduce using rule 31 (expression -> boolean_expression .)
    K_END           reduce using rule 31 (expression -> boolean_expression .)
    OR              shift and go to state 84


state 53

    (14) variable_declaration -> ID ASSIGN expression .

    ID              reduce using rule 14 (variable_declaration -> ID ASSIGN expression .)
    K_IF            reduce using rule 14 (variable_declaration -> ID ASSIGN expression .)
    K_LIST          reduce using rule 14 (variable_declaration -> ID ASSIGN expression .)
    K_DICT          reduce using rule 14 (variable_declaration -> ID ASSIGN expression .)
    K_SET           reduce using rule 14 (variable_declaration -> ID ASSIGN expression .)
    K_INT           reduce using rule 14 (variable_declaration -> ID ASSIGN expression .)
    K_DOUBLE        reduce using rule 14 (variable_declaration -> ID ASSIGN expression .)
    K_STRING        reduce using rule 14 (variable_declaration -> ID ASSIGN expression .)
    K_BOOL          reduce using rule 14 (variable_declaration -> ID ASSIGN expression .)
    K_WINDOW        reduce using rule 14 (variable_declaration -> ID ASSIGN expression .)
    K_SHAPE         reduce using rule 14 (variable_declaration -> ID ASSIGN expression .)
    K_TRIANGLE      reduce using rule 14 (variable_declaration -> ID ASSIGN expression .)
    K_RECTANGLE     reduce using rule 14 (variable_declaration -> ID ASSIGN expression .)
    K_CIRCLE        reduce using rule 14 (variable_declaration -> ID ASSIGN expression .)
    K_TEXT          reduce using rule 14 (variable_declaration -> ID ASSIGN expression .)
    K_END           reduce using rule 14 (variable_declaration -> ID ASSIGN expression .)
    $end            reduce using rule 14 (variable_declaration -> ID ASSIGN expression .)
    K_EL            reduce using rule 14 (variable_declaration -> ID ASSIGN expression .)
    K_EF            reduce using rule 14 (variable_declaration -> ID ASSIGN expression .)


state 54

    (9) function_call_statement -> ID LPAREN RPAREN .

    GT              reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    LT              reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    GEQ             reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    LEQ             reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    EQ              reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    NEQ             reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    AND             reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    OR              reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    MOD             reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    ID              reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    K_IF            reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    K_LIST          reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    K_DICT          reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    K_SET           reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    K_INT           reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    K_DOUBLE        reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    K_STRING        reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    K_BOOL          reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    K_WINDOW        reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    K_SHAPE         reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    K_TRIANGLE      reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    K_RECTANGLE     reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    K_CIRCLE        reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    K_TEXT          reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    $end            reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    K_EL            reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    K_EF            reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    K_END           reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 9 (function_call_statement -> ID LPAREN RPAREN .)


state 55

    (8) function_call_statement -> ID LPAREN parameter_list . RPAREN
    (10) parameter_list -> parameter_list . COMMA expression

    RPAREN          shift and go to state 86
    COMMA           shift and go to state 87


state 56

    (11) parameter_list -> expression .

    RPAREN          reduce using rule 11 (parameter_list -> expression .)
    COMMA           reduce using rule 11 (parameter_list -> expression .)


state 57

    (56) comparator -> GEQ .

    STRING          reduce using rule 56 (comparator -> GEQ .)
    ID              reduce using rule 56 (comparator -> GEQ .)
    INTEGER         reduce using rule 56 (comparator -> GEQ .)
    DOUBLE          reduce using rule 56 (comparator -> GEQ .)
    K_TRUE          reduce using rule 56 (comparator -> GEQ .)
    K_FALSE         reduce using rule 56 (comparator -> GEQ .)
    LPAREN          reduce using rule 56 (comparator -> GEQ .)
    MINUS           reduce using rule 56 (comparator -> GEQ .)


state 58

    (54) comparator -> GT .

    STRING          reduce using rule 54 (comparator -> GT .)
    ID              reduce using rule 54 (comparator -> GT .)
    INTEGER         reduce using rule 54 (comparator -> GT .)
    DOUBLE          reduce using rule 54 (comparator -> GT .)
    K_TRUE          reduce using rule 54 (comparator -> GT .)
    K_FALSE         reduce using rule 54 (comparator -> GT .)
    LPAREN          reduce using rule 54 (comparator -> GT .)
    MINUS           reduce using rule 54 (comparator -> GT .)


state 59

    (49) boolean_factor -> unary_expression comparator . unary_expression
    (37) unary_expression -> . ID
    (38) unary_expression -> . STRING
    (39) unary_expression -> . INTEGER
    (40) unary_expression -> . function_call_statement
    (41) unary_expression -> . DOUBLE
    (42) unary_expression -> . K_TRUE
    (43) unary_expression -> . K_FALSE
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN

    ID              shift and go to state 42
    STRING          shift and go to state 88
    INTEGER         shift and go to state 91
    DOUBLE          shift and go to state 89
    K_TRUE          shift and go to state 31
    K_FALSE         shift and go to state 46

    function_call_statement        shift and go to state 90
    unary_expression               shift and go to state 92

state 60

    (57) comparator -> LEQ .

    STRING          reduce using rule 57 (comparator -> LEQ .)
    ID              reduce using rule 57 (comparator -> LEQ .)
    INTEGER         reduce using rule 57 (comparator -> LEQ .)
    DOUBLE          reduce using rule 57 (comparator -> LEQ .)
    K_TRUE          reduce using rule 57 (comparator -> LEQ .)
    K_FALSE         reduce using rule 57 (comparator -> LEQ .)
    LPAREN          reduce using rule 57 (comparator -> LEQ .)
    MINUS           reduce using rule 57 (comparator -> LEQ .)


state 61

    (55) comparator -> LT .

    STRING          reduce using rule 55 (comparator -> LT .)
    ID              reduce using rule 55 (comparator -> LT .)
    INTEGER         reduce using rule 55 (comparator -> LT .)
    DOUBLE          reduce using rule 55 (comparator -> LT .)
    K_TRUE          reduce using rule 55 (comparator -> LT .)
    K_FALSE         reduce using rule 55 (comparator -> LT .)
    LPAREN          reduce using rule 55 (comparator -> LT .)
    MINUS           reduce using rule 55 (comparator -> LT .)


state 62

    (58) comparator -> EQ .

    STRING          reduce using rule 58 (comparator -> EQ .)
    ID              reduce using rule 58 (comparator -> EQ .)
    INTEGER         reduce using rule 58 (comparator -> EQ .)
    DOUBLE          reduce using rule 58 (comparator -> EQ .)
    K_TRUE          reduce using rule 58 (comparator -> EQ .)
    K_FALSE         reduce using rule 58 (comparator -> EQ .)
    LPAREN          reduce using rule 58 (comparator -> EQ .)
    MINUS           reduce using rule 58 (comparator -> EQ .)


state 63

    (59) comparator -> NEQ .

    STRING          reduce using rule 59 (comparator -> NEQ .)
    ID              reduce using rule 59 (comparator -> NEQ .)
    INTEGER         reduce using rule 59 (comparator -> NEQ .)
    DOUBLE          reduce using rule 59 (comparator -> NEQ .)
    K_TRUE          reduce using rule 59 (comparator -> NEQ .)
    K_FALSE         reduce using rule 59 (comparator -> NEQ .)
    LPAREN          reduce using rule 59 (comparator -> NEQ .)
    MINUS           reduce using rule 59 (comparator -> NEQ .)


state 64

    (53) boolean_factor -> NEG boolean_factor .

    AND             reduce using rule 53 (boolean_factor -> NEG boolean_factor .)
    RPAREN          reduce using rule 53 (boolean_factor -> NEG boolean_factor .)
    OR              reduce using rule 53 (boolean_factor -> NEG boolean_factor .)
    ID              reduce using rule 53 (boolean_factor -> NEG boolean_factor .)
    K_IF            reduce using rule 53 (boolean_factor -> NEG boolean_factor .)
    K_LIST          reduce using rule 53 (boolean_factor -> NEG boolean_factor .)
    K_DICT          reduce using rule 53 (boolean_factor -> NEG boolean_factor .)
    K_SET           reduce using rule 53 (boolean_factor -> NEG boolean_factor .)
    K_INT           reduce using rule 53 (boolean_factor -> NEG boolean_factor .)
    K_DOUBLE        reduce using rule 53 (boolean_factor -> NEG boolean_factor .)
    K_STRING        reduce using rule 53 (boolean_factor -> NEG boolean_factor .)
    K_BOOL          reduce using rule 53 (boolean_factor -> NEG boolean_factor .)
    K_WINDOW        reduce using rule 53 (boolean_factor -> NEG boolean_factor .)
    K_SHAPE         reduce using rule 53 (boolean_factor -> NEG boolean_factor .)
    K_TRIANGLE      reduce using rule 53 (boolean_factor -> NEG boolean_factor .)
    K_RECTANGLE     reduce using rule 53 (boolean_factor -> NEG boolean_factor .)
    K_CIRCLE        reduce using rule 53 (boolean_factor -> NEG boolean_factor .)
    K_TEXT          reduce using rule 53 (boolean_factor -> NEG boolean_factor .)
    $end            reduce using rule 53 (boolean_factor -> NEG boolean_factor .)
    K_EL            reduce using rule 53 (boolean_factor -> NEG boolean_factor .)
    K_EF            reduce using rule 53 (boolean_factor -> NEG boolean_factor .)
    K_END           reduce using rule 53 (boolean_factor -> NEG boolean_factor .)
    COMMA           reduce using rule 53 (boolean_factor -> NEG boolean_factor .)


state 65

    (46) boolean_term -> boolean_term AND . boolean_factor
    (48) boolean_factor -> . LPAREN boolean_expression RPAREN
    (49) boolean_factor -> . unary_expression comparator unary_expression
    (50) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (51) boolean_factor -> . string_expression comparator string_expression
    (52) boolean_factor -> . unary_expression
    (53) boolean_factor -> . NEG boolean_factor
    (37) unary_expression -> . ID
    (38) unary_expression -> . STRING
    (39) unary_expression -> . INTEGER
    (40) unary_expression -> . function_call_statement
    (41) unary_expression -> . DOUBLE
    (42) unary_expression -> . K_TRUE
    (43) unary_expression -> . K_FALSE
    (60) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (61) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (62) arithmetic_expression -> . arithmetic_term
    (33) string_expression -> . string_expression PLUS string_term
    (34) string_expression -> . STRING
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN
    (63) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (65) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (66) arithmetic_term -> . arithmetic_factor
    (67) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (68) arithmetic_factor -> . number
    (69) arithmetic_factor -> . function_call_statement
    (70) arithmetic_factor -> . MINUS arithmetic_factor
    (71) number -> . INTEGER
    (72) number -> . DOUBLE

    LPAREN          shift and go to state 39
    NEG             shift and go to state 29
    ID              shift and go to state 42
    STRING          shift and go to state 38
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 44
    K_TRUE          shift and go to state 31
    K_FALSE         shift and go to state 46
    MINUS           shift and go to state 33

    arithmetic_expression          shift and go to state 36
    string_expression              shift and go to state 37
    unary_expression               shift and go to state 28
    arithmetic_factor              shift and go to state 34
    function_call_statement        shift and go to state 45
    number                         shift and go to state 41
    arithmetic_term                shift and go to state 32
    boolean_factor                 shift and go to state 93

state 66

    (65) arithmetic_term -> arithmetic_term MOD . arithmetic_factor
    (67) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (68) arithmetic_factor -> . number
    (69) arithmetic_factor -> . function_call_statement
    (70) arithmetic_factor -> . MINUS arithmetic_factor
    (71) number -> . INTEGER
    (72) number -> . DOUBLE
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 73
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 74
    DOUBLE          shift and go to state 70
    ID              shift and go to state 72

    arithmetic_factor              shift and go to state 94
    number                         shift and go to state 41
    function_call_statement        shift and go to state 71

state 67

    (64) arithmetic_term -> arithmetic_term DIVIDE . arithmetic_factor
    (67) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (68) arithmetic_factor -> . number
    (69) arithmetic_factor -> . function_call_statement
    (70) arithmetic_factor -> . MINUS arithmetic_factor
    (71) number -> . INTEGER
    (72) number -> . DOUBLE
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 73
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 74
    DOUBLE          shift and go to state 70
    ID              shift and go to state 72

    arithmetic_factor              shift and go to state 95
    number                         shift and go to state 41
    function_call_statement        shift and go to state 71

state 68

    (63) arithmetic_term -> arithmetic_term TIMES . arithmetic_factor
    (67) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (68) arithmetic_factor -> . number
    (69) arithmetic_factor -> . function_call_statement
    (70) arithmetic_factor -> . MINUS arithmetic_factor
    (71) number -> . INTEGER
    (72) number -> . DOUBLE
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 73
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 74
    DOUBLE          shift and go to state 70
    ID              shift and go to state 72

    arithmetic_factor              shift and go to state 96
    number                         shift and go to state 41
    function_call_statement        shift and go to state 71

state 69

    (70) arithmetic_factor -> MINUS arithmetic_factor .

    TIMES           reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    DIVIDE          reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    MOD             reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    PLUS            reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    MINUS           reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    GT              reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    LT              reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    GEQ             reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    LEQ             reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    EQ              reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    NEQ             reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    ID              reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_IF            reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_LIST          reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_DICT          reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_SET           reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_INT           reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_DOUBLE        reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_STRING        reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_BOOL          reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_WINDOW        reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_SHAPE         reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_TRIANGLE      reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_RECTANGLE     reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_CIRCLE        reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_TEXT          reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    $end            reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_EL            reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_EF            reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_END           reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    RPAREN          reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    COMMA           reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    AND             reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)
    OR              reduce using rule 70 (arithmetic_factor -> MINUS arithmetic_factor .)


state 70

    (72) number -> DOUBLE .

    TIMES           reduce using rule 72 (number -> DOUBLE .)
    DIVIDE          reduce using rule 72 (number -> DOUBLE .)
    MOD             reduce using rule 72 (number -> DOUBLE .)
    RPAREN          reduce using rule 72 (number -> DOUBLE .)
    PLUS            reduce using rule 72 (number -> DOUBLE .)
    MINUS           reduce using rule 72 (number -> DOUBLE .)
    GT              reduce using rule 72 (number -> DOUBLE .)
    LT              reduce using rule 72 (number -> DOUBLE .)
    GEQ             reduce using rule 72 (number -> DOUBLE .)
    LEQ             reduce using rule 72 (number -> DOUBLE .)
    EQ              reduce using rule 72 (number -> DOUBLE .)
    NEQ             reduce using rule 72 (number -> DOUBLE .)
    ID              reduce using rule 72 (number -> DOUBLE .)
    K_IF            reduce using rule 72 (number -> DOUBLE .)
    K_LIST          reduce using rule 72 (number -> DOUBLE .)
    K_DICT          reduce using rule 72 (number -> DOUBLE .)
    K_SET           reduce using rule 72 (number -> DOUBLE .)
    K_INT           reduce using rule 72 (number -> DOUBLE .)
    K_DOUBLE        reduce using rule 72 (number -> DOUBLE .)
    K_STRING        reduce using rule 72 (number -> DOUBLE .)
    K_BOOL          reduce using rule 72 (number -> DOUBLE .)
    K_WINDOW        reduce using rule 72 (number -> DOUBLE .)
    K_SHAPE         reduce using rule 72 (number -> DOUBLE .)
    K_TRIANGLE      reduce using rule 72 (number -> DOUBLE .)
    K_RECTANGLE     reduce using rule 72 (number -> DOUBLE .)
    K_CIRCLE        reduce using rule 72 (number -> DOUBLE .)
    K_TEXT          reduce using rule 72 (number -> DOUBLE .)
    $end            reduce using rule 72 (number -> DOUBLE .)
    K_EL            reduce using rule 72 (number -> DOUBLE .)
    K_EF            reduce using rule 72 (number -> DOUBLE .)
    K_END           reduce using rule 72 (number -> DOUBLE .)
    COMMA           reduce using rule 72 (number -> DOUBLE .)
    AND             reduce using rule 72 (number -> DOUBLE .)
    OR              reduce using rule 72 (number -> DOUBLE .)


state 71

    (69) arithmetic_factor -> function_call_statement .

    TIMES           reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    DIVIDE          reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    MOD             reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    PLUS            reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    MINUS           reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    GT              reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    LT              reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    GEQ             reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    LEQ             reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    EQ              reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    NEQ             reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    ID              reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    K_IF            reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    K_LIST          reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    K_DICT          reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    K_SET           reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    K_INT           reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    K_DOUBLE        reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    K_STRING        reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    K_BOOL          reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    K_WINDOW        reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    K_SHAPE         reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    K_TRIANGLE      reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    K_RECTANGLE     reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    K_CIRCLE        reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    K_TEXT          reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    $end            reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    K_EL            reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    K_EF            reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    K_END           reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    RPAREN          reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    COMMA           reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    AND             reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    OR              reduce using rule 69 (arithmetic_factor -> function_call_statement .)


state 72

    (8) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (9) function_call_statement -> ID . LPAREN RPAREN

    LPAREN          shift and go to state 27


state 73

    (67) arithmetic_factor -> LPAREN . arithmetic_expression RPAREN
    (60) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (61) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (62) arithmetic_expression -> . arithmetic_term
    (63) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (65) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (66) arithmetic_term -> . arithmetic_factor
    (67) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (68) arithmetic_factor -> . number
    (69) arithmetic_factor -> . function_call_statement
    (70) arithmetic_factor -> . MINUS arithmetic_factor
    (71) number -> . INTEGER
    (72) number -> . DOUBLE
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 73
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 74
    DOUBLE          shift and go to state 70
    ID              shift and go to state 72

    arithmetic_expression          shift and go to state 97
    arithmetic_factor              shift and go to state 34
    number                         shift and go to state 41
    function_call_statement        shift and go to state 71
    arithmetic_term                shift and go to state 32

state 74

    (71) number -> INTEGER .

    TIMES           reduce using rule 71 (number -> INTEGER .)
    DIVIDE          reduce using rule 71 (number -> INTEGER .)
    MOD             reduce using rule 71 (number -> INTEGER .)
    RPAREN          reduce using rule 71 (number -> INTEGER .)
    PLUS            reduce using rule 71 (number -> INTEGER .)
    MINUS           reduce using rule 71 (number -> INTEGER .)
    GT              reduce using rule 71 (number -> INTEGER .)
    LT              reduce using rule 71 (number -> INTEGER .)
    GEQ             reduce using rule 71 (number -> INTEGER .)
    LEQ             reduce using rule 71 (number -> INTEGER .)
    EQ              reduce using rule 71 (number -> INTEGER .)
    NEQ             reduce using rule 71 (number -> INTEGER .)
    ID              reduce using rule 71 (number -> INTEGER .)
    K_IF            reduce using rule 71 (number -> INTEGER .)
    K_LIST          reduce using rule 71 (number -> INTEGER .)
    K_DICT          reduce using rule 71 (number -> INTEGER .)
    K_SET           reduce using rule 71 (number -> INTEGER .)
    K_INT           reduce using rule 71 (number -> INTEGER .)
    K_DOUBLE        reduce using rule 71 (number -> INTEGER .)
    K_STRING        reduce using rule 71 (number -> INTEGER .)
    K_BOOL          reduce using rule 71 (number -> INTEGER .)
    K_WINDOW        reduce using rule 71 (number -> INTEGER .)
    K_SHAPE         reduce using rule 71 (number -> INTEGER .)
    K_TRIANGLE      reduce using rule 71 (number -> INTEGER .)
    K_RECTANGLE     reduce using rule 71 (number -> INTEGER .)
    K_CIRCLE        reduce using rule 71 (number -> INTEGER .)
    K_TEXT          reduce using rule 71 (number -> INTEGER .)
    $end            reduce using rule 71 (number -> INTEGER .)
    K_EL            reduce using rule 71 (number -> INTEGER .)
    K_EF            reduce using rule 71 (number -> INTEGER .)
    K_END           reduce using rule 71 (number -> INTEGER .)
    COMMA           reduce using rule 71 (number -> INTEGER .)
    AND             reduce using rule 71 (number -> INTEGER .)
    OR              reduce using rule 71 (number -> INTEGER .)


state 75

    (50) boolean_factor -> arithmetic_expression comparator . arithmetic_expression
    (60) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (61) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (62) arithmetic_expression -> . arithmetic_term
    (63) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (65) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (66) arithmetic_term -> . arithmetic_factor
    (67) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (68) arithmetic_factor -> . number
    (69) arithmetic_factor -> . function_call_statement
    (70) arithmetic_factor -> . MINUS arithmetic_factor
    (71) number -> . INTEGER
    (72) number -> . DOUBLE
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 73
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 74
    DOUBLE          shift and go to state 70
    ID              shift and go to state 72

    arithmetic_expression          shift and go to state 98
    arithmetic_factor              shift and go to state 34
    number                         shift and go to state 41
    function_call_statement        shift and go to state 71
    arithmetic_term                shift and go to state 32

state 76

    (60) arithmetic_expression -> arithmetic_expression PLUS . arithmetic_term
    (63) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (65) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (66) arithmetic_term -> . arithmetic_factor
    (67) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (68) arithmetic_factor -> . number
    (69) arithmetic_factor -> . function_call_statement
    (70) arithmetic_factor -> . MINUS arithmetic_factor
    (71) number -> . INTEGER
    (72) number -> . DOUBLE
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 73
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 74
    DOUBLE          shift and go to state 70
    ID              shift and go to state 72

    arithmetic_factor              shift and go to state 34
    number                         shift and go to state 41
    function_call_statement        shift and go to state 71
    arithmetic_term                shift and go to state 99

state 77

    (61) arithmetic_expression -> arithmetic_expression MINUS . arithmetic_term
    (63) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (65) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (66) arithmetic_term -> . arithmetic_factor
    (67) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (68) arithmetic_factor -> . number
    (69) arithmetic_factor -> . function_call_statement
    (70) arithmetic_factor -> . MINUS arithmetic_factor
    (71) number -> . INTEGER
    (72) number -> . DOUBLE
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 73
    MINUS           shift and go to state 33
    INTEGER         shift and go to state 74
    DOUBLE          shift and go to state 70
    ID              shift and go to state 72

    arithmetic_factor              shift and go to state 34
    number                         shift and go to state 41
    function_call_statement        shift and go to state 71
    arithmetic_term                shift and go to state 100

state 78

    (51) boolean_factor -> string_expression comparator . string_expression
    (33) string_expression -> . string_expression PLUS string_term
    (34) string_expression -> . STRING

    STRING          shift and go to state 102

    string_expression              shift and go to state 101

state 79

    (33) string_expression -> string_expression PLUS . string_term
    (35) string_term -> . function_call_statement
    (36) string_term -> . STRING
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN

    STRING          shift and go to state 103
    ID              shift and go to state 72

    string_term                    shift and go to state 105
    function_call_statement        shift and go to state 104

state 80

    (69) arithmetic_factor -> function_call_statement .
    (40) unary_expression -> function_call_statement .

  ! reduce/reduce conflict for GT resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for LT resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for GEQ resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for LEQ resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for EQ resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for NEQ resolved using rule 40 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for RPAREN resolved using rule 40 (unary_expression -> function_call_statement .)
    TIMES           reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    DIVIDE          reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    MOD             reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    PLUS            reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    MINUS           reduce using rule 69 (arithmetic_factor -> function_call_statement .)
    GT              reduce using rule 40 (unary_expression -> function_call_statement .)
    LT              reduce using rule 40 (unary_expression -> function_call_statement .)
    GEQ             reduce using rule 40 (unary_expression -> function_call_statement .)
    LEQ             reduce using rule 40 (unary_expression -> function_call_statement .)
    EQ              reduce using rule 40 (unary_expression -> function_call_statement .)
    NEQ             reduce using rule 40 (unary_expression -> function_call_statement .)
    AND             reduce using rule 40 (unary_expression -> function_call_statement .)
    RPAREN          reduce using rule 40 (unary_expression -> function_call_statement .)
    OR              reduce using rule 40 (unary_expression -> function_call_statement .)

  ! RPAREN          [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! GT              [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! LT              [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! GEQ             [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! LEQ             [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! EQ              [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]
  ! NEQ             [ reduce using rule 69 (arithmetic_factor -> function_call_statement .) ]


state 81

    (67) arithmetic_factor -> LPAREN arithmetic_expression . RPAREN
    (60) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (61) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term
    (50) boolean_factor -> arithmetic_expression . comparator arithmetic_expression
    (54) comparator -> . GT
    (55) comparator -> . LT
    (56) comparator -> . GEQ
    (57) comparator -> . LEQ
    (58) comparator -> . EQ
    (59) comparator -> . NEQ

    RPAREN          shift and go to state 106
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    GT              shift and go to state 58
    LT              shift and go to state 61
    GEQ             shift and go to state 57
    LEQ             shift and go to state 60
    EQ              shift and go to state 62
    NEQ             shift and go to state 63

    comparator                     shift and go to state 75

state 82

    (48) boolean_factor -> LPAREN boolean_expression . RPAREN
    (44) boolean_expression -> boolean_expression . OR boolean_term

    RPAREN          shift and go to state 107
    OR              shift and go to state 84


state 83

    (73) selection_statement -> K_IF LPAREN boolean_expression RPAREN . compound_statement_list else_if_statement_list else_statement K_END
    (79) compound_statement_list -> .
    (80) compound_statement_list -> . compound_statement_list compound_statement

    ID              reduce using rule 79 (compound_statement_list -> .)
    K_IF            reduce using rule 79 (compound_statement_list -> .)
    K_LIST          reduce using rule 79 (compound_statement_list -> .)
    K_DICT          reduce using rule 79 (compound_statement_list -> .)
    K_SET           reduce using rule 79 (compound_statement_list -> .)
    K_EL            reduce using rule 79 (compound_statement_list -> .)
    K_EF            reduce using rule 79 (compound_statement_list -> .)
    K_END           reduce using rule 79 (compound_statement_list -> .)
    K_INT           reduce using rule 79 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 79 (compound_statement_list -> .)
    K_STRING        reduce using rule 79 (compound_statement_list -> .)
    K_BOOL          reduce using rule 79 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 79 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 79 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 79 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 79 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 79 (compound_statement_list -> .)
    K_TEXT          reduce using rule 79 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 108

state 84

    (44) boolean_expression -> boolean_expression OR . boolean_term
    (46) boolean_term -> . boolean_term AND boolean_factor
    (47) boolean_term -> . boolean_factor
    (48) boolean_factor -> . LPAREN boolean_expression RPAREN
    (49) boolean_factor -> . unary_expression comparator unary_expression
    (50) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (51) boolean_factor -> . string_expression comparator string_expression
    (52) boolean_factor -> . unary_expression
    (53) boolean_factor -> . NEG boolean_factor
    (37) unary_expression -> . ID
    (38) unary_expression -> . STRING
    (39) unary_expression -> . INTEGER
    (40) unary_expression -> . function_call_statement
    (41) unary_expression -> . DOUBLE
    (42) unary_expression -> . K_TRUE
    (43) unary_expression -> . K_FALSE
    (60) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (61) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (62) arithmetic_expression -> . arithmetic_term
    (33) string_expression -> . string_expression PLUS string_term
    (34) string_expression -> . STRING
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN
    (63) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (65) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (66) arithmetic_term -> . arithmetic_factor
    (67) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (68) arithmetic_factor -> . number
    (69) arithmetic_factor -> . function_call_statement
    (70) arithmetic_factor -> . MINUS arithmetic_factor
    (71) number -> . INTEGER
    (72) number -> . DOUBLE

    LPAREN          shift and go to state 39
    NEG             shift and go to state 29
    ID              shift and go to state 42
    STRING          shift and go to state 38
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 44
    K_TRUE          shift and go to state 31
    K_FALSE         shift and go to state 46
    MINUS           shift and go to state 33

    arithmetic_expression          shift and go to state 36
    string_expression              shift and go to state 37
    unary_expression               shift and go to state 28
    arithmetic_factor              shift and go to state 34
    boolean_term                   shift and go to state 109
    function_call_statement        shift and go to state 45
    number                         shift and go to state 41
    arithmetic_term                shift and go to state 32
    boolean_factor                 shift and go to state 40

state 85

    (13) variable_declaration -> pre_type_modifier type ID ASSIGN . expression
    (29) expression -> . string_expression
    (30) expression -> . unary_expression
    (31) expression -> . boolean_expression
    (32) expression -> . arithmetic_expression
    (33) string_expression -> . string_expression PLUS string_term
    (34) string_expression -> . STRING
    (37) unary_expression -> . ID
    (38) unary_expression -> . STRING
    (39) unary_expression -> . INTEGER
    (40) unary_expression -> . function_call_statement
    (41) unary_expression -> . DOUBLE
    (42) unary_expression -> . K_TRUE
    (43) unary_expression -> . K_FALSE
    (44) boolean_expression -> . boolean_expression OR boolean_term
    (45) boolean_expression -> . boolean_term
    (60) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (61) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (62) arithmetic_expression -> . arithmetic_term
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN
    (46) boolean_term -> . boolean_term AND boolean_factor
    (47) boolean_term -> . boolean_factor
    (63) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (65) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (66) arithmetic_term -> . arithmetic_factor
    (48) boolean_factor -> . LPAREN boolean_expression RPAREN
    (49) boolean_factor -> . unary_expression comparator unary_expression
    (50) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (51) boolean_factor -> . string_expression comparator string_expression
    (52) boolean_factor -> . unary_expression
    (53) boolean_factor -> . NEG boolean_factor
    (67) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (68) arithmetic_factor -> . number
    (69) arithmetic_factor -> . function_call_statement
    (70) arithmetic_factor -> . MINUS arithmetic_factor
    (71) number -> . INTEGER
    (72) number -> . DOUBLE

    STRING          shift and go to state 51
    ID              shift and go to state 42
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 44
    K_TRUE          shift and go to state 31
    K_FALSE         shift and go to state 46
    LPAREN          shift and go to state 39
    NEG             shift and go to state 29
    MINUS           shift and go to state 33

    arithmetic_expression          shift and go to state 49
    string_expression              shift and go to state 50
    number                         shift and go to state 41
    unary_expression               shift and go to state 48
    boolean_expression             shift and go to state 52
    arithmetic_factor              shift and go to state 34
    boolean_term                   shift and go to state 30
    function_call_statement        shift and go to state 45
    arithmetic_term                shift and go to state 32
    boolean_factor                 shift and go to state 40
    expression                     shift and go to state 110

state 86

    (8) function_call_statement -> ID LPAREN parameter_list RPAREN .

    GT              reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    LT              reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    GEQ             reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    LEQ             reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    EQ              reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    NEQ             reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    AND             reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    OR              reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    MOD             reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    ID              reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_IF            reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_LIST          reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_DICT          reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_SET           reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_INT           reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_DOUBLE        reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_STRING        reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_BOOL          reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_WINDOW        reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_SHAPE         reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_TRIANGLE      reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_RECTANGLE     reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_CIRCLE        reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_TEXT          reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    $end            reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_EL            reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_EF            reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_END           reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 8 (function_call_statement -> ID LPAREN parameter_list RPAREN .)


state 87

    (10) parameter_list -> parameter_list COMMA . expression
    (29) expression -> . string_expression
    (30) expression -> . unary_expression
    (31) expression -> . boolean_expression
    (32) expression -> . arithmetic_expression
    (33) string_expression -> . string_expression PLUS string_term
    (34) string_expression -> . STRING
    (37) unary_expression -> . ID
    (38) unary_expression -> . STRING
    (39) unary_expression -> . INTEGER
    (40) unary_expression -> . function_call_statement
    (41) unary_expression -> . DOUBLE
    (42) unary_expression -> . K_TRUE
    (43) unary_expression -> . K_FALSE
    (44) boolean_expression -> . boolean_expression OR boolean_term
    (45) boolean_expression -> . boolean_term
    (60) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (61) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (62) arithmetic_expression -> . arithmetic_term
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN
    (46) boolean_term -> . boolean_term AND boolean_factor
    (47) boolean_term -> . boolean_factor
    (63) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (65) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (66) arithmetic_term -> . arithmetic_factor
    (48) boolean_factor -> . LPAREN boolean_expression RPAREN
    (49) boolean_factor -> . unary_expression comparator unary_expression
    (50) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (51) boolean_factor -> . string_expression comparator string_expression
    (52) boolean_factor -> . unary_expression
    (53) boolean_factor -> . NEG boolean_factor
    (67) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (68) arithmetic_factor -> . number
    (69) arithmetic_factor -> . function_call_statement
    (70) arithmetic_factor -> . MINUS arithmetic_factor
    (71) number -> . INTEGER
    (72) number -> . DOUBLE

    STRING          shift and go to state 51
    ID              shift and go to state 42
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 44
    K_TRUE          shift and go to state 31
    K_FALSE         shift and go to state 46
    LPAREN          shift and go to state 39
    NEG             shift and go to state 29
    MINUS           shift and go to state 33

    arithmetic_expression          shift and go to state 49
    string_expression              shift and go to state 50
    number                         shift and go to state 41
    unary_expression               shift and go to state 48
    boolean_expression             shift and go to state 52
    arithmetic_factor              shift and go to state 34
    boolean_term                   shift and go to state 30
    function_call_statement        shift and go to state 45
    arithmetic_term                shift and go to state 32
    boolean_factor                 shift and go to state 40
    expression                     shift and go to state 111

state 88

    (38) unary_expression -> STRING .

    AND             reduce using rule 38 (unary_expression -> STRING .)
    RPAREN          reduce using rule 38 (unary_expression -> STRING .)
    OR              reduce using rule 38 (unary_expression -> STRING .)
    ID              reduce using rule 38 (unary_expression -> STRING .)
    K_IF            reduce using rule 38 (unary_expression -> STRING .)
    K_LIST          reduce using rule 38 (unary_expression -> STRING .)
    K_DICT          reduce using rule 38 (unary_expression -> STRING .)
    K_SET           reduce using rule 38 (unary_expression -> STRING .)
    K_INT           reduce using rule 38 (unary_expression -> STRING .)
    K_DOUBLE        reduce using rule 38 (unary_expression -> STRING .)
    K_STRING        reduce using rule 38 (unary_expression -> STRING .)
    K_BOOL          reduce using rule 38 (unary_expression -> STRING .)
    K_WINDOW        reduce using rule 38 (unary_expression -> STRING .)
    K_SHAPE         reduce using rule 38 (unary_expression -> STRING .)
    K_TRIANGLE      reduce using rule 38 (unary_expression -> STRING .)
    K_RECTANGLE     reduce using rule 38 (unary_expression -> STRING .)
    K_CIRCLE        reduce using rule 38 (unary_expression -> STRING .)
    K_TEXT          reduce using rule 38 (unary_expression -> STRING .)
    $end            reduce using rule 38 (unary_expression -> STRING .)
    K_EL            reduce using rule 38 (unary_expression -> STRING .)
    K_EF            reduce using rule 38 (unary_expression -> STRING .)
    K_END           reduce using rule 38 (unary_expression -> STRING .)
    COMMA           reduce using rule 38 (unary_expression -> STRING .)


state 89

    (41) unary_expression -> DOUBLE .

    AND             reduce using rule 41 (unary_expression -> DOUBLE .)
    RPAREN          reduce using rule 41 (unary_expression -> DOUBLE .)
    OR              reduce using rule 41 (unary_expression -> DOUBLE .)
    ID              reduce using rule 41 (unary_expression -> DOUBLE .)
    K_IF            reduce using rule 41 (unary_expression -> DOUBLE .)
    K_LIST          reduce using rule 41 (unary_expression -> DOUBLE .)
    K_DICT          reduce using rule 41 (unary_expression -> DOUBLE .)
    K_SET           reduce using rule 41 (unary_expression -> DOUBLE .)
    K_INT           reduce using rule 41 (unary_expression -> DOUBLE .)
    K_DOUBLE        reduce using rule 41 (unary_expression -> DOUBLE .)
    K_STRING        reduce using rule 41 (unary_expression -> DOUBLE .)
    K_BOOL          reduce using rule 41 (unary_expression -> DOUBLE .)
    K_WINDOW        reduce using rule 41 (unary_expression -> DOUBLE .)
    K_SHAPE         reduce using rule 41 (unary_expression -> DOUBLE .)
    K_TRIANGLE      reduce using rule 41 (unary_expression -> DOUBLE .)
    K_RECTANGLE     reduce using rule 41 (unary_expression -> DOUBLE .)
    K_CIRCLE        reduce using rule 41 (unary_expression -> DOUBLE .)
    K_TEXT          reduce using rule 41 (unary_expression -> DOUBLE .)
    $end            reduce using rule 41 (unary_expression -> DOUBLE .)
    K_EL            reduce using rule 41 (unary_expression -> DOUBLE .)
    K_EF            reduce using rule 41 (unary_expression -> DOUBLE .)
    K_END           reduce using rule 41 (unary_expression -> DOUBLE .)
    COMMA           reduce using rule 41 (unary_expression -> DOUBLE .)


state 90

    (40) unary_expression -> function_call_statement .

    AND             reduce using rule 40 (unary_expression -> function_call_statement .)
    RPAREN          reduce using rule 40 (unary_expression -> function_call_statement .)
    OR              reduce using rule 40 (unary_expression -> function_call_statement .)
    ID              reduce using rule 40 (unary_expression -> function_call_statement .)
    K_IF            reduce using rule 40 (unary_expression -> function_call_statement .)
    K_LIST          reduce using rule 40 (unary_expression -> function_call_statement .)
    K_DICT          reduce using rule 40 (unary_expression -> function_call_statement .)
    K_SET           reduce using rule 40 (unary_expression -> function_call_statement .)
    K_INT           reduce using rule 40 (unary_expression -> function_call_statement .)
    K_DOUBLE        reduce using rule 40 (unary_expression -> function_call_statement .)
    K_STRING        reduce using rule 40 (unary_expression -> function_call_statement .)
    K_BOOL          reduce using rule 40 (unary_expression -> function_call_statement .)
    K_WINDOW        reduce using rule 40 (unary_expression -> function_call_statement .)
    K_SHAPE         reduce using rule 40 (unary_expression -> function_call_statement .)
    K_TRIANGLE      reduce using rule 40 (unary_expression -> function_call_statement .)
    K_RECTANGLE     reduce using rule 40 (unary_expression -> function_call_statement .)
    K_CIRCLE        reduce using rule 40 (unary_expression -> function_call_statement .)
    K_TEXT          reduce using rule 40 (unary_expression -> function_call_statement .)
    $end            reduce using rule 40 (unary_expression -> function_call_statement .)
    K_EL            reduce using rule 40 (unary_expression -> function_call_statement .)
    K_EF            reduce using rule 40 (unary_expression -> function_call_statement .)
    K_END           reduce using rule 40 (unary_expression -> function_call_statement .)
    COMMA           reduce using rule 40 (unary_expression -> function_call_statement .)


state 91

    (39) unary_expression -> INTEGER .

    AND             reduce using rule 39 (unary_expression -> INTEGER .)
    RPAREN          reduce using rule 39 (unary_expression -> INTEGER .)
    OR              reduce using rule 39 (unary_expression -> INTEGER .)
    ID              reduce using rule 39 (unary_expression -> INTEGER .)
    K_IF            reduce using rule 39 (unary_expression -> INTEGER .)
    K_LIST          reduce using rule 39 (unary_expression -> INTEGER .)
    K_DICT          reduce using rule 39 (unary_expression -> INTEGER .)
    K_SET           reduce using rule 39 (unary_expression -> INTEGER .)
    K_INT           reduce using rule 39 (unary_expression -> INTEGER .)
    K_DOUBLE        reduce using rule 39 (unary_expression -> INTEGER .)
    K_STRING        reduce using rule 39 (unary_expression -> INTEGER .)
    K_BOOL          reduce using rule 39 (unary_expression -> INTEGER .)
    K_WINDOW        reduce using rule 39 (unary_expression -> INTEGER .)
    K_SHAPE         reduce using rule 39 (unary_expression -> INTEGER .)
    K_TRIANGLE      reduce using rule 39 (unary_expression -> INTEGER .)
    K_RECTANGLE     reduce using rule 39 (unary_expression -> INTEGER .)
    K_CIRCLE        reduce using rule 39 (unary_expression -> INTEGER .)
    K_TEXT          reduce using rule 39 (unary_expression -> INTEGER .)
    $end            reduce using rule 39 (unary_expression -> INTEGER .)
    K_EL            reduce using rule 39 (unary_expression -> INTEGER .)
    K_EF            reduce using rule 39 (unary_expression -> INTEGER .)
    K_END           reduce using rule 39 (unary_expression -> INTEGER .)
    COMMA           reduce using rule 39 (unary_expression -> INTEGER .)


state 92

    (49) boolean_factor -> unary_expression comparator unary_expression .

    AND             reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)
    RPAREN          reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)
    OR              reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)
    ID              reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)
    K_IF            reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)
    K_LIST          reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)
    K_DICT          reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)
    K_SET           reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)
    K_INT           reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)
    K_DOUBLE        reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)
    K_STRING        reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)
    K_BOOL          reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)
    K_WINDOW        reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)
    K_SHAPE         reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)
    K_TRIANGLE      reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)
    K_RECTANGLE     reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)
    K_CIRCLE        reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)
    K_TEXT          reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)
    $end            reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)
    K_EL            reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)
    K_EF            reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)
    K_END           reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)
    COMMA           reduce using rule 49 (boolean_factor -> unary_expression comparator unary_expression .)


state 93

    (46) boolean_term -> boolean_term AND boolean_factor .

    AND             reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)
    RPAREN          reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)
    OR              reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)
    ID              reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)
    K_IF            reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)
    K_LIST          reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)
    K_DICT          reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)
    K_SET           reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)
    K_INT           reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)
    K_DOUBLE        reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)
    K_STRING        reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)
    K_BOOL          reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)
    K_WINDOW        reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)
    K_SHAPE         reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)
    K_TRIANGLE      reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)
    K_RECTANGLE     reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)
    K_CIRCLE        reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)
    K_TEXT          reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)
    $end            reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)
    K_EL            reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)
    K_EF            reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)
    K_END           reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)
    COMMA           reduce using rule 46 (boolean_term -> boolean_term AND boolean_factor .)


state 94

    (65) arithmetic_term -> arithmetic_term MOD arithmetic_factor .

    TIMES           reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    DIVIDE          reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    MOD             reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    PLUS            reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    MINUS           reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    GT              reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    LT              reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    GEQ             reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    LEQ             reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    EQ              reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    NEQ             reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    ID              reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_IF            reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_LIST          reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_DICT          reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_SET           reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_INT           reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_DOUBLE        reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_STRING        reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_BOOL          reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_WINDOW        reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_SHAPE         reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_TRIANGLE      reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_RECTANGLE     reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_CIRCLE        reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_TEXT          reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    $end            reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_EL            reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_EF            reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_END           reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    RPAREN          reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    COMMA           reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    AND             reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    OR              reduce using rule 65 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)


state 95

    (64) arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .

    TIMES           reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    DIVIDE          reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    MOD             reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    PLUS            reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    MINUS           reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    GT              reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    LT              reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    GEQ             reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    LEQ             reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    EQ              reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    NEQ             reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    ID              reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_IF            reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_LIST          reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_DICT          reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_SET           reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_INT           reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_DOUBLE        reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_STRING        reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_BOOL          reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_WINDOW        reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_SHAPE         reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_TRIANGLE      reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_RECTANGLE     reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_CIRCLE        reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_TEXT          reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    $end            reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_EL            reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_EF            reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_END           reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    RPAREN          reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    COMMA           reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    AND             reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    OR              reduce using rule 64 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)


state 96

    (63) arithmetic_term -> arithmetic_term TIMES arithmetic_factor .

    TIMES           reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    DIVIDE          reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    MOD             reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    PLUS            reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    MINUS           reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    GT              reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    LT              reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    GEQ             reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    LEQ             reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    EQ              reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    NEQ             reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    ID              reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_IF            reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_LIST          reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_DICT          reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_SET           reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_INT           reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_DOUBLE        reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_STRING        reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_BOOL          reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_WINDOW        reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_SHAPE         reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_TRIANGLE      reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_RECTANGLE     reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_CIRCLE        reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_TEXT          reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    $end            reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_EL            reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_EF            reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_END           reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    RPAREN          reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    COMMA           reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    AND             reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    OR              reduce using rule 63 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)


state 97

    (67) arithmetic_factor -> LPAREN arithmetic_expression . RPAREN
    (60) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (61) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term

    RPAREN          shift and go to state 106
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77


state 98

    (50) boolean_factor -> arithmetic_expression comparator arithmetic_expression .
    (60) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (61) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term

    AND             reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    RPAREN          reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    OR              reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    ID              reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_IF            reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_LIST          reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_DICT          reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_SET           reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_INT           reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_DOUBLE        reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_STRING        reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_BOOL          reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_WINDOW        reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_SHAPE         reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_TRIANGLE      reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_RECTANGLE     reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_CIRCLE        reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_TEXT          reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    $end            reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_EL            reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_EF            reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_END           reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    COMMA           reduce using rule 50 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77


state 99

    (60) arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .
    (63) arithmetic_term -> arithmetic_term . TIMES arithmetic_factor
    (64) arithmetic_term -> arithmetic_term . DIVIDE arithmetic_factor
    (65) arithmetic_term -> arithmetic_term . MOD arithmetic_factor

    PLUS            reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    MINUS           reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    GT              reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    LT              reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    GEQ             reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    LEQ             reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    EQ              reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    NEQ             reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    ID              reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_IF            reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_LIST          reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_DICT          reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_SET           reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_INT           reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_DOUBLE        reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_STRING        reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_BOOL          reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_WINDOW        reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_SHAPE         reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_TRIANGLE      reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_RECTANGLE     reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_CIRCLE        reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_TEXT          reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    $end            reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_EL            reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_EF            reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_END           reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    RPAREN          reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    COMMA           reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    AND             reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    OR              reduce using rule 60 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    TIMES           shift and go to state 68
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 66


state 100

    (61) arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .
    (63) arithmetic_term -> arithmetic_term . TIMES arithmetic_factor
    (64) arithmetic_term -> arithmetic_term . DIVIDE arithmetic_factor
    (65) arithmetic_term -> arithmetic_term . MOD arithmetic_factor

    PLUS            reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    MINUS           reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    GT              reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    LT              reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    GEQ             reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    LEQ             reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    EQ              reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    NEQ             reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    ID              reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_IF            reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_LIST          reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_DICT          reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_SET           reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_INT           reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_DOUBLE        reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_STRING        reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_BOOL          reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_WINDOW        reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_SHAPE         reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_TRIANGLE      reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_RECTANGLE     reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_CIRCLE        reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_TEXT          reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    $end            reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_EL            reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_EF            reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_END           reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    RPAREN          reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    COMMA           reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    AND             reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    OR              reduce using rule 61 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    TIMES           shift and go to state 68
    DIVIDE          shift and go to state 67
    MOD             shift and go to state 66


state 101

    (51) boolean_factor -> string_expression comparator string_expression .
    (33) string_expression -> string_expression . PLUS string_term

    AND             reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    RPAREN          reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    OR              reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    ID              reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    K_IF            reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    K_LIST          reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    K_DICT          reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    K_SET           reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    K_INT           reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    K_DOUBLE        reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    K_STRING        reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    K_BOOL          reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    K_WINDOW        reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    K_SHAPE         reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    K_TRIANGLE      reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    K_RECTANGLE     reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    K_CIRCLE        reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    K_TEXT          reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    $end            reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    K_EL            reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    K_EF            reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    K_END           reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    COMMA           reduce using rule 51 (boolean_factor -> string_expression comparator string_expression .)
    PLUS            shift and go to state 79


state 102

    (34) string_expression -> STRING .

    PLUS            reduce using rule 34 (string_expression -> STRING .)
    AND             reduce using rule 34 (string_expression -> STRING .)
    RPAREN          reduce using rule 34 (string_expression -> STRING .)
    OR              reduce using rule 34 (string_expression -> STRING .)
    ID              reduce using rule 34 (string_expression -> STRING .)
    K_IF            reduce using rule 34 (string_expression -> STRING .)
    K_LIST          reduce using rule 34 (string_expression -> STRING .)
    K_DICT          reduce using rule 34 (string_expression -> STRING .)
    K_SET           reduce using rule 34 (string_expression -> STRING .)
    K_INT           reduce using rule 34 (string_expression -> STRING .)
    K_DOUBLE        reduce using rule 34 (string_expression -> STRING .)
    K_STRING        reduce using rule 34 (string_expression -> STRING .)
    K_BOOL          reduce using rule 34 (string_expression -> STRING .)
    K_WINDOW        reduce using rule 34 (string_expression -> STRING .)
    K_SHAPE         reduce using rule 34 (string_expression -> STRING .)
    K_TRIANGLE      reduce using rule 34 (string_expression -> STRING .)
    K_RECTANGLE     reduce using rule 34 (string_expression -> STRING .)
    K_CIRCLE        reduce using rule 34 (string_expression -> STRING .)
    K_TEXT          reduce using rule 34 (string_expression -> STRING .)
    $end            reduce using rule 34 (string_expression -> STRING .)
    K_EL            reduce using rule 34 (string_expression -> STRING .)
    K_EF            reduce using rule 34 (string_expression -> STRING .)
    K_END           reduce using rule 34 (string_expression -> STRING .)
    COMMA           reduce using rule 34 (string_expression -> STRING .)


state 103

    (36) string_term -> STRING .

    PLUS            reduce using rule 36 (string_term -> STRING .)
    GT              reduce using rule 36 (string_term -> STRING .)
    LT              reduce using rule 36 (string_term -> STRING .)
    GEQ             reduce using rule 36 (string_term -> STRING .)
    LEQ             reduce using rule 36 (string_term -> STRING .)
    EQ              reduce using rule 36 (string_term -> STRING .)
    NEQ             reduce using rule 36 (string_term -> STRING .)
    ID              reduce using rule 36 (string_term -> STRING .)
    K_IF            reduce using rule 36 (string_term -> STRING .)
    K_LIST          reduce using rule 36 (string_term -> STRING .)
    K_DICT          reduce using rule 36 (string_term -> STRING .)
    K_SET           reduce using rule 36 (string_term -> STRING .)
    K_INT           reduce using rule 36 (string_term -> STRING .)
    K_DOUBLE        reduce using rule 36 (string_term -> STRING .)
    K_STRING        reduce using rule 36 (string_term -> STRING .)
    K_BOOL          reduce using rule 36 (string_term -> STRING .)
    K_WINDOW        reduce using rule 36 (string_term -> STRING .)
    K_SHAPE         reduce using rule 36 (string_term -> STRING .)
    K_TRIANGLE      reduce using rule 36 (string_term -> STRING .)
    K_RECTANGLE     reduce using rule 36 (string_term -> STRING .)
    K_CIRCLE        reduce using rule 36 (string_term -> STRING .)
    K_TEXT          reduce using rule 36 (string_term -> STRING .)
    $end            reduce using rule 36 (string_term -> STRING .)
    K_EL            reduce using rule 36 (string_term -> STRING .)
    K_EF            reduce using rule 36 (string_term -> STRING .)
    K_END           reduce using rule 36 (string_term -> STRING .)
    RPAREN          reduce using rule 36 (string_term -> STRING .)
    COMMA           reduce using rule 36 (string_term -> STRING .)
    AND             reduce using rule 36 (string_term -> STRING .)
    OR              reduce using rule 36 (string_term -> STRING .)


state 104

    (35) string_term -> function_call_statement .

    PLUS            reduce using rule 35 (string_term -> function_call_statement .)
    GT              reduce using rule 35 (string_term -> function_call_statement .)
    LT              reduce using rule 35 (string_term -> function_call_statement .)
    GEQ             reduce using rule 35 (string_term -> function_call_statement .)
    LEQ             reduce using rule 35 (string_term -> function_call_statement .)
    EQ              reduce using rule 35 (string_term -> function_call_statement .)
    NEQ             reduce using rule 35 (string_term -> function_call_statement .)
    ID              reduce using rule 35 (string_term -> function_call_statement .)
    K_IF            reduce using rule 35 (string_term -> function_call_statement .)
    K_LIST          reduce using rule 35 (string_term -> function_call_statement .)
    K_DICT          reduce using rule 35 (string_term -> function_call_statement .)
    K_SET           reduce using rule 35 (string_term -> function_call_statement .)
    K_INT           reduce using rule 35 (string_term -> function_call_statement .)
    K_DOUBLE        reduce using rule 35 (string_term -> function_call_statement .)
    K_STRING        reduce using rule 35 (string_term -> function_call_statement .)
    K_BOOL          reduce using rule 35 (string_term -> function_call_statement .)
    K_WINDOW        reduce using rule 35 (string_term -> function_call_statement .)
    K_SHAPE         reduce using rule 35 (string_term -> function_call_statement .)
    K_TRIANGLE      reduce using rule 35 (string_term -> function_call_statement .)
    K_RECTANGLE     reduce using rule 35 (string_term -> function_call_statement .)
    K_CIRCLE        reduce using rule 35 (string_term -> function_call_statement .)
    K_TEXT          reduce using rule 35 (string_term -> function_call_statement .)
    $end            reduce using rule 35 (string_term -> function_call_statement .)
    K_EL            reduce using rule 35 (string_term -> function_call_statement .)
    K_EF            reduce using rule 35 (string_term -> function_call_statement .)
    K_END           reduce using rule 35 (string_term -> function_call_statement .)
    RPAREN          reduce using rule 35 (string_term -> function_call_statement .)
    COMMA           reduce using rule 35 (string_term -> function_call_statement .)
    AND             reduce using rule 35 (string_term -> function_call_statement .)
    OR              reduce using rule 35 (string_term -> function_call_statement .)


state 105

    (33) string_expression -> string_expression PLUS string_term .

    PLUS            reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    GT              reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    LT              reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    GEQ             reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    LEQ             reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    EQ              reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    NEQ             reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    RPAREN          reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    COMMA           reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    ID              reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    K_IF            reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    K_LIST          reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    K_DICT          reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    K_SET           reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    K_INT           reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    K_DOUBLE        reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    K_STRING        reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    K_BOOL          reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    K_WINDOW        reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    K_SHAPE         reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    K_TRIANGLE      reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    K_RECTANGLE     reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    K_CIRCLE        reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    K_TEXT          reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    $end            reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    K_EL            reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    K_EF            reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    K_END           reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    AND             reduce using rule 33 (string_expression -> string_expression PLUS string_term .)
    OR              reduce using rule 33 (string_expression -> string_expression PLUS string_term .)


state 106

    (67) arithmetic_factor -> LPAREN arithmetic_expression RPAREN .

    TIMES           reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    DIVIDE          reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    MOD             reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    PLUS            reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    MINUS           reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    GT              reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    LT              reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    GEQ             reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    LEQ             reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    EQ              reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    NEQ             reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    ID              reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_IF            reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_LIST          reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_DICT          reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_SET           reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_INT           reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_DOUBLE        reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_STRING        reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_BOOL          reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_WINDOW        reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_SHAPE         reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_TRIANGLE      reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_RECTANGLE     reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_CIRCLE        reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_TEXT          reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    $end            reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_EL            reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_EF            reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_END           reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    RPAREN          reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    COMMA           reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    AND             reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    OR              reduce using rule 67 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)


state 107

    (48) boolean_factor -> LPAREN boolean_expression RPAREN .

    AND             reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    RPAREN          reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    OR              reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    ID              reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_IF            reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_LIST          reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_DICT          reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_SET           reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_INT           reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_DOUBLE        reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_STRING        reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_BOOL          reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_WINDOW        reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_SHAPE         reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_TRIANGLE      reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_RECTANGLE     reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_CIRCLE        reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_TEXT          reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    $end            reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_EL            reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_EF            reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_END           reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    COMMA           reduce using rule 48 (boolean_factor -> LPAREN boolean_expression RPAREN .)


state 108

    (73) selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list . else_if_statement_list else_statement K_END
    (80) compound_statement_list -> compound_statement_list . compound_statement
    (74) else_if_statement_list -> .
    (75) else_if_statement_list -> . else_if_statement_list else_if_statement
    (5) compound_statement -> . function_call_statement
    (6) compound_statement -> . variable_declaration
    (7) compound_statement -> . selection_statement
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN
    (12) variable_declaration -> . pre_type_modifier type ID
    (13) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (14) variable_declaration -> . ID ASSIGN expression
    (73) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (15) pre_type_modifier -> .
    (16) pre_type_modifier -> . K_LIST
    (17) pre_type_modifier -> . K_DICT
    (18) pre_type_modifier -> . K_SET

    K_EL            reduce using rule 74 (else_if_statement_list -> .)
    K_EF            reduce using rule 74 (else_if_statement_list -> .)
    K_END           reduce using rule 74 (else_if_statement_list -> .)
    ID              shift and go to state 12
    K_IF            shift and go to state 4
    K_INT           reduce using rule 15 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 15 (pre_type_modifier -> .)
    K_STRING        reduce using rule 15 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 15 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 15 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 15 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 15 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 15 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 15 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 15 (pre_type_modifier -> .)
    K_LIST          shift and go to state 9
    K_DICT          shift and go to state 11
    K_SET           shift and go to state 3

    selection_statement            shift and go to state 7
    compound_statement             shift and go to state 112
    function_call_statement        shift and go to state 13
    pre_type_modifier              shift and go to state 10
    variable_declaration           shift and go to state 5
    else_if_statement_list         shift and go to state 113

state 109

    (44) boolean_expression -> boolean_expression OR boolean_term .
    (46) boolean_term -> boolean_term . AND boolean_factor

    OR              reduce using rule 44 (boolean_expression -> boolean_expression OR boolean_term .)
    ID              reduce using rule 44 (boolean_expression -> boolean_expression OR boolean_term .)
    K_IF            reduce using rule 44 (boolean_expression -> boolean_expression OR boolean_term .)
    K_LIST          reduce using rule 44 (boolean_expression -> boolean_expression OR boolean_term .)
    K_DICT          reduce using rule 44 (boolean_expression -> boolean_expression OR boolean_term .)
    K_SET           reduce using rule 44 (boolean_expression -> boolean_expression OR boolean_term .)
    K_INT           reduce using rule 44 (boolean_expression -> boolean_expression OR boolean_term .)
    K_DOUBLE        reduce using rule 44 (boolean_expression -> boolean_expression OR boolean_term .)
    K_STRING        reduce using rule 44 (boolean_expression -> boolean_expression OR boolean_term .)
    K_BOOL          reduce using rule 44 (boolean_expression -> boolean_expression OR boolean_term .)
    K_WINDOW        reduce using rule 44 (boolean_expression -> boolean_expression OR boolean_term .)
    K_SHAPE         reduce using rule 44 (boolean_expression -> boolean_expression OR boolean_term .)
    K_TRIANGLE      reduce using rule 44 (boolean_expression -> boolean_expression OR boolean_term .)
    K_RECTANGLE     reduce using rule 44 (boolean_expression -> boolean_expression OR boolean_term .)
    K_CIRCLE        reduce using rule 44 (boolean_expression -> boolean_expression OR boolean_term .)
    K_TEXT          reduce using rule 44 (boolean_expression -> boolean_expression OR boolean_term .)
    $end            reduce using rule 44 (boolean_expression -> boolean_expression OR boolean_term .)
    K_EL            reduce using rule 44 (boolean_expression -> boolean_expression OR boolean_term .)
    K_EF            reduce using rule 44 (boolean_expression -> boolean_expression OR boolean_term .)
    K_END           reduce using rule 44 (boolean_expression -> boolean_expression OR boolean_term .)
    RPAREN          reduce using rule 44 (boolean_expression -> boolean_expression OR boolean_term .)
    COMMA           reduce using rule 44 (boolean_expression -> boolean_expression OR boolean_term .)
    AND             shift and go to state 65


state 110

    (13) variable_declaration -> pre_type_modifier type ID ASSIGN expression .

    ID              reduce using rule 13 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_IF            reduce using rule 13 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_LIST          reduce using rule 13 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_DICT          reduce using rule 13 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_SET           reduce using rule 13 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_INT           reduce using rule 13 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_DOUBLE        reduce using rule 13 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_STRING        reduce using rule 13 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_BOOL          reduce using rule 13 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_WINDOW        reduce using rule 13 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_SHAPE         reduce using rule 13 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_TRIANGLE      reduce using rule 13 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_RECTANGLE     reduce using rule 13 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_CIRCLE        reduce using rule 13 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_TEXT          reduce using rule 13 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_END           reduce using rule 13 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    $end            reduce using rule 13 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_EL            reduce using rule 13 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_EF            reduce using rule 13 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)


state 111

    (10) parameter_list -> parameter_list COMMA expression .

    RPAREN          reduce using rule 10 (parameter_list -> parameter_list COMMA expression .)
    COMMA           reduce using rule 10 (parameter_list -> parameter_list COMMA expression .)


state 112

    (80) compound_statement_list -> compound_statement_list compound_statement .

    ID              reduce using rule 80 (compound_statement_list -> compound_statement_list compound_statement .)
    K_IF            reduce using rule 80 (compound_statement_list -> compound_statement_list compound_statement .)
    K_LIST          reduce using rule 80 (compound_statement_list -> compound_statement_list compound_statement .)
    K_DICT          reduce using rule 80 (compound_statement_list -> compound_statement_list compound_statement .)
    K_SET           reduce using rule 80 (compound_statement_list -> compound_statement_list compound_statement .)
    K_INT           reduce using rule 80 (compound_statement_list -> compound_statement_list compound_statement .)
    K_DOUBLE        reduce using rule 80 (compound_statement_list -> compound_statement_list compound_statement .)
    K_STRING        reduce using rule 80 (compound_statement_list -> compound_statement_list compound_statement .)
    K_BOOL          reduce using rule 80 (compound_statement_list -> compound_statement_list compound_statement .)
    K_WINDOW        reduce using rule 80 (compound_statement_list -> compound_statement_list compound_statement .)
    K_SHAPE         reduce using rule 80 (compound_statement_list -> compound_statement_list compound_statement .)
    K_TRIANGLE      reduce using rule 80 (compound_statement_list -> compound_statement_list compound_statement .)
    K_RECTANGLE     reduce using rule 80 (compound_statement_list -> compound_statement_list compound_statement .)
    K_CIRCLE        reduce using rule 80 (compound_statement_list -> compound_statement_list compound_statement .)
    K_TEXT          reduce using rule 80 (compound_statement_list -> compound_statement_list compound_statement .)
    K_EL            reduce using rule 80 (compound_statement_list -> compound_statement_list compound_statement .)
    K_EF            reduce using rule 80 (compound_statement_list -> compound_statement_list compound_statement .)
    K_END           reduce using rule 80 (compound_statement_list -> compound_statement_list compound_statement .)


state 113

    (73) selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list . else_statement K_END
    (75) else_if_statement_list -> else_if_statement_list . else_if_statement
    (77) else_statement -> .
    (78) else_statement -> . K_EL compound_statement_list
    (76) else_if_statement -> . K_EF LPAREN boolean_expression RPAREN compound_statement_list

    K_END           reduce using rule 77 (else_statement -> .)
    K_EL            shift and go to state 115
    K_EF            shift and go to state 117

    else_statement                 shift and go to state 114
    else_if_statement              shift and go to state 116

state 114

    (73) selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement . K_END

    K_END           shift and go to state 118


state 115

    (78) else_statement -> K_EL . compound_statement_list
    (79) compound_statement_list -> .
    (80) compound_statement_list -> . compound_statement_list compound_statement

    ID              reduce using rule 79 (compound_statement_list -> .)
    K_IF            reduce using rule 79 (compound_statement_list -> .)
    K_LIST          reduce using rule 79 (compound_statement_list -> .)
    K_DICT          reduce using rule 79 (compound_statement_list -> .)
    K_SET           reduce using rule 79 (compound_statement_list -> .)
    K_INT           reduce using rule 79 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 79 (compound_statement_list -> .)
    K_STRING        reduce using rule 79 (compound_statement_list -> .)
    K_BOOL          reduce using rule 79 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 79 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 79 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 79 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 79 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 79 (compound_statement_list -> .)
    K_TEXT          reduce using rule 79 (compound_statement_list -> .)
    K_END           reduce using rule 79 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 119

state 116

    (75) else_if_statement_list -> else_if_statement_list else_if_statement .

    K_EL            reduce using rule 75 (else_if_statement_list -> else_if_statement_list else_if_statement .)
    K_EF            reduce using rule 75 (else_if_statement_list -> else_if_statement_list else_if_statement .)
    K_END           reduce using rule 75 (else_if_statement_list -> else_if_statement_list else_if_statement .)


state 117

    (76) else_if_statement -> K_EF . LPAREN boolean_expression RPAREN compound_statement_list

    LPAREN          shift and go to state 120


state 118

    (73) selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .

    ID              reduce using rule 73 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_IF            reduce using rule 73 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_LIST          reduce using rule 73 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_DICT          reduce using rule 73 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_SET           reduce using rule 73 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_INT           reduce using rule 73 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_DOUBLE        reduce using rule 73 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_STRING        reduce using rule 73 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_BOOL          reduce using rule 73 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_WINDOW        reduce using rule 73 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_SHAPE         reduce using rule 73 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_TRIANGLE      reduce using rule 73 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_RECTANGLE     reduce using rule 73 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_CIRCLE        reduce using rule 73 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_TEXT          reduce using rule 73 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_EL            reduce using rule 73 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_EF            reduce using rule 73 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_END           reduce using rule 73 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    $end            reduce using rule 73 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)


state 119

    (78) else_statement -> K_EL compound_statement_list .
    (80) compound_statement_list -> compound_statement_list . compound_statement
    (5) compound_statement -> . function_call_statement
    (6) compound_statement -> . variable_declaration
    (7) compound_statement -> . selection_statement
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN
    (12) variable_declaration -> . pre_type_modifier type ID
    (13) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (14) variable_declaration -> . ID ASSIGN expression
    (73) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (15) pre_type_modifier -> .
    (16) pre_type_modifier -> . K_LIST
    (17) pre_type_modifier -> . K_DICT
    (18) pre_type_modifier -> . K_SET

    K_END           reduce using rule 78 (else_statement -> K_EL compound_statement_list .)
    ID              shift and go to state 12
    K_IF            shift and go to state 4
    K_INT           reduce using rule 15 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 15 (pre_type_modifier -> .)
    K_STRING        reduce using rule 15 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 15 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 15 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 15 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 15 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 15 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 15 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 15 (pre_type_modifier -> .)
    K_LIST          shift and go to state 9
    K_DICT          shift and go to state 11
    K_SET           shift and go to state 3

    compound_statement             shift and go to state 112
    selection_statement            shift and go to state 7
    function_call_statement        shift and go to state 13
    pre_type_modifier              shift and go to state 10
    variable_declaration           shift and go to state 5

state 120

    (76) else_if_statement -> K_EF LPAREN . boolean_expression RPAREN compound_statement_list
    (44) boolean_expression -> . boolean_expression OR boolean_term
    (45) boolean_expression -> . boolean_term
    (46) boolean_term -> . boolean_term AND boolean_factor
    (47) boolean_term -> . boolean_factor
    (48) boolean_factor -> . LPAREN boolean_expression RPAREN
    (49) boolean_factor -> . unary_expression comparator unary_expression
    (50) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (51) boolean_factor -> . string_expression comparator string_expression
    (52) boolean_factor -> . unary_expression
    (53) boolean_factor -> . NEG boolean_factor
    (37) unary_expression -> . ID
    (38) unary_expression -> . STRING
    (39) unary_expression -> . INTEGER
    (40) unary_expression -> . function_call_statement
    (41) unary_expression -> . DOUBLE
    (42) unary_expression -> . K_TRUE
    (43) unary_expression -> . K_FALSE
    (60) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (61) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (62) arithmetic_expression -> . arithmetic_term
    (33) string_expression -> . string_expression PLUS string_term
    (34) string_expression -> . STRING
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN
    (63) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (64) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (65) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (66) arithmetic_term -> . arithmetic_factor
    (67) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (68) arithmetic_factor -> . number
    (69) arithmetic_factor -> . function_call_statement
    (70) arithmetic_factor -> . MINUS arithmetic_factor
    (71) number -> . INTEGER
    (72) number -> . DOUBLE

    LPAREN          shift and go to state 39
    NEG             shift and go to state 29
    ID              shift and go to state 42
    STRING          shift and go to state 38
    INTEGER         shift and go to state 35
    DOUBLE          shift and go to state 44
    K_TRUE          shift and go to state 31
    K_FALSE         shift and go to state 46
    MINUS           shift and go to state 33

    arithmetic_expression          shift and go to state 36
    string_expression              shift and go to state 37
    unary_expression               shift and go to state 28
    boolean_expression             shift and go to state 121
    arithmetic_factor              shift and go to state 34
    boolean_term                   shift and go to state 30
    function_call_statement        shift and go to state 45
    number                         shift and go to state 41
    arithmetic_term                shift and go to state 32
    boolean_factor                 shift and go to state 40

state 121

    (76) else_if_statement -> K_EF LPAREN boolean_expression . RPAREN compound_statement_list
    (44) boolean_expression -> boolean_expression . OR boolean_term

    RPAREN          shift and go to state 122
    OR              shift and go to state 84


state 122

    (76) else_if_statement -> K_EF LPAREN boolean_expression RPAREN . compound_statement_list
    (79) compound_statement_list -> .
    (80) compound_statement_list -> . compound_statement_list compound_statement

    ID              reduce using rule 79 (compound_statement_list -> .)
    K_IF            reduce using rule 79 (compound_statement_list -> .)
    K_LIST          reduce using rule 79 (compound_statement_list -> .)
    K_DICT          reduce using rule 79 (compound_statement_list -> .)
    K_SET           reduce using rule 79 (compound_statement_list -> .)
    K_INT           reduce using rule 79 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 79 (compound_statement_list -> .)
    K_STRING        reduce using rule 79 (compound_statement_list -> .)
    K_BOOL          reduce using rule 79 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 79 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 79 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 79 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 79 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 79 (compound_statement_list -> .)
    K_TEXT          reduce using rule 79 (compound_statement_list -> .)
    K_EL            reduce using rule 79 (compound_statement_list -> .)
    K_EF            reduce using rule 79 (compound_statement_list -> .)
    K_END           reduce using rule 79 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 123

state 123

    (76) else_if_statement -> K_EF LPAREN boolean_expression RPAREN compound_statement_list .
    (80) compound_statement_list -> compound_statement_list . compound_statement
    (5) compound_statement -> . function_call_statement
    (6) compound_statement -> . variable_declaration
    (7) compound_statement -> . selection_statement
    (8) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (9) function_call_statement -> . ID LPAREN RPAREN
    (12) variable_declaration -> . pre_type_modifier type ID
    (13) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (14) variable_declaration -> . ID ASSIGN expression
    (73) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (15) pre_type_modifier -> .
    (16) pre_type_modifier -> . K_LIST
    (17) pre_type_modifier -> . K_DICT
    (18) pre_type_modifier -> . K_SET

    K_EL            reduce using rule 76 (else_if_statement -> K_EF LPAREN boolean_expression RPAREN compound_statement_list .)
    K_EF            reduce using rule 76 (else_if_statement -> K_EF LPAREN boolean_expression RPAREN compound_statement_list .)
    K_END           reduce using rule 76 (else_if_statement -> K_EF LPAREN boolean_expression RPAREN compound_statement_list .)
    ID              shift and go to state 12
    K_IF            shift and go to state 4
    K_INT           reduce using rule 15 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 15 (pre_type_modifier -> .)
    K_STRING        reduce using rule 15 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 15 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 15 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 15 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 15 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 15 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 15 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 15 (pre_type_modifier -> .)
    K_LIST          shift and go to state 9
    K_DICT          shift and go to state 11
    K_SET           shift and go to state 3

    compound_statement             shift and go to state 112
    selection_statement            shift and go to state 7
    function_call_statement        shift and go to state 13
    pre_type_modifier              shift and go to state 10
    variable_declaration           shift and go to state 5
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 35 resolved using rule (unary_expression -> INTEGER)
WARNING: rejected rule (number -> INTEGER) in state 35
WARNING: reduce/reduce conflict in state 38 resolved using rule (string_expression -> STRING)
WARNING: rejected rule (unary_expression -> STRING) in state 38
WARNING: reduce/reduce conflict in state 44 resolved using rule (unary_expression -> DOUBLE)
WARNING: rejected rule (number -> DOUBLE) in state 44
WARNING: reduce/reduce conflict in state 45 resolved using rule (unary_expression -> function_call_statement)
WARNING: rejected rule (arithmetic_factor -> function_call_statement) in state 45
WARNING: reduce/reduce conflict in state 48 resolved using rule (expression -> unary_expression)
WARNING: rejected rule (boolean_factor -> unary_expression) in state 48
WARNING: reduce/reduce conflict in state 51 resolved using rule (string_expression -> STRING)
WARNING: rejected rule (unary_expression -> STRING) in state 51
WARNING: reduce/reduce conflict in state 80 resolved using rule (unary_expression -> function_call_statement)
WARNING: rejected rule (arithmetic_factor -> function_call_statement) in state 80
