Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    NEG
    K_NULL
    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> <empty>
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> function_declaration
Rule 5     statement -> compound_statement
Rule 6     compound_statement -> function_call_statement
Rule 7     compound_statement -> variable_declaration
Rule 8     compound_statement -> selection_statement
Rule 9     compound_statement -> iteration_statement
Rule 10    compound_statement -> jump_statement
Rule 11    function_call_statement -> ID LPAREN parameter_list RPAREN
Rule 12    function_call_statement -> ID LPAREN RPAREN
Rule 13    parameter_list -> parameter_list COMMA expression
Rule 14    parameter_list -> expression
Rule 15    variable_declaration -> pre_type_modifier type ID
Rule 16    variable_declaration -> pre_type_modifier type ID ASSIGN expression
Rule 17    variable_declaration -> ID ASSIGN expression
Rule 18    pre_type_modifier -> <empty>
Rule 19    pre_type_modifier -> K_LIST
Rule 20    pre_type_modifier -> K_DICT
Rule 21    pre_type_modifier -> K_SET
Rule 22    type -> K_INT
Rule 23    type -> K_DOUBLE
Rule 24    type -> K_STRING
Rule 25    type -> K_BOOL
Rule 26    type -> K_WINDOW
Rule 27    type -> K_SHAPE
Rule 28    type -> K_TRIANGLE
Rule 29    type -> K_RECTANGLE
Rule 30    type -> K_CIRCLE
Rule 31    type -> K_POINT
Rule 32    type -> K_TEXT
Rule 33    expression -> expression op expression_term
Rule 34    expression -> expression_term
Rule 35    expression_term -> expression_term op unary_expression
Rule 36    expression_term -> unary_expression
Rule 37    op -> PLUS
Rule 38    op -> MINUS
Rule 39    op -> TIMES
Rule 40    op -> DIVIDE
Rule 41    op -> MOD
Rule 42    op -> comparator
Rule 43    op -> boolean_operator
Rule 44    boolean_operator -> AND
Rule 45    boolean_operator -> OR
Rule 46    primary_expression -> constant
Rule 47    primary_expression -> id_expression
Rule 48    primary_expression -> function_call_statement
Rule 49    id_expression -> ID
Rule 50    constant -> boolean_constant
Rule 51    constant -> number
Rule 52    constant -> string_constant
Rule 53    string_constant -> STRING
Rule 54    boolean_constant -> K_TRUE
Rule 55    boolean_constant -> K_FALSE
Rule 56    unary_expression -> LPAREN expression RPAREN
Rule 57    unary_expression -> primary_expression
Rule 58    comparator -> GT
Rule 59    comparator -> LT
Rule 60    comparator -> GEQ
Rule 61    comparator -> LEQ
Rule 62    comparator -> EQ
Rule 63    comparator -> NEQ
Rule 64    number -> INTEGER
Rule 65    number -> DOUBLE
Rule 66    selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END
Rule 67    else_if_statement_list -> <empty>
Rule 68    else_if_statement_list -> else_if_statement_list else_if_statement
Rule 69    else_if_statement -> K_EF LPAREN expression RPAREN push_scope compound_statement_list
Rule 70    else_statement -> <empty>
Rule 71    else_statement -> K_EL push_scope compound_statement_list
Rule 72    compound_statement_list -> <empty>
Rule 73    compound_statement_list -> compound_statement_list compound_statement
Rule 74    iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END
Rule 75    jump_statement -> K_CONTINUE
Rule 76    jump_statement -> K_BREAK
Rule 77    jump_statement -> K_DONE
Rule 78    function_declaration -> function_header compound_statement_list K_END
Rule 79    function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag
Rule 80    function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag
Rule 81    argument_list -> argument_list COMMA argument
Rule 82    argument_list -> argument
Rule 83    argument -> pre_type_modifier type ID
Rule 84    push_scope -> <empty>
Rule 85    set_ignore_flag -> <empty>
Rule 86    unset_ignore_flag -> <empty>

Terminals, with rules where they appear

AND                  : 44
ASSIGN               : 16 17 79 80
COMMA                : 13 81
COMMENT              : 
DIVIDE               : 40
DOUBLE               : 65
EQ                   : 62
GEQ                  : 60
GT                   : 58
ID                   : 11 12 15 16 17 49 79 80 83
INTEGER              : 64
K_BOOL               : 25
K_BREAK              : 76
K_CIRCLE             : 30
K_CONTINUE           : 75
K_DICT               : 20
K_DONE               : 77
K_DOUBLE             : 23
K_EF                 : 69
K_EL                 : 71
K_END                : 66 74 78
K_FALSE              : 55
K_IF                 : 66
K_INT                : 22
K_LIST               : 19
K_NULL               : 
K_POINT              : 31
K_RECTANGLE          : 29
K_SET                : 21
K_SHAPE              : 27
K_STRING             : 24
K_TEXT               : 32
K_TRIANGLE           : 28
K_TRUE               : 54
K_WHILE              : 74
K_WINDOW             : 26
LEQ                  : 61
LPAREN               : 11 12 56 66 69 74 79 80
LT                   : 59
MINUS                : 38
MOD                  : 41
NEG                  : 
NEQ                  : 63
OR                   : 45
PLUS                 : 37
RPAREN               : 11 12 56 66 69 74 79 80
STRING               : 53
TIMES                : 39
error                : 

Nonterminals, with rules where they appear

argument             : 81 82
argument_list        : 79 81
boolean_constant     : 50
boolean_operator     : 43
comparator           : 42
compound_statement   : 5 73
compound_statement_list : 66 69 71 73 74 78
constant             : 46
else_if_statement    : 68
else_if_statement_list : 66 68
else_statement       : 66
expression           : 13 14 16 17 33 56 66 69 74
expression_term      : 33 34 35
function_call_statement : 6 48
function_declaration : 4
function_header      : 78
id_expression        : 47
iteration_statement  : 9
jump_statement       : 10
number               : 51
op                   : 33 35
parameter_list       : 11 13
pre_type_modifier    : 15 16 79 80 83
primary_expression   : 57 79 80
program              : 0
push_scope           : 66 69 71 79 80
selection_statement  : 8
set_ignore_flag      : 79 80
statement            : 3
statement_list       : 1 3
string_constant      : 52
type                 : 15 16 79 80 83
unary_expression     : 35 36
unset_ignore_flag    : 79 80
variable_declaration : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> .
    (3) statement_list -> . statement_list statement

    ID              reduce using rule 2 (statement_list -> .)
    K_IF            reduce using rule 2 (statement_list -> .)
    K_WHILE         reduce using rule 2 (statement_list -> .)
    K_CONTINUE      reduce using rule 2 (statement_list -> .)
    K_BREAK         reduce using rule 2 (statement_list -> .)
    K_DONE          reduce using rule 2 (statement_list -> .)
    K_LIST          reduce using rule 2 (statement_list -> .)
    K_DICT          reduce using rule 2 (statement_list -> .)
    K_SET           reduce using rule 2 (statement_list -> .)
    K_INT           reduce using rule 2 (statement_list -> .)
    K_DOUBLE        reduce using rule 2 (statement_list -> .)
    K_STRING        reduce using rule 2 (statement_list -> .)
    K_BOOL          reduce using rule 2 (statement_list -> .)
    K_WINDOW        reduce using rule 2 (statement_list -> .)
    K_SHAPE         reduce using rule 2 (statement_list -> .)
    K_TRIANGLE      reduce using rule 2 (statement_list -> .)
    K_RECTANGLE     reduce using rule 2 (statement_list -> .)
    K_CIRCLE        reduce using rule 2 (statement_list -> .)
    K_POINT         reduce using rule 2 (statement_list -> .)
    K_TEXT          reduce using rule 2 (statement_list -> .)
    $end            reduce using rule 2 (statement_list -> .)

    statement_list                 shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . function_declaration
    (5) statement -> . compound_statement
    (78) function_declaration -> . function_header compound_statement_list K_END
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (79) function_header -> . pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag
    (80) function_header -> . pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (66) selection_statement -> . K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END
    (74) iteration_statement -> . K_WHILE LPAREN expression RPAREN compound_statement_list K_END
    (75) jump_statement -> . K_CONTINUE
    (76) jump_statement -> . K_BREAK
    (77) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    $end            reduce using rule 1 (program -> statement_list .)
    ID              shift and go to state 17
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 12
    K_BREAK         shift and go to state 13
    K_DONE          shift and go to state 21
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 14
    K_DICT          shift and go to state 16
    K_SET           shift and go to state 3

    iteration_statement            shift and go to state 5
    variable_declaration           shift and go to state 6
    compound_statement             shift and go to state 8
    selection_statement            shift and go to state 9
    function_header                shift and go to state 10
    statement                      shift and go to state 11
    pre_type_modifier              shift and go to state 15
    jump_statement                 shift and go to state 18
    function_declaration           shift and go to state 19
    function_call_statement        shift and go to state 20

state 2

    (0) S' -> program .



state 3

    (21) pre_type_modifier -> K_SET .

    K_INT           reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_DOUBLE        reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_STRING        reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_BOOL          reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_WINDOW        reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_SHAPE         reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_TRIANGLE      reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_RECTANGLE     reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_CIRCLE        reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_POINT         reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_TEXT          reduce using rule 21 (pre_type_modifier -> K_SET .)


state 4

    (66) selection_statement -> K_IF . LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END

    LPAREN          shift and go to state 22


state 5

    (9) compound_statement -> iteration_statement .

    K_END           reduce using rule 9 (compound_statement -> iteration_statement .)
    ID              reduce using rule 9 (compound_statement -> iteration_statement .)
    K_IF            reduce using rule 9 (compound_statement -> iteration_statement .)
    K_WHILE         reduce using rule 9 (compound_statement -> iteration_statement .)
    K_CONTINUE      reduce using rule 9 (compound_statement -> iteration_statement .)
    K_BREAK         reduce using rule 9 (compound_statement -> iteration_statement .)
    K_DONE          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_LIST          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_DICT          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_SET           reduce using rule 9 (compound_statement -> iteration_statement .)
    K_INT           reduce using rule 9 (compound_statement -> iteration_statement .)
    K_DOUBLE        reduce using rule 9 (compound_statement -> iteration_statement .)
    K_STRING        reduce using rule 9 (compound_statement -> iteration_statement .)
    K_BOOL          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_WINDOW        reduce using rule 9 (compound_statement -> iteration_statement .)
    K_SHAPE         reduce using rule 9 (compound_statement -> iteration_statement .)
    K_TRIANGLE      reduce using rule 9 (compound_statement -> iteration_statement .)
    K_RECTANGLE     reduce using rule 9 (compound_statement -> iteration_statement .)
    K_CIRCLE        reduce using rule 9 (compound_statement -> iteration_statement .)
    K_POINT         reduce using rule 9 (compound_statement -> iteration_statement .)
    K_TEXT          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_EL            reduce using rule 9 (compound_statement -> iteration_statement .)
    K_EF            reduce using rule 9 (compound_statement -> iteration_statement .)
    $end            reduce using rule 9 (compound_statement -> iteration_statement .)


state 6

    (7) compound_statement -> variable_declaration .

    K_END           reduce using rule 7 (compound_statement -> variable_declaration .)
    ID              reduce using rule 7 (compound_statement -> variable_declaration .)
    K_IF            reduce using rule 7 (compound_statement -> variable_declaration .)
    K_WHILE         reduce using rule 7 (compound_statement -> variable_declaration .)
    K_CONTINUE      reduce using rule 7 (compound_statement -> variable_declaration .)
    K_BREAK         reduce using rule 7 (compound_statement -> variable_declaration .)
    K_DONE          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_LIST          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_DICT          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_SET           reduce using rule 7 (compound_statement -> variable_declaration .)
    K_INT           reduce using rule 7 (compound_statement -> variable_declaration .)
    K_DOUBLE        reduce using rule 7 (compound_statement -> variable_declaration .)
    K_STRING        reduce using rule 7 (compound_statement -> variable_declaration .)
    K_BOOL          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_WINDOW        reduce using rule 7 (compound_statement -> variable_declaration .)
    K_SHAPE         reduce using rule 7 (compound_statement -> variable_declaration .)
    K_TRIANGLE      reduce using rule 7 (compound_statement -> variable_declaration .)
    K_RECTANGLE     reduce using rule 7 (compound_statement -> variable_declaration .)
    K_CIRCLE        reduce using rule 7 (compound_statement -> variable_declaration .)
    K_POINT         reduce using rule 7 (compound_statement -> variable_declaration .)
    K_TEXT          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_EL            reduce using rule 7 (compound_statement -> variable_declaration .)
    K_EF            reduce using rule 7 (compound_statement -> variable_declaration .)
    $end            reduce using rule 7 (compound_statement -> variable_declaration .)


state 7

    (74) iteration_statement -> K_WHILE . LPAREN expression RPAREN compound_statement_list K_END

    LPAREN          shift and go to state 23


state 8

    (5) statement -> compound_statement .

    ID              reduce using rule 5 (statement -> compound_statement .)
    K_IF            reduce using rule 5 (statement -> compound_statement .)
    K_WHILE         reduce using rule 5 (statement -> compound_statement .)
    K_CONTINUE      reduce using rule 5 (statement -> compound_statement .)
    K_BREAK         reduce using rule 5 (statement -> compound_statement .)
    K_DONE          reduce using rule 5 (statement -> compound_statement .)
    K_LIST          reduce using rule 5 (statement -> compound_statement .)
    K_DICT          reduce using rule 5 (statement -> compound_statement .)
    K_SET           reduce using rule 5 (statement -> compound_statement .)
    K_INT           reduce using rule 5 (statement -> compound_statement .)
    K_DOUBLE        reduce using rule 5 (statement -> compound_statement .)
    K_STRING        reduce using rule 5 (statement -> compound_statement .)
    K_BOOL          reduce using rule 5 (statement -> compound_statement .)
    K_WINDOW        reduce using rule 5 (statement -> compound_statement .)
    K_SHAPE         reduce using rule 5 (statement -> compound_statement .)
    K_TRIANGLE      reduce using rule 5 (statement -> compound_statement .)
    K_RECTANGLE     reduce using rule 5 (statement -> compound_statement .)
    K_CIRCLE        reduce using rule 5 (statement -> compound_statement .)
    K_POINT         reduce using rule 5 (statement -> compound_statement .)
    K_TEXT          reduce using rule 5 (statement -> compound_statement .)
    $end            reduce using rule 5 (statement -> compound_statement .)


state 9

    (8) compound_statement -> selection_statement .

    K_END           reduce using rule 8 (compound_statement -> selection_statement .)
    ID              reduce using rule 8 (compound_statement -> selection_statement .)
    K_IF            reduce using rule 8 (compound_statement -> selection_statement .)
    K_WHILE         reduce using rule 8 (compound_statement -> selection_statement .)
    K_CONTINUE      reduce using rule 8 (compound_statement -> selection_statement .)
    K_BREAK         reduce using rule 8 (compound_statement -> selection_statement .)
    K_DONE          reduce using rule 8 (compound_statement -> selection_statement .)
    K_LIST          reduce using rule 8 (compound_statement -> selection_statement .)
    K_DICT          reduce using rule 8 (compound_statement -> selection_statement .)
    K_SET           reduce using rule 8 (compound_statement -> selection_statement .)
    K_INT           reduce using rule 8 (compound_statement -> selection_statement .)
    K_DOUBLE        reduce using rule 8 (compound_statement -> selection_statement .)
    K_STRING        reduce using rule 8 (compound_statement -> selection_statement .)
    K_BOOL          reduce using rule 8 (compound_statement -> selection_statement .)
    K_WINDOW        reduce using rule 8 (compound_statement -> selection_statement .)
    K_SHAPE         reduce using rule 8 (compound_statement -> selection_statement .)
    K_TRIANGLE      reduce using rule 8 (compound_statement -> selection_statement .)
    K_RECTANGLE     reduce using rule 8 (compound_statement -> selection_statement .)
    K_CIRCLE        reduce using rule 8 (compound_statement -> selection_statement .)
    K_POINT         reduce using rule 8 (compound_statement -> selection_statement .)
    K_TEXT          reduce using rule 8 (compound_statement -> selection_statement .)
    K_EL            reduce using rule 8 (compound_statement -> selection_statement .)
    K_EF            reduce using rule 8 (compound_statement -> selection_statement .)
    $end            reduce using rule 8 (compound_statement -> selection_statement .)


state 10

    (78) function_declaration -> function_header . compound_statement_list K_END
    (72) compound_statement_list -> .
    (73) compound_statement_list -> . compound_statement_list compound_statement

    K_END           reduce using rule 72 (compound_statement_list -> .)
    ID              reduce using rule 72 (compound_statement_list -> .)
    K_IF            reduce using rule 72 (compound_statement_list -> .)
    K_WHILE         reduce using rule 72 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 72 (compound_statement_list -> .)
    K_BREAK         reduce using rule 72 (compound_statement_list -> .)
    K_DONE          reduce using rule 72 (compound_statement_list -> .)
    K_LIST          reduce using rule 72 (compound_statement_list -> .)
    K_DICT          reduce using rule 72 (compound_statement_list -> .)
    K_SET           reduce using rule 72 (compound_statement_list -> .)
    K_INT           reduce using rule 72 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 72 (compound_statement_list -> .)
    K_STRING        reduce using rule 72 (compound_statement_list -> .)
    K_BOOL          reduce using rule 72 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 72 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 72 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 72 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 72 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 72 (compound_statement_list -> .)
    K_POINT         reduce using rule 72 (compound_statement_list -> .)
    K_TEXT          reduce using rule 72 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 24

state 11

    (3) statement_list -> statement_list statement .

    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    K_IF            reduce using rule 3 (statement_list -> statement_list statement .)
    K_WHILE         reduce using rule 3 (statement_list -> statement_list statement .)
    K_CONTINUE      reduce using rule 3 (statement_list -> statement_list statement .)
    K_BREAK         reduce using rule 3 (statement_list -> statement_list statement .)
    K_DONE          reduce using rule 3 (statement_list -> statement_list statement .)
    K_LIST          reduce using rule 3 (statement_list -> statement_list statement .)
    K_DICT          reduce using rule 3 (statement_list -> statement_list statement .)
    K_SET           reduce using rule 3 (statement_list -> statement_list statement .)
    K_INT           reduce using rule 3 (statement_list -> statement_list statement .)
    K_DOUBLE        reduce using rule 3 (statement_list -> statement_list statement .)
    K_STRING        reduce using rule 3 (statement_list -> statement_list statement .)
    K_BOOL          reduce using rule 3 (statement_list -> statement_list statement .)
    K_WINDOW        reduce using rule 3 (statement_list -> statement_list statement .)
    K_SHAPE         reduce using rule 3 (statement_list -> statement_list statement .)
    K_TRIANGLE      reduce using rule 3 (statement_list -> statement_list statement .)
    K_RECTANGLE     reduce using rule 3 (statement_list -> statement_list statement .)
    K_CIRCLE        reduce using rule 3 (statement_list -> statement_list statement .)
    K_POINT         reduce using rule 3 (statement_list -> statement_list statement .)
    K_TEXT          reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)


state 12

    (75) jump_statement -> K_CONTINUE .

    K_END           reduce using rule 75 (jump_statement -> K_CONTINUE .)
    ID              reduce using rule 75 (jump_statement -> K_CONTINUE .)
    K_IF            reduce using rule 75 (jump_statement -> K_CONTINUE .)
    K_WHILE         reduce using rule 75 (jump_statement -> K_CONTINUE .)
    K_CONTINUE      reduce using rule 75 (jump_statement -> K_CONTINUE .)
    K_BREAK         reduce using rule 75 (jump_statement -> K_CONTINUE .)
    K_DONE          reduce using rule 75 (jump_statement -> K_CONTINUE .)
    K_LIST          reduce using rule 75 (jump_statement -> K_CONTINUE .)
    K_DICT          reduce using rule 75 (jump_statement -> K_CONTINUE .)
    K_SET           reduce using rule 75 (jump_statement -> K_CONTINUE .)
    K_INT           reduce using rule 75 (jump_statement -> K_CONTINUE .)
    K_DOUBLE        reduce using rule 75 (jump_statement -> K_CONTINUE .)
    K_STRING        reduce using rule 75 (jump_statement -> K_CONTINUE .)
    K_BOOL          reduce using rule 75 (jump_statement -> K_CONTINUE .)
    K_WINDOW        reduce using rule 75 (jump_statement -> K_CONTINUE .)
    K_SHAPE         reduce using rule 75 (jump_statement -> K_CONTINUE .)
    K_TRIANGLE      reduce using rule 75 (jump_statement -> K_CONTINUE .)
    K_RECTANGLE     reduce using rule 75 (jump_statement -> K_CONTINUE .)
    K_CIRCLE        reduce using rule 75 (jump_statement -> K_CONTINUE .)
    K_POINT         reduce using rule 75 (jump_statement -> K_CONTINUE .)
    K_TEXT          reduce using rule 75 (jump_statement -> K_CONTINUE .)
    K_EL            reduce using rule 75 (jump_statement -> K_CONTINUE .)
    K_EF            reduce using rule 75 (jump_statement -> K_CONTINUE .)
    $end            reduce using rule 75 (jump_statement -> K_CONTINUE .)


state 13

    (76) jump_statement -> K_BREAK .

    K_END           reduce using rule 76 (jump_statement -> K_BREAK .)
    ID              reduce using rule 76 (jump_statement -> K_BREAK .)
    K_IF            reduce using rule 76 (jump_statement -> K_BREAK .)
    K_WHILE         reduce using rule 76 (jump_statement -> K_BREAK .)
    K_CONTINUE      reduce using rule 76 (jump_statement -> K_BREAK .)
    K_BREAK         reduce using rule 76 (jump_statement -> K_BREAK .)
    K_DONE          reduce using rule 76 (jump_statement -> K_BREAK .)
    K_LIST          reduce using rule 76 (jump_statement -> K_BREAK .)
    K_DICT          reduce using rule 76 (jump_statement -> K_BREAK .)
    K_SET           reduce using rule 76 (jump_statement -> K_BREAK .)
    K_INT           reduce using rule 76 (jump_statement -> K_BREAK .)
    K_DOUBLE        reduce using rule 76 (jump_statement -> K_BREAK .)
    K_STRING        reduce using rule 76 (jump_statement -> K_BREAK .)
    K_BOOL          reduce using rule 76 (jump_statement -> K_BREAK .)
    K_WINDOW        reduce using rule 76 (jump_statement -> K_BREAK .)
    K_SHAPE         reduce using rule 76 (jump_statement -> K_BREAK .)
    K_TRIANGLE      reduce using rule 76 (jump_statement -> K_BREAK .)
    K_RECTANGLE     reduce using rule 76 (jump_statement -> K_BREAK .)
    K_CIRCLE        reduce using rule 76 (jump_statement -> K_BREAK .)
    K_POINT         reduce using rule 76 (jump_statement -> K_BREAK .)
    K_TEXT          reduce using rule 76 (jump_statement -> K_BREAK .)
    K_EL            reduce using rule 76 (jump_statement -> K_BREAK .)
    K_EF            reduce using rule 76 (jump_statement -> K_BREAK .)
    $end            reduce using rule 76 (jump_statement -> K_BREAK .)


state 14

    (19) pre_type_modifier -> K_LIST .

    K_INT           reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_DOUBLE        reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_STRING        reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_BOOL          reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_WINDOW        reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_SHAPE         reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_TRIANGLE      reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_RECTANGLE     reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_CIRCLE        reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_POINT         reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_TEXT          reduce using rule 19 (pre_type_modifier -> K_LIST .)


state 15

    (79) function_header -> pre_type_modifier . type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag
    (80) function_header -> pre_type_modifier . type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag
    (15) variable_declaration -> pre_type_modifier . type ID
    (16) variable_declaration -> pre_type_modifier . type ID ASSIGN expression
    (22) type -> . K_INT
    (23) type -> . K_DOUBLE
    (24) type -> . K_STRING
    (25) type -> . K_BOOL
    (26) type -> . K_WINDOW
    (27) type -> . K_SHAPE
    (28) type -> . K_TRIANGLE
    (29) type -> . K_RECTANGLE
    (30) type -> . K_CIRCLE
    (31) type -> . K_POINT
    (32) type -> . K_TEXT

    K_INT           shift and go to state 32
    K_DOUBLE        shift and go to state 25
    K_STRING        shift and go to state 26
    K_BOOL          shift and go to state 33
    K_WINDOW        shift and go to state 36
    K_SHAPE         shift and go to state 29
    K_TRIANGLE      shift and go to state 27
    K_RECTANGLE     shift and go to state 35
    K_CIRCLE        shift and go to state 28
    K_POINT         shift and go to state 31
    K_TEXT          shift and go to state 30

    type                           shift and go to state 34

state 16

    (20) pre_type_modifier -> K_DICT .

    K_INT           reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_DOUBLE        reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_STRING        reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_BOOL          reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_WINDOW        reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_SHAPE         reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_TRIANGLE      reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_RECTANGLE     reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_CIRCLE        reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_POINT         reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_TEXT          reduce using rule 20 (pre_type_modifier -> K_DICT .)


state 17

    (11) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (12) function_call_statement -> ID . LPAREN RPAREN
    (17) variable_declaration -> ID . ASSIGN expression

    LPAREN          shift and go to state 38
    ASSIGN          shift and go to state 37


state 18

    (10) compound_statement -> jump_statement .

    K_END           reduce using rule 10 (compound_statement -> jump_statement .)
    ID              reduce using rule 10 (compound_statement -> jump_statement .)
    K_IF            reduce using rule 10 (compound_statement -> jump_statement .)
    K_WHILE         reduce using rule 10 (compound_statement -> jump_statement .)
    K_CONTINUE      reduce using rule 10 (compound_statement -> jump_statement .)
    K_BREAK         reduce using rule 10 (compound_statement -> jump_statement .)
    K_DONE          reduce using rule 10 (compound_statement -> jump_statement .)
    K_LIST          reduce using rule 10 (compound_statement -> jump_statement .)
    K_DICT          reduce using rule 10 (compound_statement -> jump_statement .)
    K_SET           reduce using rule 10 (compound_statement -> jump_statement .)
    K_INT           reduce using rule 10 (compound_statement -> jump_statement .)
    K_DOUBLE        reduce using rule 10 (compound_statement -> jump_statement .)
    K_STRING        reduce using rule 10 (compound_statement -> jump_statement .)
    K_BOOL          reduce using rule 10 (compound_statement -> jump_statement .)
    K_WINDOW        reduce using rule 10 (compound_statement -> jump_statement .)
    K_SHAPE         reduce using rule 10 (compound_statement -> jump_statement .)
    K_TRIANGLE      reduce using rule 10 (compound_statement -> jump_statement .)
    K_RECTANGLE     reduce using rule 10 (compound_statement -> jump_statement .)
    K_CIRCLE        reduce using rule 10 (compound_statement -> jump_statement .)
    K_POINT         reduce using rule 10 (compound_statement -> jump_statement .)
    K_TEXT          reduce using rule 10 (compound_statement -> jump_statement .)
    K_EL            reduce using rule 10 (compound_statement -> jump_statement .)
    K_EF            reduce using rule 10 (compound_statement -> jump_statement .)
    $end            reduce using rule 10 (compound_statement -> jump_statement .)


state 19

    (4) statement -> function_declaration .

    ID              reduce using rule 4 (statement -> function_declaration .)
    K_IF            reduce using rule 4 (statement -> function_declaration .)
    K_WHILE         reduce using rule 4 (statement -> function_declaration .)
    K_CONTINUE      reduce using rule 4 (statement -> function_declaration .)
    K_BREAK         reduce using rule 4 (statement -> function_declaration .)
    K_DONE          reduce using rule 4 (statement -> function_declaration .)
    K_LIST          reduce using rule 4 (statement -> function_declaration .)
    K_DICT          reduce using rule 4 (statement -> function_declaration .)
    K_SET           reduce using rule 4 (statement -> function_declaration .)
    K_INT           reduce using rule 4 (statement -> function_declaration .)
    K_DOUBLE        reduce using rule 4 (statement -> function_declaration .)
    K_STRING        reduce using rule 4 (statement -> function_declaration .)
    K_BOOL          reduce using rule 4 (statement -> function_declaration .)
    K_WINDOW        reduce using rule 4 (statement -> function_declaration .)
    K_SHAPE         reduce using rule 4 (statement -> function_declaration .)
    K_TRIANGLE      reduce using rule 4 (statement -> function_declaration .)
    K_RECTANGLE     reduce using rule 4 (statement -> function_declaration .)
    K_CIRCLE        reduce using rule 4 (statement -> function_declaration .)
    K_POINT         reduce using rule 4 (statement -> function_declaration .)
    K_TEXT          reduce using rule 4 (statement -> function_declaration .)
    $end            reduce using rule 4 (statement -> function_declaration .)


state 20

    (6) compound_statement -> function_call_statement .

    K_END           reduce using rule 6 (compound_statement -> function_call_statement .)
    ID              reduce using rule 6 (compound_statement -> function_call_statement .)
    K_IF            reduce using rule 6 (compound_statement -> function_call_statement .)
    K_WHILE         reduce using rule 6 (compound_statement -> function_call_statement .)
    K_CONTINUE      reduce using rule 6 (compound_statement -> function_call_statement .)
    K_BREAK         reduce using rule 6 (compound_statement -> function_call_statement .)
    K_DONE          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_LIST          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_DICT          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_SET           reduce using rule 6 (compound_statement -> function_call_statement .)
    K_INT           reduce using rule 6 (compound_statement -> function_call_statement .)
    K_DOUBLE        reduce using rule 6 (compound_statement -> function_call_statement .)
    K_STRING        reduce using rule 6 (compound_statement -> function_call_statement .)
    K_BOOL          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_WINDOW        reduce using rule 6 (compound_statement -> function_call_statement .)
    K_SHAPE         reduce using rule 6 (compound_statement -> function_call_statement .)
    K_TRIANGLE      reduce using rule 6 (compound_statement -> function_call_statement .)
    K_RECTANGLE     reduce using rule 6 (compound_statement -> function_call_statement .)
    K_CIRCLE        reduce using rule 6 (compound_statement -> function_call_statement .)
    K_POINT         reduce using rule 6 (compound_statement -> function_call_statement .)
    K_TEXT          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_EL            reduce using rule 6 (compound_statement -> function_call_statement .)
    K_EF            reduce using rule 6 (compound_statement -> function_call_statement .)
    $end            reduce using rule 6 (compound_statement -> function_call_statement .)


state 21

    (77) jump_statement -> K_DONE .

    K_END           reduce using rule 77 (jump_statement -> K_DONE .)
    ID              reduce using rule 77 (jump_statement -> K_DONE .)
    K_IF            reduce using rule 77 (jump_statement -> K_DONE .)
    K_WHILE         reduce using rule 77 (jump_statement -> K_DONE .)
    K_CONTINUE      reduce using rule 77 (jump_statement -> K_DONE .)
    K_BREAK         reduce using rule 77 (jump_statement -> K_DONE .)
    K_DONE          reduce using rule 77 (jump_statement -> K_DONE .)
    K_LIST          reduce using rule 77 (jump_statement -> K_DONE .)
    K_DICT          reduce using rule 77 (jump_statement -> K_DONE .)
    K_SET           reduce using rule 77 (jump_statement -> K_DONE .)
    K_INT           reduce using rule 77 (jump_statement -> K_DONE .)
    K_DOUBLE        reduce using rule 77 (jump_statement -> K_DONE .)
    K_STRING        reduce using rule 77 (jump_statement -> K_DONE .)
    K_BOOL          reduce using rule 77 (jump_statement -> K_DONE .)
    K_WINDOW        reduce using rule 77 (jump_statement -> K_DONE .)
    K_SHAPE         reduce using rule 77 (jump_statement -> K_DONE .)
    K_TRIANGLE      reduce using rule 77 (jump_statement -> K_DONE .)
    K_RECTANGLE     reduce using rule 77 (jump_statement -> K_DONE .)
    K_CIRCLE        reduce using rule 77 (jump_statement -> K_DONE .)
    K_POINT         reduce using rule 77 (jump_statement -> K_DONE .)
    K_TEXT          reduce using rule 77 (jump_statement -> K_DONE .)
    K_EL            reduce using rule 77 (jump_statement -> K_DONE .)
    K_EF            reduce using rule 77 (jump_statement -> K_DONE .)
    $end            reduce using rule 77 (jump_statement -> K_DONE .)


state 22

    (66) selection_statement -> K_IF LPAREN . expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END
    (33) expression -> . expression op expression_term
    (34) expression -> . expression_term
    (35) expression_term -> . expression_term op unary_expression
    (36) expression_term -> . unary_expression
    (56) unary_expression -> . LPAREN expression RPAREN
    (57) unary_expression -> . primary_expression
    (46) primary_expression -> . constant
    (47) primary_expression -> . id_expression
    (48) primary_expression -> . function_call_statement
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . string_constant
    (49) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (54) boolean_constant -> . K_TRUE
    (55) boolean_constant -> . K_FALSE
    (64) number -> . INTEGER
    (65) number -> . DOUBLE
    (53) string_constant -> . STRING

    LPAREN          shift and go to state 49
    ID              shift and go to state 50
    K_TRUE          shift and go to state 43
    K_FALSE         shift and go to state 51
    INTEGER         shift and go to state 45
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 47

    expression_term                shift and go to state 39
    id_expression                  shift and go to state 46
    boolean_constant               shift and go to state 54
    constant                       shift and go to state 40
    unary_expression               shift and go to state 41
    string_constant                shift and go to state 44
    number                         shift and go to state 42
    function_call_statement        shift and go to state 52
    primary_expression             shift and go to state 48
    expression                     shift and go to state 55

state 23

    (74) iteration_statement -> K_WHILE LPAREN . expression RPAREN compound_statement_list K_END
    (33) expression -> . expression op expression_term
    (34) expression -> . expression_term
    (35) expression_term -> . expression_term op unary_expression
    (36) expression_term -> . unary_expression
    (56) unary_expression -> . LPAREN expression RPAREN
    (57) unary_expression -> . primary_expression
    (46) primary_expression -> . constant
    (47) primary_expression -> . id_expression
    (48) primary_expression -> . function_call_statement
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . string_constant
    (49) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (54) boolean_constant -> . K_TRUE
    (55) boolean_constant -> . K_FALSE
    (64) number -> . INTEGER
    (65) number -> . DOUBLE
    (53) string_constant -> . STRING

    LPAREN          shift and go to state 49
    ID              shift and go to state 50
    K_TRUE          shift and go to state 43
    K_FALSE         shift and go to state 51
    INTEGER         shift and go to state 45
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 47

    expression_term                shift and go to state 39
    id_expression                  shift and go to state 46
    boolean_constant               shift and go to state 54
    constant                       shift and go to state 40
    unary_expression               shift and go to state 41
    string_constant                shift and go to state 44
    number                         shift and go to state 42
    function_call_statement        shift and go to state 52
    primary_expression             shift and go to state 48
    expression                     shift and go to state 56

state 24

    (78) function_declaration -> function_header compound_statement_list . K_END
    (73) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (66) selection_statement -> . K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END
    (74) iteration_statement -> . K_WHILE LPAREN expression RPAREN compound_statement_list K_END
    (75) jump_statement -> . K_CONTINUE
    (76) jump_statement -> . K_BREAK
    (77) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_END           shift and go to state 57
    ID              shift and go to state 17
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 12
    K_BREAK         shift and go to state 13
    K_DONE          shift and go to state 21
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 14
    K_DICT          shift and go to state 16
    K_SET           shift and go to state 3

    jump_statement                 shift and go to state 18
    compound_statement             shift and go to state 58
    selection_statement            shift and go to state 9
    function_call_statement        shift and go to state 20
    pre_type_modifier              shift and go to state 59
    iteration_statement            shift and go to state 5
    variable_declaration           shift and go to state 6

state 25

    (23) type -> K_DOUBLE .

    ID              reduce using rule 23 (type -> K_DOUBLE .)


state 26

    (24) type -> K_STRING .

    ID              reduce using rule 24 (type -> K_STRING .)


state 27

    (28) type -> K_TRIANGLE .

    ID              reduce using rule 28 (type -> K_TRIANGLE .)


state 28

    (30) type -> K_CIRCLE .

    ID              reduce using rule 30 (type -> K_CIRCLE .)


state 29

    (27) type -> K_SHAPE .

    ID              reduce using rule 27 (type -> K_SHAPE .)


state 30

    (32) type -> K_TEXT .

    ID              reduce using rule 32 (type -> K_TEXT .)


state 31

    (31) type -> K_POINT .

    ID              reduce using rule 31 (type -> K_POINT .)


state 32

    (22) type -> K_INT .

    ID              reduce using rule 22 (type -> K_INT .)


state 33

    (25) type -> K_BOOL .

    ID              reduce using rule 25 (type -> K_BOOL .)


state 34

    (79) function_header -> pre_type_modifier type . ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag
    (80) function_header -> pre_type_modifier type . ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag
    (15) variable_declaration -> pre_type_modifier type . ID
    (16) variable_declaration -> pre_type_modifier type . ID ASSIGN expression

    ID              shift and go to state 60


state 35

    (29) type -> K_RECTANGLE .

    ID              reduce using rule 29 (type -> K_RECTANGLE .)


state 36

    (26) type -> K_WINDOW .

    ID              reduce using rule 26 (type -> K_WINDOW .)


state 37

    (17) variable_declaration -> ID ASSIGN . expression
    (33) expression -> . expression op expression_term
    (34) expression -> . expression_term
    (35) expression_term -> . expression_term op unary_expression
    (36) expression_term -> . unary_expression
    (56) unary_expression -> . LPAREN expression RPAREN
    (57) unary_expression -> . primary_expression
    (46) primary_expression -> . constant
    (47) primary_expression -> . id_expression
    (48) primary_expression -> . function_call_statement
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . string_constant
    (49) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (54) boolean_constant -> . K_TRUE
    (55) boolean_constant -> . K_FALSE
    (64) number -> . INTEGER
    (65) number -> . DOUBLE
    (53) string_constant -> . STRING

    LPAREN          shift and go to state 49
    ID              shift and go to state 50
    K_TRUE          shift and go to state 43
    K_FALSE         shift and go to state 51
    INTEGER         shift and go to state 45
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 47

    expression_term                shift and go to state 39
    id_expression                  shift and go to state 46
    constant                       shift and go to state 40
    unary_expression               shift and go to state 41
    string_constant                shift and go to state 44
    number                         shift and go to state 42
    function_call_statement        shift and go to state 52
    primary_expression             shift and go to state 48
    boolean_constant               shift and go to state 54
    expression                     shift and go to state 61

state 38

    (11) function_call_statement -> ID LPAREN . parameter_list RPAREN
    (12) function_call_statement -> ID LPAREN . RPAREN
    (13) parameter_list -> . parameter_list COMMA expression
    (14) parameter_list -> . expression
    (33) expression -> . expression op expression_term
    (34) expression -> . expression_term
    (35) expression_term -> . expression_term op unary_expression
    (36) expression_term -> . unary_expression
    (56) unary_expression -> . LPAREN expression RPAREN
    (57) unary_expression -> . primary_expression
    (46) primary_expression -> . constant
    (47) primary_expression -> . id_expression
    (48) primary_expression -> . function_call_statement
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . string_constant
    (49) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (54) boolean_constant -> . K_TRUE
    (55) boolean_constant -> . K_FALSE
    (64) number -> . INTEGER
    (65) number -> . DOUBLE
    (53) string_constant -> . STRING

    RPAREN          shift and go to state 62
    LPAREN          shift and go to state 49
    ID              shift and go to state 50
    K_TRUE          shift and go to state 43
    K_FALSE         shift and go to state 51
    INTEGER         shift and go to state 45
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 47

    expression_term                shift and go to state 39
    id_expression                  shift and go to state 46
    constant                       shift and go to state 40
    parameter_list                 shift and go to state 63
    unary_expression               shift and go to state 41
    string_constant                shift and go to state 44
    number                         shift and go to state 42
    function_call_statement        shift and go to state 52
    primary_expression             shift and go to state 48
    boolean_constant               shift and go to state 54
    expression                     shift and go to state 64

state 39

    (34) expression -> expression_term .
    (35) expression_term -> expression_term . op unary_expression
    (37) op -> . PLUS
    (38) op -> . MINUS
    (39) op -> . TIMES
    (40) op -> . DIVIDE
    (41) op -> . MOD
    (42) op -> . comparator
    (43) op -> . boolean_operator
    (58) comparator -> . GT
    (59) comparator -> . LT
    (60) comparator -> . GEQ
    (61) comparator -> . LEQ
    (62) comparator -> . EQ
    (63) comparator -> . NEQ
    (44) boolean_operator -> . AND
    (45) boolean_operator -> . OR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPAREN          reduce using rule 34 (expression -> expression_term .)
    COMMA           reduce using rule 34 (expression -> expression_term .)
    ID              reduce using rule 34 (expression -> expression_term .)
    K_IF            reduce using rule 34 (expression -> expression_term .)
    K_WHILE         reduce using rule 34 (expression -> expression_term .)
    K_CONTINUE      reduce using rule 34 (expression -> expression_term .)
    K_BREAK         reduce using rule 34 (expression -> expression_term .)
    K_DONE          reduce using rule 34 (expression -> expression_term .)
    K_LIST          reduce using rule 34 (expression -> expression_term .)
    K_DICT          reduce using rule 34 (expression -> expression_term .)
    K_SET           reduce using rule 34 (expression -> expression_term .)
    K_INT           reduce using rule 34 (expression -> expression_term .)
    K_DOUBLE        reduce using rule 34 (expression -> expression_term .)
    K_STRING        reduce using rule 34 (expression -> expression_term .)
    K_BOOL          reduce using rule 34 (expression -> expression_term .)
    K_WINDOW        reduce using rule 34 (expression -> expression_term .)
    K_SHAPE         reduce using rule 34 (expression -> expression_term .)
    K_TRIANGLE      reduce using rule 34 (expression -> expression_term .)
    K_RECTANGLE     reduce using rule 34 (expression -> expression_term .)
    K_CIRCLE        reduce using rule 34 (expression -> expression_term .)
    K_POINT         reduce using rule 34 (expression -> expression_term .)
    K_TEXT          reduce using rule 34 (expression -> expression_term .)
    $end            reduce using rule 34 (expression -> expression_term .)
    K_END           reduce using rule 34 (expression -> expression_term .)
    K_EL            reduce using rule 34 (expression -> expression_term .)
    K_EF            reduce using rule 34 (expression -> expression_term .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 79
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 77
    GT              shift and go to state 67
    LT              shift and go to state 74
    GEQ             shift and go to state 66
    LEQ             shift and go to state 73
    EQ              shift and go to state 78
    NEQ             shift and go to state 76
    AND             shift and go to state 70
    OR              shift and go to state 71

  ! PLUS            [ reduce using rule 34 (expression -> expression_term .) ]
  ! MINUS           [ reduce using rule 34 (expression -> expression_term .) ]
  ! TIMES           [ reduce using rule 34 (expression -> expression_term .) ]
  ! DIVIDE          [ reduce using rule 34 (expression -> expression_term .) ]
  ! MOD             [ reduce using rule 34 (expression -> expression_term .) ]
  ! GT              [ reduce using rule 34 (expression -> expression_term .) ]
  ! LT              [ reduce using rule 34 (expression -> expression_term .) ]
  ! GEQ             [ reduce using rule 34 (expression -> expression_term .) ]
  ! LEQ             [ reduce using rule 34 (expression -> expression_term .) ]
  ! EQ              [ reduce using rule 34 (expression -> expression_term .) ]
  ! NEQ             [ reduce using rule 34 (expression -> expression_term .) ]
  ! AND             [ reduce using rule 34 (expression -> expression_term .) ]
  ! OR              [ reduce using rule 34 (expression -> expression_term .) ]

    boolean_operator               shift and go to state 69
    comparator                     shift and go to state 65
    op                             shift and go to state 80

state 40

    (46) primary_expression -> constant .

    PLUS            reduce using rule 46 (primary_expression -> constant .)
    MINUS           reduce using rule 46 (primary_expression -> constant .)
    TIMES           reduce using rule 46 (primary_expression -> constant .)
    DIVIDE          reduce using rule 46 (primary_expression -> constant .)
    MOD             reduce using rule 46 (primary_expression -> constant .)
    GT              reduce using rule 46 (primary_expression -> constant .)
    LT              reduce using rule 46 (primary_expression -> constant .)
    GEQ             reduce using rule 46 (primary_expression -> constant .)
    LEQ             reduce using rule 46 (primary_expression -> constant .)
    EQ              reduce using rule 46 (primary_expression -> constant .)
    NEQ             reduce using rule 46 (primary_expression -> constant .)
    AND             reduce using rule 46 (primary_expression -> constant .)
    OR              reduce using rule 46 (primary_expression -> constant .)
    ID              reduce using rule 46 (primary_expression -> constant .)
    K_IF            reduce using rule 46 (primary_expression -> constant .)
    K_WHILE         reduce using rule 46 (primary_expression -> constant .)
    K_CONTINUE      reduce using rule 46 (primary_expression -> constant .)
    K_BREAK         reduce using rule 46 (primary_expression -> constant .)
    K_DONE          reduce using rule 46 (primary_expression -> constant .)
    K_LIST          reduce using rule 46 (primary_expression -> constant .)
    K_DICT          reduce using rule 46 (primary_expression -> constant .)
    K_SET           reduce using rule 46 (primary_expression -> constant .)
    K_INT           reduce using rule 46 (primary_expression -> constant .)
    K_DOUBLE        reduce using rule 46 (primary_expression -> constant .)
    K_STRING        reduce using rule 46 (primary_expression -> constant .)
    K_BOOL          reduce using rule 46 (primary_expression -> constant .)
    K_WINDOW        reduce using rule 46 (primary_expression -> constant .)
    K_SHAPE         reduce using rule 46 (primary_expression -> constant .)
    K_TRIANGLE      reduce using rule 46 (primary_expression -> constant .)
    K_RECTANGLE     reduce using rule 46 (primary_expression -> constant .)
    K_CIRCLE        reduce using rule 46 (primary_expression -> constant .)
    K_POINT         reduce using rule 46 (primary_expression -> constant .)
    K_TEXT          reduce using rule 46 (primary_expression -> constant .)
    $end            reduce using rule 46 (primary_expression -> constant .)
    K_END           reduce using rule 46 (primary_expression -> constant .)
    K_EL            reduce using rule 46 (primary_expression -> constant .)
    K_EF            reduce using rule 46 (primary_expression -> constant .)
    RPAREN          reduce using rule 46 (primary_expression -> constant .)
    COMMA           reduce using rule 46 (primary_expression -> constant .)


state 41

    (36) expression_term -> unary_expression .

    PLUS            reduce using rule 36 (expression_term -> unary_expression .)
    MINUS           reduce using rule 36 (expression_term -> unary_expression .)
    TIMES           reduce using rule 36 (expression_term -> unary_expression .)
    DIVIDE          reduce using rule 36 (expression_term -> unary_expression .)
    MOD             reduce using rule 36 (expression_term -> unary_expression .)
    GT              reduce using rule 36 (expression_term -> unary_expression .)
    LT              reduce using rule 36 (expression_term -> unary_expression .)
    GEQ             reduce using rule 36 (expression_term -> unary_expression .)
    LEQ             reduce using rule 36 (expression_term -> unary_expression .)
    EQ              reduce using rule 36 (expression_term -> unary_expression .)
    NEQ             reduce using rule 36 (expression_term -> unary_expression .)
    AND             reduce using rule 36 (expression_term -> unary_expression .)
    OR              reduce using rule 36 (expression_term -> unary_expression .)
    ID              reduce using rule 36 (expression_term -> unary_expression .)
    K_IF            reduce using rule 36 (expression_term -> unary_expression .)
    K_WHILE         reduce using rule 36 (expression_term -> unary_expression .)
    K_CONTINUE      reduce using rule 36 (expression_term -> unary_expression .)
    K_BREAK         reduce using rule 36 (expression_term -> unary_expression .)
    K_DONE          reduce using rule 36 (expression_term -> unary_expression .)
    K_LIST          reduce using rule 36 (expression_term -> unary_expression .)
    K_DICT          reduce using rule 36 (expression_term -> unary_expression .)
    K_SET           reduce using rule 36 (expression_term -> unary_expression .)
    K_INT           reduce using rule 36 (expression_term -> unary_expression .)
    K_DOUBLE        reduce using rule 36 (expression_term -> unary_expression .)
    K_STRING        reduce using rule 36 (expression_term -> unary_expression .)
    K_BOOL          reduce using rule 36 (expression_term -> unary_expression .)
    K_WINDOW        reduce using rule 36 (expression_term -> unary_expression .)
    K_SHAPE         reduce using rule 36 (expression_term -> unary_expression .)
    K_TRIANGLE      reduce using rule 36 (expression_term -> unary_expression .)
    K_RECTANGLE     reduce using rule 36 (expression_term -> unary_expression .)
    K_CIRCLE        reduce using rule 36 (expression_term -> unary_expression .)
    K_POINT         reduce using rule 36 (expression_term -> unary_expression .)
    K_TEXT          reduce using rule 36 (expression_term -> unary_expression .)
    $end            reduce using rule 36 (expression_term -> unary_expression .)
    K_END           reduce using rule 36 (expression_term -> unary_expression .)
    K_EL            reduce using rule 36 (expression_term -> unary_expression .)
    K_EF            reduce using rule 36 (expression_term -> unary_expression .)
    RPAREN          reduce using rule 36 (expression_term -> unary_expression .)
    COMMA           reduce using rule 36 (expression_term -> unary_expression .)


state 42

    (51) constant -> number .

    PLUS            reduce using rule 51 (constant -> number .)
    MINUS           reduce using rule 51 (constant -> number .)
    TIMES           reduce using rule 51 (constant -> number .)
    DIVIDE          reduce using rule 51 (constant -> number .)
    MOD             reduce using rule 51 (constant -> number .)
    GT              reduce using rule 51 (constant -> number .)
    LT              reduce using rule 51 (constant -> number .)
    GEQ             reduce using rule 51 (constant -> number .)
    LEQ             reduce using rule 51 (constant -> number .)
    EQ              reduce using rule 51 (constant -> number .)
    NEQ             reduce using rule 51 (constant -> number .)
    AND             reduce using rule 51 (constant -> number .)
    OR              reduce using rule 51 (constant -> number .)
    RPAREN          reduce using rule 51 (constant -> number .)
    COMMA           reduce using rule 51 (constant -> number .)
    K_END           reduce using rule 51 (constant -> number .)
    ID              reduce using rule 51 (constant -> number .)
    K_IF            reduce using rule 51 (constant -> number .)
    K_WHILE         reduce using rule 51 (constant -> number .)
    K_CONTINUE      reduce using rule 51 (constant -> number .)
    K_BREAK         reduce using rule 51 (constant -> number .)
    K_DONE          reduce using rule 51 (constant -> number .)
    K_LIST          reduce using rule 51 (constant -> number .)
    K_DICT          reduce using rule 51 (constant -> number .)
    K_SET           reduce using rule 51 (constant -> number .)
    K_INT           reduce using rule 51 (constant -> number .)
    K_DOUBLE        reduce using rule 51 (constant -> number .)
    K_STRING        reduce using rule 51 (constant -> number .)
    K_BOOL          reduce using rule 51 (constant -> number .)
    K_WINDOW        reduce using rule 51 (constant -> number .)
    K_SHAPE         reduce using rule 51 (constant -> number .)
    K_TRIANGLE      reduce using rule 51 (constant -> number .)
    K_RECTANGLE     reduce using rule 51 (constant -> number .)
    K_CIRCLE        reduce using rule 51 (constant -> number .)
    K_POINT         reduce using rule 51 (constant -> number .)
    K_TEXT          reduce using rule 51 (constant -> number .)
    $end            reduce using rule 51 (constant -> number .)
    K_EL            reduce using rule 51 (constant -> number .)
    K_EF            reduce using rule 51 (constant -> number .)


state 43

    (54) boolean_constant -> K_TRUE .

    PLUS            reduce using rule 54 (boolean_constant -> K_TRUE .)
    MINUS           reduce using rule 54 (boolean_constant -> K_TRUE .)
    TIMES           reduce using rule 54 (boolean_constant -> K_TRUE .)
    DIVIDE          reduce using rule 54 (boolean_constant -> K_TRUE .)
    MOD             reduce using rule 54 (boolean_constant -> K_TRUE .)
    GT              reduce using rule 54 (boolean_constant -> K_TRUE .)
    LT              reduce using rule 54 (boolean_constant -> K_TRUE .)
    GEQ             reduce using rule 54 (boolean_constant -> K_TRUE .)
    LEQ             reduce using rule 54 (boolean_constant -> K_TRUE .)
    EQ              reduce using rule 54 (boolean_constant -> K_TRUE .)
    NEQ             reduce using rule 54 (boolean_constant -> K_TRUE .)
    AND             reduce using rule 54 (boolean_constant -> K_TRUE .)
    OR              reduce using rule 54 (boolean_constant -> K_TRUE .)
    RPAREN          reduce using rule 54 (boolean_constant -> K_TRUE .)
    ID              reduce using rule 54 (boolean_constant -> K_TRUE .)
    K_IF            reduce using rule 54 (boolean_constant -> K_TRUE .)
    K_WHILE         reduce using rule 54 (boolean_constant -> K_TRUE .)
    K_CONTINUE      reduce using rule 54 (boolean_constant -> K_TRUE .)
    K_BREAK         reduce using rule 54 (boolean_constant -> K_TRUE .)
    K_DONE          reduce using rule 54 (boolean_constant -> K_TRUE .)
    K_LIST          reduce using rule 54 (boolean_constant -> K_TRUE .)
    K_DICT          reduce using rule 54 (boolean_constant -> K_TRUE .)
    K_SET           reduce using rule 54 (boolean_constant -> K_TRUE .)
    K_INT           reduce using rule 54 (boolean_constant -> K_TRUE .)
    K_DOUBLE        reduce using rule 54 (boolean_constant -> K_TRUE .)
    K_STRING        reduce using rule 54 (boolean_constant -> K_TRUE .)
    K_BOOL          reduce using rule 54 (boolean_constant -> K_TRUE .)
    K_WINDOW        reduce using rule 54 (boolean_constant -> K_TRUE .)
    K_SHAPE         reduce using rule 54 (boolean_constant -> K_TRUE .)
    K_TRIANGLE      reduce using rule 54 (boolean_constant -> K_TRUE .)
    K_RECTANGLE     reduce using rule 54 (boolean_constant -> K_TRUE .)
    K_CIRCLE        reduce using rule 54 (boolean_constant -> K_TRUE .)
    K_POINT         reduce using rule 54 (boolean_constant -> K_TRUE .)
    K_TEXT          reduce using rule 54 (boolean_constant -> K_TRUE .)
    $end            reduce using rule 54 (boolean_constant -> K_TRUE .)
    K_END           reduce using rule 54 (boolean_constant -> K_TRUE .)
    K_EL            reduce using rule 54 (boolean_constant -> K_TRUE .)
    K_EF            reduce using rule 54 (boolean_constant -> K_TRUE .)
    COMMA           reduce using rule 54 (boolean_constant -> K_TRUE .)


state 44

    (52) constant -> string_constant .

    PLUS            reduce using rule 52 (constant -> string_constant .)
    MINUS           reduce using rule 52 (constant -> string_constant .)
    TIMES           reduce using rule 52 (constant -> string_constant .)
    DIVIDE          reduce using rule 52 (constant -> string_constant .)
    MOD             reduce using rule 52 (constant -> string_constant .)
    GT              reduce using rule 52 (constant -> string_constant .)
    LT              reduce using rule 52 (constant -> string_constant .)
    GEQ             reduce using rule 52 (constant -> string_constant .)
    LEQ             reduce using rule 52 (constant -> string_constant .)
    EQ              reduce using rule 52 (constant -> string_constant .)
    NEQ             reduce using rule 52 (constant -> string_constant .)
    AND             reduce using rule 52 (constant -> string_constant .)
    OR              reduce using rule 52 (constant -> string_constant .)
    RPAREN          reduce using rule 52 (constant -> string_constant .)
    COMMA           reduce using rule 52 (constant -> string_constant .)
    K_END           reduce using rule 52 (constant -> string_constant .)
    ID              reduce using rule 52 (constant -> string_constant .)
    K_IF            reduce using rule 52 (constant -> string_constant .)
    K_WHILE         reduce using rule 52 (constant -> string_constant .)
    K_CONTINUE      reduce using rule 52 (constant -> string_constant .)
    K_BREAK         reduce using rule 52 (constant -> string_constant .)
    K_DONE          reduce using rule 52 (constant -> string_constant .)
    K_LIST          reduce using rule 52 (constant -> string_constant .)
    K_DICT          reduce using rule 52 (constant -> string_constant .)
    K_SET           reduce using rule 52 (constant -> string_constant .)
    K_INT           reduce using rule 52 (constant -> string_constant .)
    K_DOUBLE        reduce using rule 52 (constant -> string_constant .)
    K_STRING        reduce using rule 52 (constant -> string_constant .)
    K_BOOL          reduce using rule 52 (constant -> string_constant .)
    K_WINDOW        reduce using rule 52 (constant -> string_constant .)
    K_SHAPE         reduce using rule 52 (constant -> string_constant .)
    K_TRIANGLE      reduce using rule 52 (constant -> string_constant .)
    K_RECTANGLE     reduce using rule 52 (constant -> string_constant .)
    K_CIRCLE        reduce using rule 52 (constant -> string_constant .)
    K_POINT         reduce using rule 52 (constant -> string_constant .)
    K_TEXT          reduce using rule 52 (constant -> string_constant .)
    $end            reduce using rule 52 (constant -> string_constant .)
    K_EL            reduce using rule 52 (constant -> string_constant .)
    K_EF            reduce using rule 52 (constant -> string_constant .)


state 45

    (64) number -> INTEGER .

    PLUS            reduce using rule 64 (number -> INTEGER .)
    MINUS           reduce using rule 64 (number -> INTEGER .)
    TIMES           reduce using rule 64 (number -> INTEGER .)
    DIVIDE          reduce using rule 64 (number -> INTEGER .)
    MOD             reduce using rule 64 (number -> INTEGER .)
    GT              reduce using rule 64 (number -> INTEGER .)
    LT              reduce using rule 64 (number -> INTEGER .)
    GEQ             reduce using rule 64 (number -> INTEGER .)
    LEQ             reduce using rule 64 (number -> INTEGER .)
    EQ              reduce using rule 64 (number -> INTEGER .)
    NEQ             reduce using rule 64 (number -> INTEGER .)
    AND             reduce using rule 64 (number -> INTEGER .)
    OR              reduce using rule 64 (number -> INTEGER .)
    RPAREN          reduce using rule 64 (number -> INTEGER .)
    K_END           reduce using rule 64 (number -> INTEGER .)
    ID              reduce using rule 64 (number -> INTEGER .)
    K_IF            reduce using rule 64 (number -> INTEGER .)
    K_WHILE         reduce using rule 64 (number -> INTEGER .)
    K_CONTINUE      reduce using rule 64 (number -> INTEGER .)
    K_BREAK         reduce using rule 64 (number -> INTEGER .)
    K_DONE          reduce using rule 64 (number -> INTEGER .)
    K_LIST          reduce using rule 64 (number -> INTEGER .)
    K_DICT          reduce using rule 64 (number -> INTEGER .)
    K_SET           reduce using rule 64 (number -> INTEGER .)
    K_INT           reduce using rule 64 (number -> INTEGER .)
    K_DOUBLE        reduce using rule 64 (number -> INTEGER .)
    K_STRING        reduce using rule 64 (number -> INTEGER .)
    K_BOOL          reduce using rule 64 (number -> INTEGER .)
    K_WINDOW        reduce using rule 64 (number -> INTEGER .)
    K_SHAPE         reduce using rule 64 (number -> INTEGER .)
    K_TRIANGLE      reduce using rule 64 (number -> INTEGER .)
    K_RECTANGLE     reduce using rule 64 (number -> INTEGER .)
    K_CIRCLE        reduce using rule 64 (number -> INTEGER .)
    K_POINT         reduce using rule 64 (number -> INTEGER .)
    K_TEXT          reduce using rule 64 (number -> INTEGER .)
    $end            reduce using rule 64 (number -> INTEGER .)
    K_EL            reduce using rule 64 (number -> INTEGER .)
    K_EF            reduce using rule 64 (number -> INTEGER .)
    COMMA           reduce using rule 64 (number -> INTEGER .)


state 46

    (47) primary_expression -> id_expression .

    PLUS            reduce using rule 47 (primary_expression -> id_expression .)
    MINUS           reduce using rule 47 (primary_expression -> id_expression .)
    TIMES           reduce using rule 47 (primary_expression -> id_expression .)
    DIVIDE          reduce using rule 47 (primary_expression -> id_expression .)
    MOD             reduce using rule 47 (primary_expression -> id_expression .)
    GT              reduce using rule 47 (primary_expression -> id_expression .)
    LT              reduce using rule 47 (primary_expression -> id_expression .)
    GEQ             reduce using rule 47 (primary_expression -> id_expression .)
    LEQ             reduce using rule 47 (primary_expression -> id_expression .)
    EQ              reduce using rule 47 (primary_expression -> id_expression .)
    NEQ             reduce using rule 47 (primary_expression -> id_expression .)
    AND             reduce using rule 47 (primary_expression -> id_expression .)
    OR              reduce using rule 47 (primary_expression -> id_expression .)
    ID              reduce using rule 47 (primary_expression -> id_expression .)
    K_IF            reduce using rule 47 (primary_expression -> id_expression .)
    K_WHILE         reduce using rule 47 (primary_expression -> id_expression .)
    K_CONTINUE      reduce using rule 47 (primary_expression -> id_expression .)
    K_BREAK         reduce using rule 47 (primary_expression -> id_expression .)
    K_DONE          reduce using rule 47 (primary_expression -> id_expression .)
    K_LIST          reduce using rule 47 (primary_expression -> id_expression .)
    K_DICT          reduce using rule 47 (primary_expression -> id_expression .)
    K_SET           reduce using rule 47 (primary_expression -> id_expression .)
    K_INT           reduce using rule 47 (primary_expression -> id_expression .)
    K_DOUBLE        reduce using rule 47 (primary_expression -> id_expression .)
    K_STRING        reduce using rule 47 (primary_expression -> id_expression .)
    K_BOOL          reduce using rule 47 (primary_expression -> id_expression .)
    K_WINDOW        reduce using rule 47 (primary_expression -> id_expression .)
    K_SHAPE         reduce using rule 47 (primary_expression -> id_expression .)
    K_TRIANGLE      reduce using rule 47 (primary_expression -> id_expression .)
    K_RECTANGLE     reduce using rule 47 (primary_expression -> id_expression .)
    K_CIRCLE        reduce using rule 47 (primary_expression -> id_expression .)
    K_POINT         reduce using rule 47 (primary_expression -> id_expression .)
    K_TEXT          reduce using rule 47 (primary_expression -> id_expression .)
    $end            reduce using rule 47 (primary_expression -> id_expression .)
    K_END           reduce using rule 47 (primary_expression -> id_expression .)
    K_EL            reduce using rule 47 (primary_expression -> id_expression .)
    K_EF            reduce using rule 47 (primary_expression -> id_expression .)
    RPAREN          reduce using rule 47 (primary_expression -> id_expression .)
    COMMA           reduce using rule 47 (primary_expression -> id_expression .)


state 47

    (53) string_constant -> STRING .

    K_END           reduce using rule 53 (string_constant -> STRING .)
    ID              reduce using rule 53 (string_constant -> STRING .)
    K_IF            reduce using rule 53 (string_constant -> STRING .)
    K_WHILE         reduce using rule 53 (string_constant -> STRING .)
    K_CONTINUE      reduce using rule 53 (string_constant -> STRING .)
    K_BREAK         reduce using rule 53 (string_constant -> STRING .)
    K_DONE          reduce using rule 53 (string_constant -> STRING .)
    K_LIST          reduce using rule 53 (string_constant -> STRING .)
    K_DICT          reduce using rule 53 (string_constant -> STRING .)
    K_SET           reduce using rule 53 (string_constant -> STRING .)
    K_INT           reduce using rule 53 (string_constant -> STRING .)
    K_DOUBLE        reduce using rule 53 (string_constant -> STRING .)
    K_STRING        reduce using rule 53 (string_constant -> STRING .)
    K_BOOL          reduce using rule 53 (string_constant -> STRING .)
    K_WINDOW        reduce using rule 53 (string_constant -> STRING .)
    K_SHAPE         reduce using rule 53 (string_constant -> STRING .)
    K_TRIANGLE      reduce using rule 53 (string_constant -> STRING .)
    K_RECTANGLE     reduce using rule 53 (string_constant -> STRING .)
    K_CIRCLE        reduce using rule 53 (string_constant -> STRING .)
    K_POINT         reduce using rule 53 (string_constant -> STRING .)
    K_TEXT          reduce using rule 53 (string_constant -> STRING .)
    PLUS            reduce using rule 53 (string_constant -> STRING .)
    MINUS           reduce using rule 53 (string_constant -> STRING .)
    TIMES           reduce using rule 53 (string_constant -> STRING .)
    DIVIDE          reduce using rule 53 (string_constant -> STRING .)
    MOD             reduce using rule 53 (string_constant -> STRING .)
    GT              reduce using rule 53 (string_constant -> STRING .)
    LT              reduce using rule 53 (string_constant -> STRING .)
    GEQ             reduce using rule 53 (string_constant -> STRING .)
    LEQ             reduce using rule 53 (string_constant -> STRING .)
    EQ              reduce using rule 53 (string_constant -> STRING .)
    NEQ             reduce using rule 53 (string_constant -> STRING .)
    AND             reduce using rule 53 (string_constant -> STRING .)
    OR              reduce using rule 53 (string_constant -> STRING .)
    RPAREN          reduce using rule 53 (string_constant -> STRING .)
    COMMA           reduce using rule 53 (string_constant -> STRING .)
    $end            reduce using rule 53 (string_constant -> STRING .)
    K_EL            reduce using rule 53 (string_constant -> STRING .)
    K_EF            reduce using rule 53 (string_constant -> STRING .)


state 48

    (57) unary_expression -> primary_expression .

    PLUS            reduce using rule 57 (unary_expression -> primary_expression .)
    MINUS           reduce using rule 57 (unary_expression -> primary_expression .)
    TIMES           reduce using rule 57 (unary_expression -> primary_expression .)
    DIVIDE          reduce using rule 57 (unary_expression -> primary_expression .)
    MOD             reduce using rule 57 (unary_expression -> primary_expression .)
    GT              reduce using rule 57 (unary_expression -> primary_expression .)
    LT              reduce using rule 57 (unary_expression -> primary_expression .)
    GEQ             reduce using rule 57 (unary_expression -> primary_expression .)
    LEQ             reduce using rule 57 (unary_expression -> primary_expression .)
    EQ              reduce using rule 57 (unary_expression -> primary_expression .)
    NEQ             reduce using rule 57 (unary_expression -> primary_expression .)
    AND             reduce using rule 57 (unary_expression -> primary_expression .)
    OR              reduce using rule 57 (unary_expression -> primary_expression .)
    RPAREN          reduce using rule 57 (unary_expression -> primary_expression .)
    ID              reduce using rule 57 (unary_expression -> primary_expression .)
    K_IF            reduce using rule 57 (unary_expression -> primary_expression .)
    K_WHILE         reduce using rule 57 (unary_expression -> primary_expression .)
    K_CONTINUE      reduce using rule 57 (unary_expression -> primary_expression .)
    K_BREAK         reduce using rule 57 (unary_expression -> primary_expression .)
    K_DONE          reduce using rule 57 (unary_expression -> primary_expression .)
    K_LIST          reduce using rule 57 (unary_expression -> primary_expression .)
    K_DICT          reduce using rule 57 (unary_expression -> primary_expression .)
    K_SET           reduce using rule 57 (unary_expression -> primary_expression .)
    K_INT           reduce using rule 57 (unary_expression -> primary_expression .)
    K_DOUBLE        reduce using rule 57 (unary_expression -> primary_expression .)
    K_STRING        reduce using rule 57 (unary_expression -> primary_expression .)
    K_BOOL          reduce using rule 57 (unary_expression -> primary_expression .)
    K_WINDOW        reduce using rule 57 (unary_expression -> primary_expression .)
    K_SHAPE         reduce using rule 57 (unary_expression -> primary_expression .)
    K_TRIANGLE      reduce using rule 57 (unary_expression -> primary_expression .)
    K_RECTANGLE     reduce using rule 57 (unary_expression -> primary_expression .)
    K_CIRCLE        reduce using rule 57 (unary_expression -> primary_expression .)
    K_POINT         reduce using rule 57 (unary_expression -> primary_expression .)
    K_TEXT          reduce using rule 57 (unary_expression -> primary_expression .)
    $end            reduce using rule 57 (unary_expression -> primary_expression .)
    K_END           reduce using rule 57 (unary_expression -> primary_expression .)
    K_EL            reduce using rule 57 (unary_expression -> primary_expression .)
    K_EF            reduce using rule 57 (unary_expression -> primary_expression .)
    COMMA           reduce using rule 57 (unary_expression -> primary_expression .)


state 49

    (56) unary_expression -> LPAREN . expression RPAREN
    (33) expression -> . expression op expression_term
    (34) expression -> . expression_term
    (35) expression_term -> . expression_term op unary_expression
    (36) expression_term -> . unary_expression
    (56) unary_expression -> . LPAREN expression RPAREN
    (57) unary_expression -> . primary_expression
    (46) primary_expression -> . constant
    (47) primary_expression -> . id_expression
    (48) primary_expression -> . function_call_statement
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . string_constant
    (49) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (54) boolean_constant -> . K_TRUE
    (55) boolean_constant -> . K_FALSE
    (64) number -> . INTEGER
    (65) number -> . DOUBLE
    (53) string_constant -> . STRING

    LPAREN          shift and go to state 49
    ID              shift and go to state 50
    K_TRUE          shift and go to state 43
    K_FALSE         shift and go to state 51
    INTEGER         shift and go to state 45
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 47

    expression_term                shift and go to state 39
    id_expression                  shift and go to state 46
    constant                       shift and go to state 40
    unary_expression               shift and go to state 41
    string_constant                shift and go to state 44
    number                         shift and go to state 42
    function_call_statement        shift and go to state 52
    primary_expression             shift and go to state 48
    boolean_constant               shift and go to state 54
    expression                     shift and go to state 81

state 50

    (49) id_expression -> ID .
    (11) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (12) function_call_statement -> ID . LPAREN RPAREN

    PLUS            reduce using rule 49 (id_expression -> ID .)
    MINUS           reduce using rule 49 (id_expression -> ID .)
    TIMES           reduce using rule 49 (id_expression -> ID .)
    DIVIDE          reduce using rule 49 (id_expression -> ID .)
    MOD             reduce using rule 49 (id_expression -> ID .)
    GT              reduce using rule 49 (id_expression -> ID .)
    LT              reduce using rule 49 (id_expression -> ID .)
    GEQ             reduce using rule 49 (id_expression -> ID .)
    LEQ             reduce using rule 49 (id_expression -> ID .)
    EQ              reduce using rule 49 (id_expression -> ID .)
    NEQ             reduce using rule 49 (id_expression -> ID .)
    AND             reduce using rule 49 (id_expression -> ID .)
    OR              reduce using rule 49 (id_expression -> ID .)
    RPAREN          reduce using rule 49 (id_expression -> ID .)
    COMMA           reduce using rule 49 (id_expression -> ID .)
    ID              reduce using rule 49 (id_expression -> ID .)
    K_IF            reduce using rule 49 (id_expression -> ID .)
    K_WHILE         reduce using rule 49 (id_expression -> ID .)
    K_CONTINUE      reduce using rule 49 (id_expression -> ID .)
    K_BREAK         reduce using rule 49 (id_expression -> ID .)
    K_DONE          reduce using rule 49 (id_expression -> ID .)
    K_LIST          reduce using rule 49 (id_expression -> ID .)
    K_DICT          reduce using rule 49 (id_expression -> ID .)
    K_SET           reduce using rule 49 (id_expression -> ID .)
    K_INT           reduce using rule 49 (id_expression -> ID .)
    K_DOUBLE        reduce using rule 49 (id_expression -> ID .)
    K_STRING        reduce using rule 49 (id_expression -> ID .)
    K_BOOL          reduce using rule 49 (id_expression -> ID .)
    K_WINDOW        reduce using rule 49 (id_expression -> ID .)
    K_SHAPE         reduce using rule 49 (id_expression -> ID .)
    K_TRIANGLE      reduce using rule 49 (id_expression -> ID .)
    K_RECTANGLE     reduce using rule 49 (id_expression -> ID .)
    K_CIRCLE        reduce using rule 49 (id_expression -> ID .)
    K_POINT         reduce using rule 49 (id_expression -> ID .)
    K_TEXT          reduce using rule 49 (id_expression -> ID .)
    $end            reduce using rule 49 (id_expression -> ID .)
    K_END           reduce using rule 49 (id_expression -> ID .)
    K_EL            reduce using rule 49 (id_expression -> ID .)
    K_EF            reduce using rule 49 (id_expression -> ID .)
    LPAREN          shift and go to state 38


state 51

    (55) boolean_constant -> K_FALSE .

    PLUS            reduce using rule 55 (boolean_constant -> K_FALSE .)
    MINUS           reduce using rule 55 (boolean_constant -> K_FALSE .)
    TIMES           reduce using rule 55 (boolean_constant -> K_FALSE .)
    DIVIDE          reduce using rule 55 (boolean_constant -> K_FALSE .)
    MOD             reduce using rule 55 (boolean_constant -> K_FALSE .)
    GT              reduce using rule 55 (boolean_constant -> K_FALSE .)
    LT              reduce using rule 55 (boolean_constant -> K_FALSE .)
    GEQ             reduce using rule 55 (boolean_constant -> K_FALSE .)
    LEQ             reduce using rule 55 (boolean_constant -> K_FALSE .)
    EQ              reduce using rule 55 (boolean_constant -> K_FALSE .)
    NEQ             reduce using rule 55 (boolean_constant -> K_FALSE .)
    AND             reduce using rule 55 (boolean_constant -> K_FALSE .)
    OR              reduce using rule 55 (boolean_constant -> K_FALSE .)
    RPAREN          reduce using rule 55 (boolean_constant -> K_FALSE .)
    ID              reduce using rule 55 (boolean_constant -> K_FALSE .)
    K_IF            reduce using rule 55 (boolean_constant -> K_FALSE .)
    K_WHILE         reduce using rule 55 (boolean_constant -> K_FALSE .)
    K_CONTINUE      reduce using rule 55 (boolean_constant -> K_FALSE .)
    K_BREAK         reduce using rule 55 (boolean_constant -> K_FALSE .)
    K_DONE          reduce using rule 55 (boolean_constant -> K_FALSE .)
    K_LIST          reduce using rule 55 (boolean_constant -> K_FALSE .)
    K_DICT          reduce using rule 55 (boolean_constant -> K_FALSE .)
    K_SET           reduce using rule 55 (boolean_constant -> K_FALSE .)
    K_INT           reduce using rule 55 (boolean_constant -> K_FALSE .)
    K_DOUBLE        reduce using rule 55 (boolean_constant -> K_FALSE .)
    K_STRING        reduce using rule 55 (boolean_constant -> K_FALSE .)
    K_BOOL          reduce using rule 55 (boolean_constant -> K_FALSE .)
    K_WINDOW        reduce using rule 55 (boolean_constant -> K_FALSE .)
    K_SHAPE         reduce using rule 55 (boolean_constant -> K_FALSE .)
    K_TRIANGLE      reduce using rule 55 (boolean_constant -> K_FALSE .)
    K_RECTANGLE     reduce using rule 55 (boolean_constant -> K_FALSE .)
    K_CIRCLE        reduce using rule 55 (boolean_constant -> K_FALSE .)
    K_POINT         reduce using rule 55 (boolean_constant -> K_FALSE .)
    K_TEXT          reduce using rule 55 (boolean_constant -> K_FALSE .)
    $end            reduce using rule 55 (boolean_constant -> K_FALSE .)
    K_END           reduce using rule 55 (boolean_constant -> K_FALSE .)
    K_EL            reduce using rule 55 (boolean_constant -> K_FALSE .)
    K_EF            reduce using rule 55 (boolean_constant -> K_FALSE .)
    COMMA           reduce using rule 55 (boolean_constant -> K_FALSE .)


state 52

    (48) primary_expression -> function_call_statement .

    PLUS            reduce using rule 48 (primary_expression -> function_call_statement .)
    MINUS           reduce using rule 48 (primary_expression -> function_call_statement .)
    TIMES           reduce using rule 48 (primary_expression -> function_call_statement .)
    DIVIDE          reduce using rule 48 (primary_expression -> function_call_statement .)
    MOD             reduce using rule 48 (primary_expression -> function_call_statement .)
    GT              reduce using rule 48 (primary_expression -> function_call_statement .)
    LT              reduce using rule 48 (primary_expression -> function_call_statement .)
    GEQ             reduce using rule 48 (primary_expression -> function_call_statement .)
    LEQ             reduce using rule 48 (primary_expression -> function_call_statement .)
    EQ              reduce using rule 48 (primary_expression -> function_call_statement .)
    NEQ             reduce using rule 48 (primary_expression -> function_call_statement .)
    AND             reduce using rule 48 (primary_expression -> function_call_statement .)
    OR              reduce using rule 48 (primary_expression -> function_call_statement .)
    ID              reduce using rule 48 (primary_expression -> function_call_statement .)
    K_IF            reduce using rule 48 (primary_expression -> function_call_statement .)
    K_WHILE         reduce using rule 48 (primary_expression -> function_call_statement .)
    K_CONTINUE      reduce using rule 48 (primary_expression -> function_call_statement .)
    K_BREAK         reduce using rule 48 (primary_expression -> function_call_statement .)
    K_DONE          reduce using rule 48 (primary_expression -> function_call_statement .)
    K_LIST          reduce using rule 48 (primary_expression -> function_call_statement .)
    K_DICT          reduce using rule 48 (primary_expression -> function_call_statement .)
    K_SET           reduce using rule 48 (primary_expression -> function_call_statement .)
    K_INT           reduce using rule 48 (primary_expression -> function_call_statement .)
    K_DOUBLE        reduce using rule 48 (primary_expression -> function_call_statement .)
    K_STRING        reduce using rule 48 (primary_expression -> function_call_statement .)
    K_BOOL          reduce using rule 48 (primary_expression -> function_call_statement .)
    K_WINDOW        reduce using rule 48 (primary_expression -> function_call_statement .)
    K_SHAPE         reduce using rule 48 (primary_expression -> function_call_statement .)
    K_TRIANGLE      reduce using rule 48 (primary_expression -> function_call_statement .)
    K_RECTANGLE     reduce using rule 48 (primary_expression -> function_call_statement .)
    K_CIRCLE        reduce using rule 48 (primary_expression -> function_call_statement .)
    K_POINT         reduce using rule 48 (primary_expression -> function_call_statement .)
    K_TEXT          reduce using rule 48 (primary_expression -> function_call_statement .)
    $end            reduce using rule 48 (primary_expression -> function_call_statement .)
    K_END           reduce using rule 48 (primary_expression -> function_call_statement .)
    K_EL            reduce using rule 48 (primary_expression -> function_call_statement .)
    K_EF            reduce using rule 48 (primary_expression -> function_call_statement .)
    RPAREN          reduce using rule 48 (primary_expression -> function_call_statement .)
    COMMA           reduce using rule 48 (primary_expression -> function_call_statement .)


state 53

    (65) number -> DOUBLE .

    PLUS            reduce using rule 65 (number -> DOUBLE .)
    MINUS           reduce using rule 65 (number -> DOUBLE .)
    TIMES           reduce using rule 65 (number -> DOUBLE .)
    DIVIDE          reduce using rule 65 (number -> DOUBLE .)
    MOD             reduce using rule 65 (number -> DOUBLE .)
    GT              reduce using rule 65 (number -> DOUBLE .)
    LT              reduce using rule 65 (number -> DOUBLE .)
    GEQ             reduce using rule 65 (number -> DOUBLE .)
    LEQ             reduce using rule 65 (number -> DOUBLE .)
    EQ              reduce using rule 65 (number -> DOUBLE .)
    NEQ             reduce using rule 65 (number -> DOUBLE .)
    AND             reduce using rule 65 (number -> DOUBLE .)
    OR              reduce using rule 65 (number -> DOUBLE .)
    RPAREN          reduce using rule 65 (number -> DOUBLE .)
    K_END           reduce using rule 65 (number -> DOUBLE .)
    ID              reduce using rule 65 (number -> DOUBLE .)
    K_IF            reduce using rule 65 (number -> DOUBLE .)
    K_WHILE         reduce using rule 65 (number -> DOUBLE .)
    K_CONTINUE      reduce using rule 65 (number -> DOUBLE .)
    K_BREAK         reduce using rule 65 (number -> DOUBLE .)
    K_DONE          reduce using rule 65 (number -> DOUBLE .)
    K_LIST          reduce using rule 65 (number -> DOUBLE .)
    K_DICT          reduce using rule 65 (number -> DOUBLE .)
    K_SET           reduce using rule 65 (number -> DOUBLE .)
    K_INT           reduce using rule 65 (number -> DOUBLE .)
    K_DOUBLE        reduce using rule 65 (number -> DOUBLE .)
    K_STRING        reduce using rule 65 (number -> DOUBLE .)
    K_BOOL          reduce using rule 65 (number -> DOUBLE .)
    K_WINDOW        reduce using rule 65 (number -> DOUBLE .)
    K_SHAPE         reduce using rule 65 (number -> DOUBLE .)
    K_TRIANGLE      reduce using rule 65 (number -> DOUBLE .)
    K_RECTANGLE     reduce using rule 65 (number -> DOUBLE .)
    K_CIRCLE        reduce using rule 65 (number -> DOUBLE .)
    K_POINT         reduce using rule 65 (number -> DOUBLE .)
    K_TEXT          reduce using rule 65 (number -> DOUBLE .)
    $end            reduce using rule 65 (number -> DOUBLE .)
    K_EL            reduce using rule 65 (number -> DOUBLE .)
    K_EF            reduce using rule 65 (number -> DOUBLE .)
    COMMA           reduce using rule 65 (number -> DOUBLE .)


state 54

    (50) constant -> boolean_constant .

    PLUS            reduce using rule 50 (constant -> boolean_constant .)
    MINUS           reduce using rule 50 (constant -> boolean_constant .)
    TIMES           reduce using rule 50 (constant -> boolean_constant .)
    DIVIDE          reduce using rule 50 (constant -> boolean_constant .)
    MOD             reduce using rule 50 (constant -> boolean_constant .)
    GT              reduce using rule 50 (constant -> boolean_constant .)
    LT              reduce using rule 50 (constant -> boolean_constant .)
    GEQ             reduce using rule 50 (constant -> boolean_constant .)
    LEQ             reduce using rule 50 (constant -> boolean_constant .)
    EQ              reduce using rule 50 (constant -> boolean_constant .)
    NEQ             reduce using rule 50 (constant -> boolean_constant .)
    AND             reduce using rule 50 (constant -> boolean_constant .)
    OR              reduce using rule 50 (constant -> boolean_constant .)
    RPAREN          reduce using rule 50 (constant -> boolean_constant .)
    COMMA           reduce using rule 50 (constant -> boolean_constant .)
    K_END           reduce using rule 50 (constant -> boolean_constant .)
    ID              reduce using rule 50 (constant -> boolean_constant .)
    K_IF            reduce using rule 50 (constant -> boolean_constant .)
    K_WHILE         reduce using rule 50 (constant -> boolean_constant .)
    K_CONTINUE      reduce using rule 50 (constant -> boolean_constant .)
    K_BREAK         reduce using rule 50 (constant -> boolean_constant .)
    K_DONE          reduce using rule 50 (constant -> boolean_constant .)
    K_LIST          reduce using rule 50 (constant -> boolean_constant .)
    K_DICT          reduce using rule 50 (constant -> boolean_constant .)
    K_SET           reduce using rule 50 (constant -> boolean_constant .)
    K_INT           reduce using rule 50 (constant -> boolean_constant .)
    K_DOUBLE        reduce using rule 50 (constant -> boolean_constant .)
    K_STRING        reduce using rule 50 (constant -> boolean_constant .)
    K_BOOL          reduce using rule 50 (constant -> boolean_constant .)
    K_WINDOW        reduce using rule 50 (constant -> boolean_constant .)
    K_SHAPE         reduce using rule 50 (constant -> boolean_constant .)
    K_TRIANGLE      reduce using rule 50 (constant -> boolean_constant .)
    K_RECTANGLE     reduce using rule 50 (constant -> boolean_constant .)
    K_CIRCLE        reduce using rule 50 (constant -> boolean_constant .)
    K_POINT         reduce using rule 50 (constant -> boolean_constant .)
    K_TEXT          reduce using rule 50 (constant -> boolean_constant .)
    $end            reduce using rule 50 (constant -> boolean_constant .)
    K_EL            reduce using rule 50 (constant -> boolean_constant .)
    K_EF            reduce using rule 50 (constant -> boolean_constant .)


state 55

    (66) selection_statement -> K_IF LPAREN expression . RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END
    (33) expression -> expression . op expression_term
    (37) op -> . PLUS
    (38) op -> . MINUS
    (39) op -> . TIMES
    (40) op -> . DIVIDE
    (41) op -> . MOD
    (42) op -> . comparator
    (43) op -> . boolean_operator
    (58) comparator -> . GT
    (59) comparator -> . LT
    (60) comparator -> . GEQ
    (61) comparator -> . LEQ
    (62) comparator -> . EQ
    (63) comparator -> . NEQ
    (44) boolean_operator -> . AND
    (45) boolean_operator -> . OR

    RPAREN          shift and go to state 82
    PLUS            shift and go to state 75
    MINUS           shift and go to state 79
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 77
    GT              shift and go to state 67
    LT              shift and go to state 74
    GEQ             shift and go to state 66
    LEQ             shift and go to state 73
    EQ              shift and go to state 78
    NEQ             shift and go to state 76
    AND             shift and go to state 70
    OR              shift and go to state 71

    comparator                     shift and go to state 65
    boolean_operator               shift and go to state 69
    op                             shift and go to state 83

state 56

    (74) iteration_statement -> K_WHILE LPAREN expression . RPAREN compound_statement_list K_END
    (33) expression -> expression . op expression_term
    (37) op -> . PLUS
    (38) op -> . MINUS
    (39) op -> . TIMES
    (40) op -> . DIVIDE
    (41) op -> . MOD
    (42) op -> . comparator
    (43) op -> . boolean_operator
    (58) comparator -> . GT
    (59) comparator -> . LT
    (60) comparator -> . GEQ
    (61) comparator -> . LEQ
    (62) comparator -> . EQ
    (63) comparator -> . NEQ
    (44) boolean_operator -> . AND
    (45) boolean_operator -> . OR

    RPAREN          shift and go to state 84
    PLUS            shift and go to state 75
    MINUS           shift and go to state 79
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 77
    GT              shift and go to state 67
    LT              shift and go to state 74
    GEQ             shift and go to state 66
    LEQ             shift and go to state 73
    EQ              shift and go to state 78
    NEQ             shift and go to state 76
    AND             shift and go to state 70
    OR              shift and go to state 71

    comparator                     shift and go to state 65
    boolean_operator               shift and go to state 69
    op                             shift and go to state 83

state 57

    (78) function_declaration -> function_header compound_statement_list K_END .

    ID              reduce using rule 78 (function_declaration -> function_header compound_statement_list K_END .)
    K_IF            reduce using rule 78 (function_declaration -> function_header compound_statement_list K_END .)
    K_WHILE         reduce using rule 78 (function_declaration -> function_header compound_statement_list K_END .)
    K_CONTINUE      reduce using rule 78 (function_declaration -> function_header compound_statement_list K_END .)
    K_BREAK         reduce using rule 78 (function_declaration -> function_header compound_statement_list K_END .)
    K_DONE          reduce using rule 78 (function_declaration -> function_header compound_statement_list K_END .)
    K_LIST          reduce using rule 78 (function_declaration -> function_header compound_statement_list K_END .)
    K_DICT          reduce using rule 78 (function_declaration -> function_header compound_statement_list K_END .)
    K_SET           reduce using rule 78 (function_declaration -> function_header compound_statement_list K_END .)
    K_INT           reduce using rule 78 (function_declaration -> function_header compound_statement_list K_END .)
    K_DOUBLE        reduce using rule 78 (function_declaration -> function_header compound_statement_list K_END .)
    K_STRING        reduce using rule 78 (function_declaration -> function_header compound_statement_list K_END .)
    K_BOOL          reduce using rule 78 (function_declaration -> function_header compound_statement_list K_END .)
    K_WINDOW        reduce using rule 78 (function_declaration -> function_header compound_statement_list K_END .)
    K_SHAPE         reduce using rule 78 (function_declaration -> function_header compound_statement_list K_END .)
    K_TRIANGLE      reduce using rule 78 (function_declaration -> function_header compound_statement_list K_END .)
    K_RECTANGLE     reduce using rule 78 (function_declaration -> function_header compound_statement_list K_END .)
    K_CIRCLE        reduce using rule 78 (function_declaration -> function_header compound_statement_list K_END .)
    K_POINT         reduce using rule 78 (function_declaration -> function_header compound_statement_list K_END .)
    K_TEXT          reduce using rule 78 (function_declaration -> function_header compound_statement_list K_END .)
    $end            reduce using rule 78 (function_declaration -> function_header compound_statement_list K_END .)


state 58

    (73) compound_statement_list -> compound_statement_list compound_statement .

    K_END           reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)
    ID              reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)
    K_IF            reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)
    K_WHILE         reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)
    K_CONTINUE      reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)
    K_BREAK         reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)
    K_DONE          reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)
    K_LIST          reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)
    K_DICT          reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)
    K_SET           reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)
    K_INT           reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)
    K_DOUBLE        reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)
    K_STRING        reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)
    K_BOOL          reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)
    K_WINDOW        reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)
    K_SHAPE         reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)
    K_TRIANGLE      reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)
    K_RECTANGLE     reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)
    K_CIRCLE        reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)
    K_POINT         reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)
    K_TEXT          reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)
    K_EL            reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)
    K_EF            reduce using rule 73 (compound_statement_list -> compound_statement_list compound_statement .)


state 59

    (15) variable_declaration -> pre_type_modifier . type ID
    (16) variable_declaration -> pre_type_modifier . type ID ASSIGN expression
    (22) type -> . K_INT
    (23) type -> . K_DOUBLE
    (24) type -> . K_STRING
    (25) type -> . K_BOOL
    (26) type -> . K_WINDOW
    (27) type -> . K_SHAPE
    (28) type -> . K_TRIANGLE
    (29) type -> . K_RECTANGLE
    (30) type -> . K_CIRCLE
    (31) type -> . K_POINT
    (32) type -> . K_TEXT

    K_INT           shift and go to state 32
    K_DOUBLE        shift and go to state 25
    K_STRING        shift and go to state 26
    K_BOOL          shift and go to state 33
    K_WINDOW        shift and go to state 36
    K_SHAPE         shift and go to state 29
    K_TRIANGLE      shift and go to state 27
    K_RECTANGLE     shift and go to state 35
    K_CIRCLE        shift and go to state 28
    K_POINT         shift and go to state 31
    K_TEXT          shift and go to state 30

    type                           shift and go to state 85

state 60

    (79) function_header -> pre_type_modifier type ID . LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag
    (80) function_header -> pre_type_modifier type ID . LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag
    (15) variable_declaration -> pre_type_modifier type ID .
    (16) variable_declaration -> pre_type_modifier type ID . ASSIGN expression

    LPAREN          shift and go to state 87
    ID              reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_IF            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_WHILE         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_CONTINUE      reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_BREAK         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DONE          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_LIST          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DICT          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_SET           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_INT           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DOUBLE        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_STRING        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_BOOL          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_WINDOW        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_SHAPE         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_TRIANGLE      reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_RECTANGLE     reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_CIRCLE        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_POINT         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_TEXT          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    $end            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    ASSIGN          shift and go to state 86


state 61

    (17) variable_declaration -> ID ASSIGN expression .
    (33) expression -> expression . op expression_term
    (37) op -> . PLUS
    (38) op -> . MINUS
    (39) op -> . TIMES
    (40) op -> . DIVIDE
    (41) op -> . MOD
    (42) op -> . comparator
    (43) op -> . boolean_operator
    (58) comparator -> . GT
    (59) comparator -> . LT
    (60) comparator -> . GEQ
    (61) comparator -> . LEQ
    (62) comparator -> . EQ
    (63) comparator -> . NEQ
    (44) boolean_operator -> . AND
    (45) boolean_operator -> . OR

    ID              reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_IF            reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_WHILE         reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_CONTINUE      reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_BREAK         reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_DONE          reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_LIST          reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_DICT          reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_SET           reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_EL            reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_EF            reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_END           reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_INT           reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_DOUBLE        reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_STRING        reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_BOOL          reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_WINDOW        reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_SHAPE         reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_TRIANGLE      reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_RECTANGLE     reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_CIRCLE        reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_POINT         reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_TEXT          reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    $end            reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 79
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 77
    GT              shift and go to state 67
    LT              shift and go to state 74
    GEQ             shift and go to state 66
    LEQ             shift and go to state 73
    EQ              shift and go to state 78
    NEQ             shift and go to state 76
    AND             shift and go to state 70
    OR              shift and go to state 71

    boolean_operator               shift and go to state 69
    comparator                     shift and go to state 65
    op                             shift and go to state 83

state 62

    (12) function_call_statement -> ID LPAREN RPAREN .

    PLUS            reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    MOD             reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    GT              reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    LT              reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    GEQ             reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    LEQ             reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    EQ              reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    NEQ             reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    AND             reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    OR              reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    ID              reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_IF            reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_WHILE         reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_CONTINUE      reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_BREAK         reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_DONE          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_LIST          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_DICT          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_SET           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_INT           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_DOUBLE        reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_STRING        reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_BOOL          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_WINDOW        reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_SHAPE         reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_TRIANGLE      reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_RECTANGLE     reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_CIRCLE        reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_POINT         reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_TEXT          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_END           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    $end            reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_EL            reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_EF            reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)


state 63

    (11) function_call_statement -> ID LPAREN parameter_list . RPAREN
    (13) parameter_list -> parameter_list . COMMA expression

    RPAREN          shift and go to state 88
    COMMA           shift and go to state 89


state 64

    (14) parameter_list -> expression .
    (33) expression -> expression . op expression_term
    (37) op -> . PLUS
    (38) op -> . MINUS
    (39) op -> . TIMES
    (40) op -> . DIVIDE
    (41) op -> . MOD
    (42) op -> . comparator
    (43) op -> . boolean_operator
    (58) comparator -> . GT
    (59) comparator -> . LT
    (60) comparator -> . GEQ
    (61) comparator -> . LEQ
    (62) comparator -> . EQ
    (63) comparator -> . NEQ
    (44) boolean_operator -> . AND
    (45) boolean_operator -> . OR

    RPAREN          reduce using rule 14 (parameter_list -> expression .)
    COMMA           reduce using rule 14 (parameter_list -> expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 79
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 77
    GT              shift and go to state 67
    LT              shift and go to state 74
    GEQ             shift and go to state 66
    LEQ             shift and go to state 73
    EQ              shift and go to state 78
    NEQ             shift and go to state 76
    AND             shift and go to state 70
    OR              shift and go to state 71

    boolean_operator               shift and go to state 69
    comparator                     shift and go to state 65
    op                             shift and go to state 83

state 65

    (42) op -> comparator .

    LPAREN          reduce using rule 42 (op -> comparator .)
    ID              reduce using rule 42 (op -> comparator .)
    K_TRUE          reduce using rule 42 (op -> comparator .)
    K_FALSE         reduce using rule 42 (op -> comparator .)
    INTEGER         reduce using rule 42 (op -> comparator .)
    DOUBLE          reduce using rule 42 (op -> comparator .)
    STRING          reduce using rule 42 (op -> comparator .)


state 66

    (60) comparator -> GEQ .

    LPAREN          reduce using rule 60 (comparator -> GEQ .)
    ID              reduce using rule 60 (comparator -> GEQ .)
    K_TRUE          reduce using rule 60 (comparator -> GEQ .)
    K_FALSE         reduce using rule 60 (comparator -> GEQ .)
    INTEGER         reduce using rule 60 (comparator -> GEQ .)
    DOUBLE          reduce using rule 60 (comparator -> GEQ .)
    STRING          reduce using rule 60 (comparator -> GEQ .)


state 67

    (58) comparator -> GT .

    LPAREN          reduce using rule 58 (comparator -> GT .)
    ID              reduce using rule 58 (comparator -> GT .)
    K_TRUE          reduce using rule 58 (comparator -> GT .)
    K_FALSE         reduce using rule 58 (comparator -> GT .)
    INTEGER         reduce using rule 58 (comparator -> GT .)
    DOUBLE          reduce using rule 58 (comparator -> GT .)
    STRING          reduce using rule 58 (comparator -> GT .)


state 68

    (40) op -> DIVIDE .

    LPAREN          reduce using rule 40 (op -> DIVIDE .)
    ID              reduce using rule 40 (op -> DIVIDE .)
    K_TRUE          reduce using rule 40 (op -> DIVIDE .)
    K_FALSE         reduce using rule 40 (op -> DIVIDE .)
    INTEGER         reduce using rule 40 (op -> DIVIDE .)
    DOUBLE          reduce using rule 40 (op -> DIVIDE .)
    STRING          reduce using rule 40 (op -> DIVIDE .)


state 69

    (43) op -> boolean_operator .

    LPAREN          reduce using rule 43 (op -> boolean_operator .)
    ID              reduce using rule 43 (op -> boolean_operator .)
    K_TRUE          reduce using rule 43 (op -> boolean_operator .)
    K_FALSE         reduce using rule 43 (op -> boolean_operator .)
    INTEGER         reduce using rule 43 (op -> boolean_operator .)
    DOUBLE          reduce using rule 43 (op -> boolean_operator .)
    STRING          reduce using rule 43 (op -> boolean_operator .)


state 70

    (44) boolean_operator -> AND .

    LPAREN          reduce using rule 44 (boolean_operator -> AND .)
    ID              reduce using rule 44 (boolean_operator -> AND .)
    K_TRUE          reduce using rule 44 (boolean_operator -> AND .)
    K_FALSE         reduce using rule 44 (boolean_operator -> AND .)
    INTEGER         reduce using rule 44 (boolean_operator -> AND .)
    DOUBLE          reduce using rule 44 (boolean_operator -> AND .)
    STRING          reduce using rule 44 (boolean_operator -> AND .)


state 71

    (45) boolean_operator -> OR .

    LPAREN          reduce using rule 45 (boolean_operator -> OR .)
    ID              reduce using rule 45 (boolean_operator -> OR .)
    K_TRUE          reduce using rule 45 (boolean_operator -> OR .)
    K_FALSE         reduce using rule 45 (boolean_operator -> OR .)
    INTEGER         reduce using rule 45 (boolean_operator -> OR .)
    DOUBLE          reduce using rule 45 (boolean_operator -> OR .)
    STRING          reduce using rule 45 (boolean_operator -> OR .)


state 72

    (39) op -> TIMES .

    LPAREN          reduce using rule 39 (op -> TIMES .)
    ID              reduce using rule 39 (op -> TIMES .)
    K_TRUE          reduce using rule 39 (op -> TIMES .)
    K_FALSE         reduce using rule 39 (op -> TIMES .)
    INTEGER         reduce using rule 39 (op -> TIMES .)
    DOUBLE          reduce using rule 39 (op -> TIMES .)
    STRING          reduce using rule 39 (op -> TIMES .)


state 73

    (61) comparator -> LEQ .

    LPAREN          reduce using rule 61 (comparator -> LEQ .)
    ID              reduce using rule 61 (comparator -> LEQ .)
    K_TRUE          reduce using rule 61 (comparator -> LEQ .)
    K_FALSE         reduce using rule 61 (comparator -> LEQ .)
    INTEGER         reduce using rule 61 (comparator -> LEQ .)
    DOUBLE          reduce using rule 61 (comparator -> LEQ .)
    STRING          reduce using rule 61 (comparator -> LEQ .)


state 74

    (59) comparator -> LT .

    LPAREN          reduce using rule 59 (comparator -> LT .)
    ID              reduce using rule 59 (comparator -> LT .)
    K_TRUE          reduce using rule 59 (comparator -> LT .)
    K_FALSE         reduce using rule 59 (comparator -> LT .)
    INTEGER         reduce using rule 59 (comparator -> LT .)
    DOUBLE          reduce using rule 59 (comparator -> LT .)
    STRING          reduce using rule 59 (comparator -> LT .)


state 75

    (37) op -> PLUS .

    LPAREN          reduce using rule 37 (op -> PLUS .)
    ID              reduce using rule 37 (op -> PLUS .)
    K_TRUE          reduce using rule 37 (op -> PLUS .)
    K_FALSE         reduce using rule 37 (op -> PLUS .)
    INTEGER         reduce using rule 37 (op -> PLUS .)
    DOUBLE          reduce using rule 37 (op -> PLUS .)
    STRING          reduce using rule 37 (op -> PLUS .)


state 76

    (63) comparator -> NEQ .

    LPAREN          reduce using rule 63 (comparator -> NEQ .)
    ID              reduce using rule 63 (comparator -> NEQ .)
    K_TRUE          reduce using rule 63 (comparator -> NEQ .)
    K_FALSE         reduce using rule 63 (comparator -> NEQ .)
    INTEGER         reduce using rule 63 (comparator -> NEQ .)
    DOUBLE          reduce using rule 63 (comparator -> NEQ .)
    STRING          reduce using rule 63 (comparator -> NEQ .)


state 77

    (41) op -> MOD .

    LPAREN          reduce using rule 41 (op -> MOD .)
    ID              reduce using rule 41 (op -> MOD .)
    K_TRUE          reduce using rule 41 (op -> MOD .)
    K_FALSE         reduce using rule 41 (op -> MOD .)
    INTEGER         reduce using rule 41 (op -> MOD .)
    DOUBLE          reduce using rule 41 (op -> MOD .)
    STRING          reduce using rule 41 (op -> MOD .)


state 78

    (62) comparator -> EQ .

    LPAREN          reduce using rule 62 (comparator -> EQ .)
    ID              reduce using rule 62 (comparator -> EQ .)
    K_TRUE          reduce using rule 62 (comparator -> EQ .)
    K_FALSE         reduce using rule 62 (comparator -> EQ .)
    INTEGER         reduce using rule 62 (comparator -> EQ .)
    DOUBLE          reduce using rule 62 (comparator -> EQ .)
    STRING          reduce using rule 62 (comparator -> EQ .)


state 79

    (38) op -> MINUS .

    LPAREN          reduce using rule 38 (op -> MINUS .)
    ID              reduce using rule 38 (op -> MINUS .)
    K_TRUE          reduce using rule 38 (op -> MINUS .)
    K_FALSE         reduce using rule 38 (op -> MINUS .)
    INTEGER         reduce using rule 38 (op -> MINUS .)
    DOUBLE          reduce using rule 38 (op -> MINUS .)
    STRING          reduce using rule 38 (op -> MINUS .)


state 80

    (35) expression_term -> expression_term op . unary_expression
    (56) unary_expression -> . LPAREN expression RPAREN
    (57) unary_expression -> . primary_expression
    (46) primary_expression -> . constant
    (47) primary_expression -> . id_expression
    (48) primary_expression -> . function_call_statement
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . string_constant
    (49) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (54) boolean_constant -> . K_TRUE
    (55) boolean_constant -> . K_FALSE
    (64) number -> . INTEGER
    (65) number -> . DOUBLE
    (53) string_constant -> . STRING

    LPAREN          shift and go to state 49
    ID              shift and go to state 50
    K_TRUE          shift and go to state 43
    K_FALSE         shift and go to state 51
    INTEGER         shift and go to state 45
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 47

    id_expression                  shift and go to state 46
    constant                       shift and go to state 40
    unary_expression               shift and go to state 90
    string_constant                shift and go to state 44
    number                         shift and go to state 42
    function_call_statement        shift and go to state 52
    primary_expression             shift and go to state 48
    boolean_constant               shift and go to state 54

state 81

    (56) unary_expression -> LPAREN expression . RPAREN
    (33) expression -> expression . op expression_term
    (37) op -> . PLUS
    (38) op -> . MINUS
    (39) op -> . TIMES
    (40) op -> . DIVIDE
    (41) op -> . MOD
    (42) op -> . comparator
    (43) op -> . boolean_operator
    (58) comparator -> . GT
    (59) comparator -> . LT
    (60) comparator -> . GEQ
    (61) comparator -> . LEQ
    (62) comparator -> . EQ
    (63) comparator -> . NEQ
    (44) boolean_operator -> . AND
    (45) boolean_operator -> . OR

    RPAREN          shift and go to state 91
    PLUS            shift and go to state 75
    MINUS           shift and go to state 79
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 77
    GT              shift and go to state 67
    LT              shift and go to state 74
    GEQ             shift and go to state 66
    LEQ             shift and go to state 73
    EQ              shift and go to state 78
    NEQ             shift and go to state 76
    AND             shift and go to state 70
    OR              shift and go to state 71

    boolean_operator               shift and go to state 69
    comparator                     shift and go to state 65
    op                             shift and go to state 83

state 82

    (66) selection_statement -> K_IF LPAREN expression RPAREN . push_scope compound_statement_list else_if_statement_list else_statement K_END
    (84) push_scope -> .

    ID              reduce using rule 84 (push_scope -> .)
    K_IF            reduce using rule 84 (push_scope -> .)
    K_WHILE         reduce using rule 84 (push_scope -> .)
    K_CONTINUE      reduce using rule 84 (push_scope -> .)
    K_BREAK         reduce using rule 84 (push_scope -> .)
    K_DONE          reduce using rule 84 (push_scope -> .)
    K_LIST          reduce using rule 84 (push_scope -> .)
    K_DICT          reduce using rule 84 (push_scope -> .)
    K_SET           reduce using rule 84 (push_scope -> .)
    K_EL            reduce using rule 84 (push_scope -> .)
    K_EF            reduce using rule 84 (push_scope -> .)
    K_END           reduce using rule 84 (push_scope -> .)
    K_INT           reduce using rule 84 (push_scope -> .)
    K_DOUBLE        reduce using rule 84 (push_scope -> .)
    K_STRING        reduce using rule 84 (push_scope -> .)
    K_BOOL          reduce using rule 84 (push_scope -> .)
    K_WINDOW        reduce using rule 84 (push_scope -> .)
    K_SHAPE         reduce using rule 84 (push_scope -> .)
    K_TRIANGLE      reduce using rule 84 (push_scope -> .)
    K_RECTANGLE     reduce using rule 84 (push_scope -> .)
    K_CIRCLE        reduce using rule 84 (push_scope -> .)
    K_POINT         reduce using rule 84 (push_scope -> .)
    K_TEXT          reduce using rule 84 (push_scope -> .)

    push_scope                     shift and go to state 92

state 83

    (33) expression -> expression op . expression_term
    (35) expression_term -> . expression_term op unary_expression
    (36) expression_term -> . unary_expression
    (56) unary_expression -> . LPAREN expression RPAREN
    (57) unary_expression -> . primary_expression
    (46) primary_expression -> . constant
    (47) primary_expression -> . id_expression
    (48) primary_expression -> . function_call_statement
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . string_constant
    (49) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (54) boolean_constant -> . K_TRUE
    (55) boolean_constant -> . K_FALSE
    (64) number -> . INTEGER
    (65) number -> . DOUBLE
    (53) string_constant -> . STRING

    LPAREN          shift and go to state 49
    ID              shift and go to state 50
    K_TRUE          shift and go to state 43
    K_FALSE         shift and go to state 51
    INTEGER         shift and go to state 45
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 47

    expression_term                shift and go to state 93
    id_expression                  shift and go to state 46
    constant                       shift and go to state 40
    unary_expression               shift and go to state 41
    string_constant                shift and go to state 44
    number                         shift and go to state 42
    function_call_statement        shift and go to state 52
    primary_expression             shift and go to state 48
    boolean_constant               shift and go to state 54

state 84

    (74) iteration_statement -> K_WHILE LPAREN expression RPAREN . compound_statement_list K_END
    (72) compound_statement_list -> .
    (73) compound_statement_list -> . compound_statement_list compound_statement

    K_END           reduce using rule 72 (compound_statement_list -> .)
    ID              reduce using rule 72 (compound_statement_list -> .)
    K_IF            reduce using rule 72 (compound_statement_list -> .)
    K_WHILE         reduce using rule 72 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 72 (compound_statement_list -> .)
    K_BREAK         reduce using rule 72 (compound_statement_list -> .)
    K_DONE          reduce using rule 72 (compound_statement_list -> .)
    K_LIST          reduce using rule 72 (compound_statement_list -> .)
    K_DICT          reduce using rule 72 (compound_statement_list -> .)
    K_SET           reduce using rule 72 (compound_statement_list -> .)
    K_INT           reduce using rule 72 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 72 (compound_statement_list -> .)
    K_STRING        reduce using rule 72 (compound_statement_list -> .)
    K_BOOL          reduce using rule 72 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 72 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 72 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 72 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 72 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 72 (compound_statement_list -> .)
    K_POINT         reduce using rule 72 (compound_statement_list -> .)
    K_TEXT          reduce using rule 72 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 94

state 85

    (15) variable_declaration -> pre_type_modifier type . ID
    (16) variable_declaration -> pre_type_modifier type . ID ASSIGN expression

    ID              shift and go to state 95


state 86

    (16) variable_declaration -> pre_type_modifier type ID ASSIGN . expression
    (33) expression -> . expression op expression_term
    (34) expression -> . expression_term
    (35) expression_term -> . expression_term op unary_expression
    (36) expression_term -> . unary_expression
    (56) unary_expression -> . LPAREN expression RPAREN
    (57) unary_expression -> . primary_expression
    (46) primary_expression -> . constant
    (47) primary_expression -> . id_expression
    (48) primary_expression -> . function_call_statement
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . string_constant
    (49) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (54) boolean_constant -> . K_TRUE
    (55) boolean_constant -> . K_FALSE
    (64) number -> . INTEGER
    (65) number -> . DOUBLE
    (53) string_constant -> . STRING

    LPAREN          shift and go to state 49
    ID              shift and go to state 50
    K_TRUE          shift and go to state 43
    K_FALSE         shift and go to state 51
    INTEGER         shift and go to state 45
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 47

    expression_term                shift and go to state 39
    id_expression                  shift and go to state 46
    boolean_constant               shift and go to state 54
    constant                       shift and go to state 40
    unary_expression               shift and go to state 41
    number                         shift and go to state 42
    function_call_statement        shift and go to state 52
    primary_expression             shift and go to state 48
    string_constant                shift and go to state 44
    expression                     shift and go to state 96

state 87

    (79) function_header -> pre_type_modifier type ID LPAREN . push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag
    (80) function_header -> pre_type_modifier type ID LPAREN . push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag
    (84) push_scope -> .

    RPAREN          reduce using rule 84 (push_scope -> .)
    K_LIST          reduce using rule 84 (push_scope -> .)
    K_DICT          reduce using rule 84 (push_scope -> .)
    K_SET           reduce using rule 84 (push_scope -> .)
    K_INT           reduce using rule 84 (push_scope -> .)
    K_DOUBLE        reduce using rule 84 (push_scope -> .)
    K_STRING        reduce using rule 84 (push_scope -> .)
    K_BOOL          reduce using rule 84 (push_scope -> .)
    K_WINDOW        reduce using rule 84 (push_scope -> .)
    K_SHAPE         reduce using rule 84 (push_scope -> .)
    K_TRIANGLE      reduce using rule 84 (push_scope -> .)
    K_RECTANGLE     reduce using rule 84 (push_scope -> .)
    K_CIRCLE        reduce using rule 84 (push_scope -> .)
    K_POINT         reduce using rule 84 (push_scope -> .)
    K_TEXT          reduce using rule 84 (push_scope -> .)

    push_scope                     shift and go to state 97

state 88

    (11) function_call_statement -> ID LPAREN parameter_list RPAREN .

    PLUS            reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    MOD             reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    GT              reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    LT              reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    GEQ             reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    LEQ             reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    EQ              reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    NEQ             reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    AND             reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    OR              reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    ID              reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_IF            reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_WHILE         reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_CONTINUE      reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_BREAK         reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_DONE          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_LIST          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_DICT          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_SET           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_INT           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_DOUBLE        reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_STRING        reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_BOOL          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_WINDOW        reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_SHAPE         reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_TRIANGLE      reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_RECTANGLE     reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_CIRCLE        reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_POINT         reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_TEXT          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_END           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    $end            reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_EL            reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_EF            reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)


state 89

    (13) parameter_list -> parameter_list COMMA . expression
    (33) expression -> . expression op expression_term
    (34) expression -> . expression_term
    (35) expression_term -> . expression_term op unary_expression
    (36) expression_term -> . unary_expression
    (56) unary_expression -> . LPAREN expression RPAREN
    (57) unary_expression -> . primary_expression
    (46) primary_expression -> . constant
    (47) primary_expression -> . id_expression
    (48) primary_expression -> . function_call_statement
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . string_constant
    (49) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (54) boolean_constant -> . K_TRUE
    (55) boolean_constant -> . K_FALSE
    (64) number -> . INTEGER
    (65) number -> . DOUBLE
    (53) string_constant -> . STRING

    LPAREN          shift and go to state 49
    ID              shift and go to state 50
    K_TRUE          shift and go to state 43
    K_FALSE         shift and go to state 51
    INTEGER         shift and go to state 45
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 47

    expression_term                shift and go to state 39
    id_expression                  shift and go to state 46
    constant                       shift and go to state 40
    unary_expression               shift and go to state 41
    string_constant                shift and go to state 44
    number                         shift and go to state 42
    function_call_statement        shift and go to state 52
    primary_expression             shift and go to state 48
    boolean_constant               shift and go to state 54
    expression                     shift and go to state 98

state 90

    (35) expression_term -> expression_term op unary_expression .

    PLUS            reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    MINUS           reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    TIMES           reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    DIVIDE          reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    MOD             reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    GT              reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    LT              reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    GEQ             reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    LEQ             reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    EQ              reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    NEQ             reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    AND             reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    OR              reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    ID              reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    K_IF            reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    K_WHILE         reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    K_CONTINUE      reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    K_BREAK         reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    K_DONE          reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    K_LIST          reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    K_DICT          reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    K_SET           reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    K_INT           reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    K_DOUBLE        reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    K_STRING        reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    K_BOOL          reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    K_WINDOW        reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    K_SHAPE         reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    K_TRIANGLE      reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    K_RECTANGLE     reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    K_CIRCLE        reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    K_POINT         reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    K_TEXT          reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    $end            reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    K_END           reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    K_EL            reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    K_EF            reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    RPAREN          reduce using rule 35 (expression_term -> expression_term op unary_expression .)
    COMMA           reduce using rule 35 (expression_term -> expression_term op unary_expression .)


state 91

    (56) unary_expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    GEQ             reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    LEQ             reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    K_IF            reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    K_WHILE         reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    K_CONTINUE      reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    K_BREAK         reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    K_DONE          reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    K_LIST          reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    K_DICT          reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    K_SET           reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    K_INT           reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    K_DOUBLE        reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    K_STRING        reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    K_BOOL          reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    K_WINDOW        reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    K_SHAPE         reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    K_TRIANGLE      reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    K_RECTANGLE     reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    K_CIRCLE        reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    K_POINT         reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    K_TEXT          reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    K_END           reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    K_EL            reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    K_EF            reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 56 (unary_expression -> LPAREN expression RPAREN .)


state 92

    (66) selection_statement -> K_IF LPAREN expression RPAREN push_scope . compound_statement_list else_if_statement_list else_statement K_END
    (72) compound_statement_list -> .
    (73) compound_statement_list -> . compound_statement_list compound_statement

    ID              reduce using rule 72 (compound_statement_list -> .)
    K_IF            reduce using rule 72 (compound_statement_list -> .)
    K_WHILE         reduce using rule 72 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 72 (compound_statement_list -> .)
    K_BREAK         reduce using rule 72 (compound_statement_list -> .)
    K_DONE          reduce using rule 72 (compound_statement_list -> .)
    K_LIST          reduce using rule 72 (compound_statement_list -> .)
    K_DICT          reduce using rule 72 (compound_statement_list -> .)
    K_SET           reduce using rule 72 (compound_statement_list -> .)
    K_EL            reduce using rule 72 (compound_statement_list -> .)
    K_EF            reduce using rule 72 (compound_statement_list -> .)
    K_END           reduce using rule 72 (compound_statement_list -> .)
    K_INT           reduce using rule 72 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 72 (compound_statement_list -> .)
    K_STRING        reduce using rule 72 (compound_statement_list -> .)
    K_BOOL          reduce using rule 72 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 72 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 72 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 72 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 72 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 72 (compound_statement_list -> .)
    K_POINT         reduce using rule 72 (compound_statement_list -> .)
    K_TEXT          reduce using rule 72 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 99

state 93

    (33) expression -> expression op expression_term .
    (35) expression_term -> expression_term . op unary_expression
    (37) op -> . PLUS
    (38) op -> . MINUS
    (39) op -> . TIMES
    (40) op -> . DIVIDE
    (41) op -> . MOD
    (42) op -> . comparator
    (43) op -> . boolean_operator
    (58) comparator -> . GT
    (59) comparator -> . LT
    (60) comparator -> . GEQ
    (61) comparator -> . LEQ
    (62) comparator -> . EQ
    (63) comparator -> . NEQ
    (44) boolean_operator -> . AND
    (45) boolean_operator -> . OR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPAREN          reduce using rule 33 (expression -> expression op expression_term .)
    COMMA           reduce using rule 33 (expression -> expression op expression_term .)
    ID              reduce using rule 33 (expression -> expression op expression_term .)
    K_IF            reduce using rule 33 (expression -> expression op expression_term .)
    K_WHILE         reduce using rule 33 (expression -> expression op expression_term .)
    K_CONTINUE      reduce using rule 33 (expression -> expression op expression_term .)
    K_BREAK         reduce using rule 33 (expression -> expression op expression_term .)
    K_DONE          reduce using rule 33 (expression -> expression op expression_term .)
    K_LIST          reduce using rule 33 (expression -> expression op expression_term .)
    K_DICT          reduce using rule 33 (expression -> expression op expression_term .)
    K_SET           reduce using rule 33 (expression -> expression op expression_term .)
    K_INT           reduce using rule 33 (expression -> expression op expression_term .)
    K_DOUBLE        reduce using rule 33 (expression -> expression op expression_term .)
    K_STRING        reduce using rule 33 (expression -> expression op expression_term .)
    K_BOOL          reduce using rule 33 (expression -> expression op expression_term .)
    K_WINDOW        reduce using rule 33 (expression -> expression op expression_term .)
    K_SHAPE         reduce using rule 33 (expression -> expression op expression_term .)
    K_TRIANGLE      reduce using rule 33 (expression -> expression op expression_term .)
    K_RECTANGLE     reduce using rule 33 (expression -> expression op expression_term .)
    K_CIRCLE        reduce using rule 33 (expression -> expression op expression_term .)
    K_POINT         reduce using rule 33 (expression -> expression op expression_term .)
    K_TEXT          reduce using rule 33 (expression -> expression op expression_term .)
    $end            reduce using rule 33 (expression -> expression op expression_term .)
    K_END           reduce using rule 33 (expression -> expression op expression_term .)
    K_EL            reduce using rule 33 (expression -> expression op expression_term .)
    K_EF            reduce using rule 33 (expression -> expression op expression_term .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 79
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 77
    GT              shift and go to state 67
    LT              shift and go to state 74
    GEQ             shift and go to state 66
    LEQ             shift and go to state 73
    EQ              shift and go to state 78
    NEQ             shift and go to state 76
    AND             shift and go to state 70
    OR              shift and go to state 71

  ! PLUS            [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! MINUS           [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! TIMES           [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! DIVIDE          [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! MOD             [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! GT              [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! LT              [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! GEQ             [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! LEQ             [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! EQ              [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! NEQ             [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! AND             [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! OR              [ reduce using rule 33 (expression -> expression op expression_term .) ]

    comparator                     shift and go to state 65
    boolean_operator               shift and go to state 69
    op                             shift and go to state 80

state 94

    (74) iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list . K_END
    (73) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (66) selection_statement -> . K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END
    (74) iteration_statement -> . K_WHILE LPAREN expression RPAREN compound_statement_list K_END
    (75) jump_statement -> . K_CONTINUE
    (76) jump_statement -> . K_BREAK
    (77) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_END           shift and go to state 100
    ID              shift and go to state 17
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 12
    K_BREAK         shift and go to state 13
    K_DONE          shift and go to state 21
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 14
    K_DICT          shift and go to state 16
    K_SET           shift and go to state 3

    jump_statement                 shift and go to state 18
    compound_statement             shift and go to state 58
    iteration_statement            shift and go to state 5
    selection_statement            shift and go to state 9
    function_call_statement        shift and go to state 20
    pre_type_modifier              shift and go to state 59
    variable_declaration           shift and go to state 6

state 95

    (15) variable_declaration -> pre_type_modifier type ID .
    (16) variable_declaration -> pre_type_modifier type ID . ASSIGN expression

    ID              reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_IF            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_WHILE         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_CONTINUE      reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_BREAK         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DONE          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_LIST          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DICT          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_SET           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_EL            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_EF            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_END           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_INT           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DOUBLE        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_STRING        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_BOOL          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_WINDOW        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_SHAPE         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_TRIANGLE      reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_RECTANGLE     reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_CIRCLE        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_POINT         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_TEXT          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    ASSIGN          shift and go to state 86


state 96

    (16) variable_declaration -> pre_type_modifier type ID ASSIGN expression .
    (33) expression -> expression . op expression_term
    (37) op -> . PLUS
    (38) op -> . MINUS
    (39) op -> . TIMES
    (40) op -> . DIVIDE
    (41) op -> . MOD
    (42) op -> . comparator
    (43) op -> . boolean_operator
    (58) comparator -> . GT
    (59) comparator -> . LT
    (60) comparator -> . GEQ
    (61) comparator -> . LEQ
    (62) comparator -> . EQ
    (63) comparator -> . NEQ
    (44) boolean_operator -> . AND
    (45) boolean_operator -> . OR

    ID              reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_IF            reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_WHILE         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_CONTINUE      reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_BREAK         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_DONE          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_LIST          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_DICT          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_SET           reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_EL            reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_EF            reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_END           reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_INT           reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_DOUBLE        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_STRING        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_BOOL          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_WINDOW        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_SHAPE         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_TRIANGLE      reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_RECTANGLE     reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_CIRCLE        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_POINT         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_TEXT          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    $end            reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 79
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 77
    GT              shift and go to state 67
    LT              shift and go to state 74
    GEQ             shift and go to state 66
    LEQ             shift and go to state 73
    EQ              shift and go to state 78
    NEQ             shift and go to state 76
    AND             shift and go to state 70
    OR              shift and go to state 71

    comparator                     shift and go to state 65
    boolean_operator               shift and go to state 69
    op                             shift and go to state 83

state 97

    (79) function_header -> pre_type_modifier type ID LPAREN push_scope . argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag
    (80) function_header -> pre_type_modifier type ID LPAREN push_scope . RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag
    (81) argument_list -> . argument_list COMMA argument
    (82) argument_list -> . argument
    (83) argument -> . pre_type_modifier type ID
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    RPAREN          shift and go to state 101
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 14
    K_DICT          shift and go to state 16
    K_SET           shift and go to state 3

    argument                       shift and go to state 102
    pre_type_modifier              shift and go to state 104
    argument_list                  shift and go to state 103

state 98

    (13) parameter_list -> parameter_list COMMA expression .
    (33) expression -> expression . op expression_term
    (37) op -> . PLUS
    (38) op -> . MINUS
    (39) op -> . TIMES
    (40) op -> . DIVIDE
    (41) op -> . MOD
    (42) op -> . comparator
    (43) op -> . boolean_operator
    (58) comparator -> . GT
    (59) comparator -> . LT
    (60) comparator -> . GEQ
    (61) comparator -> . LEQ
    (62) comparator -> . EQ
    (63) comparator -> . NEQ
    (44) boolean_operator -> . AND
    (45) boolean_operator -> . OR

    RPAREN          reduce using rule 13 (parameter_list -> parameter_list COMMA expression .)
    COMMA           reduce using rule 13 (parameter_list -> parameter_list COMMA expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 79
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 77
    GT              shift and go to state 67
    LT              shift and go to state 74
    GEQ             shift and go to state 66
    LEQ             shift and go to state 73
    EQ              shift and go to state 78
    NEQ             shift and go to state 76
    AND             shift and go to state 70
    OR              shift and go to state 71

    comparator                     shift and go to state 65
    boolean_operator               shift and go to state 69
    op                             shift and go to state 83

state 99

    (66) selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list . else_if_statement_list else_statement K_END
    (73) compound_statement_list -> compound_statement_list . compound_statement
    (67) else_if_statement_list -> .
    (68) else_if_statement_list -> . else_if_statement_list else_if_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (66) selection_statement -> . K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END
    (74) iteration_statement -> . K_WHILE LPAREN expression RPAREN compound_statement_list K_END
    (75) jump_statement -> . K_CONTINUE
    (76) jump_statement -> . K_BREAK
    (77) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_EL            reduce using rule 67 (else_if_statement_list -> .)
    K_EF            reduce using rule 67 (else_if_statement_list -> .)
    K_END           reduce using rule 67 (else_if_statement_list -> .)
    ID              shift and go to state 17
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 12
    K_BREAK         shift and go to state 13
    K_DONE          shift and go to state 21
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 14
    K_DICT          shift and go to state 16
    K_SET           shift and go to state 3

    jump_statement                 shift and go to state 18
    pre_type_modifier              shift and go to state 59
    compound_statement             shift and go to state 58
    iteration_statement            shift and go to state 5
    selection_statement            shift and go to state 9
    function_call_statement        shift and go to state 20
    variable_declaration           shift and go to state 6
    else_if_statement_list         shift and go to state 105

state 100

    (74) iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .

    ID              reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_IF            reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_WHILE         reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_CONTINUE      reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_BREAK         reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_DONE          reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_LIST          reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_DICT          reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_SET           reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_INT           reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_DOUBLE        reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_STRING        reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_BOOL          reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_WINDOW        reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_SHAPE         reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_TRIANGLE      reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_RECTANGLE     reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_CIRCLE        reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_POINT         reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_TEXT          reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    $end            reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_END           reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_EL            reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_EF            reduce using rule 74 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)


state 101

    (80) function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN . ASSIGN set_ignore_flag primary_expression unset_ignore_flag

    ASSIGN          shift and go to state 106


state 102

    (82) argument_list -> argument .

    RPAREN          reduce using rule 82 (argument_list -> argument .)
    COMMA           reduce using rule 82 (argument_list -> argument .)


state 103

    (79) function_header -> pre_type_modifier type ID LPAREN push_scope argument_list . RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag
    (81) argument_list -> argument_list . COMMA argument

    RPAREN          shift and go to state 107
    COMMA           shift and go to state 108


state 104

    (83) argument -> pre_type_modifier . type ID
    (22) type -> . K_INT
    (23) type -> . K_DOUBLE
    (24) type -> . K_STRING
    (25) type -> . K_BOOL
    (26) type -> . K_WINDOW
    (27) type -> . K_SHAPE
    (28) type -> . K_TRIANGLE
    (29) type -> . K_RECTANGLE
    (30) type -> . K_CIRCLE
    (31) type -> . K_POINT
    (32) type -> . K_TEXT

    K_INT           shift and go to state 32
    K_DOUBLE        shift and go to state 25
    K_STRING        shift and go to state 26
    K_BOOL          shift and go to state 33
    K_WINDOW        shift and go to state 36
    K_SHAPE         shift and go to state 29
    K_TRIANGLE      shift and go to state 27
    K_RECTANGLE     shift and go to state 35
    K_CIRCLE        shift and go to state 28
    K_POINT         shift and go to state 31
    K_TEXT          shift and go to state 30

    type                           shift and go to state 109

state 105

    (66) selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list . else_statement K_END
    (68) else_if_statement_list -> else_if_statement_list . else_if_statement
    (70) else_statement -> .
    (71) else_statement -> . K_EL push_scope compound_statement_list
    (69) else_if_statement -> . K_EF LPAREN expression RPAREN push_scope compound_statement_list

    K_END           reduce using rule 70 (else_statement -> .)
    K_EL            shift and go to state 111
    K_EF            shift and go to state 113

    else_if_statement              shift and go to state 112
    else_statement                 shift and go to state 110

state 106

    (80) function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN . set_ignore_flag primary_expression unset_ignore_flag
    (85) set_ignore_flag -> .

    ID              reduce using rule 85 (set_ignore_flag -> .)
    K_TRUE          reduce using rule 85 (set_ignore_flag -> .)
    K_FALSE         reduce using rule 85 (set_ignore_flag -> .)
    INTEGER         reduce using rule 85 (set_ignore_flag -> .)
    DOUBLE          reduce using rule 85 (set_ignore_flag -> .)
    STRING          reduce using rule 85 (set_ignore_flag -> .)

    set_ignore_flag                shift and go to state 114

state 107

    (79) function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN . ASSIGN set_ignore_flag primary_expression unset_ignore_flag

    ASSIGN          shift and go to state 115


state 108

    (81) argument_list -> argument_list COMMA . argument
    (83) argument -> . pre_type_modifier type ID
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 14
    K_DICT          shift and go to state 16
    K_SET           shift and go to state 3

    pre_type_modifier              shift and go to state 104
    argument                       shift and go to state 116

state 109

    (83) argument -> pre_type_modifier type . ID

    ID              shift and go to state 117


state 110

    (66) selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement . K_END

    K_END           shift and go to state 118


state 111

    (71) else_statement -> K_EL . push_scope compound_statement_list
    (84) push_scope -> .

    ID              reduce using rule 84 (push_scope -> .)
    K_IF            reduce using rule 84 (push_scope -> .)
    K_WHILE         reduce using rule 84 (push_scope -> .)
    K_CONTINUE      reduce using rule 84 (push_scope -> .)
    K_BREAK         reduce using rule 84 (push_scope -> .)
    K_DONE          reduce using rule 84 (push_scope -> .)
    K_LIST          reduce using rule 84 (push_scope -> .)
    K_DICT          reduce using rule 84 (push_scope -> .)
    K_SET           reduce using rule 84 (push_scope -> .)
    K_INT           reduce using rule 84 (push_scope -> .)
    K_DOUBLE        reduce using rule 84 (push_scope -> .)
    K_STRING        reduce using rule 84 (push_scope -> .)
    K_BOOL          reduce using rule 84 (push_scope -> .)
    K_WINDOW        reduce using rule 84 (push_scope -> .)
    K_SHAPE         reduce using rule 84 (push_scope -> .)
    K_TRIANGLE      reduce using rule 84 (push_scope -> .)
    K_RECTANGLE     reduce using rule 84 (push_scope -> .)
    K_CIRCLE        reduce using rule 84 (push_scope -> .)
    K_POINT         reduce using rule 84 (push_scope -> .)
    K_TEXT          reduce using rule 84 (push_scope -> .)
    K_END           reduce using rule 84 (push_scope -> .)

    push_scope                     shift and go to state 119

state 112

    (68) else_if_statement_list -> else_if_statement_list else_if_statement .

    K_EL            reduce using rule 68 (else_if_statement_list -> else_if_statement_list else_if_statement .)
    K_EF            reduce using rule 68 (else_if_statement_list -> else_if_statement_list else_if_statement .)
    K_END           reduce using rule 68 (else_if_statement_list -> else_if_statement_list else_if_statement .)


state 113

    (69) else_if_statement -> K_EF . LPAREN expression RPAREN push_scope compound_statement_list

    LPAREN          shift and go to state 120


state 114

    (80) function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag . primary_expression unset_ignore_flag
    (46) primary_expression -> . constant
    (47) primary_expression -> . id_expression
    (48) primary_expression -> . function_call_statement
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . string_constant
    (49) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (54) boolean_constant -> . K_TRUE
    (55) boolean_constant -> . K_FALSE
    (64) number -> . INTEGER
    (65) number -> . DOUBLE
    (53) string_constant -> . STRING

    ID              shift and go to state 50
    K_TRUE          shift and go to state 43
    K_FALSE         shift and go to state 51
    INTEGER         shift and go to state 45
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 47

    id_expression                  shift and go to state 46
    boolean_constant               shift and go to state 54
    constant                       shift and go to state 40
    string_constant                shift and go to state 44
    function_call_statement        shift and go to state 52
    primary_expression             shift and go to state 121
    number                         shift and go to state 42

state 115

    (79) function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN . set_ignore_flag primary_expression unset_ignore_flag
    (85) set_ignore_flag -> .

    ID              reduce using rule 85 (set_ignore_flag -> .)
    K_TRUE          reduce using rule 85 (set_ignore_flag -> .)
    K_FALSE         reduce using rule 85 (set_ignore_flag -> .)
    INTEGER         reduce using rule 85 (set_ignore_flag -> .)
    DOUBLE          reduce using rule 85 (set_ignore_flag -> .)
    STRING          reduce using rule 85 (set_ignore_flag -> .)

    set_ignore_flag                shift and go to state 122

state 116

    (81) argument_list -> argument_list COMMA argument .

    RPAREN          reduce using rule 81 (argument_list -> argument_list COMMA argument .)
    COMMA           reduce using rule 81 (argument_list -> argument_list COMMA argument .)


state 117

    (83) argument -> pre_type_modifier type ID .

    RPAREN          reduce using rule 83 (argument -> pre_type_modifier type ID .)
    COMMA           reduce using rule 83 (argument -> pre_type_modifier type ID .)


state 118

    (66) selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .

    K_END           reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    ID              reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    K_IF            reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    K_WHILE         reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    K_CONTINUE      reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    K_BREAK         reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    K_DONE          reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    K_LIST          reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    K_DICT          reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    K_SET           reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    K_INT           reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    K_DOUBLE        reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    K_STRING        reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    K_BOOL          reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    K_WINDOW        reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    K_SHAPE         reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    K_TRIANGLE      reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    K_RECTANGLE     reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    K_CIRCLE        reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    K_POINT         reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    K_TEXT          reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    K_EL            reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    K_EF            reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)
    $end            reduce using rule 66 (selection_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END .)


state 119

    (71) else_statement -> K_EL push_scope . compound_statement_list
    (72) compound_statement_list -> .
    (73) compound_statement_list -> . compound_statement_list compound_statement

    ID              reduce using rule 72 (compound_statement_list -> .)
    K_IF            reduce using rule 72 (compound_statement_list -> .)
    K_WHILE         reduce using rule 72 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 72 (compound_statement_list -> .)
    K_BREAK         reduce using rule 72 (compound_statement_list -> .)
    K_DONE          reduce using rule 72 (compound_statement_list -> .)
    K_LIST          reduce using rule 72 (compound_statement_list -> .)
    K_DICT          reduce using rule 72 (compound_statement_list -> .)
    K_SET           reduce using rule 72 (compound_statement_list -> .)
    K_INT           reduce using rule 72 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 72 (compound_statement_list -> .)
    K_STRING        reduce using rule 72 (compound_statement_list -> .)
    K_BOOL          reduce using rule 72 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 72 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 72 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 72 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 72 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 72 (compound_statement_list -> .)
    K_POINT         reduce using rule 72 (compound_statement_list -> .)
    K_TEXT          reduce using rule 72 (compound_statement_list -> .)
    K_END           reduce using rule 72 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 123

state 120

    (69) else_if_statement -> K_EF LPAREN . expression RPAREN push_scope compound_statement_list
    (33) expression -> . expression op expression_term
    (34) expression -> . expression_term
    (35) expression_term -> . expression_term op unary_expression
    (36) expression_term -> . unary_expression
    (56) unary_expression -> . LPAREN expression RPAREN
    (57) unary_expression -> . primary_expression
    (46) primary_expression -> . constant
    (47) primary_expression -> . id_expression
    (48) primary_expression -> . function_call_statement
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . string_constant
    (49) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (54) boolean_constant -> . K_TRUE
    (55) boolean_constant -> . K_FALSE
    (64) number -> . INTEGER
    (65) number -> . DOUBLE
    (53) string_constant -> . STRING

    LPAREN          shift and go to state 49
    ID              shift and go to state 50
    K_TRUE          shift and go to state 43
    K_FALSE         shift and go to state 51
    INTEGER         shift and go to state 45
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 47

    expression_term                shift and go to state 39
    id_expression                  shift and go to state 46
    boolean_constant               shift and go to state 54
    constant                       shift and go to state 40
    unary_expression               shift and go to state 41
    string_constant                shift and go to state 44
    number                         shift and go to state 42
    function_call_statement        shift and go to state 52
    primary_expression             shift and go to state 48
    expression                     shift and go to state 124

state 121

    (80) function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression . unset_ignore_flag
    (86) unset_ignore_flag -> .

    K_END           reduce using rule 86 (unset_ignore_flag -> .)
    ID              reduce using rule 86 (unset_ignore_flag -> .)
    K_IF            reduce using rule 86 (unset_ignore_flag -> .)
    K_WHILE         reduce using rule 86 (unset_ignore_flag -> .)
    K_CONTINUE      reduce using rule 86 (unset_ignore_flag -> .)
    K_BREAK         reduce using rule 86 (unset_ignore_flag -> .)
    K_DONE          reduce using rule 86 (unset_ignore_flag -> .)
    K_LIST          reduce using rule 86 (unset_ignore_flag -> .)
    K_DICT          reduce using rule 86 (unset_ignore_flag -> .)
    K_SET           reduce using rule 86 (unset_ignore_flag -> .)
    K_INT           reduce using rule 86 (unset_ignore_flag -> .)
    K_DOUBLE        reduce using rule 86 (unset_ignore_flag -> .)
    K_STRING        reduce using rule 86 (unset_ignore_flag -> .)
    K_BOOL          reduce using rule 86 (unset_ignore_flag -> .)
    K_WINDOW        reduce using rule 86 (unset_ignore_flag -> .)
    K_SHAPE         reduce using rule 86 (unset_ignore_flag -> .)
    K_TRIANGLE      reduce using rule 86 (unset_ignore_flag -> .)
    K_RECTANGLE     reduce using rule 86 (unset_ignore_flag -> .)
    K_CIRCLE        reduce using rule 86 (unset_ignore_flag -> .)
    K_POINT         reduce using rule 86 (unset_ignore_flag -> .)
    K_TEXT          reduce using rule 86 (unset_ignore_flag -> .)

    unset_ignore_flag              shift and go to state 125

state 122

    (79) function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag . primary_expression unset_ignore_flag
    (46) primary_expression -> . constant
    (47) primary_expression -> . id_expression
    (48) primary_expression -> . function_call_statement
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . string_constant
    (49) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (54) boolean_constant -> . K_TRUE
    (55) boolean_constant -> . K_FALSE
    (64) number -> . INTEGER
    (65) number -> . DOUBLE
    (53) string_constant -> . STRING

    ID              shift and go to state 50
    K_TRUE          shift and go to state 43
    K_FALSE         shift and go to state 51
    INTEGER         shift and go to state 45
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 47

    id_expression                  shift and go to state 46
    boolean_constant               shift and go to state 54
    constant                       shift and go to state 40
    string_constant                shift and go to state 44
    function_call_statement        shift and go to state 52
    primary_expression             shift and go to state 126
    number                         shift and go to state 42

state 123

    (71) else_statement -> K_EL push_scope compound_statement_list .
    (73) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (66) selection_statement -> . K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END
    (74) iteration_statement -> . K_WHILE LPAREN expression RPAREN compound_statement_list K_END
    (75) jump_statement -> . K_CONTINUE
    (76) jump_statement -> . K_BREAK
    (77) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_END           reduce using rule 71 (else_statement -> K_EL push_scope compound_statement_list .)
    ID              shift and go to state 17
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 12
    K_BREAK         shift and go to state 13
    K_DONE          shift and go to state 21
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 14
    K_DICT          shift and go to state 16
    K_SET           shift and go to state 3

    jump_statement                 shift and go to state 18
    compound_statement             shift and go to state 58
    selection_statement            shift and go to state 9
    function_call_statement        shift and go to state 20
    pre_type_modifier              shift and go to state 59
    iteration_statement            shift and go to state 5
    variable_declaration           shift and go to state 6

state 124

    (69) else_if_statement -> K_EF LPAREN expression . RPAREN push_scope compound_statement_list
    (33) expression -> expression . op expression_term
    (37) op -> . PLUS
    (38) op -> . MINUS
    (39) op -> . TIMES
    (40) op -> . DIVIDE
    (41) op -> . MOD
    (42) op -> . comparator
    (43) op -> . boolean_operator
    (58) comparator -> . GT
    (59) comparator -> . LT
    (60) comparator -> . GEQ
    (61) comparator -> . LEQ
    (62) comparator -> . EQ
    (63) comparator -> . NEQ
    (44) boolean_operator -> . AND
    (45) boolean_operator -> . OR

    RPAREN          shift and go to state 127
    PLUS            shift and go to state 75
    MINUS           shift and go to state 79
    TIMES           shift and go to state 72
    DIVIDE          shift and go to state 68
    MOD             shift and go to state 77
    GT              shift and go to state 67
    LT              shift and go to state 74
    GEQ             shift and go to state 66
    LEQ             shift and go to state 73
    EQ              shift and go to state 78
    NEQ             shift and go to state 76
    AND             shift and go to state 70
    OR              shift and go to state 71

    comparator                     shift and go to state 65
    boolean_operator               shift and go to state 69
    op                             shift and go to state 83

state 125

    (80) function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .

    K_END           reduce using rule 80 (function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    ID              reduce using rule 80 (function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_IF            reduce using rule 80 (function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_WHILE         reduce using rule 80 (function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_CONTINUE      reduce using rule 80 (function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_BREAK         reduce using rule 80 (function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_DONE          reduce using rule 80 (function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_LIST          reduce using rule 80 (function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_DICT          reduce using rule 80 (function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_SET           reduce using rule 80 (function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_INT           reduce using rule 80 (function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_DOUBLE        reduce using rule 80 (function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_STRING        reduce using rule 80 (function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_BOOL          reduce using rule 80 (function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_WINDOW        reduce using rule 80 (function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_SHAPE         reduce using rule 80 (function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_TRIANGLE      reduce using rule 80 (function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_RECTANGLE     reduce using rule 80 (function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_CIRCLE        reduce using rule 80 (function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_POINT         reduce using rule 80 (function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_TEXT          reduce using rule 80 (function_header -> pre_type_modifier type ID LPAREN push_scope RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)


state 126

    (79) function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression . unset_ignore_flag
    (86) unset_ignore_flag -> .

    K_END           reduce using rule 86 (unset_ignore_flag -> .)
    ID              reduce using rule 86 (unset_ignore_flag -> .)
    K_IF            reduce using rule 86 (unset_ignore_flag -> .)
    K_WHILE         reduce using rule 86 (unset_ignore_flag -> .)
    K_CONTINUE      reduce using rule 86 (unset_ignore_flag -> .)
    K_BREAK         reduce using rule 86 (unset_ignore_flag -> .)
    K_DONE          reduce using rule 86 (unset_ignore_flag -> .)
    K_LIST          reduce using rule 86 (unset_ignore_flag -> .)
    K_DICT          reduce using rule 86 (unset_ignore_flag -> .)
    K_SET           reduce using rule 86 (unset_ignore_flag -> .)
    K_INT           reduce using rule 86 (unset_ignore_flag -> .)
    K_DOUBLE        reduce using rule 86 (unset_ignore_flag -> .)
    K_STRING        reduce using rule 86 (unset_ignore_flag -> .)
    K_BOOL          reduce using rule 86 (unset_ignore_flag -> .)
    K_WINDOW        reduce using rule 86 (unset_ignore_flag -> .)
    K_SHAPE         reduce using rule 86 (unset_ignore_flag -> .)
    K_TRIANGLE      reduce using rule 86 (unset_ignore_flag -> .)
    K_RECTANGLE     reduce using rule 86 (unset_ignore_flag -> .)
    K_CIRCLE        reduce using rule 86 (unset_ignore_flag -> .)
    K_POINT         reduce using rule 86 (unset_ignore_flag -> .)
    K_TEXT          reduce using rule 86 (unset_ignore_flag -> .)

    unset_ignore_flag              shift and go to state 128

state 127

    (69) else_if_statement -> K_EF LPAREN expression RPAREN . push_scope compound_statement_list
    (84) push_scope -> .

    ID              reduce using rule 84 (push_scope -> .)
    K_IF            reduce using rule 84 (push_scope -> .)
    K_WHILE         reduce using rule 84 (push_scope -> .)
    K_CONTINUE      reduce using rule 84 (push_scope -> .)
    K_BREAK         reduce using rule 84 (push_scope -> .)
    K_DONE          reduce using rule 84 (push_scope -> .)
    K_LIST          reduce using rule 84 (push_scope -> .)
    K_DICT          reduce using rule 84 (push_scope -> .)
    K_SET           reduce using rule 84 (push_scope -> .)
    K_INT           reduce using rule 84 (push_scope -> .)
    K_DOUBLE        reduce using rule 84 (push_scope -> .)
    K_STRING        reduce using rule 84 (push_scope -> .)
    K_BOOL          reduce using rule 84 (push_scope -> .)
    K_WINDOW        reduce using rule 84 (push_scope -> .)
    K_SHAPE         reduce using rule 84 (push_scope -> .)
    K_TRIANGLE      reduce using rule 84 (push_scope -> .)
    K_RECTANGLE     reduce using rule 84 (push_scope -> .)
    K_CIRCLE        reduce using rule 84 (push_scope -> .)
    K_POINT         reduce using rule 84 (push_scope -> .)
    K_TEXT          reduce using rule 84 (push_scope -> .)
    K_EL            reduce using rule 84 (push_scope -> .)
    K_EF            reduce using rule 84 (push_scope -> .)
    K_END           reduce using rule 84 (push_scope -> .)

    push_scope                     shift and go to state 129

state 128

    (79) function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .

    K_END           reduce using rule 79 (function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    ID              reduce using rule 79 (function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_IF            reduce using rule 79 (function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_WHILE         reduce using rule 79 (function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_CONTINUE      reduce using rule 79 (function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_BREAK         reduce using rule 79 (function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_DONE          reduce using rule 79 (function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_LIST          reduce using rule 79 (function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_DICT          reduce using rule 79 (function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_SET           reduce using rule 79 (function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_INT           reduce using rule 79 (function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_DOUBLE        reduce using rule 79 (function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_STRING        reduce using rule 79 (function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_BOOL          reduce using rule 79 (function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_WINDOW        reduce using rule 79 (function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_SHAPE         reduce using rule 79 (function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_TRIANGLE      reduce using rule 79 (function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_RECTANGLE     reduce using rule 79 (function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_CIRCLE        reduce using rule 79 (function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_POINT         reduce using rule 79 (function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_TEXT          reduce using rule 79 (function_header -> pre_type_modifier type ID LPAREN push_scope argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)


state 129

    (69) else_if_statement -> K_EF LPAREN expression RPAREN push_scope . compound_statement_list
    (72) compound_statement_list -> .
    (73) compound_statement_list -> . compound_statement_list compound_statement

    ID              reduce using rule 72 (compound_statement_list -> .)
    K_IF            reduce using rule 72 (compound_statement_list -> .)
    K_WHILE         reduce using rule 72 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 72 (compound_statement_list -> .)
    K_BREAK         reduce using rule 72 (compound_statement_list -> .)
    K_DONE          reduce using rule 72 (compound_statement_list -> .)
    K_LIST          reduce using rule 72 (compound_statement_list -> .)
    K_DICT          reduce using rule 72 (compound_statement_list -> .)
    K_SET           reduce using rule 72 (compound_statement_list -> .)
    K_INT           reduce using rule 72 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 72 (compound_statement_list -> .)
    K_STRING        reduce using rule 72 (compound_statement_list -> .)
    K_BOOL          reduce using rule 72 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 72 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 72 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 72 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 72 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 72 (compound_statement_list -> .)
    K_POINT         reduce using rule 72 (compound_statement_list -> .)
    K_TEXT          reduce using rule 72 (compound_statement_list -> .)
    K_EL            reduce using rule 72 (compound_statement_list -> .)
    K_EF            reduce using rule 72 (compound_statement_list -> .)
    K_END           reduce using rule 72 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 130

state 130

    (69) else_if_statement -> K_EF LPAREN expression RPAREN push_scope compound_statement_list .
    (73) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (66) selection_statement -> . K_IF LPAREN expression RPAREN push_scope compound_statement_list else_if_statement_list else_statement K_END
    (74) iteration_statement -> . K_WHILE LPAREN expression RPAREN compound_statement_list K_END
    (75) jump_statement -> . K_CONTINUE
    (76) jump_statement -> . K_BREAK
    (77) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_EL            reduce using rule 69 (else_if_statement -> K_EF LPAREN expression RPAREN push_scope compound_statement_list .)
    K_EF            reduce using rule 69 (else_if_statement -> K_EF LPAREN expression RPAREN push_scope compound_statement_list .)
    K_END           reduce using rule 69 (else_if_statement -> K_EF LPAREN expression RPAREN push_scope compound_statement_list .)
    ID              shift and go to state 17
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 12
    K_BREAK         shift and go to state 13
    K_DONE          shift and go to state 21
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 14
    K_DICT          shift and go to state 16
    K_SET           shift and go to state 3

    jump_statement                 shift and go to state 18
    compound_statement             shift and go to state 58
    iteration_statement            shift and go to state 5
    selection_statement            shift and go to state 9
    function_call_statement        shift and go to state 20
    pre_type_modifier              shift and go to state 59
    variable_declaration           shift and go to state 6
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 39 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 39 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 39 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 39 resolved as shift
WARNING: shift/reduce conflict for MOD in state 39 resolved as shift
WARNING: shift/reduce conflict for GT in state 39 resolved as shift
WARNING: shift/reduce conflict for LT in state 39 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 39 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 39 resolved as shift
WARNING: shift/reduce conflict for EQ in state 39 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 39 resolved as shift
WARNING: shift/reduce conflict for AND in state 39 resolved as shift
WARNING: shift/reduce conflict for OR in state 39 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 93 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 93 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 93 resolved as shift
WARNING: shift/reduce conflict for MOD in state 93 resolved as shift
WARNING: shift/reduce conflict for GT in state 93 resolved as shift
WARNING: shift/reduce conflict for LT in state 93 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 93 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 93 resolved as shift
WARNING: shift/reduce conflict for EQ in state 93 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 93 resolved as shift
WARNING: shift/reduce conflict for AND in state 93 resolved as shift
WARNING: shift/reduce conflict for OR in state 93 resolved as shift
