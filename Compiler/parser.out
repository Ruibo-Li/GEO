Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    K_NULL
    COMMENT
    K_POINT

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> <empty>
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> compound_statement
Rule 5     compound_statement -> function_call_statement
Rule 6     compound_statement -> variable_declaration
Rule 7     compound_statement -> selection_statement
Rule 8     compound_statement -> iteration_statement
Rule 9     compound_statement -> jump_statement
Rule 10    function_call_statement -> ID LPAREN parameter_list RPAREN
Rule 11    function_call_statement -> ID LPAREN RPAREN
Rule 12    parameter_list -> parameter_list COMMA expression
Rule 13    parameter_list -> expression
Rule 14    variable_declaration -> pre_type_modifier type ID
Rule 15    variable_declaration -> pre_type_modifier type ID ASSIGN expression
Rule 16    variable_declaration -> ID ASSIGN expression
Rule 17    pre_type_modifier -> <empty>
Rule 18    pre_type_modifier -> K_LIST
Rule 19    pre_type_modifier -> K_DICT
Rule 20    pre_type_modifier -> K_SET
Rule 21    type -> K_INT
Rule 22    type -> K_DOUBLE
Rule 23    type -> K_STRING
Rule 24    type -> K_BOOL
Rule 25    type -> K_WINDOW
Rule 26    type -> K_SHAPE
Rule 27    type -> K_TRIANGLE
Rule 28    type -> K_RECTANGLE
Rule 29    type -> K_CIRCLE
Rule 30    type -> K_TEXT
Rule 31    expression -> string_expression
Rule 32    expression -> unary_expression
Rule 33    expression -> boolean_expression
Rule 34    expression -> arithmetic_expression
Rule 35    string_expression -> string_expression PLUS string_term
Rule 36    string_expression -> STRING
Rule 37    string_term -> function_call_statement
Rule 38    string_term -> STRING
Rule 39    unary_expression -> ID
Rule 40    unary_expression -> STRING
Rule 41    unary_expression -> INTEGER
Rule 42    unary_expression -> function_call_statement
Rule 43    unary_expression -> DOUBLE
Rule 44    unary_expression -> K_TRUE
Rule 45    unary_expression -> K_FALSE
Rule 46    boolean_expression -> boolean_expression OR boolean_term
Rule 47    boolean_expression -> boolean_term
Rule 48    boolean_term -> boolean_term AND boolean_factor
Rule 49    boolean_term -> boolean_factor
Rule 50    boolean_factor -> LPAREN boolean_expression RPAREN
Rule 51    boolean_factor -> unary_expression comparator unary_expression
Rule 52    boolean_factor -> arithmetic_expression comparator arithmetic_expression
Rule 53    boolean_factor -> string_expression comparator string_expression
Rule 54    boolean_factor -> unary_expression
Rule 55    boolean_factor -> NEG boolean_factor
Rule 56    comparator -> GT
Rule 57    comparator -> LT
Rule 58    comparator -> GEQ
Rule 59    comparator -> LEQ
Rule 60    comparator -> EQ
Rule 61    comparator -> NEQ
Rule 62    arithmetic_expression -> arithmetic_expression PLUS arithmetic_term
Rule 63    arithmetic_expression -> arithmetic_expression MINUS arithmetic_term
Rule 64    arithmetic_expression -> arithmetic_term
Rule 65    arithmetic_term -> arithmetic_term TIMES arithmetic_factor
Rule 66    arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor
Rule 67    arithmetic_term -> arithmetic_term MOD arithmetic_factor
Rule 68    arithmetic_term -> arithmetic_factor
Rule 69    arithmetic_factor -> LPAREN arithmetic_expression RPAREN
Rule 70    arithmetic_factor -> number
Rule 71    arithmetic_factor -> ID
Rule 72    arithmetic_factor -> function_call_statement
Rule 73    arithmetic_factor -> MINUS arithmetic_factor
Rule 74    number -> INTEGER
Rule 75    number -> DOUBLE
Rule 76    selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
Rule 77    else_if_statement_list -> <empty>
Rule 78    else_if_statement_list -> else_if_statement_list else_if_statement
Rule 79    else_if_statement -> K_EF LPAREN boolean_expression RPAREN compound_statement_list
Rule 80    else_statement -> <empty>
Rule 81    else_statement -> K_EL compound_statement_list
Rule 82    compound_statement_list -> <empty>
Rule 83    compound_statement_list -> compound_statement_list compound_statement
Rule 84    iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END
Rule 85    jump_statement -> K_CONTINUE
Rule 86    jump_statement -> K_BREAK
Rule 87    jump_statement -> K_DONE

Terminals, with rules where they appear

AND                  : 48
ASSIGN               : 15 16
COMMA                : 12
COMMENT              : 
DIVIDE               : 66
DOUBLE               : 43 75
EQ                   : 60
GEQ                  : 58
GT                   : 56
ID                   : 10 11 14 15 16 39 71
INTEGER              : 41 74
K_BOOL               : 24
K_BREAK              : 86
K_CIRCLE             : 29
K_CONTINUE           : 85
K_DICT               : 19
K_DONE               : 87
K_DOUBLE             : 22
K_EF                 : 79
K_EL                 : 81
K_END                : 76 84
K_FALSE              : 45
K_IF                 : 76
K_INT                : 21
K_LIST               : 18
K_NULL               : 
K_POINT              : 
K_RECTANGLE          : 28
K_SET                : 20
K_SHAPE              : 26
K_STRING             : 23
K_TEXT               : 30
K_TRIANGLE           : 27
K_TRUE               : 44
K_WHILE              : 84
K_WINDOW             : 25
LEQ                  : 59
LPAREN               : 10 11 50 69 76 79 84
LT                   : 57
MINUS                : 63 73
MOD                  : 67
NEG                  : 55
NEQ                  : 61
OR                   : 46
PLUS                 : 35 62
RPAREN               : 10 11 50 69 76 79 84
STRING               : 36 38 40
TIMES                : 65
error                : 

Nonterminals, with rules where they appear

arithmetic_expression : 34 52 52 62 63 69
arithmetic_factor    : 65 66 67 68 73
arithmetic_term      : 62 63 64 65 66 67
boolean_expression   : 33 46 50 76 79 84
boolean_factor       : 48 49 55
boolean_term         : 46 47 48
comparator           : 51 52 53
compound_statement   : 4 83
compound_statement_list : 76 79 81 83 84
else_if_statement    : 78
else_if_statement_list : 76 78
else_statement       : 76
expression           : 12 13 15 16
function_call_statement : 5 37 42 72
iteration_statement  : 8
jump_statement       : 9
number               : 70
parameter_list       : 10 12
pre_type_modifier    : 14 15
program              : 0
selection_statement  : 7
statement            : 3
statement_list       : 1 3
string_expression    : 31 35 53 53
string_term          : 35
type                 : 14 15
unary_expression     : 32 51 51 54
variable_declaration : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> .
    (3) statement_list -> . statement_list statement

    ID              reduce using rule 2 (statement_list -> .)
    K_IF            reduce using rule 2 (statement_list -> .)
    K_WHILE         reduce using rule 2 (statement_list -> .)
    K_CONTINUE      reduce using rule 2 (statement_list -> .)
    K_BREAK         reduce using rule 2 (statement_list -> .)
    K_DONE          reduce using rule 2 (statement_list -> .)
    K_LIST          reduce using rule 2 (statement_list -> .)
    K_DICT          reduce using rule 2 (statement_list -> .)
    K_SET           reduce using rule 2 (statement_list -> .)
    K_INT           reduce using rule 2 (statement_list -> .)
    K_DOUBLE        reduce using rule 2 (statement_list -> .)
    K_STRING        reduce using rule 2 (statement_list -> .)
    K_BOOL          reduce using rule 2 (statement_list -> .)
    K_WINDOW        reduce using rule 2 (statement_list -> .)
    K_SHAPE         reduce using rule 2 (statement_list -> .)
    K_TRIANGLE      reduce using rule 2 (statement_list -> .)
    K_RECTANGLE     reduce using rule 2 (statement_list -> .)
    K_CIRCLE        reduce using rule 2 (statement_list -> .)
    K_TEXT          reduce using rule 2 (statement_list -> .)
    $end            reduce using rule 2 (statement_list -> .)

    statement_list                 shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . compound_statement
    (5) compound_statement -> . function_call_statement
    (6) compound_statement -> . variable_declaration
    (7) compound_statement -> . selection_statement
    (8) compound_statement -> . iteration_statement
    (9) compound_statement -> . jump_statement
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN
    (14) variable_declaration -> . pre_type_modifier type ID
    (15) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (16) variable_declaration -> . ID ASSIGN expression
    (76) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (84) iteration_statement -> . K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END
    (85) jump_statement -> . K_CONTINUE
    (86) jump_statement -> . K_BREAK
    (87) jump_statement -> . K_DONE
    (17) pre_type_modifier -> .
    (18) pre_type_modifier -> . K_LIST
    (19) pre_type_modifier -> . K_DICT
    (20) pre_type_modifier -> . K_SET

    $end            reduce using rule 1 (program -> statement_list .)
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 19
    K_INT           reduce using rule 17 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 17 (pre_type_modifier -> .)
    K_STRING        reduce using rule 17 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 17 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 17 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 17 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 17 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 17 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 17 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 17 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 3

    jump_statement                 shift and go to state 17
    compound_statement             shift and go to state 8
    selection_statement            shift and go to state 9
    function_call_statement        shift and go to state 18
    statement                      shift and go to state 10
    pre_type_modifier              shift and go to state 14
    iteration_statement            shift and go to state 5
    variable_declaration           shift and go to state 6

state 2

    (0) S' -> program .



state 3

    (20) pre_type_modifier -> K_SET .

    K_INT           reduce using rule 20 (pre_type_modifier -> K_SET .)
    K_DOUBLE        reduce using rule 20 (pre_type_modifier -> K_SET .)
    K_STRING        reduce using rule 20 (pre_type_modifier -> K_SET .)
    K_BOOL          reduce using rule 20 (pre_type_modifier -> K_SET .)
    K_WINDOW        reduce using rule 20 (pre_type_modifier -> K_SET .)
    K_SHAPE         reduce using rule 20 (pre_type_modifier -> K_SET .)
    K_TRIANGLE      reduce using rule 20 (pre_type_modifier -> K_SET .)
    K_RECTANGLE     reduce using rule 20 (pre_type_modifier -> K_SET .)
    K_CIRCLE        reduce using rule 20 (pre_type_modifier -> K_SET .)
    K_TEXT          reduce using rule 20 (pre_type_modifier -> K_SET .)


state 4

    (76) selection_statement -> K_IF . LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END

    LPAREN          shift and go to state 20


state 5

    (8) compound_statement -> iteration_statement .

    ID              reduce using rule 8 (compound_statement -> iteration_statement .)
    K_IF            reduce using rule 8 (compound_statement -> iteration_statement .)
    K_WHILE         reduce using rule 8 (compound_statement -> iteration_statement .)
    K_CONTINUE      reduce using rule 8 (compound_statement -> iteration_statement .)
    K_BREAK         reduce using rule 8 (compound_statement -> iteration_statement .)
    K_DONE          reduce using rule 8 (compound_statement -> iteration_statement .)
    K_LIST          reduce using rule 8 (compound_statement -> iteration_statement .)
    K_DICT          reduce using rule 8 (compound_statement -> iteration_statement .)
    K_SET           reduce using rule 8 (compound_statement -> iteration_statement .)
    K_INT           reduce using rule 8 (compound_statement -> iteration_statement .)
    K_DOUBLE        reduce using rule 8 (compound_statement -> iteration_statement .)
    K_STRING        reduce using rule 8 (compound_statement -> iteration_statement .)
    K_BOOL          reduce using rule 8 (compound_statement -> iteration_statement .)
    K_WINDOW        reduce using rule 8 (compound_statement -> iteration_statement .)
    K_SHAPE         reduce using rule 8 (compound_statement -> iteration_statement .)
    K_TRIANGLE      reduce using rule 8 (compound_statement -> iteration_statement .)
    K_RECTANGLE     reduce using rule 8 (compound_statement -> iteration_statement .)
    K_CIRCLE        reduce using rule 8 (compound_statement -> iteration_statement .)
    K_TEXT          reduce using rule 8 (compound_statement -> iteration_statement .)
    K_EL            reduce using rule 8 (compound_statement -> iteration_statement .)
    K_EF            reduce using rule 8 (compound_statement -> iteration_statement .)
    K_END           reduce using rule 8 (compound_statement -> iteration_statement .)
    $end            reduce using rule 8 (compound_statement -> iteration_statement .)


state 6

    (6) compound_statement -> variable_declaration .

    ID              reduce using rule 6 (compound_statement -> variable_declaration .)
    K_IF            reduce using rule 6 (compound_statement -> variable_declaration .)
    K_WHILE         reduce using rule 6 (compound_statement -> variable_declaration .)
    K_CONTINUE      reduce using rule 6 (compound_statement -> variable_declaration .)
    K_BREAK         reduce using rule 6 (compound_statement -> variable_declaration .)
    K_DONE          reduce using rule 6 (compound_statement -> variable_declaration .)
    K_LIST          reduce using rule 6 (compound_statement -> variable_declaration .)
    K_DICT          reduce using rule 6 (compound_statement -> variable_declaration .)
    K_SET           reduce using rule 6 (compound_statement -> variable_declaration .)
    K_INT           reduce using rule 6 (compound_statement -> variable_declaration .)
    K_DOUBLE        reduce using rule 6 (compound_statement -> variable_declaration .)
    K_STRING        reduce using rule 6 (compound_statement -> variable_declaration .)
    K_BOOL          reduce using rule 6 (compound_statement -> variable_declaration .)
    K_WINDOW        reduce using rule 6 (compound_statement -> variable_declaration .)
    K_SHAPE         reduce using rule 6 (compound_statement -> variable_declaration .)
    K_TRIANGLE      reduce using rule 6 (compound_statement -> variable_declaration .)
    K_RECTANGLE     reduce using rule 6 (compound_statement -> variable_declaration .)
    K_CIRCLE        reduce using rule 6 (compound_statement -> variable_declaration .)
    K_TEXT          reduce using rule 6 (compound_statement -> variable_declaration .)
    K_EL            reduce using rule 6 (compound_statement -> variable_declaration .)
    K_EF            reduce using rule 6 (compound_statement -> variable_declaration .)
    K_END           reduce using rule 6 (compound_statement -> variable_declaration .)
    $end            reduce using rule 6 (compound_statement -> variable_declaration .)


state 7

    (84) iteration_statement -> K_WHILE . LPAREN boolean_expression RPAREN compound_statement_list K_END

    LPAREN          shift and go to state 21


state 8

    (4) statement -> compound_statement .

    ID              reduce using rule 4 (statement -> compound_statement .)
    K_IF            reduce using rule 4 (statement -> compound_statement .)
    K_WHILE         reduce using rule 4 (statement -> compound_statement .)
    K_CONTINUE      reduce using rule 4 (statement -> compound_statement .)
    K_BREAK         reduce using rule 4 (statement -> compound_statement .)
    K_DONE          reduce using rule 4 (statement -> compound_statement .)
    K_LIST          reduce using rule 4 (statement -> compound_statement .)
    K_DICT          reduce using rule 4 (statement -> compound_statement .)
    K_SET           reduce using rule 4 (statement -> compound_statement .)
    K_INT           reduce using rule 4 (statement -> compound_statement .)
    K_DOUBLE        reduce using rule 4 (statement -> compound_statement .)
    K_STRING        reduce using rule 4 (statement -> compound_statement .)
    K_BOOL          reduce using rule 4 (statement -> compound_statement .)
    K_WINDOW        reduce using rule 4 (statement -> compound_statement .)
    K_SHAPE         reduce using rule 4 (statement -> compound_statement .)
    K_TRIANGLE      reduce using rule 4 (statement -> compound_statement .)
    K_RECTANGLE     reduce using rule 4 (statement -> compound_statement .)
    K_CIRCLE        reduce using rule 4 (statement -> compound_statement .)
    K_TEXT          reduce using rule 4 (statement -> compound_statement .)
    $end            reduce using rule 4 (statement -> compound_statement .)


state 9

    (7) compound_statement -> selection_statement .

    ID              reduce using rule 7 (compound_statement -> selection_statement .)
    K_IF            reduce using rule 7 (compound_statement -> selection_statement .)
    K_WHILE         reduce using rule 7 (compound_statement -> selection_statement .)
    K_CONTINUE      reduce using rule 7 (compound_statement -> selection_statement .)
    K_BREAK         reduce using rule 7 (compound_statement -> selection_statement .)
    K_DONE          reduce using rule 7 (compound_statement -> selection_statement .)
    K_LIST          reduce using rule 7 (compound_statement -> selection_statement .)
    K_DICT          reduce using rule 7 (compound_statement -> selection_statement .)
    K_SET           reduce using rule 7 (compound_statement -> selection_statement .)
    K_INT           reduce using rule 7 (compound_statement -> selection_statement .)
    K_DOUBLE        reduce using rule 7 (compound_statement -> selection_statement .)
    K_STRING        reduce using rule 7 (compound_statement -> selection_statement .)
    K_BOOL          reduce using rule 7 (compound_statement -> selection_statement .)
    K_WINDOW        reduce using rule 7 (compound_statement -> selection_statement .)
    K_SHAPE         reduce using rule 7 (compound_statement -> selection_statement .)
    K_TRIANGLE      reduce using rule 7 (compound_statement -> selection_statement .)
    K_RECTANGLE     reduce using rule 7 (compound_statement -> selection_statement .)
    K_CIRCLE        reduce using rule 7 (compound_statement -> selection_statement .)
    K_TEXT          reduce using rule 7 (compound_statement -> selection_statement .)
    K_EL            reduce using rule 7 (compound_statement -> selection_statement .)
    K_EF            reduce using rule 7 (compound_statement -> selection_statement .)
    K_END           reduce using rule 7 (compound_statement -> selection_statement .)
    $end            reduce using rule 7 (compound_statement -> selection_statement .)


state 10

    (3) statement_list -> statement_list statement .

    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    K_IF            reduce using rule 3 (statement_list -> statement_list statement .)
    K_WHILE         reduce using rule 3 (statement_list -> statement_list statement .)
    K_CONTINUE      reduce using rule 3 (statement_list -> statement_list statement .)
    K_BREAK         reduce using rule 3 (statement_list -> statement_list statement .)
    K_DONE          reduce using rule 3 (statement_list -> statement_list statement .)
    K_LIST          reduce using rule 3 (statement_list -> statement_list statement .)
    K_DICT          reduce using rule 3 (statement_list -> statement_list statement .)
    K_SET           reduce using rule 3 (statement_list -> statement_list statement .)
    K_INT           reduce using rule 3 (statement_list -> statement_list statement .)
    K_DOUBLE        reduce using rule 3 (statement_list -> statement_list statement .)
    K_STRING        reduce using rule 3 (statement_list -> statement_list statement .)
    K_BOOL          reduce using rule 3 (statement_list -> statement_list statement .)
    K_WINDOW        reduce using rule 3 (statement_list -> statement_list statement .)
    K_SHAPE         reduce using rule 3 (statement_list -> statement_list statement .)
    K_TRIANGLE      reduce using rule 3 (statement_list -> statement_list statement .)
    K_RECTANGLE     reduce using rule 3 (statement_list -> statement_list statement .)
    K_CIRCLE        reduce using rule 3 (statement_list -> statement_list statement .)
    K_TEXT          reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)


state 11

    (85) jump_statement -> K_CONTINUE .

    ID              reduce using rule 85 (jump_statement -> K_CONTINUE .)
    K_IF            reduce using rule 85 (jump_statement -> K_CONTINUE .)
    K_WHILE         reduce using rule 85 (jump_statement -> K_CONTINUE .)
    K_CONTINUE      reduce using rule 85 (jump_statement -> K_CONTINUE .)
    K_BREAK         reduce using rule 85 (jump_statement -> K_CONTINUE .)
    K_DONE          reduce using rule 85 (jump_statement -> K_CONTINUE .)
    K_LIST          reduce using rule 85 (jump_statement -> K_CONTINUE .)
    K_DICT          reduce using rule 85 (jump_statement -> K_CONTINUE .)
    K_SET           reduce using rule 85 (jump_statement -> K_CONTINUE .)
    K_EL            reduce using rule 85 (jump_statement -> K_CONTINUE .)
    K_EF            reduce using rule 85 (jump_statement -> K_CONTINUE .)
    K_END           reduce using rule 85 (jump_statement -> K_CONTINUE .)
    K_INT           reduce using rule 85 (jump_statement -> K_CONTINUE .)
    K_DOUBLE        reduce using rule 85 (jump_statement -> K_CONTINUE .)
    K_STRING        reduce using rule 85 (jump_statement -> K_CONTINUE .)
    K_BOOL          reduce using rule 85 (jump_statement -> K_CONTINUE .)
    K_WINDOW        reduce using rule 85 (jump_statement -> K_CONTINUE .)
    K_SHAPE         reduce using rule 85 (jump_statement -> K_CONTINUE .)
    K_TRIANGLE      reduce using rule 85 (jump_statement -> K_CONTINUE .)
    K_RECTANGLE     reduce using rule 85 (jump_statement -> K_CONTINUE .)
    K_CIRCLE        reduce using rule 85 (jump_statement -> K_CONTINUE .)
    K_TEXT          reduce using rule 85 (jump_statement -> K_CONTINUE .)
    $end            reduce using rule 85 (jump_statement -> K_CONTINUE .)


state 12

    (86) jump_statement -> K_BREAK .

    ID              reduce using rule 86 (jump_statement -> K_BREAK .)
    K_IF            reduce using rule 86 (jump_statement -> K_BREAK .)
    K_WHILE         reduce using rule 86 (jump_statement -> K_BREAK .)
    K_CONTINUE      reduce using rule 86 (jump_statement -> K_BREAK .)
    K_BREAK         reduce using rule 86 (jump_statement -> K_BREAK .)
    K_DONE          reduce using rule 86 (jump_statement -> K_BREAK .)
    K_LIST          reduce using rule 86 (jump_statement -> K_BREAK .)
    K_DICT          reduce using rule 86 (jump_statement -> K_BREAK .)
    K_SET           reduce using rule 86 (jump_statement -> K_BREAK .)
    K_EL            reduce using rule 86 (jump_statement -> K_BREAK .)
    K_EF            reduce using rule 86 (jump_statement -> K_BREAK .)
    K_END           reduce using rule 86 (jump_statement -> K_BREAK .)
    K_INT           reduce using rule 86 (jump_statement -> K_BREAK .)
    K_DOUBLE        reduce using rule 86 (jump_statement -> K_BREAK .)
    K_STRING        reduce using rule 86 (jump_statement -> K_BREAK .)
    K_BOOL          reduce using rule 86 (jump_statement -> K_BREAK .)
    K_WINDOW        reduce using rule 86 (jump_statement -> K_BREAK .)
    K_SHAPE         reduce using rule 86 (jump_statement -> K_BREAK .)
    K_TRIANGLE      reduce using rule 86 (jump_statement -> K_BREAK .)
    K_RECTANGLE     reduce using rule 86 (jump_statement -> K_BREAK .)
    K_CIRCLE        reduce using rule 86 (jump_statement -> K_BREAK .)
    K_TEXT          reduce using rule 86 (jump_statement -> K_BREAK .)
    $end            reduce using rule 86 (jump_statement -> K_BREAK .)


state 13

    (18) pre_type_modifier -> K_LIST .

    K_INT           reduce using rule 18 (pre_type_modifier -> K_LIST .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> K_LIST .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> K_LIST .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> K_LIST .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> K_LIST .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> K_LIST .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> K_LIST .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> K_LIST .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> K_LIST .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> K_LIST .)


state 14

    (14) variable_declaration -> pre_type_modifier . type ID
    (15) variable_declaration -> pre_type_modifier . type ID ASSIGN expression
    (21) type -> . K_INT
    (22) type -> . K_DOUBLE
    (23) type -> . K_STRING
    (24) type -> . K_BOOL
    (25) type -> . K_WINDOW
    (26) type -> . K_SHAPE
    (27) type -> . K_TRIANGLE
    (28) type -> . K_RECTANGLE
    (29) type -> . K_CIRCLE
    (30) type -> . K_TEXT

    K_INT           shift and go to state 29
    K_DOUBLE        shift and go to state 23
    K_STRING        shift and go to state 30
    K_BOOL          shift and go to state 22
    K_WINDOW        shift and go to state 31
    K_SHAPE         shift and go to state 26
    K_TRIANGLE      shift and go to state 24
    K_RECTANGLE     shift and go to state 28
    K_CIRCLE        shift and go to state 32
    K_TEXT          shift and go to state 27

    type                           shift and go to state 25

state 15

    (19) pre_type_modifier -> K_DICT .

    K_INT           reduce using rule 19 (pre_type_modifier -> K_DICT .)
    K_DOUBLE        reduce using rule 19 (pre_type_modifier -> K_DICT .)
    K_STRING        reduce using rule 19 (pre_type_modifier -> K_DICT .)
    K_BOOL          reduce using rule 19 (pre_type_modifier -> K_DICT .)
    K_WINDOW        reduce using rule 19 (pre_type_modifier -> K_DICT .)
    K_SHAPE         reduce using rule 19 (pre_type_modifier -> K_DICT .)
    K_TRIANGLE      reduce using rule 19 (pre_type_modifier -> K_DICT .)
    K_RECTANGLE     reduce using rule 19 (pre_type_modifier -> K_DICT .)
    K_CIRCLE        reduce using rule 19 (pre_type_modifier -> K_DICT .)
    K_TEXT          reduce using rule 19 (pre_type_modifier -> K_DICT .)


state 16

    (10) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (11) function_call_statement -> ID . LPAREN RPAREN
    (16) variable_declaration -> ID . ASSIGN expression

    LPAREN          shift and go to state 34
    ASSIGN          shift and go to state 33


state 17

    (9) compound_statement -> jump_statement .

    ID              reduce using rule 9 (compound_statement -> jump_statement .)
    K_IF            reduce using rule 9 (compound_statement -> jump_statement .)
    K_WHILE         reduce using rule 9 (compound_statement -> jump_statement .)
    K_CONTINUE      reduce using rule 9 (compound_statement -> jump_statement .)
    K_BREAK         reduce using rule 9 (compound_statement -> jump_statement .)
    K_DONE          reduce using rule 9 (compound_statement -> jump_statement .)
    K_LIST          reduce using rule 9 (compound_statement -> jump_statement .)
    K_DICT          reduce using rule 9 (compound_statement -> jump_statement .)
    K_SET           reduce using rule 9 (compound_statement -> jump_statement .)
    K_INT           reduce using rule 9 (compound_statement -> jump_statement .)
    K_DOUBLE        reduce using rule 9 (compound_statement -> jump_statement .)
    K_STRING        reduce using rule 9 (compound_statement -> jump_statement .)
    K_BOOL          reduce using rule 9 (compound_statement -> jump_statement .)
    K_WINDOW        reduce using rule 9 (compound_statement -> jump_statement .)
    K_SHAPE         reduce using rule 9 (compound_statement -> jump_statement .)
    K_TRIANGLE      reduce using rule 9 (compound_statement -> jump_statement .)
    K_RECTANGLE     reduce using rule 9 (compound_statement -> jump_statement .)
    K_CIRCLE        reduce using rule 9 (compound_statement -> jump_statement .)
    K_TEXT          reduce using rule 9 (compound_statement -> jump_statement .)
    K_EL            reduce using rule 9 (compound_statement -> jump_statement .)
    K_EF            reduce using rule 9 (compound_statement -> jump_statement .)
    K_END           reduce using rule 9 (compound_statement -> jump_statement .)
    $end            reduce using rule 9 (compound_statement -> jump_statement .)


state 18

    (5) compound_statement -> function_call_statement .

    ID              reduce using rule 5 (compound_statement -> function_call_statement .)
    K_IF            reduce using rule 5 (compound_statement -> function_call_statement .)
    K_WHILE         reduce using rule 5 (compound_statement -> function_call_statement .)
    K_CONTINUE      reduce using rule 5 (compound_statement -> function_call_statement .)
    K_BREAK         reduce using rule 5 (compound_statement -> function_call_statement .)
    K_DONE          reduce using rule 5 (compound_statement -> function_call_statement .)
    K_LIST          reduce using rule 5 (compound_statement -> function_call_statement .)
    K_DICT          reduce using rule 5 (compound_statement -> function_call_statement .)
    K_SET           reduce using rule 5 (compound_statement -> function_call_statement .)
    K_INT           reduce using rule 5 (compound_statement -> function_call_statement .)
    K_DOUBLE        reduce using rule 5 (compound_statement -> function_call_statement .)
    K_STRING        reduce using rule 5 (compound_statement -> function_call_statement .)
    K_BOOL          reduce using rule 5 (compound_statement -> function_call_statement .)
    K_WINDOW        reduce using rule 5 (compound_statement -> function_call_statement .)
    K_SHAPE         reduce using rule 5 (compound_statement -> function_call_statement .)
    K_TRIANGLE      reduce using rule 5 (compound_statement -> function_call_statement .)
    K_RECTANGLE     reduce using rule 5 (compound_statement -> function_call_statement .)
    K_CIRCLE        reduce using rule 5 (compound_statement -> function_call_statement .)
    K_TEXT          reduce using rule 5 (compound_statement -> function_call_statement .)
    K_EL            reduce using rule 5 (compound_statement -> function_call_statement .)
    K_EF            reduce using rule 5 (compound_statement -> function_call_statement .)
    K_END           reduce using rule 5 (compound_statement -> function_call_statement .)
    $end            reduce using rule 5 (compound_statement -> function_call_statement .)


state 19

    (87) jump_statement -> K_DONE .

    ID              reduce using rule 87 (jump_statement -> K_DONE .)
    K_IF            reduce using rule 87 (jump_statement -> K_DONE .)
    K_WHILE         reduce using rule 87 (jump_statement -> K_DONE .)
    K_CONTINUE      reduce using rule 87 (jump_statement -> K_DONE .)
    K_BREAK         reduce using rule 87 (jump_statement -> K_DONE .)
    K_DONE          reduce using rule 87 (jump_statement -> K_DONE .)
    K_LIST          reduce using rule 87 (jump_statement -> K_DONE .)
    K_DICT          reduce using rule 87 (jump_statement -> K_DONE .)
    K_SET           reduce using rule 87 (jump_statement -> K_DONE .)
    K_EL            reduce using rule 87 (jump_statement -> K_DONE .)
    K_EF            reduce using rule 87 (jump_statement -> K_DONE .)
    K_END           reduce using rule 87 (jump_statement -> K_DONE .)
    K_INT           reduce using rule 87 (jump_statement -> K_DONE .)
    K_DOUBLE        reduce using rule 87 (jump_statement -> K_DONE .)
    K_STRING        reduce using rule 87 (jump_statement -> K_DONE .)
    K_BOOL          reduce using rule 87 (jump_statement -> K_DONE .)
    K_WINDOW        reduce using rule 87 (jump_statement -> K_DONE .)
    K_SHAPE         reduce using rule 87 (jump_statement -> K_DONE .)
    K_TRIANGLE      reduce using rule 87 (jump_statement -> K_DONE .)
    K_RECTANGLE     reduce using rule 87 (jump_statement -> K_DONE .)
    K_CIRCLE        reduce using rule 87 (jump_statement -> K_DONE .)
    K_TEXT          reduce using rule 87 (jump_statement -> K_DONE .)
    $end            reduce using rule 87 (jump_statement -> K_DONE .)


state 20

    (76) selection_statement -> K_IF LPAREN . boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (46) boolean_expression -> . boolean_expression OR boolean_term
    (47) boolean_expression -> . boolean_term
    (48) boolean_term -> . boolean_term AND boolean_factor
    (49) boolean_term -> . boolean_factor
    (50) boolean_factor -> . LPAREN boolean_expression RPAREN
    (51) boolean_factor -> . unary_expression comparator unary_expression
    (52) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (53) boolean_factor -> . string_expression comparator string_expression
    (54) boolean_factor -> . unary_expression
    (55) boolean_factor -> . NEG boolean_factor
    (39) unary_expression -> . ID
    (40) unary_expression -> . STRING
    (41) unary_expression -> . INTEGER
    (42) unary_expression -> . function_call_statement
    (43) unary_expression -> . DOUBLE
    (44) unary_expression -> . K_TRUE
    (45) unary_expression -> . K_FALSE
    (62) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (63) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_term
    (35) string_expression -> . string_expression PLUS string_term
    (36) string_expression -> . STRING
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN
    (65) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (66) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (68) arithmetic_term -> . arithmetic_factor
    (69) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (70) arithmetic_factor -> . number
    (71) arithmetic_factor -> . ID
    (72) arithmetic_factor -> . function_call_statement
    (73) arithmetic_factor -> . MINUS arithmetic_factor
    (74) number -> . INTEGER
    (75) number -> . DOUBLE

    LPAREN          shift and go to state 46
    NEG             shift and go to state 36
    ID              shift and go to state 49
    STRING          shift and go to state 45
    INTEGER         shift and go to state 42
    DOUBLE          shift and go to state 51
    K_TRUE          shift and go to state 38
    K_FALSE         shift and go to state 53
    MINUS           shift and go to state 40

    arithmetic_expression          shift and go to state 43
    string_expression              shift and go to state 44
    unary_expression               shift and go to state 35
    boolean_expression             shift and go to state 50
    arithmetic_factor              shift and go to state 41
    boolean_term                   shift and go to state 37
    function_call_statement        shift and go to state 52
    number                         shift and go to state 48
    arithmetic_term                shift and go to state 39
    boolean_factor                 shift and go to state 47

state 21

    (84) iteration_statement -> K_WHILE LPAREN . boolean_expression RPAREN compound_statement_list K_END
    (46) boolean_expression -> . boolean_expression OR boolean_term
    (47) boolean_expression -> . boolean_term
    (48) boolean_term -> . boolean_term AND boolean_factor
    (49) boolean_term -> . boolean_factor
    (50) boolean_factor -> . LPAREN boolean_expression RPAREN
    (51) boolean_factor -> . unary_expression comparator unary_expression
    (52) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (53) boolean_factor -> . string_expression comparator string_expression
    (54) boolean_factor -> . unary_expression
    (55) boolean_factor -> . NEG boolean_factor
    (39) unary_expression -> . ID
    (40) unary_expression -> . STRING
    (41) unary_expression -> . INTEGER
    (42) unary_expression -> . function_call_statement
    (43) unary_expression -> . DOUBLE
    (44) unary_expression -> . K_TRUE
    (45) unary_expression -> . K_FALSE
    (62) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (63) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_term
    (35) string_expression -> . string_expression PLUS string_term
    (36) string_expression -> . STRING
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN
    (65) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (66) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (68) arithmetic_term -> . arithmetic_factor
    (69) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (70) arithmetic_factor -> . number
    (71) arithmetic_factor -> . ID
    (72) arithmetic_factor -> . function_call_statement
    (73) arithmetic_factor -> . MINUS arithmetic_factor
    (74) number -> . INTEGER
    (75) number -> . DOUBLE

    LPAREN          shift and go to state 46
    NEG             shift and go to state 36
    ID              shift and go to state 49
    STRING          shift and go to state 45
    INTEGER         shift and go to state 42
    DOUBLE          shift and go to state 51
    K_TRUE          shift and go to state 38
    K_FALSE         shift and go to state 53
    MINUS           shift and go to state 40

    arithmetic_expression          shift and go to state 43
    string_expression              shift and go to state 44
    unary_expression               shift and go to state 35
    boolean_expression             shift and go to state 54
    arithmetic_factor              shift and go to state 41
    boolean_term                   shift and go to state 37
    function_call_statement        shift and go to state 52
    number                         shift and go to state 48
    arithmetic_term                shift and go to state 39
    boolean_factor                 shift and go to state 47

state 22

    (24) type -> K_BOOL .

    ID              reduce using rule 24 (type -> K_BOOL .)


state 23

    (22) type -> K_DOUBLE .

    ID              reduce using rule 22 (type -> K_DOUBLE .)


state 24

    (27) type -> K_TRIANGLE .

    ID              reduce using rule 27 (type -> K_TRIANGLE .)


state 25

    (14) variable_declaration -> pre_type_modifier type . ID
    (15) variable_declaration -> pre_type_modifier type . ID ASSIGN expression

    ID              shift and go to state 55


state 26

    (26) type -> K_SHAPE .

    ID              reduce using rule 26 (type -> K_SHAPE .)


state 27

    (30) type -> K_TEXT .

    ID              reduce using rule 30 (type -> K_TEXT .)


state 28

    (28) type -> K_RECTANGLE .

    ID              reduce using rule 28 (type -> K_RECTANGLE .)


state 29

    (21) type -> K_INT .

    ID              reduce using rule 21 (type -> K_INT .)


state 30

    (23) type -> K_STRING .

    ID              reduce using rule 23 (type -> K_STRING .)


state 31

    (25) type -> K_WINDOW .

    ID              reduce using rule 25 (type -> K_WINDOW .)


state 32

    (29) type -> K_CIRCLE .

    ID              reduce using rule 29 (type -> K_CIRCLE .)


state 33

    (16) variable_declaration -> ID ASSIGN . expression
    (31) expression -> . string_expression
    (32) expression -> . unary_expression
    (33) expression -> . boolean_expression
    (34) expression -> . arithmetic_expression
    (35) string_expression -> . string_expression PLUS string_term
    (36) string_expression -> . STRING
    (39) unary_expression -> . ID
    (40) unary_expression -> . STRING
    (41) unary_expression -> . INTEGER
    (42) unary_expression -> . function_call_statement
    (43) unary_expression -> . DOUBLE
    (44) unary_expression -> . K_TRUE
    (45) unary_expression -> . K_FALSE
    (46) boolean_expression -> . boolean_expression OR boolean_term
    (47) boolean_expression -> . boolean_term
    (62) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (63) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_term
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN
    (48) boolean_term -> . boolean_term AND boolean_factor
    (49) boolean_term -> . boolean_factor
    (65) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (66) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (68) arithmetic_term -> . arithmetic_factor
    (50) boolean_factor -> . LPAREN boolean_expression RPAREN
    (51) boolean_factor -> . unary_expression comparator unary_expression
    (52) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (53) boolean_factor -> . string_expression comparator string_expression
    (54) boolean_factor -> . unary_expression
    (55) boolean_factor -> . NEG boolean_factor
    (69) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (70) arithmetic_factor -> . number
    (71) arithmetic_factor -> . ID
    (72) arithmetic_factor -> . function_call_statement
    (73) arithmetic_factor -> . MINUS arithmetic_factor
    (74) number -> . INTEGER
    (75) number -> . DOUBLE

    STRING          shift and go to state 59
    ID              shift and go to state 49
    INTEGER         shift and go to state 42
    DOUBLE          shift and go to state 51
    K_TRUE          shift and go to state 38
    K_FALSE         shift and go to state 53
    LPAREN          shift and go to state 46
    NEG             shift and go to state 36
    MINUS           shift and go to state 40

    arithmetic_expression          shift and go to state 57
    string_expression              shift and go to state 58
    number                         shift and go to state 48
    unary_expression               shift and go to state 56
    boolean_expression             shift and go to state 60
    arithmetic_factor              shift and go to state 41
    boolean_term                   shift and go to state 37
    function_call_statement        shift and go to state 52
    arithmetic_term                shift and go to state 39
    boolean_factor                 shift and go to state 47
    expression                     shift and go to state 61

state 34

    (10) function_call_statement -> ID LPAREN . parameter_list RPAREN
    (11) function_call_statement -> ID LPAREN . RPAREN
    (12) parameter_list -> . parameter_list COMMA expression
    (13) parameter_list -> . expression
    (31) expression -> . string_expression
    (32) expression -> . unary_expression
    (33) expression -> . boolean_expression
    (34) expression -> . arithmetic_expression
    (35) string_expression -> . string_expression PLUS string_term
    (36) string_expression -> . STRING
    (39) unary_expression -> . ID
    (40) unary_expression -> . STRING
    (41) unary_expression -> . INTEGER
    (42) unary_expression -> . function_call_statement
    (43) unary_expression -> . DOUBLE
    (44) unary_expression -> . K_TRUE
    (45) unary_expression -> . K_FALSE
    (46) boolean_expression -> . boolean_expression OR boolean_term
    (47) boolean_expression -> . boolean_term
    (62) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (63) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_term
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN
    (48) boolean_term -> . boolean_term AND boolean_factor
    (49) boolean_term -> . boolean_factor
    (65) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (66) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (68) arithmetic_term -> . arithmetic_factor
    (50) boolean_factor -> . LPAREN boolean_expression RPAREN
    (51) boolean_factor -> . unary_expression comparator unary_expression
    (52) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (53) boolean_factor -> . string_expression comparator string_expression
    (54) boolean_factor -> . unary_expression
    (55) boolean_factor -> . NEG boolean_factor
    (69) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (70) arithmetic_factor -> . number
    (71) arithmetic_factor -> . ID
    (72) arithmetic_factor -> . function_call_statement
    (73) arithmetic_factor -> . MINUS arithmetic_factor
    (74) number -> . INTEGER
    (75) number -> . DOUBLE

    RPAREN          shift and go to state 62
    STRING          shift and go to state 59
    ID              shift and go to state 49
    INTEGER         shift and go to state 42
    DOUBLE          shift and go to state 51
    K_TRUE          shift and go to state 38
    K_FALSE         shift and go to state 53
    LPAREN          shift and go to state 46
    NEG             shift and go to state 36
    MINUS           shift and go to state 40

    arithmetic_expression          shift and go to state 57
    string_expression              shift and go to state 58
    number                         shift and go to state 48
    parameter_list                 shift and go to state 63
    unary_expression               shift and go to state 56
    boolean_expression             shift and go to state 60
    arithmetic_factor              shift and go to state 41
    boolean_term                   shift and go to state 37
    function_call_statement        shift and go to state 52
    arithmetic_term                shift and go to state 39
    boolean_factor                 shift and go to state 47
    expression                     shift and go to state 64

state 35

    (51) boolean_factor -> unary_expression . comparator unary_expression
    (54) boolean_factor -> unary_expression .
    (56) comparator -> . GT
    (57) comparator -> . LT
    (58) comparator -> . GEQ
    (59) comparator -> . LEQ
    (60) comparator -> . EQ
    (61) comparator -> . NEQ

    AND             reduce using rule 54 (boolean_factor -> unary_expression .)
    RPAREN          reduce using rule 54 (boolean_factor -> unary_expression .)
    OR              reduce using rule 54 (boolean_factor -> unary_expression .)
    ID              reduce using rule 54 (boolean_factor -> unary_expression .)
    K_IF            reduce using rule 54 (boolean_factor -> unary_expression .)
    K_WHILE         reduce using rule 54 (boolean_factor -> unary_expression .)
    K_CONTINUE      reduce using rule 54 (boolean_factor -> unary_expression .)
    K_BREAK         reduce using rule 54 (boolean_factor -> unary_expression .)
    K_DONE          reduce using rule 54 (boolean_factor -> unary_expression .)
    K_LIST          reduce using rule 54 (boolean_factor -> unary_expression .)
    K_DICT          reduce using rule 54 (boolean_factor -> unary_expression .)
    K_SET           reduce using rule 54 (boolean_factor -> unary_expression .)
    K_INT           reduce using rule 54 (boolean_factor -> unary_expression .)
    K_DOUBLE        reduce using rule 54 (boolean_factor -> unary_expression .)
    K_STRING        reduce using rule 54 (boolean_factor -> unary_expression .)
    K_BOOL          reduce using rule 54 (boolean_factor -> unary_expression .)
    K_WINDOW        reduce using rule 54 (boolean_factor -> unary_expression .)
    K_SHAPE         reduce using rule 54 (boolean_factor -> unary_expression .)
    K_TRIANGLE      reduce using rule 54 (boolean_factor -> unary_expression .)
    K_RECTANGLE     reduce using rule 54 (boolean_factor -> unary_expression .)
    K_CIRCLE        reduce using rule 54 (boolean_factor -> unary_expression .)
    K_TEXT          reduce using rule 54 (boolean_factor -> unary_expression .)
    $end            reduce using rule 54 (boolean_factor -> unary_expression .)
    K_EL            reduce using rule 54 (boolean_factor -> unary_expression .)
    K_EF            reduce using rule 54 (boolean_factor -> unary_expression .)
    K_END           reduce using rule 54 (boolean_factor -> unary_expression .)
    COMMA           reduce using rule 54 (boolean_factor -> unary_expression .)
    GT              shift and go to state 66
    LT              shift and go to state 69
    GEQ             shift and go to state 65
    LEQ             shift and go to state 68
    EQ              shift and go to state 70
    NEQ             shift and go to state 71

    comparator                     shift and go to state 67

state 36

    (55) boolean_factor -> NEG . boolean_factor
    (50) boolean_factor -> . LPAREN boolean_expression RPAREN
    (51) boolean_factor -> . unary_expression comparator unary_expression
    (52) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (53) boolean_factor -> . string_expression comparator string_expression
    (54) boolean_factor -> . unary_expression
    (55) boolean_factor -> . NEG boolean_factor
    (39) unary_expression -> . ID
    (40) unary_expression -> . STRING
    (41) unary_expression -> . INTEGER
    (42) unary_expression -> . function_call_statement
    (43) unary_expression -> . DOUBLE
    (44) unary_expression -> . K_TRUE
    (45) unary_expression -> . K_FALSE
    (62) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (63) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_term
    (35) string_expression -> . string_expression PLUS string_term
    (36) string_expression -> . STRING
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN
    (65) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (66) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (68) arithmetic_term -> . arithmetic_factor
    (69) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (70) arithmetic_factor -> . number
    (71) arithmetic_factor -> . ID
    (72) arithmetic_factor -> . function_call_statement
    (73) arithmetic_factor -> . MINUS arithmetic_factor
    (74) number -> . INTEGER
    (75) number -> . DOUBLE

    LPAREN          shift and go to state 46
    NEG             shift and go to state 36
    ID              shift and go to state 49
    STRING          shift and go to state 45
    INTEGER         shift and go to state 42
    DOUBLE          shift and go to state 51
    K_TRUE          shift and go to state 38
    K_FALSE         shift and go to state 53
    MINUS           shift and go to state 40

    arithmetic_expression          shift and go to state 43
    string_expression              shift and go to state 44
    unary_expression               shift and go to state 35
    arithmetic_factor              shift and go to state 41
    function_call_statement        shift and go to state 52
    number                         shift and go to state 48
    arithmetic_term                shift and go to state 39
    boolean_factor                 shift and go to state 72

state 37

    (47) boolean_expression -> boolean_term .
    (48) boolean_term -> boolean_term . AND boolean_factor

    RPAREN          reduce using rule 47 (boolean_expression -> boolean_term .)
    OR              reduce using rule 47 (boolean_expression -> boolean_term .)
    ID              reduce using rule 47 (boolean_expression -> boolean_term .)
    K_IF            reduce using rule 47 (boolean_expression -> boolean_term .)
    K_WHILE         reduce using rule 47 (boolean_expression -> boolean_term .)
    K_CONTINUE      reduce using rule 47 (boolean_expression -> boolean_term .)
    K_BREAK         reduce using rule 47 (boolean_expression -> boolean_term .)
    K_DONE          reduce using rule 47 (boolean_expression -> boolean_term .)
    K_LIST          reduce using rule 47 (boolean_expression -> boolean_term .)
    K_DICT          reduce using rule 47 (boolean_expression -> boolean_term .)
    K_SET           reduce using rule 47 (boolean_expression -> boolean_term .)
    K_INT           reduce using rule 47 (boolean_expression -> boolean_term .)
    K_DOUBLE        reduce using rule 47 (boolean_expression -> boolean_term .)
    K_STRING        reduce using rule 47 (boolean_expression -> boolean_term .)
    K_BOOL          reduce using rule 47 (boolean_expression -> boolean_term .)
    K_WINDOW        reduce using rule 47 (boolean_expression -> boolean_term .)
    K_SHAPE         reduce using rule 47 (boolean_expression -> boolean_term .)
    K_TRIANGLE      reduce using rule 47 (boolean_expression -> boolean_term .)
    K_RECTANGLE     reduce using rule 47 (boolean_expression -> boolean_term .)
    K_CIRCLE        reduce using rule 47 (boolean_expression -> boolean_term .)
    K_TEXT          reduce using rule 47 (boolean_expression -> boolean_term .)
    $end            reduce using rule 47 (boolean_expression -> boolean_term .)
    K_EL            reduce using rule 47 (boolean_expression -> boolean_term .)
    K_EF            reduce using rule 47 (boolean_expression -> boolean_term .)
    K_END           reduce using rule 47 (boolean_expression -> boolean_term .)
    COMMA           reduce using rule 47 (boolean_expression -> boolean_term .)
    AND             shift and go to state 73


state 38

    (44) unary_expression -> K_TRUE .

    GT              reduce using rule 44 (unary_expression -> K_TRUE .)
    LT              reduce using rule 44 (unary_expression -> K_TRUE .)
    GEQ             reduce using rule 44 (unary_expression -> K_TRUE .)
    LEQ             reduce using rule 44 (unary_expression -> K_TRUE .)
    EQ              reduce using rule 44 (unary_expression -> K_TRUE .)
    NEQ             reduce using rule 44 (unary_expression -> K_TRUE .)
    AND             reduce using rule 44 (unary_expression -> K_TRUE .)
    RPAREN          reduce using rule 44 (unary_expression -> K_TRUE .)
    OR              reduce using rule 44 (unary_expression -> K_TRUE .)
    ID              reduce using rule 44 (unary_expression -> K_TRUE .)
    K_IF            reduce using rule 44 (unary_expression -> K_TRUE .)
    K_WHILE         reduce using rule 44 (unary_expression -> K_TRUE .)
    K_CONTINUE      reduce using rule 44 (unary_expression -> K_TRUE .)
    K_BREAK         reduce using rule 44 (unary_expression -> K_TRUE .)
    K_DONE          reduce using rule 44 (unary_expression -> K_TRUE .)
    K_LIST          reduce using rule 44 (unary_expression -> K_TRUE .)
    K_DICT          reduce using rule 44 (unary_expression -> K_TRUE .)
    K_SET           reduce using rule 44 (unary_expression -> K_TRUE .)
    K_INT           reduce using rule 44 (unary_expression -> K_TRUE .)
    K_DOUBLE        reduce using rule 44 (unary_expression -> K_TRUE .)
    K_STRING        reduce using rule 44 (unary_expression -> K_TRUE .)
    K_BOOL          reduce using rule 44 (unary_expression -> K_TRUE .)
    K_WINDOW        reduce using rule 44 (unary_expression -> K_TRUE .)
    K_SHAPE         reduce using rule 44 (unary_expression -> K_TRUE .)
    K_TRIANGLE      reduce using rule 44 (unary_expression -> K_TRUE .)
    K_RECTANGLE     reduce using rule 44 (unary_expression -> K_TRUE .)
    K_CIRCLE        reduce using rule 44 (unary_expression -> K_TRUE .)
    K_TEXT          reduce using rule 44 (unary_expression -> K_TRUE .)
    $end            reduce using rule 44 (unary_expression -> K_TRUE .)
    K_EL            reduce using rule 44 (unary_expression -> K_TRUE .)
    K_EF            reduce using rule 44 (unary_expression -> K_TRUE .)
    K_END           reduce using rule 44 (unary_expression -> K_TRUE .)
    COMMA           reduce using rule 44 (unary_expression -> K_TRUE .)


state 39

    (64) arithmetic_expression -> arithmetic_term .
    (65) arithmetic_term -> arithmetic_term . TIMES arithmetic_factor
    (66) arithmetic_term -> arithmetic_term . DIVIDE arithmetic_factor
    (67) arithmetic_term -> arithmetic_term . MOD arithmetic_factor

    PLUS            reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    MINUS           reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    GT              reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    LT              reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    GEQ             reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    LEQ             reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    EQ              reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    NEQ             reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    RPAREN          reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    COMMA           reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    ID              reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    K_IF            reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    K_WHILE         reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    K_CONTINUE      reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    K_BREAK         reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    K_DONE          reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    K_LIST          reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    K_DICT          reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    K_SET           reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    K_INT           reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    K_DOUBLE        reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    K_STRING        reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    K_BOOL          reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    K_WINDOW        reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    K_SHAPE         reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    K_TRIANGLE      reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    K_RECTANGLE     reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    K_CIRCLE        reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    K_TEXT          reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    $end            reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    K_EL            reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    K_EF            reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    K_END           reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    AND             reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    OR              reduce using rule 64 (arithmetic_expression -> arithmetic_term .)
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 75
    MOD             shift and go to state 74


state 40

    (73) arithmetic_factor -> MINUS . arithmetic_factor
    (69) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (70) arithmetic_factor -> . number
    (71) arithmetic_factor -> . ID
    (72) arithmetic_factor -> . function_call_statement
    (73) arithmetic_factor -> . MINUS arithmetic_factor
    (74) number -> . INTEGER
    (75) number -> . DOUBLE
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 81
    ID              shift and go to state 80
    MINUS           shift and go to state 40
    INTEGER         shift and go to state 82
    DOUBLE          shift and go to state 78

    number                         shift and go to state 48
    function_call_statement        shift and go to state 79
    arithmetic_factor              shift and go to state 77

state 41

    (68) arithmetic_term -> arithmetic_factor .

    TIMES           reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    DIVIDE          reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    MOD             reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    PLUS            reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    MINUS           reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    GT              reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    LT              reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    GEQ             reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    LEQ             reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    EQ              reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    NEQ             reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    RPAREN          reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    COMMA           reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    ID              reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    K_IF            reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    K_WHILE         reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    K_CONTINUE      reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    K_BREAK         reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    K_DONE          reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    K_LIST          reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    K_DICT          reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    K_SET           reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    K_INT           reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    K_DOUBLE        reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    K_STRING        reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    K_BOOL          reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    K_WINDOW        reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    K_SHAPE         reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    K_TRIANGLE      reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    K_RECTANGLE     reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    K_CIRCLE        reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    K_TEXT          reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    $end            reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    K_EL            reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    K_EF            reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    K_END           reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    AND             reduce using rule 68 (arithmetic_term -> arithmetic_factor .)
    OR              reduce using rule 68 (arithmetic_term -> arithmetic_factor .)


state 42

    (41) unary_expression -> INTEGER .
    (74) number -> INTEGER .

  ! reduce/reduce conflict for GT resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for LT resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for GEQ resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for LEQ resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for EQ resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for NEQ resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for ID resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_IF resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_WHILE resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_CONTINUE resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_BREAK resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_DONE resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_LIST resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_DICT resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_SET resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_INT resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_STRING resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for $end resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_EL resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_EF resolved using rule 41 (unary_expression -> INTEGER .)
  ! reduce/reduce conflict for K_END resolved using rule 41 (unary_expression -> INTEGER .)
    GT              reduce using rule 41 (unary_expression -> INTEGER .)
    LT              reduce using rule 41 (unary_expression -> INTEGER .)
    GEQ             reduce using rule 41 (unary_expression -> INTEGER .)
    LEQ             reduce using rule 41 (unary_expression -> INTEGER .)
    EQ              reduce using rule 41 (unary_expression -> INTEGER .)
    NEQ             reduce using rule 41 (unary_expression -> INTEGER .)
    AND             reduce using rule 41 (unary_expression -> INTEGER .)
    RPAREN          reduce using rule 41 (unary_expression -> INTEGER .)
    OR              reduce using rule 41 (unary_expression -> INTEGER .)
    ID              reduce using rule 41 (unary_expression -> INTEGER .)
    K_IF            reduce using rule 41 (unary_expression -> INTEGER .)
    K_WHILE         reduce using rule 41 (unary_expression -> INTEGER .)
    K_CONTINUE      reduce using rule 41 (unary_expression -> INTEGER .)
    K_BREAK         reduce using rule 41 (unary_expression -> INTEGER .)
    K_DONE          reduce using rule 41 (unary_expression -> INTEGER .)
    K_LIST          reduce using rule 41 (unary_expression -> INTEGER .)
    K_DICT          reduce using rule 41 (unary_expression -> INTEGER .)
    K_SET           reduce using rule 41 (unary_expression -> INTEGER .)
    K_INT           reduce using rule 41 (unary_expression -> INTEGER .)
    K_DOUBLE        reduce using rule 41 (unary_expression -> INTEGER .)
    K_STRING        reduce using rule 41 (unary_expression -> INTEGER .)
    K_BOOL          reduce using rule 41 (unary_expression -> INTEGER .)
    K_WINDOW        reduce using rule 41 (unary_expression -> INTEGER .)
    K_SHAPE         reduce using rule 41 (unary_expression -> INTEGER .)
    K_TRIANGLE      reduce using rule 41 (unary_expression -> INTEGER .)
    K_RECTANGLE     reduce using rule 41 (unary_expression -> INTEGER .)
    K_CIRCLE        reduce using rule 41 (unary_expression -> INTEGER .)
    K_TEXT          reduce using rule 41 (unary_expression -> INTEGER .)
    $end            reduce using rule 41 (unary_expression -> INTEGER .)
    K_EL            reduce using rule 41 (unary_expression -> INTEGER .)
    K_EF            reduce using rule 41 (unary_expression -> INTEGER .)
    K_END           reduce using rule 41 (unary_expression -> INTEGER .)
    COMMA           reduce using rule 41 (unary_expression -> INTEGER .)
    TIMES           reduce using rule 74 (number -> INTEGER .)
    DIVIDE          reduce using rule 74 (number -> INTEGER .)
    MOD             reduce using rule 74 (number -> INTEGER .)
    PLUS            reduce using rule 74 (number -> INTEGER .)
    MINUS           reduce using rule 74 (number -> INTEGER .)

  ! GT              [ reduce using rule 74 (number -> INTEGER .) ]
  ! LT              [ reduce using rule 74 (number -> INTEGER .) ]
  ! GEQ             [ reduce using rule 74 (number -> INTEGER .) ]
  ! LEQ             [ reduce using rule 74 (number -> INTEGER .) ]
  ! EQ              [ reduce using rule 74 (number -> INTEGER .) ]
  ! NEQ             [ reduce using rule 74 (number -> INTEGER .) ]
  ! RPAREN          [ reduce using rule 74 (number -> INTEGER .) ]
  ! COMMA           [ reduce using rule 74 (number -> INTEGER .) ]
  ! ID              [ reduce using rule 74 (number -> INTEGER .) ]
  ! K_IF            [ reduce using rule 74 (number -> INTEGER .) ]
  ! K_WHILE         [ reduce using rule 74 (number -> INTEGER .) ]
  ! K_CONTINUE      [ reduce using rule 74 (number -> INTEGER .) ]
  ! K_BREAK         [ reduce using rule 74 (number -> INTEGER .) ]
  ! K_DONE          [ reduce using rule 74 (number -> INTEGER .) ]
  ! K_LIST          [ reduce using rule 74 (number -> INTEGER .) ]
  ! K_DICT          [ reduce using rule 74 (number -> INTEGER .) ]
  ! K_SET           [ reduce using rule 74 (number -> INTEGER .) ]
  ! K_INT           [ reduce using rule 74 (number -> INTEGER .) ]
  ! K_DOUBLE        [ reduce using rule 74 (number -> INTEGER .) ]
  ! K_STRING        [ reduce using rule 74 (number -> INTEGER .) ]
  ! K_BOOL          [ reduce using rule 74 (number -> INTEGER .) ]
  ! K_WINDOW        [ reduce using rule 74 (number -> INTEGER .) ]
  ! K_SHAPE         [ reduce using rule 74 (number -> INTEGER .) ]
  ! K_TRIANGLE      [ reduce using rule 74 (number -> INTEGER .) ]
  ! K_RECTANGLE     [ reduce using rule 74 (number -> INTEGER .) ]
  ! K_CIRCLE        [ reduce using rule 74 (number -> INTEGER .) ]
  ! K_TEXT          [ reduce using rule 74 (number -> INTEGER .) ]
  ! $end            [ reduce using rule 74 (number -> INTEGER .) ]
  ! K_EL            [ reduce using rule 74 (number -> INTEGER .) ]
  ! K_EF            [ reduce using rule 74 (number -> INTEGER .) ]
  ! K_END           [ reduce using rule 74 (number -> INTEGER .) ]


state 43

    (52) boolean_factor -> arithmetic_expression . comparator arithmetic_expression
    (62) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (63) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term
    (56) comparator -> . GT
    (57) comparator -> . LT
    (58) comparator -> . GEQ
    (59) comparator -> . LEQ
    (60) comparator -> . EQ
    (61) comparator -> . NEQ

    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    GT              shift and go to state 66
    LT              shift and go to state 69
    GEQ             shift and go to state 65
    LEQ             shift and go to state 68
    EQ              shift and go to state 70
    NEQ             shift and go to state 71

    comparator                     shift and go to state 83

state 44

    (53) boolean_factor -> string_expression . comparator string_expression
    (35) string_expression -> string_expression . PLUS string_term
    (56) comparator -> . GT
    (57) comparator -> . LT
    (58) comparator -> . GEQ
    (59) comparator -> . LEQ
    (60) comparator -> . EQ
    (61) comparator -> . NEQ

    PLUS            shift and go to state 87
    GT              shift and go to state 66
    LT              shift and go to state 69
    GEQ             shift and go to state 65
    LEQ             shift and go to state 68
    EQ              shift and go to state 70
    NEQ             shift and go to state 71

    comparator                     shift and go to state 86

state 45

    (40) unary_expression -> STRING .
    (36) string_expression -> STRING .

  ! reduce/reduce conflict for GT resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for LT resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for GEQ resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for LEQ resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for EQ resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for NEQ resolved using rule 36 (string_expression -> STRING .)
    AND             reduce using rule 40 (unary_expression -> STRING .)
    RPAREN          reduce using rule 40 (unary_expression -> STRING .)
    OR              reduce using rule 40 (unary_expression -> STRING .)
    ID              reduce using rule 40 (unary_expression -> STRING .)
    K_IF            reduce using rule 40 (unary_expression -> STRING .)
    K_WHILE         reduce using rule 40 (unary_expression -> STRING .)
    K_CONTINUE      reduce using rule 40 (unary_expression -> STRING .)
    K_BREAK         reduce using rule 40 (unary_expression -> STRING .)
    K_DONE          reduce using rule 40 (unary_expression -> STRING .)
    K_LIST          reduce using rule 40 (unary_expression -> STRING .)
    K_DICT          reduce using rule 40 (unary_expression -> STRING .)
    K_SET           reduce using rule 40 (unary_expression -> STRING .)
    K_INT           reduce using rule 40 (unary_expression -> STRING .)
    K_DOUBLE        reduce using rule 40 (unary_expression -> STRING .)
    K_STRING        reduce using rule 40 (unary_expression -> STRING .)
    K_BOOL          reduce using rule 40 (unary_expression -> STRING .)
    K_WINDOW        reduce using rule 40 (unary_expression -> STRING .)
    K_SHAPE         reduce using rule 40 (unary_expression -> STRING .)
    K_TRIANGLE      reduce using rule 40 (unary_expression -> STRING .)
    K_RECTANGLE     reduce using rule 40 (unary_expression -> STRING .)
    K_CIRCLE        reduce using rule 40 (unary_expression -> STRING .)
    K_TEXT          reduce using rule 40 (unary_expression -> STRING .)
    $end            reduce using rule 40 (unary_expression -> STRING .)
    K_EL            reduce using rule 40 (unary_expression -> STRING .)
    K_EF            reduce using rule 40 (unary_expression -> STRING .)
    K_END           reduce using rule 40 (unary_expression -> STRING .)
    COMMA           reduce using rule 40 (unary_expression -> STRING .)
    PLUS            reduce using rule 36 (string_expression -> STRING .)
    GT              reduce using rule 36 (string_expression -> STRING .)
    LT              reduce using rule 36 (string_expression -> STRING .)
    GEQ             reduce using rule 36 (string_expression -> STRING .)
    LEQ             reduce using rule 36 (string_expression -> STRING .)
    EQ              reduce using rule 36 (string_expression -> STRING .)
    NEQ             reduce using rule 36 (string_expression -> STRING .)

  ! GT              [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! LT              [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! GEQ             [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! LEQ             [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! EQ              [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! NEQ             [ reduce using rule 40 (unary_expression -> STRING .) ]


state 46

    (50) boolean_factor -> LPAREN . boolean_expression RPAREN
    (69) arithmetic_factor -> LPAREN . arithmetic_expression RPAREN
    (46) boolean_expression -> . boolean_expression OR boolean_term
    (47) boolean_expression -> . boolean_term
    (62) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (63) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_term
    (48) boolean_term -> . boolean_term AND boolean_factor
    (49) boolean_term -> . boolean_factor
    (65) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (66) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (68) arithmetic_term -> . arithmetic_factor
    (50) boolean_factor -> . LPAREN boolean_expression RPAREN
    (51) boolean_factor -> . unary_expression comparator unary_expression
    (52) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (53) boolean_factor -> . string_expression comparator string_expression
    (54) boolean_factor -> . unary_expression
    (55) boolean_factor -> . NEG boolean_factor
    (69) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (70) arithmetic_factor -> . number
    (71) arithmetic_factor -> . ID
    (72) arithmetic_factor -> . function_call_statement
    (73) arithmetic_factor -> . MINUS arithmetic_factor
    (39) unary_expression -> . ID
    (40) unary_expression -> . STRING
    (41) unary_expression -> . INTEGER
    (42) unary_expression -> . function_call_statement
    (43) unary_expression -> . DOUBLE
    (44) unary_expression -> . K_TRUE
    (45) unary_expression -> . K_FALSE
    (35) string_expression -> . string_expression PLUS string_term
    (36) string_expression -> . STRING
    (74) number -> . INTEGER
    (75) number -> . DOUBLE
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 46
    NEG             shift and go to state 36
    ID              shift and go to state 90
    MINUS           shift and go to state 40
    STRING          shift and go to state 45
    INTEGER         shift and go to state 42
    DOUBLE          shift and go to state 51
    K_TRUE          shift and go to state 38
    K_FALSE         shift and go to state 53

    arithmetic_expression          shift and go to state 89
    string_expression              shift and go to state 44
    unary_expression               shift and go to state 35
    arithmetic_factor              shift and go to state 41
    boolean_expression             shift and go to state 91
    boolean_term                   shift and go to state 37
    arithmetic_term                shift and go to state 39
    number                         shift and go to state 48
    function_call_statement        shift and go to state 88
    boolean_factor                 shift and go to state 47

state 47

    (49) boolean_term -> boolean_factor .

    AND             reduce using rule 49 (boolean_term -> boolean_factor .)
    RPAREN          reduce using rule 49 (boolean_term -> boolean_factor .)
    OR              reduce using rule 49 (boolean_term -> boolean_factor .)
    ID              reduce using rule 49 (boolean_term -> boolean_factor .)
    K_IF            reduce using rule 49 (boolean_term -> boolean_factor .)
    K_WHILE         reduce using rule 49 (boolean_term -> boolean_factor .)
    K_CONTINUE      reduce using rule 49 (boolean_term -> boolean_factor .)
    K_BREAK         reduce using rule 49 (boolean_term -> boolean_factor .)
    K_DONE          reduce using rule 49 (boolean_term -> boolean_factor .)
    K_LIST          reduce using rule 49 (boolean_term -> boolean_factor .)
    K_DICT          reduce using rule 49 (boolean_term -> boolean_factor .)
    K_SET           reduce using rule 49 (boolean_term -> boolean_factor .)
    K_INT           reduce using rule 49 (boolean_term -> boolean_factor .)
    K_DOUBLE        reduce using rule 49 (boolean_term -> boolean_factor .)
    K_STRING        reduce using rule 49 (boolean_term -> boolean_factor .)
    K_BOOL          reduce using rule 49 (boolean_term -> boolean_factor .)
    K_WINDOW        reduce using rule 49 (boolean_term -> boolean_factor .)
    K_SHAPE         reduce using rule 49 (boolean_term -> boolean_factor .)
    K_TRIANGLE      reduce using rule 49 (boolean_term -> boolean_factor .)
    K_RECTANGLE     reduce using rule 49 (boolean_term -> boolean_factor .)
    K_CIRCLE        reduce using rule 49 (boolean_term -> boolean_factor .)
    K_TEXT          reduce using rule 49 (boolean_term -> boolean_factor .)
    $end            reduce using rule 49 (boolean_term -> boolean_factor .)
    K_EL            reduce using rule 49 (boolean_term -> boolean_factor .)
    K_EF            reduce using rule 49 (boolean_term -> boolean_factor .)
    K_END           reduce using rule 49 (boolean_term -> boolean_factor .)
    COMMA           reduce using rule 49 (boolean_term -> boolean_factor .)


state 48

    (70) arithmetic_factor -> number .

    TIMES           reduce using rule 70 (arithmetic_factor -> number .)
    DIVIDE          reduce using rule 70 (arithmetic_factor -> number .)
    MOD             reduce using rule 70 (arithmetic_factor -> number .)
    RPAREN          reduce using rule 70 (arithmetic_factor -> number .)
    PLUS            reduce using rule 70 (arithmetic_factor -> number .)
    MINUS           reduce using rule 70 (arithmetic_factor -> number .)
    GT              reduce using rule 70 (arithmetic_factor -> number .)
    LT              reduce using rule 70 (arithmetic_factor -> number .)
    GEQ             reduce using rule 70 (arithmetic_factor -> number .)
    LEQ             reduce using rule 70 (arithmetic_factor -> number .)
    EQ              reduce using rule 70 (arithmetic_factor -> number .)
    NEQ             reduce using rule 70 (arithmetic_factor -> number .)
    ID              reduce using rule 70 (arithmetic_factor -> number .)
    K_IF            reduce using rule 70 (arithmetic_factor -> number .)
    K_WHILE         reduce using rule 70 (arithmetic_factor -> number .)
    K_CONTINUE      reduce using rule 70 (arithmetic_factor -> number .)
    K_BREAK         reduce using rule 70 (arithmetic_factor -> number .)
    K_DONE          reduce using rule 70 (arithmetic_factor -> number .)
    K_LIST          reduce using rule 70 (arithmetic_factor -> number .)
    K_DICT          reduce using rule 70 (arithmetic_factor -> number .)
    K_SET           reduce using rule 70 (arithmetic_factor -> number .)
    K_INT           reduce using rule 70 (arithmetic_factor -> number .)
    K_DOUBLE        reduce using rule 70 (arithmetic_factor -> number .)
    K_STRING        reduce using rule 70 (arithmetic_factor -> number .)
    K_BOOL          reduce using rule 70 (arithmetic_factor -> number .)
    K_WINDOW        reduce using rule 70 (arithmetic_factor -> number .)
    K_SHAPE         reduce using rule 70 (arithmetic_factor -> number .)
    K_TRIANGLE      reduce using rule 70 (arithmetic_factor -> number .)
    K_RECTANGLE     reduce using rule 70 (arithmetic_factor -> number .)
    K_CIRCLE        reduce using rule 70 (arithmetic_factor -> number .)
    K_TEXT          reduce using rule 70 (arithmetic_factor -> number .)
    $end            reduce using rule 70 (arithmetic_factor -> number .)
    K_EL            reduce using rule 70 (arithmetic_factor -> number .)
    K_EF            reduce using rule 70 (arithmetic_factor -> number .)
    K_END           reduce using rule 70 (arithmetic_factor -> number .)
    COMMA           reduce using rule 70 (arithmetic_factor -> number .)
    AND             reduce using rule 70 (arithmetic_factor -> number .)
    OR              reduce using rule 70 (arithmetic_factor -> number .)


state 49

    (39) unary_expression -> ID .
    (10) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (11) function_call_statement -> ID . LPAREN RPAREN
    (71) arithmetic_factor -> ID .

  ! reduce/reduce conflict for GT resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for LT resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for GEQ resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for LEQ resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for EQ resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for NEQ resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_IF resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_WHILE resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_CONTINUE resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_BREAK resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_DONE resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_LIST resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_DICT resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_SET resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_INT resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_STRING resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_EL resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_EF resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for K_END resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 39 (unary_expression -> ID .)
    GT              reduce using rule 39 (unary_expression -> ID .)
    LT              reduce using rule 39 (unary_expression -> ID .)
    GEQ             reduce using rule 39 (unary_expression -> ID .)
    LEQ             reduce using rule 39 (unary_expression -> ID .)
    EQ              reduce using rule 39 (unary_expression -> ID .)
    NEQ             reduce using rule 39 (unary_expression -> ID .)
    AND             reduce using rule 39 (unary_expression -> ID .)
    RPAREN          reduce using rule 39 (unary_expression -> ID .)
    OR              reduce using rule 39 (unary_expression -> ID .)
    ID              reduce using rule 39 (unary_expression -> ID .)
    K_IF            reduce using rule 39 (unary_expression -> ID .)
    K_WHILE         reduce using rule 39 (unary_expression -> ID .)
    K_CONTINUE      reduce using rule 39 (unary_expression -> ID .)
    K_BREAK         reduce using rule 39 (unary_expression -> ID .)
    K_DONE          reduce using rule 39 (unary_expression -> ID .)
    K_LIST          reduce using rule 39 (unary_expression -> ID .)
    K_DICT          reduce using rule 39 (unary_expression -> ID .)
    K_SET           reduce using rule 39 (unary_expression -> ID .)
    K_INT           reduce using rule 39 (unary_expression -> ID .)
    K_DOUBLE        reduce using rule 39 (unary_expression -> ID .)
    K_STRING        reduce using rule 39 (unary_expression -> ID .)
    K_BOOL          reduce using rule 39 (unary_expression -> ID .)
    K_WINDOW        reduce using rule 39 (unary_expression -> ID .)
    K_SHAPE         reduce using rule 39 (unary_expression -> ID .)
    K_TRIANGLE      reduce using rule 39 (unary_expression -> ID .)
    K_RECTANGLE     reduce using rule 39 (unary_expression -> ID .)
    K_CIRCLE        reduce using rule 39 (unary_expression -> ID .)
    K_TEXT          reduce using rule 39 (unary_expression -> ID .)
    $end            reduce using rule 39 (unary_expression -> ID .)
    K_EL            reduce using rule 39 (unary_expression -> ID .)
    K_EF            reduce using rule 39 (unary_expression -> ID .)
    K_END           reduce using rule 39 (unary_expression -> ID .)
    COMMA           reduce using rule 39 (unary_expression -> ID .)
    LPAREN          shift and go to state 34
    TIMES           reduce using rule 71 (arithmetic_factor -> ID .)
    DIVIDE          reduce using rule 71 (arithmetic_factor -> ID .)
    MOD             reduce using rule 71 (arithmetic_factor -> ID .)
    PLUS            reduce using rule 71 (arithmetic_factor -> ID .)
    MINUS           reduce using rule 71 (arithmetic_factor -> ID .)

  ! GT              [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! LT              [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! GEQ             [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! LEQ             [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! EQ              [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! NEQ             [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! ID              [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! K_IF            [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! K_WHILE         [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! K_CONTINUE      [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! K_BREAK         [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! K_DONE          [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! K_LIST          [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! K_DICT          [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! K_SET           [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! K_INT           [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! K_DOUBLE        [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! K_STRING        [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! K_BOOL          [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! K_WINDOW        [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! K_SHAPE         [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! K_TRIANGLE      [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! K_RECTANGLE     [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! K_CIRCLE        [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! K_TEXT          [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! $end            [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! K_EL            [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! K_EF            [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! K_END           [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! RPAREN          [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! COMMA           [ reduce using rule 71 (arithmetic_factor -> ID .) ]


state 50

    (76) selection_statement -> K_IF LPAREN boolean_expression . RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (46) boolean_expression -> boolean_expression . OR boolean_term

    RPAREN          shift and go to state 92
    OR              shift and go to state 93


state 51

    (43) unary_expression -> DOUBLE .
    (75) number -> DOUBLE .

  ! reduce/reduce conflict for GT resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for LT resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for GEQ resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for LEQ resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for EQ resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for NEQ resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for ID resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_IF resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_WHILE resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_CONTINUE resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_BREAK resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_DONE resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_LIST resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_DICT resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_SET resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_INT resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_STRING resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for $end resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_EL resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_EF resolved using rule 43 (unary_expression -> DOUBLE .)
  ! reduce/reduce conflict for K_END resolved using rule 43 (unary_expression -> DOUBLE .)
    GT              reduce using rule 43 (unary_expression -> DOUBLE .)
    LT              reduce using rule 43 (unary_expression -> DOUBLE .)
    GEQ             reduce using rule 43 (unary_expression -> DOUBLE .)
    LEQ             reduce using rule 43 (unary_expression -> DOUBLE .)
    EQ              reduce using rule 43 (unary_expression -> DOUBLE .)
    NEQ             reduce using rule 43 (unary_expression -> DOUBLE .)
    AND             reduce using rule 43 (unary_expression -> DOUBLE .)
    RPAREN          reduce using rule 43 (unary_expression -> DOUBLE .)
    OR              reduce using rule 43 (unary_expression -> DOUBLE .)
    ID              reduce using rule 43 (unary_expression -> DOUBLE .)
    K_IF            reduce using rule 43 (unary_expression -> DOUBLE .)
    K_WHILE         reduce using rule 43 (unary_expression -> DOUBLE .)
    K_CONTINUE      reduce using rule 43 (unary_expression -> DOUBLE .)
    K_BREAK         reduce using rule 43 (unary_expression -> DOUBLE .)
    K_DONE          reduce using rule 43 (unary_expression -> DOUBLE .)
    K_LIST          reduce using rule 43 (unary_expression -> DOUBLE .)
    K_DICT          reduce using rule 43 (unary_expression -> DOUBLE .)
    K_SET           reduce using rule 43 (unary_expression -> DOUBLE .)
    K_INT           reduce using rule 43 (unary_expression -> DOUBLE .)
    K_DOUBLE        reduce using rule 43 (unary_expression -> DOUBLE .)
    K_STRING        reduce using rule 43 (unary_expression -> DOUBLE .)
    K_BOOL          reduce using rule 43 (unary_expression -> DOUBLE .)
    K_WINDOW        reduce using rule 43 (unary_expression -> DOUBLE .)
    K_SHAPE         reduce using rule 43 (unary_expression -> DOUBLE .)
    K_TRIANGLE      reduce using rule 43 (unary_expression -> DOUBLE .)
    K_RECTANGLE     reduce using rule 43 (unary_expression -> DOUBLE .)
    K_CIRCLE        reduce using rule 43 (unary_expression -> DOUBLE .)
    K_TEXT          reduce using rule 43 (unary_expression -> DOUBLE .)
    $end            reduce using rule 43 (unary_expression -> DOUBLE .)
    K_EL            reduce using rule 43 (unary_expression -> DOUBLE .)
    K_EF            reduce using rule 43 (unary_expression -> DOUBLE .)
    K_END           reduce using rule 43 (unary_expression -> DOUBLE .)
    COMMA           reduce using rule 43 (unary_expression -> DOUBLE .)
    TIMES           reduce using rule 75 (number -> DOUBLE .)
    DIVIDE          reduce using rule 75 (number -> DOUBLE .)
    MOD             reduce using rule 75 (number -> DOUBLE .)
    PLUS            reduce using rule 75 (number -> DOUBLE .)
    MINUS           reduce using rule 75 (number -> DOUBLE .)

  ! GT              [ reduce using rule 75 (number -> DOUBLE .) ]
  ! LT              [ reduce using rule 75 (number -> DOUBLE .) ]
  ! GEQ             [ reduce using rule 75 (number -> DOUBLE .) ]
  ! LEQ             [ reduce using rule 75 (number -> DOUBLE .) ]
  ! EQ              [ reduce using rule 75 (number -> DOUBLE .) ]
  ! NEQ             [ reduce using rule 75 (number -> DOUBLE .) ]
  ! RPAREN          [ reduce using rule 75 (number -> DOUBLE .) ]
  ! COMMA           [ reduce using rule 75 (number -> DOUBLE .) ]
  ! ID              [ reduce using rule 75 (number -> DOUBLE .) ]
  ! K_IF            [ reduce using rule 75 (number -> DOUBLE .) ]
  ! K_WHILE         [ reduce using rule 75 (number -> DOUBLE .) ]
  ! K_CONTINUE      [ reduce using rule 75 (number -> DOUBLE .) ]
  ! K_BREAK         [ reduce using rule 75 (number -> DOUBLE .) ]
  ! K_DONE          [ reduce using rule 75 (number -> DOUBLE .) ]
  ! K_LIST          [ reduce using rule 75 (number -> DOUBLE .) ]
  ! K_DICT          [ reduce using rule 75 (number -> DOUBLE .) ]
  ! K_SET           [ reduce using rule 75 (number -> DOUBLE .) ]
  ! K_INT           [ reduce using rule 75 (number -> DOUBLE .) ]
  ! K_DOUBLE        [ reduce using rule 75 (number -> DOUBLE .) ]
  ! K_STRING        [ reduce using rule 75 (number -> DOUBLE .) ]
  ! K_BOOL          [ reduce using rule 75 (number -> DOUBLE .) ]
  ! K_WINDOW        [ reduce using rule 75 (number -> DOUBLE .) ]
  ! K_SHAPE         [ reduce using rule 75 (number -> DOUBLE .) ]
  ! K_TRIANGLE      [ reduce using rule 75 (number -> DOUBLE .) ]
  ! K_RECTANGLE     [ reduce using rule 75 (number -> DOUBLE .) ]
  ! K_CIRCLE        [ reduce using rule 75 (number -> DOUBLE .) ]
  ! K_TEXT          [ reduce using rule 75 (number -> DOUBLE .) ]
  ! $end            [ reduce using rule 75 (number -> DOUBLE .) ]
  ! K_EL            [ reduce using rule 75 (number -> DOUBLE .) ]
  ! K_EF            [ reduce using rule 75 (number -> DOUBLE .) ]
  ! K_END           [ reduce using rule 75 (number -> DOUBLE .) ]


state 52

    (42) unary_expression -> function_call_statement .
    (72) arithmetic_factor -> function_call_statement .

  ! reduce/reduce conflict for GT resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for LT resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for GEQ resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for LEQ resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for EQ resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for NEQ resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for ID resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_IF resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_WHILE resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_CONTINUE resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_BREAK resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_DONE resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_LIST resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_DICT resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_SET resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_INT resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_STRING resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for $end resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_EL resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_EF resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for K_END resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for RPAREN resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for COMMA resolved using rule 42 (unary_expression -> function_call_statement .)
    GT              reduce using rule 42 (unary_expression -> function_call_statement .)
    LT              reduce using rule 42 (unary_expression -> function_call_statement .)
    GEQ             reduce using rule 42 (unary_expression -> function_call_statement .)
    LEQ             reduce using rule 42 (unary_expression -> function_call_statement .)
    EQ              reduce using rule 42 (unary_expression -> function_call_statement .)
    NEQ             reduce using rule 42 (unary_expression -> function_call_statement .)
    AND             reduce using rule 42 (unary_expression -> function_call_statement .)
    RPAREN          reduce using rule 42 (unary_expression -> function_call_statement .)
    OR              reduce using rule 42 (unary_expression -> function_call_statement .)
    ID              reduce using rule 42 (unary_expression -> function_call_statement .)
    K_IF            reduce using rule 42 (unary_expression -> function_call_statement .)
    K_WHILE         reduce using rule 42 (unary_expression -> function_call_statement .)
    K_CONTINUE      reduce using rule 42 (unary_expression -> function_call_statement .)
    K_BREAK         reduce using rule 42 (unary_expression -> function_call_statement .)
    K_DONE          reduce using rule 42 (unary_expression -> function_call_statement .)
    K_LIST          reduce using rule 42 (unary_expression -> function_call_statement .)
    K_DICT          reduce using rule 42 (unary_expression -> function_call_statement .)
    K_SET           reduce using rule 42 (unary_expression -> function_call_statement .)
    K_INT           reduce using rule 42 (unary_expression -> function_call_statement .)
    K_DOUBLE        reduce using rule 42 (unary_expression -> function_call_statement .)
    K_STRING        reduce using rule 42 (unary_expression -> function_call_statement .)
    K_BOOL          reduce using rule 42 (unary_expression -> function_call_statement .)
    K_WINDOW        reduce using rule 42 (unary_expression -> function_call_statement .)
    K_SHAPE         reduce using rule 42 (unary_expression -> function_call_statement .)
    K_TRIANGLE      reduce using rule 42 (unary_expression -> function_call_statement .)
    K_RECTANGLE     reduce using rule 42 (unary_expression -> function_call_statement .)
    K_CIRCLE        reduce using rule 42 (unary_expression -> function_call_statement .)
    K_TEXT          reduce using rule 42 (unary_expression -> function_call_statement .)
    $end            reduce using rule 42 (unary_expression -> function_call_statement .)
    K_EL            reduce using rule 42 (unary_expression -> function_call_statement .)
    K_EF            reduce using rule 42 (unary_expression -> function_call_statement .)
    K_END           reduce using rule 42 (unary_expression -> function_call_statement .)
    COMMA           reduce using rule 42 (unary_expression -> function_call_statement .)
    TIMES           reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    DIVIDE          reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    MOD             reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    PLUS            reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    MINUS           reduce using rule 72 (arithmetic_factor -> function_call_statement .)

  ! GT              [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! LT              [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! GEQ             [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! LEQ             [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! EQ              [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! NEQ             [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! ID              [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! K_IF            [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! K_WHILE         [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! K_CONTINUE      [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! K_BREAK         [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! K_DONE          [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! K_LIST          [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! K_DICT          [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! K_SET           [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! K_INT           [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! K_DOUBLE        [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! K_STRING        [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! K_BOOL          [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! K_WINDOW        [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! K_SHAPE         [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! K_TRIANGLE      [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! K_RECTANGLE     [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! K_CIRCLE        [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! K_TEXT          [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! $end            [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! K_EL            [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! K_EF            [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! K_END           [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! RPAREN          [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! COMMA           [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]


state 53

    (45) unary_expression -> K_FALSE .

    GT              reduce using rule 45 (unary_expression -> K_FALSE .)
    LT              reduce using rule 45 (unary_expression -> K_FALSE .)
    GEQ             reduce using rule 45 (unary_expression -> K_FALSE .)
    LEQ             reduce using rule 45 (unary_expression -> K_FALSE .)
    EQ              reduce using rule 45 (unary_expression -> K_FALSE .)
    NEQ             reduce using rule 45 (unary_expression -> K_FALSE .)
    AND             reduce using rule 45 (unary_expression -> K_FALSE .)
    RPAREN          reduce using rule 45 (unary_expression -> K_FALSE .)
    OR              reduce using rule 45 (unary_expression -> K_FALSE .)
    ID              reduce using rule 45 (unary_expression -> K_FALSE .)
    K_IF            reduce using rule 45 (unary_expression -> K_FALSE .)
    K_WHILE         reduce using rule 45 (unary_expression -> K_FALSE .)
    K_CONTINUE      reduce using rule 45 (unary_expression -> K_FALSE .)
    K_BREAK         reduce using rule 45 (unary_expression -> K_FALSE .)
    K_DONE          reduce using rule 45 (unary_expression -> K_FALSE .)
    K_LIST          reduce using rule 45 (unary_expression -> K_FALSE .)
    K_DICT          reduce using rule 45 (unary_expression -> K_FALSE .)
    K_SET           reduce using rule 45 (unary_expression -> K_FALSE .)
    K_INT           reduce using rule 45 (unary_expression -> K_FALSE .)
    K_DOUBLE        reduce using rule 45 (unary_expression -> K_FALSE .)
    K_STRING        reduce using rule 45 (unary_expression -> K_FALSE .)
    K_BOOL          reduce using rule 45 (unary_expression -> K_FALSE .)
    K_WINDOW        reduce using rule 45 (unary_expression -> K_FALSE .)
    K_SHAPE         reduce using rule 45 (unary_expression -> K_FALSE .)
    K_TRIANGLE      reduce using rule 45 (unary_expression -> K_FALSE .)
    K_RECTANGLE     reduce using rule 45 (unary_expression -> K_FALSE .)
    K_CIRCLE        reduce using rule 45 (unary_expression -> K_FALSE .)
    K_TEXT          reduce using rule 45 (unary_expression -> K_FALSE .)
    $end            reduce using rule 45 (unary_expression -> K_FALSE .)
    K_EL            reduce using rule 45 (unary_expression -> K_FALSE .)
    K_EF            reduce using rule 45 (unary_expression -> K_FALSE .)
    K_END           reduce using rule 45 (unary_expression -> K_FALSE .)
    COMMA           reduce using rule 45 (unary_expression -> K_FALSE .)


state 54

    (84) iteration_statement -> K_WHILE LPAREN boolean_expression . RPAREN compound_statement_list K_END
    (46) boolean_expression -> boolean_expression . OR boolean_term

    RPAREN          shift and go to state 94
    OR              shift and go to state 93


state 55

    (14) variable_declaration -> pre_type_modifier type ID .
    (15) variable_declaration -> pre_type_modifier type ID . ASSIGN expression

    ID              reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    K_IF            reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    K_WHILE         reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    K_CONTINUE      reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    K_BREAK         reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    K_DONE          reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    K_LIST          reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    K_DICT          reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    K_SET           reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    K_INT           reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    K_DOUBLE        reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    K_STRING        reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    K_BOOL          reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    K_WINDOW        reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    K_SHAPE         reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    K_TRIANGLE      reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    K_RECTANGLE     reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    K_CIRCLE        reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    K_TEXT          reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    K_END           reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    $end            reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    K_EL            reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    K_EF            reduce using rule 14 (variable_declaration -> pre_type_modifier type ID .)
    ASSIGN          shift and go to state 95


state 56

    (32) expression -> unary_expression .
    (51) boolean_factor -> unary_expression . comparator unary_expression
    (54) boolean_factor -> unary_expression .
    (56) comparator -> . GT
    (57) comparator -> . LT
    (58) comparator -> . GEQ
    (59) comparator -> . LEQ
    (60) comparator -> . EQ
    (61) comparator -> . NEQ

  ! reduce/reduce conflict for RPAREN resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for ID resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_IF resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_WHILE resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_CONTINUE resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_BREAK resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_DONE resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_LIST resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_DICT resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_SET resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_INT resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_STRING resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for $end resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_EL resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_EF resolved using rule 32 (expression -> unary_expression .)
  ! reduce/reduce conflict for K_END resolved using rule 32 (expression -> unary_expression .)
    ID              reduce using rule 32 (expression -> unary_expression .)
    K_IF            reduce using rule 32 (expression -> unary_expression .)
    K_WHILE         reduce using rule 32 (expression -> unary_expression .)
    K_CONTINUE      reduce using rule 32 (expression -> unary_expression .)
    K_BREAK         reduce using rule 32 (expression -> unary_expression .)
    K_DONE          reduce using rule 32 (expression -> unary_expression .)
    K_LIST          reduce using rule 32 (expression -> unary_expression .)
    K_DICT          reduce using rule 32 (expression -> unary_expression .)
    K_SET           reduce using rule 32 (expression -> unary_expression .)
    K_INT           reduce using rule 32 (expression -> unary_expression .)
    K_DOUBLE        reduce using rule 32 (expression -> unary_expression .)
    K_STRING        reduce using rule 32 (expression -> unary_expression .)
    K_BOOL          reduce using rule 32 (expression -> unary_expression .)
    K_WINDOW        reduce using rule 32 (expression -> unary_expression .)
    K_SHAPE         reduce using rule 32 (expression -> unary_expression .)
    K_TRIANGLE      reduce using rule 32 (expression -> unary_expression .)
    K_RECTANGLE     reduce using rule 32 (expression -> unary_expression .)
    K_CIRCLE        reduce using rule 32 (expression -> unary_expression .)
    K_TEXT          reduce using rule 32 (expression -> unary_expression .)
    $end            reduce using rule 32 (expression -> unary_expression .)
    K_EL            reduce using rule 32 (expression -> unary_expression .)
    K_EF            reduce using rule 32 (expression -> unary_expression .)
    K_END           reduce using rule 32 (expression -> unary_expression .)
    RPAREN          reduce using rule 32 (expression -> unary_expression .)
    COMMA           reduce using rule 32 (expression -> unary_expression .)
    AND             reduce using rule 54 (boolean_factor -> unary_expression .)
    OR              reduce using rule 54 (boolean_factor -> unary_expression .)
    GT              shift and go to state 66
    LT              shift and go to state 69
    GEQ             shift and go to state 65
    LEQ             shift and go to state 68
    EQ              shift and go to state 70
    NEQ             shift and go to state 71

  ! RPAREN          [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! COMMA           [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! ID              [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! K_IF            [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! K_WHILE         [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! K_CONTINUE      [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! K_BREAK         [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! K_DONE          [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! K_LIST          [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! K_DICT          [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! K_SET           [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! K_INT           [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! K_DOUBLE        [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! K_STRING        [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! K_BOOL          [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! K_WINDOW        [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! K_SHAPE         [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! K_TRIANGLE      [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! K_RECTANGLE     [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! K_CIRCLE        [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! K_TEXT          [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! $end            [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! K_EL            [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! K_EF            [ reduce using rule 54 (boolean_factor -> unary_expression .) ]
  ! K_END           [ reduce using rule 54 (boolean_factor -> unary_expression .) ]

    comparator                     shift and go to state 67

state 57

    (34) expression -> arithmetic_expression .
    (62) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (63) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term
    (52) boolean_factor -> arithmetic_expression . comparator arithmetic_expression
    (56) comparator -> . GT
    (57) comparator -> . LT
    (58) comparator -> . GEQ
    (59) comparator -> . LEQ
    (60) comparator -> . EQ
    (61) comparator -> . NEQ

    ID              reduce using rule 34 (expression -> arithmetic_expression .)
    K_IF            reduce using rule 34 (expression -> arithmetic_expression .)
    K_WHILE         reduce using rule 34 (expression -> arithmetic_expression .)
    K_CONTINUE      reduce using rule 34 (expression -> arithmetic_expression .)
    K_BREAK         reduce using rule 34 (expression -> arithmetic_expression .)
    K_DONE          reduce using rule 34 (expression -> arithmetic_expression .)
    K_LIST          reduce using rule 34 (expression -> arithmetic_expression .)
    K_DICT          reduce using rule 34 (expression -> arithmetic_expression .)
    K_SET           reduce using rule 34 (expression -> arithmetic_expression .)
    K_INT           reduce using rule 34 (expression -> arithmetic_expression .)
    K_DOUBLE        reduce using rule 34 (expression -> arithmetic_expression .)
    K_STRING        reduce using rule 34 (expression -> arithmetic_expression .)
    K_BOOL          reduce using rule 34 (expression -> arithmetic_expression .)
    K_WINDOW        reduce using rule 34 (expression -> arithmetic_expression .)
    K_SHAPE         reduce using rule 34 (expression -> arithmetic_expression .)
    K_TRIANGLE      reduce using rule 34 (expression -> arithmetic_expression .)
    K_RECTANGLE     reduce using rule 34 (expression -> arithmetic_expression .)
    K_CIRCLE        reduce using rule 34 (expression -> arithmetic_expression .)
    K_TEXT          reduce using rule 34 (expression -> arithmetic_expression .)
    $end            reduce using rule 34 (expression -> arithmetic_expression .)
    K_EL            reduce using rule 34 (expression -> arithmetic_expression .)
    K_EF            reduce using rule 34 (expression -> arithmetic_expression .)
    K_END           reduce using rule 34 (expression -> arithmetic_expression .)
    RPAREN          reduce using rule 34 (expression -> arithmetic_expression .)
    COMMA           reduce using rule 34 (expression -> arithmetic_expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    GT              shift and go to state 66
    LT              shift and go to state 69
    GEQ             shift and go to state 65
    LEQ             shift and go to state 68
    EQ              shift and go to state 70
    NEQ             shift and go to state 71

    comparator                     shift and go to state 83

state 58

    (31) expression -> string_expression .
    (35) string_expression -> string_expression . PLUS string_term
    (53) boolean_factor -> string_expression . comparator string_expression
    (56) comparator -> . GT
    (57) comparator -> . LT
    (58) comparator -> . GEQ
    (59) comparator -> . LEQ
    (60) comparator -> . EQ
    (61) comparator -> . NEQ

    ID              reduce using rule 31 (expression -> string_expression .)
    K_IF            reduce using rule 31 (expression -> string_expression .)
    K_WHILE         reduce using rule 31 (expression -> string_expression .)
    K_CONTINUE      reduce using rule 31 (expression -> string_expression .)
    K_BREAK         reduce using rule 31 (expression -> string_expression .)
    K_DONE          reduce using rule 31 (expression -> string_expression .)
    K_LIST          reduce using rule 31 (expression -> string_expression .)
    K_DICT          reduce using rule 31 (expression -> string_expression .)
    K_SET           reduce using rule 31 (expression -> string_expression .)
    K_INT           reduce using rule 31 (expression -> string_expression .)
    K_DOUBLE        reduce using rule 31 (expression -> string_expression .)
    K_STRING        reduce using rule 31 (expression -> string_expression .)
    K_BOOL          reduce using rule 31 (expression -> string_expression .)
    K_WINDOW        reduce using rule 31 (expression -> string_expression .)
    K_SHAPE         reduce using rule 31 (expression -> string_expression .)
    K_TRIANGLE      reduce using rule 31 (expression -> string_expression .)
    K_RECTANGLE     reduce using rule 31 (expression -> string_expression .)
    K_CIRCLE        reduce using rule 31 (expression -> string_expression .)
    K_TEXT          reduce using rule 31 (expression -> string_expression .)
    $end            reduce using rule 31 (expression -> string_expression .)
    K_EL            reduce using rule 31 (expression -> string_expression .)
    K_EF            reduce using rule 31 (expression -> string_expression .)
    K_END           reduce using rule 31 (expression -> string_expression .)
    RPAREN          reduce using rule 31 (expression -> string_expression .)
    COMMA           reduce using rule 31 (expression -> string_expression .)
    PLUS            shift and go to state 87
    GT              shift and go to state 66
    LT              shift and go to state 69
    GEQ             shift and go to state 65
    LEQ             shift and go to state 68
    EQ              shift and go to state 70
    NEQ             shift and go to state 71

    comparator                     shift and go to state 86

state 59

    (36) string_expression -> STRING .
    (40) unary_expression -> STRING .

  ! reduce/reduce conflict for GT resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for LT resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for GEQ resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for LEQ resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for EQ resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for NEQ resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for ID resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_IF resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_WHILE resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_CONTINUE resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_BREAK resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_DONE resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_LIST resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_DICT resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_SET resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_INT resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_DOUBLE resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_STRING resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_BOOL resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_WINDOW resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_SHAPE resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_TRIANGLE resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_RECTANGLE resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_CIRCLE resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_TEXT resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for $end resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_EL resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_EF resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for K_END resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 36 (string_expression -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 36 (string_expression -> STRING .)
    PLUS            reduce using rule 36 (string_expression -> STRING .)
    GT              reduce using rule 36 (string_expression -> STRING .)
    LT              reduce using rule 36 (string_expression -> STRING .)
    GEQ             reduce using rule 36 (string_expression -> STRING .)
    LEQ             reduce using rule 36 (string_expression -> STRING .)
    EQ              reduce using rule 36 (string_expression -> STRING .)
    NEQ             reduce using rule 36 (string_expression -> STRING .)
    ID              reduce using rule 36 (string_expression -> STRING .)
    K_IF            reduce using rule 36 (string_expression -> STRING .)
    K_WHILE         reduce using rule 36 (string_expression -> STRING .)
    K_CONTINUE      reduce using rule 36 (string_expression -> STRING .)
    K_BREAK         reduce using rule 36 (string_expression -> STRING .)
    K_DONE          reduce using rule 36 (string_expression -> STRING .)
    K_LIST          reduce using rule 36 (string_expression -> STRING .)
    K_DICT          reduce using rule 36 (string_expression -> STRING .)
    K_SET           reduce using rule 36 (string_expression -> STRING .)
    K_INT           reduce using rule 36 (string_expression -> STRING .)
    K_DOUBLE        reduce using rule 36 (string_expression -> STRING .)
    K_STRING        reduce using rule 36 (string_expression -> STRING .)
    K_BOOL          reduce using rule 36 (string_expression -> STRING .)
    K_WINDOW        reduce using rule 36 (string_expression -> STRING .)
    K_SHAPE         reduce using rule 36 (string_expression -> STRING .)
    K_TRIANGLE      reduce using rule 36 (string_expression -> STRING .)
    K_RECTANGLE     reduce using rule 36 (string_expression -> STRING .)
    K_CIRCLE        reduce using rule 36 (string_expression -> STRING .)
    K_TEXT          reduce using rule 36 (string_expression -> STRING .)
    $end            reduce using rule 36 (string_expression -> STRING .)
    K_EL            reduce using rule 36 (string_expression -> STRING .)
    K_EF            reduce using rule 36 (string_expression -> STRING .)
    K_END           reduce using rule 36 (string_expression -> STRING .)
    RPAREN          reduce using rule 36 (string_expression -> STRING .)
    COMMA           reduce using rule 36 (string_expression -> STRING .)
    AND             reduce using rule 40 (unary_expression -> STRING .)
    OR              reduce using rule 40 (unary_expression -> STRING .)

  ! GT              [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! LT              [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! GEQ             [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! LEQ             [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! EQ              [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! NEQ             [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! ID              [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! K_IF            [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! K_WHILE         [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! K_CONTINUE      [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! K_BREAK         [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! K_DONE          [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! K_LIST          [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! K_DICT          [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! K_SET           [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! K_INT           [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! K_DOUBLE        [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! K_STRING        [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! K_BOOL          [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! K_WINDOW        [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! K_SHAPE         [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! K_TRIANGLE      [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! K_RECTANGLE     [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! K_CIRCLE        [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! K_TEXT          [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! $end            [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! K_EL            [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! K_EF            [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! K_END           [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! RPAREN          [ reduce using rule 40 (unary_expression -> STRING .) ]
  ! COMMA           [ reduce using rule 40 (unary_expression -> STRING .) ]


state 60

    (33) expression -> boolean_expression .
    (46) boolean_expression -> boolean_expression . OR boolean_term

    ID              reduce using rule 33 (expression -> boolean_expression .)
    K_IF            reduce using rule 33 (expression -> boolean_expression .)
    K_WHILE         reduce using rule 33 (expression -> boolean_expression .)
    K_CONTINUE      reduce using rule 33 (expression -> boolean_expression .)
    K_BREAK         reduce using rule 33 (expression -> boolean_expression .)
    K_DONE          reduce using rule 33 (expression -> boolean_expression .)
    K_LIST          reduce using rule 33 (expression -> boolean_expression .)
    K_DICT          reduce using rule 33 (expression -> boolean_expression .)
    K_SET           reduce using rule 33 (expression -> boolean_expression .)
    K_INT           reduce using rule 33 (expression -> boolean_expression .)
    K_DOUBLE        reduce using rule 33 (expression -> boolean_expression .)
    K_STRING        reduce using rule 33 (expression -> boolean_expression .)
    K_BOOL          reduce using rule 33 (expression -> boolean_expression .)
    K_WINDOW        reduce using rule 33 (expression -> boolean_expression .)
    K_SHAPE         reduce using rule 33 (expression -> boolean_expression .)
    K_TRIANGLE      reduce using rule 33 (expression -> boolean_expression .)
    K_RECTANGLE     reduce using rule 33 (expression -> boolean_expression .)
    K_CIRCLE        reduce using rule 33 (expression -> boolean_expression .)
    K_TEXT          reduce using rule 33 (expression -> boolean_expression .)
    $end            reduce using rule 33 (expression -> boolean_expression .)
    K_EL            reduce using rule 33 (expression -> boolean_expression .)
    K_EF            reduce using rule 33 (expression -> boolean_expression .)
    K_END           reduce using rule 33 (expression -> boolean_expression .)
    RPAREN          reduce using rule 33 (expression -> boolean_expression .)
    COMMA           reduce using rule 33 (expression -> boolean_expression .)
    OR              shift and go to state 93


state 61

    (16) variable_declaration -> ID ASSIGN expression .

    ID              reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)
    K_IF            reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)
    K_WHILE         reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)
    K_CONTINUE      reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)
    K_BREAK         reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)
    K_DONE          reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)
    K_LIST          reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)
    K_DICT          reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)
    K_SET           reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)
    K_INT           reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)
    K_DOUBLE        reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)
    K_STRING        reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)
    K_BOOL          reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)
    K_WINDOW        reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)
    K_SHAPE         reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)
    K_TRIANGLE      reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)
    K_RECTANGLE     reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)
    K_CIRCLE        reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)
    K_TEXT          reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)
    K_END           reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)
    $end            reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)
    K_EL            reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)
    K_EF            reduce using rule 16 (variable_declaration -> ID ASSIGN expression .)


state 62

    (11) function_call_statement -> ID LPAREN RPAREN .

    TIMES           reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    MOD             reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    GT              reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    LT              reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    GEQ             reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    LEQ             reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    EQ              reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    NEQ             reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    ID              reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    K_IF            reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    K_WHILE         reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    K_CONTINUE      reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    K_BREAK         reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    K_DONE          reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    K_LIST          reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    K_DICT          reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    K_SET           reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    K_INT           reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    K_DOUBLE        reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    K_STRING        reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    K_BOOL          reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    K_WINDOW        reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    K_SHAPE         reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    K_TRIANGLE      reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    K_RECTANGLE     reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    K_CIRCLE        reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    K_TEXT          reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    $end            reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    K_EL            reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    K_EF            reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    K_END           reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    AND             reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)
    OR              reduce using rule 11 (function_call_statement -> ID LPAREN RPAREN .)


state 63

    (10) function_call_statement -> ID LPAREN parameter_list . RPAREN
    (12) parameter_list -> parameter_list . COMMA expression

    RPAREN          shift and go to state 96
    COMMA           shift and go to state 97


state 64

    (13) parameter_list -> expression .

    RPAREN          reduce using rule 13 (parameter_list -> expression .)
    COMMA           reduce using rule 13 (parameter_list -> expression .)


state 65

    (58) comparator -> GEQ .

    STRING          reduce using rule 58 (comparator -> GEQ .)
    LPAREN          reduce using rule 58 (comparator -> GEQ .)
    ID              reduce using rule 58 (comparator -> GEQ .)
    MINUS           reduce using rule 58 (comparator -> GEQ .)
    INTEGER         reduce using rule 58 (comparator -> GEQ .)
    DOUBLE          reduce using rule 58 (comparator -> GEQ .)
    K_TRUE          reduce using rule 58 (comparator -> GEQ .)
    K_FALSE         reduce using rule 58 (comparator -> GEQ .)


state 66

    (56) comparator -> GT .

    STRING          reduce using rule 56 (comparator -> GT .)
    LPAREN          reduce using rule 56 (comparator -> GT .)
    ID              reduce using rule 56 (comparator -> GT .)
    MINUS           reduce using rule 56 (comparator -> GT .)
    INTEGER         reduce using rule 56 (comparator -> GT .)
    DOUBLE          reduce using rule 56 (comparator -> GT .)
    K_TRUE          reduce using rule 56 (comparator -> GT .)
    K_FALSE         reduce using rule 56 (comparator -> GT .)


state 67

    (51) boolean_factor -> unary_expression comparator . unary_expression
    (39) unary_expression -> . ID
    (40) unary_expression -> . STRING
    (41) unary_expression -> . INTEGER
    (42) unary_expression -> . function_call_statement
    (43) unary_expression -> . DOUBLE
    (44) unary_expression -> . K_TRUE
    (45) unary_expression -> . K_FALSE
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN

    ID              shift and go to state 103
    STRING          shift and go to state 98
    INTEGER         shift and go to state 101
    DOUBLE          shift and go to state 99
    K_TRUE          shift and go to state 38
    K_FALSE         shift and go to state 53

    function_call_statement        shift and go to state 100
    unary_expression               shift and go to state 102

state 68

    (59) comparator -> LEQ .

    STRING          reduce using rule 59 (comparator -> LEQ .)
    LPAREN          reduce using rule 59 (comparator -> LEQ .)
    ID              reduce using rule 59 (comparator -> LEQ .)
    MINUS           reduce using rule 59 (comparator -> LEQ .)
    INTEGER         reduce using rule 59 (comparator -> LEQ .)
    DOUBLE          reduce using rule 59 (comparator -> LEQ .)
    K_TRUE          reduce using rule 59 (comparator -> LEQ .)
    K_FALSE         reduce using rule 59 (comparator -> LEQ .)


state 69

    (57) comparator -> LT .

    STRING          reduce using rule 57 (comparator -> LT .)
    LPAREN          reduce using rule 57 (comparator -> LT .)
    ID              reduce using rule 57 (comparator -> LT .)
    MINUS           reduce using rule 57 (comparator -> LT .)
    INTEGER         reduce using rule 57 (comparator -> LT .)
    DOUBLE          reduce using rule 57 (comparator -> LT .)
    K_TRUE          reduce using rule 57 (comparator -> LT .)
    K_FALSE         reduce using rule 57 (comparator -> LT .)


state 70

    (60) comparator -> EQ .

    STRING          reduce using rule 60 (comparator -> EQ .)
    LPAREN          reduce using rule 60 (comparator -> EQ .)
    ID              reduce using rule 60 (comparator -> EQ .)
    MINUS           reduce using rule 60 (comparator -> EQ .)
    INTEGER         reduce using rule 60 (comparator -> EQ .)
    DOUBLE          reduce using rule 60 (comparator -> EQ .)
    K_TRUE          reduce using rule 60 (comparator -> EQ .)
    K_FALSE         reduce using rule 60 (comparator -> EQ .)


state 71

    (61) comparator -> NEQ .

    STRING          reduce using rule 61 (comparator -> NEQ .)
    LPAREN          reduce using rule 61 (comparator -> NEQ .)
    ID              reduce using rule 61 (comparator -> NEQ .)
    MINUS           reduce using rule 61 (comparator -> NEQ .)
    INTEGER         reduce using rule 61 (comparator -> NEQ .)
    DOUBLE          reduce using rule 61 (comparator -> NEQ .)
    K_TRUE          reduce using rule 61 (comparator -> NEQ .)
    K_FALSE         reduce using rule 61 (comparator -> NEQ .)


state 72

    (55) boolean_factor -> NEG boolean_factor .

    AND             reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    RPAREN          reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    OR              reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    ID              reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    K_IF            reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    K_WHILE         reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    K_CONTINUE      reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    K_BREAK         reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    K_DONE          reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    K_LIST          reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    K_DICT          reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    K_SET           reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    K_INT           reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    K_DOUBLE        reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    K_STRING        reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    K_BOOL          reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    K_WINDOW        reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    K_SHAPE         reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    K_TRIANGLE      reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    K_RECTANGLE     reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    K_CIRCLE        reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    K_TEXT          reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    $end            reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    K_EL            reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    K_EF            reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    K_END           reduce using rule 55 (boolean_factor -> NEG boolean_factor .)
    COMMA           reduce using rule 55 (boolean_factor -> NEG boolean_factor .)


state 73

    (48) boolean_term -> boolean_term AND . boolean_factor
    (50) boolean_factor -> . LPAREN boolean_expression RPAREN
    (51) boolean_factor -> . unary_expression comparator unary_expression
    (52) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (53) boolean_factor -> . string_expression comparator string_expression
    (54) boolean_factor -> . unary_expression
    (55) boolean_factor -> . NEG boolean_factor
    (39) unary_expression -> . ID
    (40) unary_expression -> . STRING
    (41) unary_expression -> . INTEGER
    (42) unary_expression -> . function_call_statement
    (43) unary_expression -> . DOUBLE
    (44) unary_expression -> . K_TRUE
    (45) unary_expression -> . K_FALSE
    (62) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (63) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_term
    (35) string_expression -> . string_expression PLUS string_term
    (36) string_expression -> . STRING
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN
    (65) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (66) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (68) arithmetic_term -> . arithmetic_factor
    (69) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (70) arithmetic_factor -> . number
    (71) arithmetic_factor -> . ID
    (72) arithmetic_factor -> . function_call_statement
    (73) arithmetic_factor -> . MINUS arithmetic_factor
    (74) number -> . INTEGER
    (75) number -> . DOUBLE

    LPAREN          shift and go to state 46
    NEG             shift and go to state 36
    ID              shift and go to state 49
    STRING          shift and go to state 45
    INTEGER         shift and go to state 42
    DOUBLE          shift and go to state 51
    K_TRUE          shift and go to state 38
    K_FALSE         shift and go to state 53
    MINUS           shift and go to state 40

    arithmetic_expression          shift and go to state 43
    string_expression              shift and go to state 44
    unary_expression               shift and go to state 35
    arithmetic_factor              shift and go to state 41
    function_call_statement        shift and go to state 52
    number                         shift and go to state 48
    arithmetic_term                shift and go to state 39
    boolean_factor                 shift and go to state 104

state 74

    (67) arithmetic_term -> arithmetic_term MOD . arithmetic_factor
    (69) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (70) arithmetic_factor -> . number
    (71) arithmetic_factor -> . ID
    (72) arithmetic_factor -> . function_call_statement
    (73) arithmetic_factor -> . MINUS arithmetic_factor
    (74) number -> . INTEGER
    (75) number -> . DOUBLE
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 81
    ID              shift and go to state 80
    MINUS           shift and go to state 40
    INTEGER         shift and go to state 82
    DOUBLE          shift and go to state 78

    arithmetic_factor              shift and go to state 105
    number                         shift and go to state 48
    function_call_statement        shift and go to state 79

state 75

    (66) arithmetic_term -> arithmetic_term DIVIDE . arithmetic_factor
    (69) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (70) arithmetic_factor -> . number
    (71) arithmetic_factor -> . ID
    (72) arithmetic_factor -> . function_call_statement
    (73) arithmetic_factor -> . MINUS arithmetic_factor
    (74) number -> . INTEGER
    (75) number -> . DOUBLE
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 81
    ID              shift and go to state 80
    MINUS           shift and go to state 40
    INTEGER         shift and go to state 82
    DOUBLE          shift and go to state 78

    arithmetic_factor              shift and go to state 106
    number                         shift and go to state 48
    function_call_statement        shift and go to state 79

state 76

    (65) arithmetic_term -> arithmetic_term TIMES . arithmetic_factor
    (69) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (70) arithmetic_factor -> . number
    (71) arithmetic_factor -> . ID
    (72) arithmetic_factor -> . function_call_statement
    (73) arithmetic_factor -> . MINUS arithmetic_factor
    (74) number -> . INTEGER
    (75) number -> . DOUBLE
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 81
    ID              shift and go to state 80
    MINUS           shift and go to state 40
    INTEGER         shift and go to state 82
    DOUBLE          shift and go to state 78

    arithmetic_factor              shift and go to state 107
    number                         shift and go to state 48
    function_call_statement        shift and go to state 79

state 77

    (73) arithmetic_factor -> MINUS arithmetic_factor .

    TIMES           reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    DIVIDE          reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    MOD             reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    RPAREN          reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    PLUS            reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    MINUS           reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    GT              reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    LT              reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    GEQ             reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    LEQ             reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    EQ              reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    NEQ             reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    ID              reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_IF            reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_WHILE         reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_CONTINUE      reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_BREAK         reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_DONE          reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_LIST          reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_DICT          reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_SET           reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_INT           reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_DOUBLE        reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_STRING        reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_BOOL          reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_WINDOW        reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_SHAPE         reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_TRIANGLE      reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_RECTANGLE     reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_CIRCLE        reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_TEXT          reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    $end            reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_EL            reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_EF            reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    K_END           reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    COMMA           reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    AND             reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)
    OR              reduce using rule 73 (arithmetic_factor -> MINUS arithmetic_factor .)


state 78

    (75) number -> DOUBLE .

    TIMES           reduce using rule 75 (number -> DOUBLE .)
    DIVIDE          reduce using rule 75 (number -> DOUBLE .)
    MOD             reduce using rule 75 (number -> DOUBLE .)
    PLUS            reduce using rule 75 (number -> DOUBLE .)
    MINUS           reduce using rule 75 (number -> DOUBLE .)
    GT              reduce using rule 75 (number -> DOUBLE .)
    LT              reduce using rule 75 (number -> DOUBLE .)
    GEQ             reduce using rule 75 (number -> DOUBLE .)
    LEQ             reduce using rule 75 (number -> DOUBLE .)
    EQ              reduce using rule 75 (number -> DOUBLE .)
    NEQ             reduce using rule 75 (number -> DOUBLE .)
    ID              reduce using rule 75 (number -> DOUBLE .)
    K_IF            reduce using rule 75 (number -> DOUBLE .)
    K_WHILE         reduce using rule 75 (number -> DOUBLE .)
    K_CONTINUE      reduce using rule 75 (number -> DOUBLE .)
    K_BREAK         reduce using rule 75 (number -> DOUBLE .)
    K_DONE          reduce using rule 75 (number -> DOUBLE .)
    K_LIST          reduce using rule 75 (number -> DOUBLE .)
    K_DICT          reduce using rule 75 (number -> DOUBLE .)
    K_SET           reduce using rule 75 (number -> DOUBLE .)
    K_INT           reduce using rule 75 (number -> DOUBLE .)
    K_DOUBLE        reduce using rule 75 (number -> DOUBLE .)
    K_STRING        reduce using rule 75 (number -> DOUBLE .)
    K_BOOL          reduce using rule 75 (number -> DOUBLE .)
    K_WINDOW        reduce using rule 75 (number -> DOUBLE .)
    K_SHAPE         reduce using rule 75 (number -> DOUBLE .)
    K_TRIANGLE      reduce using rule 75 (number -> DOUBLE .)
    K_RECTANGLE     reduce using rule 75 (number -> DOUBLE .)
    K_CIRCLE        reduce using rule 75 (number -> DOUBLE .)
    K_TEXT          reduce using rule 75 (number -> DOUBLE .)
    $end            reduce using rule 75 (number -> DOUBLE .)
    K_EL            reduce using rule 75 (number -> DOUBLE .)
    K_EF            reduce using rule 75 (number -> DOUBLE .)
    K_END           reduce using rule 75 (number -> DOUBLE .)
    RPAREN          reduce using rule 75 (number -> DOUBLE .)
    COMMA           reduce using rule 75 (number -> DOUBLE .)
    AND             reduce using rule 75 (number -> DOUBLE .)
    OR              reduce using rule 75 (number -> DOUBLE .)


state 79

    (72) arithmetic_factor -> function_call_statement .

    TIMES           reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    DIVIDE          reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    MOD             reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    RPAREN          reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    PLUS            reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    MINUS           reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    GT              reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    LT              reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    GEQ             reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    LEQ             reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    EQ              reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    NEQ             reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    ID              reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    K_IF            reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    K_WHILE         reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    K_CONTINUE      reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    K_BREAK         reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    K_DONE          reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    K_LIST          reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    K_DICT          reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    K_SET           reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    K_INT           reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    K_DOUBLE        reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    K_STRING        reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    K_BOOL          reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    K_WINDOW        reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    K_SHAPE         reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    K_TRIANGLE      reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    K_RECTANGLE     reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    K_CIRCLE        reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    K_TEXT          reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    $end            reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    K_EL            reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    K_EF            reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    K_END           reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    COMMA           reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    AND             reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    OR              reduce using rule 72 (arithmetic_factor -> function_call_statement .)


state 80

    (71) arithmetic_factor -> ID .
    (10) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (11) function_call_statement -> ID . LPAREN RPAREN

    TIMES           reduce using rule 71 (arithmetic_factor -> ID .)
    DIVIDE          reduce using rule 71 (arithmetic_factor -> ID .)
    MOD             reduce using rule 71 (arithmetic_factor -> ID .)
    RPAREN          reduce using rule 71 (arithmetic_factor -> ID .)
    PLUS            reduce using rule 71 (arithmetic_factor -> ID .)
    MINUS           reduce using rule 71 (arithmetic_factor -> ID .)
    GT              reduce using rule 71 (arithmetic_factor -> ID .)
    LT              reduce using rule 71 (arithmetic_factor -> ID .)
    GEQ             reduce using rule 71 (arithmetic_factor -> ID .)
    LEQ             reduce using rule 71 (arithmetic_factor -> ID .)
    EQ              reduce using rule 71 (arithmetic_factor -> ID .)
    NEQ             reduce using rule 71 (arithmetic_factor -> ID .)
    ID              reduce using rule 71 (arithmetic_factor -> ID .)
    K_IF            reduce using rule 71 (arithmetic_factor -> ID .)
    K_WHILE         reduce using rule 71 (arithmetic_factor -> ID .)
    K_CONTINUE      reduce using rule 71 (arithmetic_factor -> ID .)
    K_BREAK         reduce using rule 71 (arithmetic_factor -> ID .)
    K_DONE          reduce using rule 71 (arithmetic_factor -> ID .)
    K_LIST          reduce using rule 71 (arithmetic_factor -> ID .)
    K_DICT          reduce using rule 71 (arithmetic_factor -> ID .)
    K_SET           reduce using rule 71 (arithmetic_factor -> ID .)
    K_INT           reduce using rule 71 (arithmetic_factor -> ID .)
    K_DOUBLE        reduce using rule 71 (arithmetic_factor -> ID .)
    K_STRING        reduce using rule 71 (arithmetic_factor -> ID .)
    K_BOOL          reduce using rule 71 (arithmetic_factor -> ID .)
    K_WINDOW        reduce using rule 71 (arithmetic_factor -> ID .)
    K_SHAPE         reduce using rule 71 (arithmetic_factor -> ID .)
    K_TRIANGLE      reduce using rule 71 (arithmetic_factor -> ID .)
    K_RECTANGLE     reduce using rule 71 (arithmetic_factor -> ID .)
    K_CIRCLE        reduce using rule 71 (arithmetic_factor -> ID .)
    K_TEXT          reduce using rule 71 (arithmetic_factor -> ID .)
    $end            reduce using rule 71 (arithmetic_factor -> ID .)
    K_EL            reduce using rule 71 (arithmetic_factor -> ID .)
    K_EF            reduce using rule 71 (arithmetic_factor -> ID .)
    K_END           reduce using rule 71 (arithmetic_factor -> ID .)
    COMMA           reduce using rule 71 (arithmetic_factor -> ID .)
    AND             reduce using rule 71 (arithmetic_factor -> ID .)
    OR              reduce using rule 71 (arithmetic_factor -> ID .)
    LPAREN          shift and go to state 34


state 81

    (69) arithmetic_factor -> LPAREN . arithmetic_expression RPAREN
    (62) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (63) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_term
    (65) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (66) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (68) arithmetic_term -> . arithmetic_factor
    (69) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (70) arithmetic_factor -> . number
    (71) arithmetic_factor -> . ID
    (72) arithmetic_factor -> . function_call_statement
    (73) arithmetic_factor -> . MINUS arithmetic_factor
    (74) number -> . INTEGER
    (75) number -> . DOUBLE
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 81
    ID              shift and go to state 80
    MINUS           shift and go to state 40
    INTEGER         shift and go to state 82
    DOUBLE          shift and go to state 78

    arithmetic_expression          shift and go to state 108
    arithmetic_factor              shift and go to state 41
    number                         shift and go to state 48
    function_call_statement        shift and go to state 79
    arithmetic_term                shift and go to state 39

state 82

    (74) number -> INTEGER .

    TIMES           reduce using rule 74 (number -> INTEGER .)
    DIVIDE          reduce using rule 74 (number -> INTEGER .)
    MOD             reduce using rule 74 (number -> INTEGER .)
    PLUS            reduce using rule 74 (number -> INTEGER .)
    MINUS           reduce using rule 74 (number -> INTEGER .)
    GT              reduce using rule 74 (number -> INTEGER .)
    LT              reduce using rule 74 (number -> INTEGER .)
    GEQ             reduce using rule 74 (number -> INTEGER .)
    LEQ             reduce using rule 74 (number -> INTEGER .)
    EQ              reduce using rule 74 (number -> INTEGER .)
    NEQ             reduce using rule 74 (number -> INTEGER .)
    ID              reduce using rule 74 (number -> INTEGER .)
    K_IF            reduce using rule 74 (number -> INTEGER .)
    K_WHILE         reduce using rule 74 (number -> INTEGER .)
    K_CONTINUE      reduce using rule 74 (number -> INTEGER .)
    K_BREAK         reduce using rule 74 (number -> INTEGER .)
    K_DONE          reduce using rule 74 (number -> INTEGER .)
    K_LIST          reduce using rule 74 (number -> INTEGER .)
    K_DICT          reduce using rule 74 (number -> INTEGER .)
    K_SET           reduce using rule 74 (number -> INTEGER .)
    K_INT           reduce using rule 74 (number -> INTEGER .)
    K_DOUBLE        reduce using rule 74 (number -> INTEGER .)
    K_STRING        reduce using rule 74 (number -> INTEGER .)
    K_BOOL          reduce using rule 74 (number -> INTEGER .)
    K_WINDOW        reduce using rule 74 (number -> INTEGER .)
    K_SHAPE         reduce using rule 74 (number -> INTEGER .)
    K_TRIANGLE      reduce using rule 74 (number -> INTEGER .)
    K_RECTANGLE     reduce using rule 74 (number -> INTEGER .)
    K_CIRCLE        reduce using rule 74 (number -> INTEGER .)
    K_TEXT          reduce using rule 74 (number -> INTEGER .)
    $end            reduce using rule 74 (number -> INTEGER .)
    K_EL            reduce using rule 74 (number -> INTEGER .)
    K_EF            reduce using rule 74 (number -> INTEGER .)
    K_END           reduce using rule 74 (number -> INTEGER .)
    RPAREN          reduce using rule 74 (number -> INTEGER .)
    COMMA           reduce using rule 74 (number -> INTEGER .)
    AND             reduce using rule 74 (number -> INTEGER .)
    OR              reduce using rule 74 (number -> INTEGER .)


state 83

    (52) boolean_factor -> arithmetic_expression comparator . arithmetic_expression
    (62) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (63) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_term
    (65) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (66) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (68) arithmetic_term -> . arithmetic_factor
    (69) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (70) arithmetic_factor -> . number
    (71) arithmetic_factor -> . ID
    (72) arithmetic_factor -> . function_call_statement
    (73) arithmetic_factor -> . MINUS arithmetic_factor
    (74) number -> . INTEGER
    (75) number -> . DOUBLE
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 81
    ID              shift and go to state 80
    MINUS           shift and go to state 40
    INTEGER         shift and go to state 82
    DOUBLE          shift and go to state 78

    arithmetic_expression          shift and go to state 109
    arithmetic_factor              shift and go to state 41
    number                         shift and go to state 48
    function_call_statement        shift and go to state 79
    arithmetic_term                shift and go to state 39

state 84

    (62) arithmetic_expression -> arithmetic_expression PLUS . arithmetic_term
    (65) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (66) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (68) arithmetic_term -> . arithmetic_factor
    (69) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (70) arithmetic_factor -> . number
    (71) arithmetic_factor -> . ID
    (72) arithmetic_factor -> . function_call_statement
    (73) arithmetic_factor -> . MINUS arithmetic_factor
    (74) number -> . INTEGER
    (75) number -> . DOUBLE
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 81
    ID              shift and go to state 80
    MINUS           shift and go to state 40
    INTEGER         shift and go to state 82
    DOUBLE          shift and go to state 78

    arithmetic_factor              shift and go to state 41
    number                         shift and go to state 48
    function_call_statement        shift and go to state 79
    arithmetic_term                shift and go to state 110

state 85

    (63) arithmetic_expression -> arithmetic_expression MINUS . arithmetic_term
    (65) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (66) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (68) arithmetic_term -> . arithmetic_factor
    (69) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (70) arithmetic_factor -> . number
    (71) arithmetic_factor -> . ID
    (72) arithmetic_factor -> . function_call_statement
    (73) arithmetic_factor -> . MINUS arithmetic_factor
    (74) number -> . INTEGER
    (75) number -> . DOUBLE
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN

    LPAREN          shift and go to state 81
    ID              shift and go to state 80
    MINUS           shift and go to state 40
    INTEGER         shift and go to state 82
    DOUBLE          shift and go to state 78

    arithmetic_factor              shift and go to state 41
    number                         shift and go to state 48
    function_call_statement        shift and go to state 79
    arithmetic_term                shift and go to state 111

state 86

    (53) boolean_factor -> string_expression comparator . string_expression
    (35) string_expression -> . string_expression PLUS string_term
    (36) string_expression -> . STRING

    STRING          shift and go to state 113

    string_expression              shift and go to state 112

state 87

    (35) string_expression -> string_expression PLUS . string_term
    (37) string_term -> . function_call_statement
    (38) string_term -> . STRING
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN

    STRING          shift and go to state 114
    ID              shift and go to state 117

    string_term                    shift and go to state 116
    function_call_statement        shift and go to state 115

state 88

    (72) arithmetic_factor -> function_call_statement .
    (42) unary_expression -> function_call_statement .

  ! reduce/reduce conflict for GT resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for LT resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for GEQ resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for LEQ resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for EQ resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for NEQ resolved using rule 42 (unary_expression -> function_call_statement .)
  ! reduce/reduce conflict for RPAREN resolved using rule 42 (unary_expression -> function_call_statement .)
    TIMES           reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    DIVIDE          reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    MOD             reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    PLUS            reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    MINUS           reduce using rule 72 (arithmetic_factor -> function_call_statement .)
    GT              reduce using rule 42 (unary_expression -> function_call_statement .)
    LT              reduce using rule 42 (unary_expression -> function_call_statement .)
    GEQ             reduce using rule 42 (unary_expression -> function_call_statement .)
    LEQ             reduce using rule 42 (unary_expression -> function_call_statement .)
    EQ              reduce using rule 42 (unary_expression -> function_call_statement .)
    NEQ             reduce using rule 42 (unary_expression -> function_call_statement .)
    AND             reduce using rule 42 (unary_expression -> function_call_statement .)
    RPAREN          reduce using rule 42 (unary_expression -> function_call_statement .)
    OR              reduce using rule 42 (unary_expression -> function_call_statement .)

  ! RPAREN          [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! GT              [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! LT              [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! GEQ             [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! LEQ             [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! EQ              [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]
  ! NEQ             [ reduce using rule 72 (arithmetic_factor -> function_call_statement .) ]


state 89

    (69) arithmetic_factor -> LPAREN arithmetic_expression . RPAREN
    (62) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (63) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term
    (52) boolean_factor -> arithmetic_expression . comparator arithmetic_expression
    (56) comparator -> . GT
    (57) comparator -> . LT
    (58) comparator -> . GEQ
    (59) comparator -> . LEQ
    (60) comparator -> . EQ
    (61) comparator -> . NEQ

    RPAREN          shift and go to state 118
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85
    GT              shift and go to state 66
    LT              shift and go to state 69
    GEQ             shift and go to state 65
    LEQ             shift and go to state 68
    EQ              shift and go to state 70
    NEQ             shift and go to state 71

    comparator                     shift and go to state 83

state 90

    (71) arithmetic_factor -> ID .
    (39) unary_expression -> ID .
    (10) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (11) function_call_statement -> ID . LPAREN RPAREN

  ! reduce/reduce conflict for GT resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for LT resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for GEQ resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for LEQ resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for EQ resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for NEQ resolved using rule 39 (unary_expression -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 39 (unary_expression -> ID .)
    TIMES           reduce using rule 71 (arithmetic_factor -> ID .)
    DIVIDE          reduce using rule 71 (arithmetic_factor -> ID .)
    MOD             reduce using rule 71 (arithmetic_factor -> ID .)
    PLUS            reduce using rule 71 (arithmetic_factor -> ID .)
    MINUS           reduce using rule 71 (arithmetic_factor -> ID .)
    GT              reduce using rule 39 (unary_expression -> ID .)
    LT              reduce using rule 39 (unary_expression -> ID .)
    GEQ             reduce using rule 39 (unary_expression -> ID .)
    LEQ             reduce using rule 39 (unary_expression -> ID .)
    EQ              reduce using rule 39 (unary_expression -> ID .)
    NEQ             reduce using rule 39 (unary_expression -> ID .)
    AND             reduce using rule 39 (unary_expression -> ID .)
    RPAREN          reduce using rule 39 (unary_expression -> ID .)
    OR              reduce using rule 39 (unary_expression -> ID .)
    LPAREN          shift and go to state 34

  ! RPAREN          [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! GT              [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! LT              [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! GEQ             [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! LEQ             [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! EQ              [ reduce using rule 71 (arithmetic_factor -> ID .) ]
  ! NEQ             [ reduce using rule 71 (arithmetic_factor -> ID .) ]


state 91

    (50) boolean_factor -> LPAREN boolean_expression . RPAREN
    (46) boolean_expression -> boolean_expression . OR boolean_term

    RPAREN          shift and go to state 119
    OR              shift and go to state 93


state 92

    (76) selection_statement -> K_IF LPAREN boolean_expression RPAREN . compound_statement_list else_if_statement_list else_statement K_END
    (82) compound_statement_list -> .
    (83) compound_statement_list -> . compound_statement_list compound_statement

    ID              reduce using rule 82 (compound_statement_list -> .)
    K_IF            reduce using rule 82 (compound_statement_list -> .)
    K_WHILE         reduce using rule 82 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 82 (compound_statement_list -> .)
    K_BREAK         reduce using rule 82 (compound_statement_list -> .)
    K_DONE          reduce using rule 82 (compound_statement_list -> .)
    K_LIST          reduce using rule 82 (compound_statement_list -> .)
    K_DICT          reduce using rule 82 (compound_statement_list -> .)
    K_SET           reduce using rule 82 (compound_statement_list -> .)
    K_EL            reduce using rule 82 (compound_statement_list -> .)
    K_EF            reduce using rule 82 (compound_statement_list -> .)
    K_END           reduce using rule 82 (compound_statement_list -> .)
    K_INT           reduce using rule 82 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 82 (compound_statement_list -> .)
    K_STRING        reduce using rule 82 (compound_statement_list -> .)
    K_BOOL          reduce using rule 82 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 82 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 82 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 82 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 82 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 82 (compound_statement_list -> .)
    K_TEXT          reduce using rule 82 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 120

state 93

    (46) boolean_expression -> boolean_expression OR . boolean_term
    (48) boolean_term -> . boolean_term AND boolean_factor
    (49) boolean_term -> . boolean_factor
    (50) boolean_factor -> . LPAREN boolean_expression RPAREN
    (51) boolean_factor -> . unary_expression comparator unary_expression
    (52) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (53) boolean_factor -> . string_expression comparator string_expression
    (54) boolean_factor -> . unary_expression
    (55) boolean_factor -> . NEG boolean_factor
    (39) unary_expression -> . ID
    (40) unary_expression -> . STRING
    (41) unary_expression -> . INTEGER
    (42) unary_expression -> . function_call_statement
    (43) unary_expression -> . DOUBLE
    (44) unary_expression -> . K_TRUE
    (45) unary_expression -> . K_FALSE
    (62) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (63) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_term
    (35) string_expression -> . string_expression PLUS string_term
    (36) string_expression -> . STRING
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN
    (65) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (66) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (68) arithmetic_term -> . arithmetic_factor
    (69) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (70) arithmetic_factor -> . number
    (71) arithmetic_factor -> . ID
    (72) arithmetic_factor -> . function_call_statement
    (73) arithmetic_factor -> . MINUS arithmetic_factor
    (74) number -> . INTEGER
    (75) number -> . DOUBLE

    LPAREN          shift and go to state 46
    NEG             shift and go to state 36
    ID              shift and go to state 49
    STRING          shift and go to state 45
    INTEGER         shift and go to state 42
    DOUBLE          shift and go to state 51
    K_TRUE          shift and go to state 38
    K_FALSE         shift and go to state 53
    MINUS           shift and go to state 40

    arithmetic_expression          shift and go to state 43
    string_expression              shift and go to state 44
    unary_expression               shift and go to state 35
    arithmetic_factor              shift and go to state 41
    boolean_term                   shift and go to state 121
    function_call_statement        shift and go to state 52
    number                         shift and go to state 48
    arithmetic_term                shift and go to state 39
    boolean_factor                 shift and go to state 47

state 94

    (84) iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN . compound_statement_list K_END
    (82) compound_statement_list -> .
    (83) compound_statement_list -> . compound_statement_list compound_statement

    K_END           reduce using rule 82 (compound_statement_list -> .)
    ID              reduce using rule 82 (compound_statement_list -> .)
    K_IF            reduce using rule 82 (compound_statement_list -> .)
    K_WHILE         reduce using rule 82 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 82 (compound_statement_list -> .)
    K_BREAK         reduce using rule 82 (compound_statement_list -> .)
    K_DONE          reduce using rule 82 (compound_statement_list -> .)
    K_LIST          reduce using rule 82 (compound_statement_list -> .)
    K_DICT          reduce using rule 82 (compound_statement_list -> .)
    K_SET           reduce using rule 82 (compound_statement_list -> .)
    K_INT           reduce using rule 82 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 82 (compound_statement_list -> .)
    K_STRING        reduce using rule 82 (compound_statement_list -> .)
    K_BOOL          reduce using rule 82 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 82 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 82 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 82 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 82 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 82 (compound_statement_list -> .)
    K_TEXT          reduce using rule 82 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 122

state 95

    (15) variable_declaration -> pre_type_modifier type ID ASSIGN . expression
    (31) expression -> . string_expression
    (32) expression -> . unary_expression
    (33) expression -> . boolean_expression
    (34) expression -> . arithmetic_expression
    (35) string_expression -> . string_expression PLUS string_term
    (36) string_expression -> . STRING
    (39) unary_expression -> . ID
    (40) unary_expression -> . STRING
    (41) unary_expression -> . INTEGER
    (42) unary_expression -> . function_call_statement
    (43) unary_expression -> . DOUBLE
    (44) unary_expression -> . K_TRUE
    (45) unary_expression -> . K_FALSE
    (46) boolean_expression -> . boolean_expression OR boolean_term
    (47) boolean_expression -> . boolean_term
    (62) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (63) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_term
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN
    (48) boolean_term -> . boolean_term AND boolean_factor
    (49) boolean_term -> . boolean_factor
    (65) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (66) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (68) arithmetic_term -> . arithmetic_factor
    (50) boolean_factor -> . LPAREN boolean_expression RPAREN
    (51) boolean_factor -> . unary_expression comparator unary_expression
    (52) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (53) boolean_factor -> . string_expression comparator string_expression
    (54) boolean_factor -> . unary_expression
    (55) boolean_factor -> . NEG boolean_factor
    (69) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (70) arithmetic_factor -> . number
    (71) arithmetic_factor -> . ID
    (72) arithmetic_factor -> . function_call_statement
    (73) arithmetic_factor -> . MINUS arithmetic_factor
    (74) number -> . INTEGER
    (75) number -> . DOUBLE

    STRING          shift and go to state 59
    ID              shift and go to state 49
    INTEGER         shift and go to state 42
    DOUBLE          shift and go to state 51
    K_TRUE          shift and go to state 38
    K_FALSE         shift and go to state 53
    LPAREN          shift and go to state 46
    NEG             shift and go to state 36
    MINUS           shift and go to state 40

    arithmetic_expression          shift and go to state 57
    string_expression              shift and go to state 58
    number                         shift and go to state 48
    unary_expression               shift and go to state 56
    boolean_expression             shift and go to state 60
    arithmetic_factor              shift and go to state 41
    boolean_term                   shift and go to state 37
    function_call_statement        shift and go to state 52
    arithmetic_term                shift and go to state 39
    boolean_factor                 shift and go to state 47
    expression                     shift and go to state 123

state 96

    (10) function_call_statement -> ID LPAREN parameter_list RPAREN .

    TIMES           reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    MOD             reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    GT              reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    LT              reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    GEQ             reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    LEQ             reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    EQ              reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    NEQ             reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    ID              reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_IF            reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_WHILE         reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_CONTINUE      reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_BREAK         reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_DONE          reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_LIST          reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_DICT          reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_SET           reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_INT           reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_DOUBLE        reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_STRING        reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_BOOL          reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_WINDOW        reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_SHAPE         reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_TRIANGLE      reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_RECTANGLE     reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_CIRCLE        reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_TEXT          reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    $end            reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_EL            reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_EF            reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_END           reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    AND             reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    OR              reduce using rule 10 (function_call_statement -> ID LPAREN parameter_list RPAREN .)


state 97

    (12) parameter_list -> parameter_list COMMA . expression
    (31) expression -> . string_expression
    (32) expression -> . unary_expression
    (33) expression -> . boolean_expression
    (34) expression -> . arithmetic_expression
    (35) string_expression -> . string_expression PLUS string_term
    (36) string_expression -> . STRING
    (39) unary_expression -> . ID
    (40) unary_expression -> . STRING
    (41) unary_expression -> . INTEGER
    (42) unary_expression -> . function_call_statement
    (43) unary_expression -> . DOUBLE
    (44) unary_expression -> . K_TRUE
    (45) unary_expression -> . K_FALSE
    (46) boolean_expression -> . boolean_expression OR boolean_term
    (47) boolean_expression -> . boolean_term
    (62) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (63) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_term
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN
    (48) boolean_term -> . boolean_term AND boolean_factor
    (49) boolean_term -> . boolean_factor
    (65) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (66) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (68) arithmetic_term -> . arithmetic_factor
    (50) boolean_factor -> . LPAREN boolean_expression RPAREN
    (51) boolean_factor -> . unary_expression comparator unary_expression
    (52) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (53) boolean_factor -> . string_expression comparator string_expression
    (54) boolean_factor -> . unary_expression
    (55) boolean_factor -> . NEG boolean_factor
    (69) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (70) arithmetic_factor -> . number
    (71) arithmetic_factor -> . ID
    (72) arithmetic_factor -> . function_call_statement
    (73) arithmetic_factor -> . MINUS arithmetic_factor
    (74) number -> . INTEGER
    (75) number -> . DOUBLE

    STRING          shift and go to state 59
    ID              shift and go to state 49
    INTEGER         shift and go to state 42
    DOUBLE          shift and go to state 51
    K_TRUE          shift and go to state 38
    K_FALSE         shift and go to state 53
    LPAREN          shift and go to state 46
    NEG             shift and go to state 36
    MINUS           shift and go to state 40

    arithmetic_expression          shift and go to state 57
    string_expression              shift and go to state 58
    number                         shift and go to state 48
    unary_expression               shift and go to state 56
    boolean_expression             shift and go to state 60
    arithmetic_factor              shift and go to state 41
    boolean_term                   shift and go to state 37
    function_call_statement        shift and go to state 52
    arithmetic_term                shift and go to state 39
    boolean_factor                 shift and go to state 47
    expression                     shift and go to state 124

state 98

    (40) unary_expression -> STRING .

    AND             reduce using rule 40 (unary_expression -> STRING .)
    RPAREN          reduce using rule 40 (unary_expression -> STRING .)
    OR              reduce using rule 40 (unary_expression -> STRING .)
    ID              reduce using rule 40 (unary_expression -> STRING .)
    K_IF            reduce using rule 40 (unary_expression -> STRING .)
    K_WHILE         reduce using rule 40 (unary_expression -> STRING .)
    K_CONTINUE      reduce using rule 40 (unary_expression -> STRING .)
    K_BREAK         reduce using rule 40 (unary_expression -> STRING .)
    K_DONE          reduce using rule 40 (unary_expression -> STRING .)
    K_LIST          reduce using rule 40 (unary_expression -> STRING .)
    K_DICT          reduce using rule 40 (unary_expression -> STRING .)
    K_SET           reduce using rule 40 (unary_expression -> STRING .)
    K_INT           reduce using rule 40 (unary_expression -> STRING .)
    K_DOUBLE        reduce using rule 40 (unary_expression -> STRING .)
    K_STRING        reduce using rule 40 (unary_expression -> STRING .)
    K_BOOL          reduce using rule 40 (unary_expression -> STRING .)
    K_WINDOW        reduce using rule 40 (unary_expression -> STRING .)
    K_SHAPE         reduce using rule 40 (unary_expression -> STRING .)
    K_TRIANGLE      reduce using rule 40 (unary_expression -> STRING .)
    K_RECTANGLE     reduce using rule 40 (unary_expression -> STRING .)
    K_CIRCLE        reduce using rule 40 (unary_expression -> STRING .)
    K_TEXT          reduce using rule 40 (unary_expression -> STRING .)
    $end            reduce using rule 40 (unary_expression -> STRING .)
    K_EL            reduce using rule 40 (unary_expression -> STRING .)
    K_EF            reduce using rule 40 (unary_expression -> STRING .)
    K_END           reduce using rule 40 (unary_expression -> STRING .)
    COMMA           reduce using rule 40 (unary_expression -> STRING .)


state 99

    (43) unary_expression -> DOUBLE .

    AND             reduce using rule 43 (unary_expression -> DOUBLE .)
    RPAREN          reduce using rule 43 (unary_expression -> DOUBLE .)
    OR              reduce using rule 43 (unary_expression -> DOUBLE .)
    ID              reduce using rule 43 (unary_expression -> DOUBLE .)
    K_IF            reduce using rule 43 (unary_expression -> DOUBLE .)
    K_WHILE         reduce using rule 43 (unary_expression -> DOUBLE .)
    K_CONTINUE      reduce using rule 43 (unary_expression -> DOUBLE .)
    K_BREAK         reduce using rule 43 (unary_expression -> DOUBLE .)
    K_DONE          reduce using rule 43 (unary_expression -> DOUBLE .)
    K_LIST          reduce using rule 43 (unary_expression -> DOUBLE .)
    K_DICT          reduce using rule 43 (unary_expression -> DOUBLE .)
    K_SET           reduce using rule 43 (unary_expression -> DOUBLE .)
    K_INT           reduce using rule 43 (unary_expression -> DOUBLE .)
    K_DOUBLE        reduce using rule 43 (unary_expression -> DOUBLE .)
    K_STRING        reduce using rule 43 (unary_expression -> DOUBLE .)
    K_BOOL          reduce using rule 43 (unary_expression -> DOUBLE .)
    K_WINDOW        reduce using rule 43 (unary_expression -> DOUBLE .)
    K_SHAPE         reduce using rule 43 (unary_expression -> DOUBLE .)
    K_TRIANGLE      reduce using rule 43 (unary_expression -> DOUBLE .)
    K_RECTANGLE     reduce using rule 43 (unary_expression -> DOUBLE .)
    K_CIRCLE        reduce using rule 43 (unary_expression -> DOUBLE .)
    K_TEXT          reduce using rule 43 (unary_expression -> DOUBLE .)
    $end            reduce using rule 43 (unary_expression -> DOUBLE .)
    K_EL            reduce using rule 43 (unary_expression -> DOUBLE .)
    K_EF            reduce using rule 43 (unary_expression -> DOUBLE .)
    K_END           reduce using rule 43 (unary_expression -> DOUBLE .)
    COMMA           reduce using rule 43 (unary_expression -> DOUBLE .)


state 100

    (42) unary_expression -> function_call_statement .

    AND             reduce using rule 42 (unary_expression -> function_call_statement .)
    RPAREN          reduce using rule 42 (unary_expression -> function_call_statement .)
    OR              reduce using rule 42 (unary_expression -> function_call_statement .)
    ID              reduce using rule 42 (unary_expression -> function_call_statement .)
    K_IF            reduce using rule 42 (unary_expression -> function_call_statement .)
    K_WHILE         reduce using rule 42 (unary_expression -> function_call_statement .)
    K_CONTINUE      reduce using rule 42 (unary_expression -> function_call_statement .)
    K_BREAK         reduce using rule 42 (unary_expression -> function_call_statement .)
    K_DONE          reduce using rule 42 (unary_expression -> function_call_statement .)
    K_LIST          reduce using rule 42 (unary_expression -> function_call_statement .)
    K_DICT          reduce using rule 42 (unary_expression -> function_call_statement .)
    K_SET           reduce using rule 42 (unary_expression -> function_call_statement .)
    K_INT           reduce using rule 42 (unary_expression -> function_call_statement .)
    K_DOUBLE        reduce using rule 42 (unary_expression -> function_call_statement .)
    K_STRING        reduce using rule 42 (unary_expression -> function_call_statement .)
    K_BOOL          reduce using rule 42 (unary_expression -> function_call_statement .)
    K_WINDOW        reduce using rule 42 (unary_expression -> function_call_statement .)
    K_SHAPE         reduce using rule 42 (unary_expression -> function_call_statement .)
    K_TRIANGLE      reduce using rule 42 (unary_expression -> function_call_statement .)
    K_RECTANGLE     reduce using rule 42 (unary_expression -> function_call_statement .)
    K_CIRCLE        reduce using rule 42 (unary_expression -> function_call_statement .)
    K_TEXT          reduce using rule 42 (unary_expression -> function_call_statement .)
    $end            reduce using rule 42 (unary_expression -> function_call_statement .)
    K_EL            reduce using rule 42 (unary_expression -> function_call_statement .)
    K_EF            reduce using rule 42 (unary_expression -> function_call_statement .)
    K_END           reduce using rule 42 (unary_expression -> function_call_statement .)
    COMMA           reduce using rule 42 (unary_expression -> function_call_statement .)


state 101

    (41) unary_expression -> INTEGER .

    AND             reduce using rule 41 (unary_expression -> INTEGER .)
    RPAREN          reduce using rule 41 (unary_expression -> INTEGER .)
    OR              reduce using rule 41 (unary_expression -> INTEGER .)
    ID              reduce using rule 41 (unary_expression -> INTEGER .)
    K_IF            reduce using rule 41 (unary_expression -> INTEGER .)
    K_WHILE         reduce using rule 41 (unary_expression -> INTEGER .)
    K_CONTINUE      reduce using rule 41 (unary_expression -> INTEGER .)
    K_BREAK         reduce using rule 41 (unary_expression -> INTEGER .)
    K_DONE          reduce using rule 41 (unary_expression -> INTEGER .)
    K_LIST          reduce using rule 41 (unary_expression -> INTEGER .)
    K_DICT          reduce using rule 41 (unary_expression -> INTEGER .)
    K_SET           reduce using rule 41 (unary_expression -> INTEGER .)
    K_INT           reduce using rule 41 (unary_expression -> INTEGER .)
    K_DOUBLE        reduce using rule 41 (unary_expression -> INTEGER .)
    K_STRING        reduce using rule 41 (unary_expression -> INTEGER .)
    K_BOOL          reduce using rule 41 (unary_expression -> INTEGER .)
    K_WINDOW        reduce using rule 41 (unary_expression -> INTEGER .)
    K_SHAPE         reduce using rule 41 (unary_expression -> INTEGER .)
    K_TRIANGLE      reduce using rule 41 (unary_expression -> INTEGER .)
    K_RECTANGLE     reduce using rule 41 (unary_expression -> INTEGER .)
    K_CIRCLE        reduce using rule 41 (unary_expression -> INTEGER .)
    K_TEXT          reduce using rule 41 (unary_expression -> INTEGER .)
    $end            reduce using rule 41 (unary_expression -> INTEGER .)
    K_EL            reduce using rule 41 (unary_expression -> INTEGER .)
    K_EF            reduce using rule 41 (unary_expression -> INTEGER .)
    K_END           reduce using rule 41 (unary_expression -> INTEGER .)
    COMMA           reduce using rule 41 (unary_expression -> INTEGER .)


state 102

    (51) boolean_factor -> unary_expression comparator unary_expression .

    AND             reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    RPAREN          reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    OR              reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    ID              reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    K_IF            reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    K_WHILE         reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    K_CONTINUE      reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    K_BREAK         reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    K_DONE          reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    K_LIST          reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    K_DICT          reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    K_SET           reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    K_INT           reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    K_DOUBLE        reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    K_STRING        reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    K_BOOL          reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    K_WINDOW        reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    K_SHAPE         reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    K_TRIANGLE      reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    K_RECTANGLE     reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    K_CIRCLE        reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    K_TEXT          reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    $end            reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    K_EL            reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    K_EF            reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    K_END           reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)
    COMMA           reduce using rule 51 (boolean_factor -> unary_expression comparator unary_expression .)


state 103

    (39) unary_expression -> ID .
    (10) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (11) function_call_statement -> ID . LPAREN RPAREN

    AND             reduce using rule 39 (unary_expression -> ID .)
    RPAREN          reduce using rule 39 (unary_expression -> ID .)
    OR              reduce using rule 39 (unary_expression -> ID .)
    ID              reduce using rule 39 (unary_expression -> ID .)
    K_IF            reduce using rule 39 (unary_expression -> ID .)
    K_WHILE         reduce using rule 39 (unary_expression -> ID .)
    K_CONTINUE      reduce using rule 39 (unary_expression -> ID .)
    K_BREAK         reduce using rule 39 (unary_expression -> ID .)
    K_DONE          reduce using rule 39 (unary_expression -> ID .)
    K_LIST          reduce using rule 39 (unary_expression -> ID .)
    K_DICT          reduce using rule 39 (unary_expression -> ID .)
    K_SET           reduce using rule 39 (unary_expression -> ID .)
    K_INT           reduce using rule 39 (unary_expression -> ID .)
    K_DOUBLE        reduce using rule 39 (unary_expression -> ID .)
    K_STRING        reduce using rule 39 (unary_expression -> ID .)
    K_BOOL          reduce using rule 39 (unary_expression -> ID .)
    K_WINDOW        reduce using rule 39 (unary_expression -> ID .)
    K_SHAPE         reduce using rule 39 (unary_expression -> ID .)
    K_TRIANGLE      reduce using rule 39 (unary_expression -> ID .)
    K_RECTANGLE     reduce using rule 39 (unary_expression -> ID .)
    K_CIRCLE        reduce using rule 39 (unary_expression -> ID .)
    K_TEXT          reduce using rule 39 (unary_expression -> ID .)
    $end            reduce using rule 39 (unary_expression -> ID .)
    K_EL            reduce using rule 39 (unary_expression -> ID .)
    K_EF            reduce using rule 39 (unary_expression -> ID .)
    K_END           reduce using rule 39 (unary_expression -> ID .)
    COMMA           reduce using rule 39 (unary_expression -> ID .)
    LPAREN          shift and go to state 34


state 104

    (48) boolean_term -> boolean_term AND boolean_factor .

    AND             reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    RPAREN          reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    OR              reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    ID              reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    K_IF            reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    K_WHILE         reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    K_CONTINUE      reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    K_BREAK         reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    K_DONE          reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    K_LIST          reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    K_DICT          reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    K_SET           reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    K_INT           reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    K_DOUBLE        reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    K_STRING        reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    K_BOOL          reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    K_WINDOW        reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    K_SHAPE         reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    K_TRIANGLE      reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    K_RECTANGLE     reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    K_CIRCLE        reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    K_TEXT          reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    $end            reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    K_EL            reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    K_EF            reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    K_END           reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)
    COMMA           reduce using rule 48 (boolean_term -> boolean_term AND boolean_factor .)


state 105

    (67) arithmetic_term -> arithmetic_term MOD arithmetic_factor .

    TIMES           reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    DIVIDE          reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    MOD             reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    PLUS            reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    MINUS           reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    GT              reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    LT              reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    GEQ             reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    LEQ             reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    EQ              reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    NEQ             reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    RPAREN          reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    COMMA           reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    ID              reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_IF            reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_WHILE         reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_CONTINUE      reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_BREAK         reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_DONE          reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_LIST          reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_DICT          reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_SET           reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_INT           reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_DOUBLE        reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_STRING        reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_BOOL          reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_WINDOW        reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_SHAPE         reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_TRIANGLE      reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_RECTANGLE     reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_CIRCLE        reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_TEXT          reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    $end            reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_EL            reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_EF            reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    K_END           reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    AND             reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)
    OR              reduce using rule 67 (arithmetic_term -> arithmetic_term MOD arithmetic_factor .)


state 106

    (66) arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .

    TIMES           reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    DIVIDE          reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    MOD             reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    PLUS            reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    MINUS           reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    GT              reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    LT              reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    GEQ             reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    LEQ             reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    EQ              reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    NEQ             reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    RPAREN          reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    COMMA           reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    ID              reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_IF            reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_WHILE         reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_CONTINUE      reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_BREAK         reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_DONE          reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_LIST          reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_DICT          reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_SET           reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_INT           reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_DOUBLE        reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_STRING        reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_BOOL          reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_WINDOW        reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_SHAPE         reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_TRIANGLE      reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_RECTANGLE     reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_CIRCLE        reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_TEXT          reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    $end            reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_EL            reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_EF            reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    K_END           reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    AND             reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)
    OR              reduce using rule 66 (arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor .)


state 107

    (65) arithmetic_term -> arithmetic_term TIMES arithmetic_factor .

    TIMES           reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    DIVIDE          reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    MOD             reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    PLUS            reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    MINUS           reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    GT              reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    LT              reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    GEQ             reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    LEQ             reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    EQ              reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    NEQ             reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    RPAREN          reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    COMMA           reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    ID              reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_IF            reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_WHILE         reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_CONTINUE      reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_BREAK         reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_DONE          reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_LIST          reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_DICT          reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_SET           reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_INT           reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_DOUBLE        reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_STRING        reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_BOOL          reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_WINDOW        reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_SHAPE         reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_TRIANGLE      reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_RECTANGLE     reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_CIRCLE        reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_TEXT          reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    $end            reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_EL            reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_EF            reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    K_END           reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    AND             reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)
    OR              reduce using rule 65 (arithmetic_term -> arithmetic_term TIMES arithmetic_factor .)


state 108

    (69) arithmetic_factor -> LPAREN arithmetic_expression . RPAREN
    (62) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (63) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term

    RPAREN          shift and go to state 118
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85


state 109

    (52) boolean_factor -> arithmetic_expression comparator arithmetic_expression .
    (62) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_term
    (63) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_term

    AND             reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    RPAREN          reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    OR              reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    ID              reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_IF            reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_WHILE         reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_CONTINUE      reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_BREAK         reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_DONE          reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_LIST          reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_DICT          reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_SET           reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_INT           reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_DOUBLE        reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_STRING        reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_BOOL          reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_WINDOW        reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_SHAPE         reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_TRIANGLE      reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_RECTANGLE     reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_CIRCLE        reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_TEXT          reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    $end            reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_EL            reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_EF            reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    K_END           reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    COMMA           reduce using rule 52 (boolean_factor -> arithmetic_expression comparator arithmetic_expression .)
    PLUS            shift and go to state 84
    MINUS           shift and go to state 85


state 110

    (62) arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .
    (65) arithmetic_term -> arithmetic_term . TIMES arithmetic_factor
    (66) arithmetic_term -> arithmetic_term . DIVIDE arithmetic_factor
    (67) arithmetic_term -> arithmetic_term . MOD arithmetic_factor

    PLUS            reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    MINUS           reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    GT              reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    LT              reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    GEQ             reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    LEQ             reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    EQ              reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    NEQ             reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    RPAREN          reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    COMMA           reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    ID              reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_IF            reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_WHILE         reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_CONTINUE      reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_BREAK         reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_DONE          reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_LIST          reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_DICT          reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_SET           reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_INT           reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_DOUBLE        reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_STRING        reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_BOOL          reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_WINDOW        reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_SHAPE         reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_TRIANGLE      reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_RECTANGLE     reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_CIRCLE        reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_TEXT          reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    $end            reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_EL            reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_EF            reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    K_END           reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    AND             reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    OR              reduce using rule 62 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_term .)
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 75
    MOD             shift and go to state 74


state 111

    (63) arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .
    (65) arithmetic_term -> arithmetic_term . TIMES arithmetic_factor
    (66) arithmetic_term -> arithmetic_term . DIVIDE arithmetic_factor
    (67) arithmetic_term -> arithmetic_term . MOD arithmetic_factor

    PLUS            reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    MINUS           reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    GT              reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    LT              reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    GEQ             reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    LEQ             reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    EQ              reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    NEQ             reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    RPAREN          reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    COMMA           reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    ID              reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_IF            reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_WHILE         reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_CONTINUE      reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_BREAK         reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_DONE          reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_LIST          reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_DICT          reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_SET           reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_INT           reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_DOUBLE        reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_STRING        reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_BOOL          reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_WINDOW        reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_SHAPE         reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_TRIANGLE      reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_RECTANGLE     reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_CIRCLE        reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_TEXT          reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    $end            reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_EL            reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_EF            reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    K_END           reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    AND             reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    OR              reduce using rule 63 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_term .)
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 75
    MOD             shift and go to state 74


state 112

    (53) boolean_factor -> string_expression comparator string_expression .
    (35) string_expression -> string_expression . PLUS string_term

    AND             reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    RPAREN          reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    OR              reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    ID              reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    K_IF            reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    K_WHILE         reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    K_CONTINUE      reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    K_BREAK         reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    K_DONE          reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    K_LIST          reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    K_DICT          reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    K_SET           reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    K_INT           reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    K_DOUBLE        reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    K_STRING        reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    K_BOOL          reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    K_WINDOW        reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    K_SHAPE         reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    K_TRIANGLE      reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    K_RECTANGLE     reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    K_CIRCLE        reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    K_TEXT          reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    $end            reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    K_EL            reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    K_EF            reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    K_END           reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    COMMA           reduce using rule 53 (boolean_factor -> string_expression comparator string_expression .)
    PLUS            shift and go to state 87


state 113

    (36) string_expression -> STRING .

    PLUS            reduce using rule 36 (string_expression -> STRING .)
    AND             reduce using rule 36 (string_expression -> STRING .)
    RPAREN          reduce using rule 36 (string_expression -> STRING .)
    OR              reduce using rule 36 (string_expression -> STRING .)
    ID              reduce using rule 36 (string_expression -> STRING .)
    K_IF            reduce using rule 36 (string_expression -> STRING .)
    K_WHILE         reduce using rule 36 (string_expression -> STRING .)
    K_CONTINUE      reduce using rule 36 (string_expression -> STRING .)
    K_BREAK         reduce using rule 36 (string_expression -> STRING .)
    K_DONE          reduce using rule 36 (string_expression -> STRING .)
    K_LIST          reduce using rule 36 (string_expression -> STRING .)
    K_DICT          reduce using rule 36 (string_expression -> STRING .)
    K_SET           reduce using rule 36 (string_expression -> STRING .)
    K_INT           reduce using rule 36 (string_expression -> STRING .)
    K_DOUBLE        reduce using rule 36 (string_expression -> STRING .)
    K_STRING        reduce using rule 36 (string_expression -> STRING .)
    K_BOOL          reduce using rule 36 (string_expression -> STRING .)
    K_WINDOW        reduce using rule 36 (string_expression -> STRING .)
    K_SHAPE         reduce using rule 36 (string_expression -> STRING .)
    K_TRIANGLE      reduce using rule 36 (string_expression -> STRING .)
    K_RECTANGLE     reduce using rule 36 (string_expression -> STRING .)
    K_CIRCLE        reduce using rule 36 (string_expression -> STRING .)
    K_TEXT          reduce using rule 36 (string_expression -> STRING .)
    $end            reduce using rule 36 (string_expression -> STRING .)
    K_EL            reduce using rule 36 (string_expression -> STRING .)
    K_EF            reduce using rule 36 (string_expression -> STRING .)
    K_END           reduce using rule 36 (string_expression -> STRING .)
    COMMA           reduce using rule 36 (string_expression -> STRING .)


state 114

    (38) string_term -> STRING .

    PLUS            reduce using rule 38 (string_term -> STRING .)
    GT              reduce using rule 38 (string_term -> STRING .)
    LT              reduce using rule 38 (string_term -> STRING .)
    GEQ             reduce using rule 38 (string_term -> STRING .)
    LEQ             reduce using rule 38 (string_term -> STRING .)
    EQ              reduce using rule 38 (string_term -> STRING .)
    NEQ             reduce using rule 38 (string_term -> STRING .)
    ID              reduce using rule 38 (string_term -> STRING .)
    K_IF            reduce using rule 38 (string_term -> STRING .)
    K_WHILE         reduce using rule 38 (string_term -> STRING .)
    K_CONTINUE      reduce using rule 38 (string_term -> STRING .)
    K_BREAK         reduce using rule 38 (string_term -> STRING .)
    K_DONE          reduce using rule 38 (string_term -> STRING .)
    K_LIST          reduce using rule 38 (string_term -> STRING .)
    K_DICT          reduce using rule 38 (string_term -> STRING .)
    K_SET           reduce using rule 38 (string_term -> STRING .)
    K_INT           reduce using rule 38 (string_term -> STRING .)
    K_DOUBLE        reduce using rule 38 (string_term -> STRING .)
    K_STRING        reduce using rule 38 (string_term -> STRING .)
    K_BOOL          reduce using rule 38 (string_term -> STRING .)
    K_WINDOW        reduce using rule 38 (string_term -> STRING .)
    K_SHAPE         reduce using rule 38 (string_term -> STRING .)
    K_TRIANGLE      reduce using rule 38 (string_term -> STRING .)
    K_RECTANGLE     reduce using rule 38 (string_term -> STRING .)
    K_CIRCLE        reduce using rule 38 (string_term -> STRING .)
    K_TEXT          reduce using rule 38 (string_term -> STRING .)
    $end            reduce using rule 38 (string_term -> STRING .)
    K_EL            reduce using rule 38 (string_term -> STRING .)
    K_EF            reduce using rule 38 (string_term -> STRING .)
    K_END           reduce using rule 38 (string_term -> STRING .)
    RPAREN          reduce using rule 38 (string_term -> STRING .)
    COMMA           reduce using rule 38 (string_term -> STRING .)
    AND             reduce using rule 38 (string_term -> STRING .)
    OR              reduce using rule 38 (string_term -> STRING .)


state 115

    (37) string_term -> function_call_statement .

    PLUS            reduce using rule 37 (string_term -> function_call_statement .)
    GT              reduce using rule 37 (string_term -> function_call_statement .)
    LT              reduce using rule 37 (string_term -> function_call_statement .)
    GEQ             reduce using rule 37 (string_term -> function_call_statement .)
    LEQ             reduce using rule 37 (string_term -> function_call_statement .)
    EQ              reduce using rule 37 (string_term -> function_call_statement .)
    NEQ             reduce using rule 37 (string_term -> function_call_statement .)
    ID              reduce using rule 37 (string_term -> function_call_statement .)
    K_IF            reduce using rule 37 (string_term -> function_call_statement .)
    K_WHILE         reduce using rule 37 (string_term -> function_call_statement .)
    K_CONTINUE      reduce using rule 37 (string_term -> function_call_statement .)
    K_BREAK         reduce using rule 37 (string_term -> function_call_statement .)
    K_DONE          reduce using rule 37 (string_term -> function_call_statement .)
    K_LIST          reduce using rule 37 (string_term -> function_call_statement .)
    K_DICT          reduce using rule 37 (string_term -> function_call_statement .)
    K_SET           reduce using rule 37 (string_term -> function_call_statement .)
    K_INT           reduce using rule 37 (string_term -> function_call_statement .)
    K_DOUBLE        reduce using rule 37 (string_term -> function_call_statement .)
    K_STRING        reduce using rule 37 (string_term -> function_call_statement .)
    K_BOOL          reduce using rule 37 (string_term -> function_call_statement .)
    K_WINDOW        reduce using rule 37 (string_term -> function_call_statement .)
    K_SHAPE         reduce using rule 37 (string_term -> function_call_statement .)
    K_TRIANGLE      reduce using rule 37 (string_term -> function_call_statement .)
    K_RECTANGLE     reduce using rule 37 (string_term -> function_call_statement .)
    K_CIRCLE        reduce using rule 37 (string_term -> function_call_statement .)
    K_TEXT          reduce using rule 37 (string_term -> function_call_statement .)
    $end            reduce using rule 37 (string_term -> function_call_statement .)
    K_EL            reduce using rule 37 (string_term -> function_call_statement .)
    K_EF            reduce using rule 37 (string_term -> function_call_statement .)
    K_END           reduce using rule 37 (string_term -> function_call_statement .)
    RPAREN          reduce using rule 37 (string_term -> function_call_statement .)
    COMMA           reduce using rule 37 (string_term -> function_call_statement .)
    AND             reduce using rule 37 (string_term -> function_call_statement .)
    OR              reduce using rule 37 (string_term -> function_call_statement .)


state 116

    (35) string_expression -> string_expression PLUS string_term .

    PLUS            reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    GT              reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    LT              reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    GEQ             reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    LEQ             reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    EQ              reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    NEQ             reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    ID              reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    K_IF            reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    K_WHILE         reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    K_CONTINUE      reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    K_BREAK         reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    K_DONE          reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    K_LIST          reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    K_DICT          reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    K_SET           reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    K_INT           reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    K_DOUBLE        reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    K_STRING        reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    K_BOOL          reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    K_WINDOW        reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    K_SHAPE         reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    K_TRIANGLE      reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    K_RECTANGLE     reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    K_CIRCLE        reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    K_TEXT          reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    $end            reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    K_EL            reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    K_EF            reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    K_END           reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    RPAREN          reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    COMMA           reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    AND             reduce using rule 35 (string_expression -> string_expression PLUS string_term .)
    OR              reduce using rule 35 (string_expression -> string_expression PLUS string_term .)


state 117

    (10) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (11) function_call_statement -> ID . LPAREN RPAREN

    LPAREN          shift and go to state 34


state 118

    (69) arithmetic_factor -> LPAREN arithmetic_expression RPAREN .

    TIMES           reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    DIVIDE          reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    MOD             reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    RPAREN          reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    PLUS            reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    MINUS           reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    GT              reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    LT              reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    GEQ             reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    LEQ             reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    EQ              reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    NEQ             reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    ID              reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_IF            reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_WHILE         reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_CONTINUE      reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_BREAK         reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_DONE          reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_LIST          reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_DICT          reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_SET           reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_INT           reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_DOUBLE        reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_STRING        reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_BOOL          reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_WINDOW        reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_SHAPE         reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_TRIANGLE      reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_RECTANGLE     reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_CIRCLE        reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_TEXT          reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    $end            reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_EL            reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_EF            reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    K_END           reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    COMMA           reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    AND             reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)
    OR              reduce using rule 69 (arithmetic_factor -> LPAREN arithmetic_expression RPAREN .)


state 119

    (50) boolean_factor -> LPAREN boolean_expression RPAREN .

    AND             reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    RPAREN          reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    OR              reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    ID              reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_IF            reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_WHILE         reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_CONTINUE      reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_BREAK         reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_DONE          reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_LIST          reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_DICT          reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_SET           reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_INT           reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_DOUBLE        reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_STRING        reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_BOOL          reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_WINDOW        reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_SHAPE         reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_TRIANGLE      reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_RECTANGLE     reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_CIRCLE        reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_TEXT          reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    $end            reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_EL            reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_EF            reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    K_END           reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)
    COMMA           reduce using rule 50 (boolean_factor -> LPAREN boolean_expression RPAREN .)


state 120

    (76) selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list . else_if_statement_list else_statement K_END
    (83) compound_statement_list -> compound_statement_list . compound_statement
    (77) else_if_statement_list -> .
    (78) else_if_statement_list -> . else_if_statement_list else_if_statement
    (5) compound_statement -> . function_call_statement
    (6) compound_statement -> . variable_declaration
    (7) compound_statement -> . selection_statement
    (8) compound_statement -> . iteration_statement
    (9) compound_statement -> . jump_statement
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN
    (14) variable_declaration -> . pre_type_modifier type ID
    (15) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (16) variable_declaration -> . ID ASSIGN expression
    (76) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (84) iteration_statement -> . K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END
    (85) jump_statement -> . K_CONTINUE
    (86) jump_statement -> . K_BREAK
    (87) jump_statement -> . K_DONE
    (17) pre_type_modifier -> .
    (18) pre_type_modifier -> . K_LIST
    (19) pre_type_modifier -> . K_DICT
    (20) pre_type_modifier -> . K_SET

    K_EL            reduce using rule 77 (else_if_statement_list -> .)
    K_EF            reduce using rule 77 (else_if_statement_list -> .)
    K_END           reduce using rule 77 (else_if_statement_list -> .)
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 19
    K_INT           reduce using rule 17 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 17 (pre_type_modifier -> .)
    K_STRING        reduce using rule 17 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 17 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 17 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 17 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 17 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 17 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 17 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 17 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 3

    jump_statement                 shift and go to state 17
    selection_statement            shift and go to state 9
    compound_statement             shift and go to state 125
    function_call_statement        shift and go to state 18
    pre_type_modifier              shift and go to state 14
    iteration_statement            shift and go to state 5
    variable_declaration           shift and go to state 6
    else_if_statement_list         shift and go to state 126

state 121

    (46) boolean_expression -> boolean_expression OR boolean_term .
    (48) boolean_term -> boolean_term . AND boolean_factor

    RPAREN          reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    OR              reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    ID              reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    K_IF            reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    K_WHILE         reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    K_CONTINUE      reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    K_BREAK         reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    K_DONE          reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    K_LIST          reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    K_DICT          reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    K_SET           reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    K_INT           reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    K_DOUBLE        reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    K_STRING        reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    K_BOOL          reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    K_WINDOW        reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    K_SHAPE         reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    K_TRIANGLE      reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    K_RECTANGLE     reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    K_CIRCLE        reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    K_TEXT          reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    $end            reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    K_EL            reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    K_EF            reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    K_END           reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    COMMA           reduce using rule 46 (boolean_expression -> boolean_expression OR boolean_term .)
    AND             shift and go to state 73


state 122

    (84) iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list . K_END
    (83) compound_statement_list -> compound_statement_list . compound_statement
    (5) compound_statement -> . function_call_statement
    (6) compound_statement -> . variable_declaration
    (7) compound_statement -> . selection_statement
    (8) compound_statement -> . iteration_statement
    (9) compound_statement -> . jump_statement
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN
    (14) variable_declaration -> . pre_type_modifier type ID
    (15) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (16) variable_declaration -> . ID ASSIGN expression
    (76) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (84) iteration_statement -> . K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END
    (85) jump_statement -> . K_CONTINUE
    (86) jump_statement -> . K_BREAK
    (87) jump_statement -> . K_DONE
    (17) pre_type_modifier -> .
    (18) pre_type_modifier -> . K_LIST
    (19) pre_type_modifier -> . K_DICT
    (20) pre_type_modifier -> . K_SET

    K_END           shift and go to state 127
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 19
    K_INT           reduce using rule 17 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 17 (pre_type_modifier -> .)
    K_STRING        reduce using rule 17 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 17 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 17 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 17 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 17 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 17 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 17 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 17 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 3

    jump_statement                 shift and go to state 17
    compound_statement             shift and go to state 125
    selection_statement            shift and go to state 9
    function_call_statement        shift and go to state 18
    pre_type_modifier              shift and go to state 14
    iteration_statement            shift and go to state 5
    variable_declaration           shift and go to state 6

state 123

    (15) variable_declaration -> pre_type_modifier type ID ASSIGN expression .

    ID              reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_IF            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_WHILE         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_CONTINUE      reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_BREAK         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_DONE          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_LIST          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_DICT          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_SET           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_INT           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_DOUBLE        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_STRING        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_BOOL          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_WINDOW        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_SHAPE         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_TRIANGLE      reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_RECTANGLE     reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_CIRCLE        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_TEXT          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_END           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    $end            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_EL            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_EF            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)


state 124

    (12) parameter_list -> parameter_list COMMA expression .

    RPAREN          reduce using rule 12 (parameter_list -> parameter_list COMMA expression .)
    COMMA           reduce using rule 12 (parameter_list -> parameter_list COMMA expression .)


state 125

    (83) compound_statement_list -> compound_statement_list compound_statement .

    ID              reduce using rule 83 (compound_statement_list -> compound_statement_list compound_statement .)
    K_IF            reduce using rule 83 (compound_statement_list -> compound_statement_list compound_statement .)
    K_WHILE         reduce using rule 83 (compound_statement_list -> compound_statement_list compound_statement .)
    K_CONTINUE      reduce using rule 83 (compound_statement_list -> compound_statement_list compound_statement .)
    K_BREAK         reduce using rule 83 (compound_statement_list -> compound_statement_list compound_statement .)
    K_DONE          reduce using rule 83 (compound_statement_list -> compound_statement_list compound_statement .)
    K_LIST          reduce using rule 83 (compound_statement_list -> compound_statement_list compound_statement .)
    K_DICT          reduce using rule 83 (compound_statement_list -> compound_statement_list compound_statement .)
    K_SET           reduce using rule 83 (compound_statement_list -> compound_statement_list compound_statement .)
    K_EL            reduce using rule 83 (compound_statement_list -> compound_statement_list compound_statement .)
    K_EF            reduce using rule 83 (compound_statement_list -> compound_statement_list compound_statement .)
    K_END           reduce using rule 83 (compound_statement_list -> compound_statement_list compound_statement .)
    K_INT           reduce using rule 83 (compound_statement_list -> compound_statement_list compound_statement .)
    K_DOUBLE        reduce using rule 83 (compound_statement_list -> compound_statement_list compound_statement .)
    K_STRING        reduce using rule 83 (compound_statement_list -> compound_statement_list compound_statement .)
    K_BOOL          reduce using rule 83 (compound_statement_list -> compound_statement_list compound_statement .)
    K_WINDOW        reduce using rule 83 (compound_statement_list -> compound_statement_list compound_statement .)
    K_SHAPE         reduce using rule 83 (compound_statement_list -> compound_statement_list compound_statement .)
    K_TRIANGLE      reduce using rule 83 (compound_statement_list -> compound_statement_list compound_statement .)
    K_RECTANGLE     reduce using rule 83 (compound_statement_list -> compound_statement_list compound_statement .)
    K_CIRCLE        reduce using rule 83 (compound_statement_list -> compound_statement_list compound_statement .)
    K_TEXT          reduce using rule 83 (compound_statement_list -> compound_statement_list compound_statement .)


state 126

    (76) selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list . else_statement K_END
    (78) else_if_statement_list -> else_if_statement_list . else_if_statement
    (80) else_statement -> .
    (81) else_statement -> . K_EL compound_statement_list
    (79) else_if_statement -> . K_EF LPAREN boolean_expression RPAREN compound_statement_list

    K_END           reduce using rule 80 (else_statement -> .)
    K_EL            shift and go to state 129
    K_EF            shift and go to state 131

    else_statement                 shift and go to state 128
    else_if_statement              shift and go to state 130

state 127

    (84) iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .

    ID              reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_IF            reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_WHILE         reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_CONTINUE      reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_BREAK         reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_DONE          reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_LIST          reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_DICT          reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_SET           reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_INT           reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_DOUBLE        reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_STRING        reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_BOOL          reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_WINDOW        reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_SHAPE         reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_TRIANGLE      reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_RECTANGLE     reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_CIRCLE        reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_TEXT          reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    $end            reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_END           reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_EL            reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)
    K_EF            reduce using rule 84 (iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END .)


state 128

    (76) selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement . K_END

    K_END           shift and go to state 132


state 129

    (81) else_statement -> K_EL . compound_statement_list
    (82) compound_statement_list -> .
    (83) compound_statement_list -> . compound_statement_list compound_statement

    ID              reduce using rule 82 (compound_statement_list -> .)
    K_IF            reduce using rule 82 (compound_statement_list -> .)
    K_WHILE         reduce using rule 82 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 82 (compound_statement_list -> .)
    K_BREAK         reduce using rule 82 (compound_statement_list -> .)
    K_DONE          reduce using rule 82 (compound_statement_list -> .)
    K_LIST          reduce using rule 82 (compound_statement_list -> .)
    K_DICT          reduce using rule 82 (compound_statement_list -> .)
    K_SET           reduce using rule 82 (compound_statement_list -> .)
    K_INT           reduce using rule 82 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 82 (compound_statement_list -> .)
    K_STRING        reduce using rule 82 (compound_statement_list -> .)
    K_BOOL          reduce using rule 82 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 82 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 82 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 82 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 82 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 82 (compound_statement_list -> .)
    K_TEXT          reduce using rule 82 (compound_statement_list -> .)
    K_END           reduce using rule 82 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 133

state 130

    (78) else_if_statement_list -> else_if_statement_list else_if_statement .

    K_EL            reduce using rule 78 (else_if_statement_list -> else_if_statement_list else_if_statement .)
    K_EF            reduce using rule 78 (else_if_statement_list -> else_if_statement_list else_if_statement .)
    K_END           reduce using rule 78 (else_if_statement_list -> else_if_statement_list else_if_statement .)


state 131

    (79) else_if_statement -> K_EF . LPAREN boolean_expression RPAREN compound_statement_list

    LPAREN          shift and go to state 134


state 132

    (76) selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .

    ID              reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_IF            reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_WHILE         reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_CONTINUE      reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_BREAK         reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_DONE          reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_LIST          reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_DICT          reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_SET           reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_EL            reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_EF            reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_END           reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_INT           reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_DOUBLE        reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_STRING        reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_BOOL          reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_WINDOW        reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_SHAPE         reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_TRIANGLE      reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_RECTANGLE     reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_CIRCLE        reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_TEXT          reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    $end            reduce using rule 76 (selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)


state 133

    (81) else_statement -> K_EL compound_statement_list .
    (83) compound_statement_list -> compound_statement_list . compound_statement
    (5) compound_statement -> . function_call_statement
    (6) compound_statement -> . variable_declaration
    (7) compound_statement -> . selection_statement
    (8) compound_statement -> . iteration_statement
    (9) compound_statement -> . jump_statement
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN
    (14) variable_declaration -> . pre_type_modifier type ID
    (15) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (16) variable_declaration -> . ID ASSIGN expression
    (76) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (84) iteration_statement -> . K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END
    (85) jump_statement -> . K_CONTINUE
    (86) jump_statement -> . K_BREAK
    (87) jump_statement -> . K_DONE
    (17) pre_type_modifier -> .
    (18) pre_type_modifier -> . K_LIST
    (19) pre_type_modifier -> . K_DICT
    (20) pre_type_modifier -> . K_SET

    K_END           reduce using rule 81 (else_statement -> K_EL compound_statement_list .)
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 19
    K_INT           reduce using rule 17 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 17 (pre_type_modifier -> .)
    K_STRING        reduce using rule 17 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 17 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 17 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 17 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 17 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 17 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 17 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 17 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 3

    jump_statement                 shift and go to state 17
    compound_statement             shift and go to state 125
    selection_statement            shift and go to state 9
    function_call_statement        shift and go to state 18
    pre_type_modifier              shift and go to state 14
    iteration_statement            shift and go to state 5
    variable_declaration           shift and go to state 6

state 134

    (79) else_if_statement -> K_EF LPAREN . boolean_expression RPAREN compound_statement_list
    (46) boolean_expression -> . boolean_expression OR boolean_term
    (47) boolean_expression -> . boolean_term
    (48) boolean_term -> . boolean_term AND boolean_factor
    (49) boolean_term -> . boolean_factor
    (50) boolean_factor -> . LPAREN boolean_expression RPAREN
    (51) boolean_factor -> . unary_expression comparator unary_expression
    (52) boolean_factor -> . arithmetic_expression comparator arithmetic_expression
    (53) boolean_factor -> . string_expression comparator string_expression
    (54) boolean_factor -> . unary_expression
    (55) boolean_factor -> . NEG boolean_factor
    (39) unary_expression -> . ID
    (40) unary_expression -> . STRING
    (41) unary_expression -> . INTEGER
    (42) unary_expression -> . function_call_statement
    (43) unary_expression -> . DOUBLE
    (44) unary_expression -> . K_TRUE
    (45) unary_expression -> . K_FALSE
    (62) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_term
    (63) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_term
    (64) arithmetic_expression -> . arithmetic_term
    (35) string_expression -> . string_expression PLUS string_term
    (36) string_expression -> . STRING
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN
    (65) arithmetic_term -> . arithmetic_term TIMES arithmetic_factor
    (66) arithmetic_term -> . arithmetic_term DIVIDE arithmetic_factor
    (67) arithmetic_term -> . arithmetic_term MOD arithmetic_factor
    (68) arithmetic_term -> . arithmetic_factor
    (69) arithmetic_factor -> . LPAREN arithmetic_expression RPAREN
    (70) arithmetic_factor -> . number
    (71) arithmetic_factor -> . ID
    (72) arithmetic_factor -> . function_call_statement
    (73) arithmetic_factor -> . MINUS arithmetic_factor
    (74) number -> . INTEGER
    (75) number -> . DOUBLE

    LPAREN          shift and go to state 46
    NEG             shift and go to state 36
    ID              shift and go to state 49
    STRING          shift and go to state 45
    INTEGER         shift and go to state 42
    DOUBLE          shift and go to state 51
    K_TRUE          shift and go to state 38
    K_FALSE         shift and go to state 53
    MINUS           shift and go to state 40

    arithmetic_expression          shift and go to state 43
    string_expression              shift and go to state 44
    unary_expression               shift and go to state 35
    boolean_expression             shift and go to state 135
    arithmetic_factor              shift and go to state 41
    boolean_term                   shift and go to state 37
    function_call_statement        shift and go to state 52
    number                         shift and go to state 48
    arithmetic_term                shift and go to state 39
    boolean_factor                 shift and go to state 47

state 135

    (79) else_if_statement -> K_EF LPAREN boolean_expression . RPAREN compound_statement_list
    (46) boolean_expression -> boolean_expression . OR boolean_term

    RPAREN          shift and go to state 136
    OR              shift and go to state 93


state 136

    (79) else_if_statement -> K_EF LPAREN boolean_expression RPAREN . compound_statement_list
    (82) compound_statement_list -> .
    (83) compound_statement_list -> . compound_statement_list compound_statement

    ID              reduce using rule 82 (compound_statement_list -> .)
    K_IF            reduce using rule 82 (compound_statement_list -> .)
    K_WHILE         reduce using rule 82 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 82 (compound_statement_list -> .)
    K_BREAK         reduce using rule 82 (compound_statement_list -> .)
    K_DONE          reduce using rule 82 (compound_statement_list -> .)
    K_LIST          reduce using rule 82 (compound_statement_list -> .)
    K_DICT          reduce using rule 82 (compound_statement_list -> .)
    K_SET           reduce using rule 82 (compound_statement_list -> .)
    K_INT           reduce using rule 82 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 82 (compound_statement_list -> .)
    K_STRING        reduce using rule 82 (compound_statement_list -> .)
    K_BOOL          reduce using rule 82 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 82 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 82 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 82 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 82 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 82 (compound_statement_list -> .)
    K_TEXT          reduce using rule 82 (compound_statement_list -> .)
    K_EL            reduce using rule 82 (compound_statement_list -> .)
    K_EF            reduce using rule 82 (compound_statement_list -> .)
    K_END           reduce using rule 82 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 137

state 137

    (79) else_if_statement -> K_EF LPAREN boolean_expression RPAREN compound_statement_list .
    (83) compound_statement_list -> compound_statement_list . compound_statement
    (5) compound_statement -> . function_call_statement
    (6) compound_statement -> . variable_declaration
    (7) compound_statement -> . selection_statement
    (8) compound_statement -> . iteration_statement
    (9) compound_statement -> . jump_statement
    (10) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (11) function_call_statement -> . ID LPAREN RPAREN
    (14) variable_declaration -> . pre_type_modifier type ID
    (15) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (16) variable_declaration -> . ID ASSIGN expression
    (76) selection_statement -> . K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (84) iteration_statement -> . K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END
    (85) jump_statement -> . K_CONTINUE
    (86) jump_statement -> . K_BREAK
    (87) jump_statement -> . K_DONE
    (17) pre_type_modifier -> .
    (18) pre_type_modifier -> . K_LIST
    (19) pre_type_modifier -> . K_DICT
    (20) pre_type_modifier -> . K_SET

    K_EL            reduce using rule 79 (else_if_statement -> K_EF LPAREN boolean_expression RPAREN compound_statement_list .)
    K_EF            reduce using rule 79 (else_if_statement -> K_EF LPAREN boolean_expression RPAREN compound_statement_list .)
    K_END           reduce using rule 79 (else_if_statement -> K_EF LPAREN boolean_expression RPAREN compound_statement_list .)
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 19
    K_INT           reduce using rule 17 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 17 (pre_type_modifier -> .)
    K_STRING        reduce using rule 17 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 17 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 17 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 17 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 17 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 17 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 17 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 17 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 3

    jump_statement                 shift and go to state 17
    compound_statement             shift and go to state 125
    selection_statement            shift and go to state 9
    function_call_statement        shift and go to state 18
    pre_type_modifier              shift and go to state 14
    iteration_statement            shift and go to state 5
    variable_declaration           shift and go to state 6
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 42 resolved using rule (unary_expression -> INTEGER)
WARNING: rejected rule (number -> INTEGER) in state 42
WARNING: reduce/reduce conflict in state 45 resolved using rule (string_expression -> STRING)
WARNING: rejected rule (unary_expression -> STRING) in state 45
WARNING: reduce/reduce conflict in state 49 resolved using rule (unary_expression -> ID)
WARNING: rejected rule (arithmetic_factor -> ID) in state 49
WARNING: reduce/reduce conflict in state 51 resolved using rule (unary_expression -> DOUBLE)
WARNING: rejected rule (number -> DOUBLE) in state 51
WARNING: reduce/reduce conflict in state 52 resolved using rule (unary_expression -> function_call_statement)
WARNING: rejected rule (arithmetic_factor -> function_call_statement) in state 52
WARNING: reduce/reduce conflict in state 56 resolved using rule (expression -> unary_expression)
WARNING: rejected rule (boolean_factor -> unary_expression) in state 56
WARNING: reduce/reduce conflict in state 59 resolved using rule (string_expression -> STRING)
WARNING: rejected rule (unary_expression -> STRING) in state 59
WARNING: reduce/reduce conflict in state 88 resolved using rule (unary_expression -> function_call_statement)
WARNING: rejected rule (arithmetic_factor -> function_call_statement) in state 88
WARNING: reduce/reduce conflict in state 90 resolved using rule (unary_expression -> ID)
WARNING: rejected rule (arithmetic_factor -> ID) in state 90
