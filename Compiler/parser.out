Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    NEG
    K_NULL
    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> <empty>
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> function_declaration
Rule 5     statement -> compound_statement
Rule 6     compound_statement -> function_call_statement
Rule 7     compound_statement -> variable_declaration
Rule 8     compound_statement -> selection_statement
Rule 9     compound_statement -> iteration_statement
Rule 10    compound_statement -> jump_statement
Rule 11    function_call_statement -> ID LPAREN parameter_list RPAREN
Rule 12    function_call_statement -> ID LPAREN RPAREN
Rule 13    parameter_list -> parameter_list COMMA expression
Rule 14    parameter_list -> expression
Rule 15    variable_declaration -> pre_type_modifier type ID
Rule 16    variable_declaration -> pre_type_modifier type ID ASSIGN expression
Rule 17    variable_declaration -> ID ASSIGN expression
Rule 18    pre_type_modifier -> <empty>
Rule 19    pre_type_modifier -> K_LIST
Rule 20    pre_type_modifier -> K_DICT
Rule 21    pre_type_modifier -> K_SET
Rule 22    type -> K_INT
Rule 23    type -> K_DOUBLE
Rule 24    type -> K_STRING
Rule 25    type -> K_BOOL
Rule 26    type -> K_WINDOW
Rule 27    type -> K_SHAPE
Rule 28    type -> K_TRIANGLE
Rule 29    type -> K_RECTANGLE
Rule 30    type -> K_CIRCLE
Rule 31    type -> K_POINT
Rule 32    type -> K_TEXT
Rule 33    expression -> expression op expression_term
Rule 34    expression -> expression_term
Rule 35    expression_term -> expression_term op primary_expression
Rule 36    expression_term -> primary_expression
Rule 37    op -> PLUS
Rule 38    op -> MINUS
Rule 39    op -> TIMES
Rule 40    op -> DIVIDE
Rule 41    op -> MOD
Rule 42    op -> comparator
Rule 43    op -> boolean_operator
Rule 44    boolean_operator -> AND
Rule 45    boolean_operator -> OR
Rule 46    primary_expression -> constant
Rule 47    primary_expression -> ID
Rule 48    primary_expression -> function_call_statement
Rule 49    primary_expression -> LPAREN expression RPAREN
Rule 50    constant -> boolean_constant
Rule 51    constant -> number
Rule 52    constant -> STRING
Rule 53    boolean_constant -> K_TRUE
Rule 54    boolean_constant -> K_FALSE
Rule 55    unary_expression -> primary_expression
Rule 56    comparator -> GT
Rule 57    comparator -> LT
Rule 58    comparator -> GEQ
Rule 59    comparator -> LEQ
Rule 60    comparator -> EQ
Rule 61    comparator -> NEQ
Rule 62    number -> INTEGER
Rule 63    number -> DOUBLE
Rule 64    selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
Rule 65    else_if_statement_list -> <empty>
Rule 66    else_if_statement_list -> else_if_statement_list else_if_statement
Rule 67    else_if_statement -> K_EF LPAREN expression RPAREN compound_statement_list
Rule 68    else_statement -> <empty>
Rule 69    else_statement -> K_EL compound_statement_list
Rule 70    compound_statement_list -> <empty>
Rule 71    compound_statement_list -> compound_statement_list compound_statement
Rule 72    iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END
Rule 73    jump_statement -> K_CONTINUE
Rule 74    jump_statement -> K_BREAK
Rule 75    jump_statement -> K_DONE
Rule 76    function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END
Rule 77    function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END
Rule 78    argument_list -> argument_list COMMA argument
Rule 79    argument_list -> argument
Rule 80    argument -> pre_type_modifier type ID

Terminals, with rules where they appear

AND                  : 44
ASSIGN               : 16 17 76 77
COMMA                : 13 78
COMMENT              : 
DIVIDE               : 40
DOUBLE               : 63
EQ                   : 60
GEQ                  : 58
GT                   : 56
ID                   : 11 12 15 16 17 47 76 77 80
INTEGER              : 62
K_BOOL               : 25
K_BREAK              : 74
K_CIRCLE             : 30
K_CONTINUE           : 73
K_DICT               : 20
K_DONE               : 75
K_DOUBLE             : 23
K_EF                 : 67
K_EL                 : 69
K_END                : 64 72 76 77
K_FALSE              : 54
K_IF                 : 64
K_INT                : 22
K_LIST               : 19
K_NULL               : 
K_POINT              : 31
K_RECTANGLE          : 29
K_SET                : 21
K_SHAPE              : 27
K_STRING             : 24
K_TEXT               : 32
K_TRIANGLE           : 28
K_TRUE               : 53
K_WHILE              : 72
K_WINDOW             : 26
LEQ                  : 59
LPAREN               : 11 12 49 64 67 72 76 77
LT                   : 57
MINUS                : 38
MOD                  : 41
NEG                  : 
NEQ                  : 61
OR                   : 45
PLUS                 : 37
RPAREN               : 11 12 49 64 67 72 76 77
STRING               : 52
TIMES                : 39
error                : 

Nonterminals, with rules where they appear

argument             : 78 79
argument_list        : 76 78
boolean_constant     : 50
boolean_operator     : 43
comparator           : 42
compound_statement   : 5 71
compound_statement_list : 64 67 69 71 72 76 77
constant             : 46
else_if_statement    : 66
else_if_statement_list : 64 66
else_statement       : 64
expression           : 13 14 16 17 33 49 64 67 72
expression_term      : 33 34 35
function_call_statement : 6 48
function_declaration : 4
iteration_statement  : 9
jump_statement       : 10
number               : 51
op                   : 33 35
parameter_list       : 11 13
pre_type_modifier    : 15 16 76 77 80
primary_expression   : 35 36 55
program              : 0
selection_statement  : 8
statement            : 3
statement_list       : 1 3
type                 : 15 16 76 77 80
unary_expression     : 76 77
variable_declaration : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> .
    (3) statement_list -> . statement_list statement

    K_LIST          reduce using rule 2 (statement_list -> .)
    K_DICT          reduce using rule 2 (statement_list -> .)
    K_SET           reduce using rule 2 (statement_list -> .)
    ID              reduce using rule 2 (statement_list -> .)
    K_IF            reduce using rule 2 (statement_list -> .)
    K_WHILE         reduce using rule 2 (statement_list -> .)
    K_CONTINUE      reduce using rule 2 (statement_list -> .)
    K_BREAK         reduce using rule 2 (statement_list -> .)
    K_DONE          reduce using rule 2 (statement_list -> .)
    K_INT           reduce using rule 2 (statement_list -> .)
    K_DOUBLE        reduce using rule 2 (statement_list -> .)
    K_STRING        reduce using rule 2 (statement_list -> .)
    K_BOOL          reduce using rule 2 (statement_list -> .)
    K_WINDOW        reduce using rule 2 (statement_list -> .)
    K_SHAPE         reduce using rule 2 (statement_list -> .)
    K_TRIANGLE      reduce using rule 2 (statement_list -> .)
    K_RECTANGLE     reduce using rule 2 (statement_list -> .)
    K_CIRCLE        reduce using rule 2 (statement_list -> .)
    K_POINT         reduce using rule 2 (statement_list -> .)
    K_TEXT          reduce using rule 2 (statement_list -> .)
    $end            reduce using rule 2 (statement_list -> .)

    statement_list                 shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . function_declaration
    (5) statement -> . compound_statement
    (76) function_declaration -> . pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END
    (77) function_declaration -> . pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (64) selection_statement -> . K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (72) iteration_statement -> . K_WHILE LPAREN expression RPAREN compound_statement_list K_END
    (73) jump_statement -> . K_CONTINUE
    (74) jump_statement -> . K_BREAK
    (75) jump_statement -> . K_DONE

    $end            reduce using rule 1 (program -> statement_list .)
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 20

    jump_statement                 shift and go to state 17
    function_declaration           shift and go to state 18
    compound_statement             shift and go to state 8
    iteration_statement            shift and go to state 5
    selection_statement            shift and go to state 3
    function_call_statement        shift and go to state 19
    statement                      shift and go to state 10
    pre_type_modifier              shift and go to state 14
    variable_declaration           shift and go to state 6

state 2

    (0) S' -> program .



state 3

    (8) compound_statement -> selection_statement .

    ID              reduce using rule 8 (compound_statement -> selection_statement .)
    K_IF            reduce using rule 8 (compound_statement -> selection_statement .)
    K_WHILE         reduce using rule 8 (compound_statement -> selection_statement .)
    K_CONTINUE      reduce using rule 8 (compound_statement -> selection_statement .)
    K_BREAK         reduce using rule 8 (compound_statement -> selection_statement .)
    K_DONE          reduce using rule 8 (compound_statement -> selection_statement .)
    K_LIST          reduce using rule 8 (compound_statement -> selection_statement .)
    K_DICT          reduce using rule 8 (compound_statement -> selection_statement .)
    K_SET           reduce using rule 8 (compound_statement -> selection_statement .)
    K_INT           reduce using rule 8 (compound_statement -> selection_statement .)
    K_DOUBLE        reduce using rule 8 (compound_statement -> selection_statement .)
    K_STRING        reduce using rule 8 (compound_statement -> selection_statement .)
    K_BOOL          reduce using rule 8 (compound_statement -> selection_statement .)
    K_WINDOW        reduce using rule 8 (compound_statement -> selection_statement .)
    K_SHAPE         reduce using rule 8 (compound_statement -> selection_statement .)
    K_TRIANGLE      reduce using rule 8 (compound_statement -> selection_statement .)
    K_RECTANGLE     reduce using rule 8 (compound_statement -> selection_statement .)
    K_CIRCLE        reduce using rule 8 (compound_statement -> selection_statement .)
    K_POINT         reduce using rule 8 (compound_statement -> selection_statement .)
    K_TEXT          reduce using rule 8 (compound_statement -> selection_statement .)
    K_END           reduce using rule 8 (compound_statement -> selection_statement .)
    K_EL            reduce using rule 8 (compound_statement -> selection_statement .)
    K_EF            reduce using rule 8 (compound_statement -> selection_statement .)
    $end            reduce using rule 8 (compound_statement -> selection_statement .)


state 4

    (64) selection_statement -> K_IF . LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END

    LPAREN          shift and go to state 21


state 5

    (9) compound_statement -> iteration_statement .

    ID              reduce using rule 9 (compound_statement -> iteration_statement .)
    K_IF            reduce using rule 9 (compound_statement -> iteration_statement .)
    K_WHILE         reduce using rule 9 (compound_statement -> iteration_statement .)
    K_CONTINUE      reduce using rule 9 (compound_statement -> iteration_statement .)
    K_BREAK         reduce using rule 9 (compound_statement -> iteration_statement .)
    K_DONE          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_LIST          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_DICT          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_SET           reduce using rule 9 (compound_statement -> iteration_statement .)
    K_INT           reduce using rule 9 (compound_statement -> iteration_statement .)
    K_DOUBLE        reduce using rule 9 (compound_statement -> iteration_statement .)
    K_STRING        reduce using rule 9 (compound_statement -> iteration_statement .)
    K_BOOL          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_WINDOW        reduce using rule 9 (compound_statement -> iteration_statement .)
    K_SHAPE         reduce using rule 9 (compound_statement -> iteration_statement .)
    K_TRIANGLE      reduce using rule 9 (compound_statement -> iteration_statement .)
    K_RECTANGLE     reduce using rule 9 (compound_statement -> iteration_statement .)
    K_CIRCLE        reduce using rule 9 (compound_statement -> iteration_statement .)
    K_POINT         reduce using rule 9 (compound_statement -> iteration_statement .)
    K_TEXT          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_END           reduce using rule 9 (compound_statement -> iteration_statement .)
    K_EL            reduce using rule 9 (compound_statement -> iteration_statement .)
    K_EF            reduce using rule 9 (compound_statement -> iteration_statement .)
    $end            reduce using rule 9 (compound_statement -> iteration_statement .)


state 6

    (7) compound_statement -> variable_declaration .

    ID              reduce using rule 7 (compound_statement -> variable_declaration .)
    K_IF            reduce using rule 7 (compound_statement -> variable_declaration .)
    K_WHILE         reduce using rule 7 (compound_statement -> variable_declaration .)
    K_CONTINUE      reduce using rule 7 (compound_statement -> variable_declaration .)
    K_BREAK         reduce using rule 7 (compound_statement -> variable_declaration .)
    K_DONE          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_LIST          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_DICT          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_SET           reduce using rule 7 (compound_statement -> variable_declaration .)
    K_INT           reduce using rule 7 (compound_statement -> variable_declaration .)
    K_DOUBLE        reduce using rule 7 (compound_statement -> variable_declaration .)
    K_STRING        reduce using rule 7 (compound_statement -> variable_declaration .)
    K_BOOL          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_WINDOW        reduce using rule 7 (compound_statement -> variable_declaration .)
    K_SHAPE         reduce using rule 7 (compound_statement -> variable_declaration .)
    K_TRIANGLE      reduce using rule 7 (compound_statement -> variable_declaration .)
    K_RECTANGLE     reduce using rule 7 (compound_statement -> variable_declaration .)
    K_CIRCLE        reduce using rule 7 (compound_statement -> variable_declaration .)
    K_POINT         reduce using rule 7 (compound_statement -> variable_declaration .)
    K_TEXT          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_END           reduce using rule 7 (compound_statement -> variable_declaration .)
    K_EL            reduce using rule 7 (compound_statement -> variable_declaration .)
    K_EF            reduce using rule 7 (compound_statement -> variable_declaration .)
    $end            reduce using rule 7 (compound_statement -> variable_declaration .)


state 7

    (72) iteration_statement -> K_WHILE . LPAREN expression RPAREN compound_statement_list K_END

    LPAREN          shift and go to state 22


state 8

    (5) statement -> compound_statement .

    K_LIST          reduce using rule 5 (statement -> compound_statement .)
    K_DICT          reduce using rule 5 (statement -> compound_statement .)
    K_SET           reduce using rule 5 (statement -> compound_statement .)
    ID              reduce using rule 5 (statement -> compound_statement .)
    K_IF            reduce using rule 5 (statement -> compound_statement .)
    K_WHILE         reduce using rule 5 (statement -> compound_statement .)
    K_CONTINUE      reduce using rule 5 (statement -> compound_statement .)
    K_BREAK         reduce using rule 5 (statement -> compound_statement .)
    K_DONE          reduce using rule 5 (statement -> compound_statement .)
    K_INT           reduce using rule 5 (statement -> compound_statement .)
    K_DOUBLE        reduce using rule 5 (statement -> compound_statement .)
    K_STRING        reduce using rule 5 (statement -> compound_statement .)
    K_BOOL          reduce using rule 5 (statement -> compound_statement .)
    K_WINDOW        reduce using rule 5 (statement -> compound_statement .)
    K_SHAPE         reduce using rule 5 (statement -> compound_statement .)
    K_TRIANGLE      reduce using rule 5 (statement -> compound_statement .)
    K_RECTANGLE     reduce using rule 5 (statement -> compound_statement .)
    K_CIRCLE        reduce using rule 5 (statement -> compound_statement .)
    K_POINT         reduce using rule 5 (statement -> compound_statement .)
    K_TEXT          reduce using rule 5 (statement -> compound_statement .)
    $end            reduce using rule 5 (statement -> compound_statement .)


state 9

    (21) pre_type_modifier -> K_SET .

    K_INT           reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_DOUBLE        reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_STRING        reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_BOOL          reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_WINDOW        reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_SHAPE         reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_TRIANGLE      reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_RECTANGLE     reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_CIRCLE        reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_POINT         reduce using rule 21 (pre_type_modifier -> K_SET .)
    K_TEXT          reduce using rule 21 (pre_type_modifier -> K_SET .)


state 10

    (3) statement_list -> statement_list statement .

    K_LIST          reduce using rule 3 (statement_list -> statement_list statement .)
    K_DICT          reduce using rule 3 (statement_list -> statement_list statement .)
    K_SET           reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    K_IF            reduce using rule 3 (statement_list -> statement_list statement .)
    K_WHILE         reduce using rule 3 (statement_list -> statement_list statement .)
    K_CONTINUE      reduce using rule 3 (statement_list -> statement_list statement .)
    K_BREAK         reduce using rule 3 (statement_list -> statement_list statement .)
    K_DONE          reduce using rule 3 (statement_list -> statement_list statement .)
    K_INT           reduce using rule 3 (statement_list -> statement_list statement .)
    K_DOUBLE        reduce using rule 3 (statement_list -> statement_list statement .)
    K_STRING        reduce using rule 3 (statement_list -> statement_list statement .)
    K_BOOL          reduce using rule 3 (statement_list -> statement_list statement .)
    K_WINDOW        reduce using rule 3 (statement_list -> statement_list statement .)
    K_SHAPE         reduce using rule 3 (statement_list -> statement_list statement .)
    K_TRIANGLE      reduce using rule 3 (statement_list -> statement_list statement .)
    K_RECTANGLE     reduce using rule 3 (statement_list -> statement_list statement .)
    K_CIRCLE        reduce using rule 3 (statement_list -> statement_list statement .)
    K_POINT         reduce using rule 3 (statement_list -> statement_list statement .)
    K_TEXT          reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)


state 11

    (73) jump_statement -> K_CONTINUE .

    K_END           reduce using rule 73 (jump_statement -> K_CONTINUE .)
    ID              reduce using rule 73 (jump_statement -> K_CONTINUE .)
    K_IF            reduce using rule 73 (jump_statement -> K_CONTINUE .)
    K_WHILE         reduce using rule 73 (jump_statement -> K_CONTINUE .)
    K_CONTINUE      reduce using rule 73 (jump_statement -> K_CONTINUE .)
    K_BREAK         reduce using rule 73 (jump_statement -> K_CONTINUE .)
    K_DONE          reduce using rule 73 (jump_statement -> K_CONTINUE .)
    K_LIST          reduce using rule 73 (jump_statement -> K_CONTINUE .)
    K_DICT          reduce using rule 73 (jump_statement -> K_CONTINUE .)
    K_SET           reduce using rule 73 (jump_statement -> K_CONTINUE .)
    K_INT           reduce using rule 73 (jump_statement -> K_CONTINUE .)
    K_DOUBLE        reduce using rule 73 (jump_statement -> K_CONTINUE .)
    K_STRING        reduce using rule 73 (jump_statement -> K_CONTINUE .)
    K_BOOL          reduce using rule 73 (jump_statement -> K_CONTINUE .)
    K_WINDOW        reduce using rule 73 (jump_statement -> K_CONTINUE .)
    K_SHAPE         reduce using rule 73 (jump_statement -> K_CONTINUE .)
    K_TRIANGLE      reduce using rule 73 (jump_statement -> K_CONTINUE .)
    K_RECTANGLE     reduce using rule 73 (jump_statement -> K_CONTINUE .)
    K_CIRCLE        reduce using rule 73 (jump_statement -> K_CONTINUE .)
    K_POINT         reduce using rule 73 (jump_statement -> K_CONTINUE .)
    K_TEXT          reduce using rule 73 (jump_statement -> K_CONTINUE .)
    K_EL            reduce using rule 73 (jump_statement -> K_CONTINUE .)
    K_EF            reduce using rule 73 (jump_statement -> K_CONTINUE .)
    $end            reduce using rule 73 (jump_statement -> K_CONTINUE .)


state 12

    (74) jump_statement -> K_BREAK .

    K_END           reduce using rule 74 (jump_statement -> K_BREAK .)
    ID              reduce using rule 74 (jump_statement -> K_BREAK .)
    K_IF            reduce using rule 74 (jump_statement -> K_BREAK .)
    K_WHILE         reduce using rule 74 (jump_statement -> K_BREAK .)
    K_CONTINUE      reduce using rule 74 (jump_statement -> K_BREAK .)
    K_BREAK         reduce using rule 74 (jump_statement -> K_BREAK .)
    K_DONE          reduce using rule 74 (jump_statement -> K_BREAK .)
    K_LIST          reduce using rule 74 (jump_statement -> K_BREAK .)
    K_DICT          reduce using rule 74 (jump_statement -> K_BREAK .)
    K_SET           reduce using rule 74 (jump_statement -> K_BREAK .)
    K_INT           reduce using rule 74 (jump_statement -> K_BREAK .)
    K_DOUBLE        reduce using rule 74 (jump_statement -> K_BREAK .)
    K_STRING        reduce using rule 74 (jump_statement -> K_BREAK .)
    K_BOOL          reduce using rule 74 (jump_statement -> K_BREAK .)
    K_WINDOW        reduce using rule 74 (jump_statement -> K_BREAK .)
    K_SHAPE         reduce using rule 74 (jump_statement -> K_BREAK .)
    K_TRIANGLE      reduce using rule 74 (jump_statement -> K_BREAK .)
    K_RECTANGLE     reduce using rule 74 (jump_statement -> K_BREAK .)
    K_CIRCLE        reduce using rule 74 (jump_statement -> K_BREAK .)
    K_POINT         reduce using rule 74 (jump_statement -> K_BREAK .)
    K_TEXT          reduce using rule 74 (jump_statement -> K_BREAK .)
    K_EL            reduce using rule 74 (jump_statement -> K_BREAK .)
    K_EF            reduce using rule 74 (jump_statement -> K_BREAK .)
    $end            reduce using rule 74 (jump_statement -> K_BREAK .)


state 13

    (19) pre_type_modifier -> K_LIST .

    K_INT           reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_DOUBLE        reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_STRING        reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_BOOL          reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_WINDOW        reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_SHAPE         reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_TRIANGLE      reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_RECTANGLE     reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_CIRCLE        reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_POINT         reduce using rule 19 (pre_type_modifier -> K_LIST .)
    K_TEXT          reduce using rule 19 (pre_type_modifier -> K_LIST .)


state 14

    (76) function_declaration -> pre_type_modifier . type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END
    (77) function_declaration -> pre_type_modifier . type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END
    (15) variable_declaration -> pre_type_modifier . type ID
    (16) variable_declaration -> pre_type_modifier . type ID ASSIGN expression
    (22) type -> . K_INT
    (23) type -> . K_DOUBLE
    (24) type -> . K_STRING
    (25) type -> . K_BOOL
    (26) type -> . K_WINDOW
    (27) type -> . K_SHAPE
    (28) type -> . K_TRIANGLE
    (29) type -> . K_RECTANGLE
    (30) type -> . K_CIRCLE
    (31) type -> . K_POINT
    (32) type -> . K_TEXT

    K_INT           shift and go to state 30
    K_DOUBLE        shift and go to state 23
    K_STRING        shift and go to state 24
    K_BOOL          shift and go to state 31
    K_WINDOW        shift and go to state 34
    K_SHAPE         shift and go to state 27
    K_TRIANGLE      shift and go to state 25
    K_RECTANGLE     shift and go to state 33
    K_CIRCLE        shift and go to state 26
    K_POINT         shift and go to state 29
    K_TEXT          shift and go to state 28

    type                           shift and go to state 32

state 15

    (20) pre_type_modifier -> K_DICT .

    K_INT           reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_DOUBLE        reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_STRING        reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_BOOL          reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_WINDOW        reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_SHAPE         reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_TRIANGLE      reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_RECTANGLE     reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_CIRCLE        reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_POINT         reduce using rule 20 (pre_type_modifier -> K_DICT .)
    K_TEXT          reduce using rule 20 (pre_type_modifier -> K_DICT .)


state 16

    (11) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (12) function_call_statement -> ID . LPAREN RPAREN
    (17) variable_declaration -> ID . ASSIGN expression

    LPAREN          shift and go to state 36
    ASSIGN          shift and go to state 35


state 17

    (10) compound_statement -> jump_statement .

    ID              reduce using rule 10 (compound_statement -> jump_statement .)
    K_IF            reduce using rule 10 (compound_statement -> jump_statement .)
    K_WHILE         reduce using rule 10 (compound_statement -> jump_statement .)
    K_CONTINUE      reduce using rule 10 (compound_statement -> jump_statement .)
    K_BREAK         reduce using rule 10 (compound_statement -> jump_statement .)
    K_DONE          reduce using rule 10 (compound_statement -> jump_statement .)
    K_LIST          reduce using rule 10 (compound_statement -> jump_statement .)
    K_DICT          reduce using rule 10 (compound_statement -> jump_statement .)
    K_SET           reduce using rule 10 (compound_statement -> jump_statement .)
    K_INT           reduce using rule 10 (compound_statement -> jump_statement .)
    K_DOUBLE        reduce using rule 10 (compound_statement -> jump_statement .)
    K_STRING        reduce using rule 10 (compound_statement -> jump_statement .)
    K_BOOL          reduce using rule 10 (compound_statement -> jump_statement .)
    K_WINDOW        reduce using rule 10 (compound_statement -> jump_statement .)
    K_SHAPE         reduce using rule 10 (compound_statement -> jump_statement .)
    K_TRIANGLE      reduce using rule 10 (compound_statement -> jump_statement .)
    K_RECTANGLE     reduce using rule 10 (compound_statement -> jump_statement .)
    K_CIRCLE        reduce using rule 10 (compound_statement -> jump_statement .)
    K_POINT         reduce using rule 10 (compound_statement -> jump_statement .)
    K_TEXT          reduce using rule 10 (compound_statement -> jump_statement .)
    K_END           reduce using rule 10 (compound_statement -> jump_statement .)
    K_EL            reduce using rule 10 (compound_statement -> jump_statement .)
    K_EF            reduce using rule 10 (compound_statement -> jump_statement .)
    $end            reduce using rule 10 (compound_statement -> jump_statement .)


state 18

    (4) statement -> function_declaration .

    K_LIST          reduce using rule 4 (statement -> function_declaration .)
    K_DICT          reduce using rule 4 (statement -> function_declaration .)
    K_SET           reduce using rule 4 (statement -> function_declaration .)
    ID              reduce using rule 4 (statement -> function_declaration .)
    K_IF            reduce using rule 4 (statement -> function_declaration .)
    K_WHILE         reduce using rule 4 (statement -> function_declaration .)
    K_CONTINUE      reduce using rule 4 (statement -> function_declaration .)
    K_BREAK         reduce using rule 4 (statement -> function_declaration .)
    K_DONE          reduce using rule 4 (statement -> function_declaration .)
    K_INT           reduce using rule 4 (statement -> function_declaration .)
    K_DOUBLE        reduce using rule 4 (statement -> function_declaration .)
    K_STRING        reduce using rule 4 (statement -> function_declaration .)
    K_BOOL          reduce using rule 4 (statement -> function_declaration .)
    K_WINDOW        reduce using rule 4 (statement -> function_declaration .)
    K_SHAPE         reduce using rule 4 (statement -> function_declaration .)
    K_TRIANGLE      reduce using rule 4 (statement -> function_declaration .)
    K_RECTANGLE     reduce using rule 4 (statement -> function_declaration .)
    K_CIRCLE        reduce using rule 4 (statement -> function_declaration .)
    K_POINT         reduce using rule 4 (statement -> function_declaration .)
    K_TEXT          reduce using rule 4 (statement -> function_declaration .)
    $end            reduce using rule 4 (statement -> function_declaration .)


state 19

    (6) compound_statement -> function_call_statement .

    ID              reduce using rule 6 (compound_statement -> function_call_statement .)
    K_IF            reduce using rule 6 (compound_statement -> function_call_statement .)
    K_WHILE         reduce using rule 6 (compound_statement -> function_call_statement .)
    K_CONTINUE      reduce using rule 6 (compound_statement -> function_call_statement .)
    K_BREAK         reduce using rule 6 (compound_statement -> function_call_statement .)
    K_DONE          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_LIST          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_DICT          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_SET           reduce using rule 6 (compound_statement -> function_call_statement .)
    K_INT           reduce using rule 6 (compound_statement -> function_call_statement .)
    K_DOUBLE        reduce using rule 6 (compound_statement -> function_call_statement .)
    K_STRING        reduce using rule 6 (compound_statement -> function_call_statement .)
    K_BOOL          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_WINDOW        reduce using rule 6 (compound_statement -> function_call_statement .)
    K_SHAPE         reduce using rule 6 (compound_statement -> function_call_statement .)
    K_TRIANGLE      reduce using rule 6 (compound_statement -> function_call_statement .)
    K_RECTANGLE     reduce using rule 6 (compound_statement -> function_call_statement .)
    K_CIRCLE        reduce using rule 6 (compound_statement -> function_call_statement .)
    K_POINT         reduce using rule 6 (compound_statement -> function_call_statement .)
    K_TEXT          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_END           reduce using rule 6 (compound_statement -> function_call_statement .)
    K_EL            reduce using rule 6 (compound_statement -> function_call_statement .)
    K_EF            reduce using rule 6 (compound_statement -> function_call_statement .)
    $end            reduce using rule 6 (compound_statement -> function_call_statement .)


state 20

    (75) jump_statement -> K_DONE .

    K_END           reduce using rule 75 (jump_statement -> K_DONE .)
    ID              reduce using rule 75 (jump_statement -> K_DONE .)
    K_IF            reduce using rule 75 (jump_statement -> K_DONE .)
    K_WHILE         reduce using rule 75 (jump_statement -> K_DONE .)
    K_CONTINUE      reduce using rule 75 (jump_statement -> K_DONE .)
    K_BREAK         reduce using rule 75 (jump_statement -> K_DONE .)
    K_DONE          reduce using rule 75 (jump_statement -> K_DONE .)
    K_LIST          reduce using rule 75 (jump_statement -> K_DONE .)
    K_DICT          reduce using rule 75 (jump_statement -> K_DONE .)
    K_SET           reduce using rule 75 (jump_statement -> K_DONE .)
    K_INT           reduce using rule 75 (jump_statement -> K_DONE .)
    K_DOUBLE        reduce using rule 75 (jump_statement -> K_DONE .)
    K_STRING        reduce using rule 75 (jump_statement -> K_DONE .)
    K_BOOL          reduce using rule 75 (jump_statement -> K_DONE .)
    K_WINDOW        reduce using rule 75 (jump_statement -> K_DONE .)
    K_SHAPE         reduce using rule 75 (jump_statement -> K_DONE .)
    K_TRIANGLE      reduce using rule 75 (jump_statement -> K_DONE .)
    K_RECTANGLE     reduce using rule 75 (jump_statement -> K_DONE .)
    K_CIRCLE        reduce using rule 75 (jump_statement -> K_DONE .)
    K_POINT         reduce using rule 75 (jump_statement -> K_DONE .)
    K_TEXT          reduce using rule 75 (jump_statement -> K_DONE .)
    K_EL            reduce using rule 75 (jump_statement -> K_DONE .)
    K_EF            reduce using rule 75 (jump_statement -> K_DONE .)
    $end            reduce using rule 75 (jump_statement -> K_DONE .)


state 21

    (64) selection_statement -> K_IF LPAREN . expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (33) expression -> . expression op expression_term
    (34) expression -> . expression_term
    (35) expression_term -> . expression_term op primary_expression
    (36) expression_term -> . primary_expression
    (46) primary_expression -> . constant
    (47) primary_expression -> . ID
    (48) primary_expression -> . function_call_statement
    (49) primary_expression -> . LPAREN expression RPAREN
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . STRING
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (53) boolean_constant -> . K_TRUE
    (54) boolean_constant -> . K_FALSE
    (62) number -> . INTEGER
    (63) number -> . DOUBLE

    ID              shift and go to state 45
    LPAREN          shift and go to state 44
    STRING          shift and go to state 42
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 50
    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 46

    expression_term                shift and go to state 37
    constant                       shift and go to state 38
    number                         shift and go to state 39
    function_call_statement        shift and go to state 47
    primary_expression             shift and go to state 43
    boolean_constant               shift and go to state 49
    expression                     shift and go to state 48

state 22

    (72) iteration_statement -> K_WHILE LPAREN . expression RPAREN compound_statement_list K_END
    (33) expression -> . expression op expression_term
    (34) expression -> . expression_term
    (35) expression_term -> . expression_term op primary_expression
    (36) expression_term -> . primary_expression
    (46) primary_expression -> . constant
    (47) primary_expression -> . ID
    (48) primary_expression -> . function_call_statement
    (49) primary_expression -> . LPAREN expression RPAREN
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . STRING
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (53) boolean_constant -> . K_TRUE
    (54) boolean_constant -> . K_FALSE
    (62) number -> . INTEGER
    (63) number -> . DOUBLE

    ID              shift and go to state 45
    LPAREN          shift and go to state 44
    STRING          shift and go to state 42
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 50
    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 46

    expression_term                shift and go to state 37
    boolean_constant               shift and go to state 49
    constant                       shift and go to state 38
    number                         shift and go to state 39
    function_call_statement        shift and go to state 47
    primary_expression             shift and go to state 43
    expression                     shift and go to state 51

state 23

    (23) type -> K_DOUBLE .

    ID              reduce using rule 23 (type -> K_DOUBLE .)


state 24

    (24) type -> K_STRING .

    ID              reduce using rule 24 (type -> K_STRING .)


state 25

    (28) type -> K_TRIANGLE .

    ID              reduce using rule 28 (type -> K_TRIANGLE .)


state 26

    (30) type -> K_CIRCLE .

    ID              reduce using rule 30 (type -> K_CIRCLE .)


state 27

    (27) type -> K_SHAPE .

    ID              reduce using rule 27 (type -> K_SHAPE .)


state 28

    (32) type -> K_TEXT .

    ID              reduce using rule 32 (type -> K_TEXT .)


state 29

    (31) type -> K_POINT .

    ID              reduce using rule 31 (type -> K_POINT .)


state 30

    (22) type -> K_INT .

    ID              reduce using rule 22 (type -> K_INT .)


state 31

    (25) type -> K_BOOL .

    ID              reduce using rule 25 (type -> K_BOOL .)


state 32

    (76) function_declaration -> pre_type_modifier type . ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END
    (77) function_declaration -> pre_type_modifier type . ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END
    (15) variable_declaration -> pre_type_modifier type . ID
    (16) variable_declaration -> pre_type_modifier type . ID ASSIGN expression

    ID              shift and go to state 52


state 33

    (29) type -> K_RECTANGLE .

    ID              reduce using rule 29 (type -> K_RECTANGLE .)


state 34

    (26) type -> K_WINDOW .

    ID              reduce using rule 26 (type -> K_WINDOW .)


state 35

    (17) variable_declaration -> ID ASSIGN . expression
    (33) expression -> . expression op expression_term
    (34) expression -> . expression_term
    (35) expression_term -> . expression_term op primary_expression
    (36) expression_term -> . primary_expression
    (46) primary_expression -> . constant
    (47) primary_expression -> . ID
    (48) primary_expression -> . function_call_statement
    (49) primary_expression -> . LPAREN expression RPAREN
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . STRING
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (53) boolean_constant -> . K_TRUE
    (54) boolean_constant -> . K_FALSE
    (62) number -> . INTEGER
    (63) number -> . DOUBLE

    ID              shift and go to state 45
    LPAREN          shift and go to state 44
    STRING          shift and go to state 42
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 50
    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 46

    expression_term                shift and go to state 37
    constant                       shift and go to state 38
    number                         shift and go to state 39
    function_call_statement        shift and go to state 47
    primary_expression             shift and go to state 43
    boolean_constant               shift and go to state 49
    expression                     shift and go to state 53

state 36

    (11) function_call_statement -> ID LPAREN . parameter_list RPAREN
    (12) function_call_statement -> ID LPAREN . RPAREN
    (13) parameter_list -> . parameter_list COMMA expression
    (14) parameter_list -> . expression
    (33) expression -> . expression op expression_term
    (34) expression -> . expression_term
    (35) expression_term -> . expression_term op primary_expression
    (36) expression_term -> . primary_expression
    (46) primary_expression -> . constant
    (47) primary_expression -> . ID
    (48) primary_expression -> . function_call_statement
    (49) primary_expression -> . LPAREN expression RPAREN
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . STRING
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (53) boolean_constant -> . K_TRUE
    (54) boolean_constant -> . K_FALSE
    (62) number -> . INTEGER
    (63) number -> . DOUBLE

    RPAREN          shift and go to state 54
    ID              shift and go to state 45
    LPAREN          shift and go to state 44
    STRING          shift and go to state 42
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 50
    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 46

    expression_term                shift and go to state 37
    constant                       shift and go to state 38
    parameter_list                 shift and go to state 55
    number                         shift and go to state 39
    function_call_statement        shift and go to state 47
    primary_expression             shift and go to state 43
    boolean_constant               shift and go to state 49
    expression                     shift and go to state 56

state 37

    (34) expression -> expression_term .
    (35) expression_term -> expression_term . op primary_expression
    (37) op -> . PLUS
    (38) op -> . MINUS
    (39) op -> . TIMES
    (40) op -> . DIVIDE
    (41) op -> . MOD
    (42) op -> . comparator
    (43) op -> . boolean_operator
    (56) comparator -> . GT
    (57) comparator -> . LT
    (58) comparator -> . GEQ
    (59) comparator -> . LEQ
    (60) comparator -> . EQ
    (61) comparator -> . NEQ
    (44) boolean_operator -> . AND
    (45) boolean_operator -> . OR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPAREN          reduce using rule 34 (expression -> expression_term .)
    COMMA           reduce using rule 34 (expression -> expression_term .)
    K_LIST          reduce using rule 34 (expression -> expression_term .)
    K_DICT          reduce using rule 34 (expression -> expression_term .)
    K_SET           reduce using rule 34 (expression -> expression_term .)
    ID              reduce using rule 34 (expression -> expression_term .)
    K_IF            reduce using rule 34 (expression -> expression_term .)
    K_WHILE         reduce using rule 34 (expression -> expression_term .)
    K_CONTINUE      reduce using rule 34 (expression -> expression_term .)
    K_BREAK         reduce using rule 34 (expression -> expression_term .)
    K_DONE          reduce using rule 34 (expression -> expression_term .)
    K_INT           reduce using rule 34 (expression -> expression_term .)
    K_DOUBLE        reduce using rule 34 (expression -> expression_term .)
    K_STRING        reduce using rule 34 (expression -> expression_term .)
    K_BOOL          reduce using rule 34 (expression -> expression_term .)
    K_WINDOW        reduce using rule 34 (expression -> expression_term .)
    K_SHAPE         reduce using rule 34 (expression -> expression_term .)
    K_TRIANGLE      reduce using rule 34 (expression -> expression_term .)
    K_RECTANGLE     reduce using rule 34 (expression -> expression_term .)
    K_CIRCLE        reduce using rule 34 (expression -> expression_term .)
    K_POINT         reduce using rule 34 (expression -> expression_term .)
    K_TEXT          reduce using rule 34 (expression -> expression_term .)
    $end            reduce using rule 34 (expression -> expression_term .)
    K_EL            reduce using rule 34 (expression -> expression_term .)
    K_EF            reduce using rule 34 (expression -> expression_term .)
    K_END           reduce using rule 34 (expression -> expression_term .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 71
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 69
    GT              shift and go to state 59
    LT              shift and go to state 67
    GEQ             shift and go to state 58
    LEQ             shift and go to state 66
    EQ              shift and go to state 70
    NEQ             shift and go to state 57
    AND             shift and go to state 63
    OR              shift and go to state 64

  ! PLUS            [ reduce using rule 34 (expression -> expression_term .) ]
  ! MINUS           [ reduce using rule 34 (expression -> expression_term .) ]
  ! TIMES           [ reduce using rule 34 (expression -> expression_term .) ]
  ! DIVIDE          [ reduce using rule 34 (expression -> expression_term .) ]
  ! MOD             [ reduce using rule 34 (expression -> expression_term .) ]
  ! GT              [ reduce using rule 34 (expression -> expression_term .) ]
  ! LT              [ reduce using rule 34 (expression -> expression_term .) ]
  ! GEQ             [ reduce using rule 34 (expression -> expression_term .) ]
  ! LEQ             [ reduce using rule 34 (expression -> expression_term .) ]
  ! EQ              [ reduce using rule 34 (expression -> expression_term .) ]
  ! NEQ             [ reduce using rule 34 (expression -> expression_term .) ]
  ! AND             [ reduce using rule 34 (expression -> expression_term .) ]
  ! OR              [ reduce using rule 34 (expression -> expression_term .) ]

    boolean_operator               shift and go to state 62
    comparator                     shift and go to state 61
    op                             shift and go to state 72

state 38

    (46) primary_expression -> constant .

    PLUS            reduce using rule 46 (primary_expression -> constant .)
    MINUS           reduce using rule 46 (primary_expression -> constant .)
    TIMES           reduce using rule 46 (primary_expression -> constant .)
    DIVIDE          reduce using rule 46 (primary_expression -> constant .)
    MOD             reduce using rule 46 (primary_expression -> constant .)
    GT              reduce using rule 46 (primary_expression -> constant .)
    LT              reduce using rule 46 (primary_expression -> constant .)
    GEQ             reduce using rule 46 (primary_expression -> constant .)
    LEQ             reduce using rule 46 (primary_expression -> constant .)
    EQ              reduce using rule 46 (primary_expression -> constant .)
    NEQ             reduce using rule 46 (primary_expression -> constant .)
    AND             reduce using rule 46 (primary_expression -> constant .)
    OR              reduce using rule 46 (primary_expression -> constant .)
    RPAREN          reduce using rule 46 (primary_expression -> constant .)
    K_LIST          reduce using rule 46 (primary_expression -> constant .)
    K_DICT          reduce using rule 46 (primary_expression -> constant .)
    K_SET           reduce using rule 46 (primary_expression -> constant .)
    ID              reduce using rule 46 (primary_expression -> constant .)
    K_IF            reduce using rule 46 (primary_expression -> constant .)
    K_WHILE         reduce using rule 46 (primary_expression -> constant .)
    K_CONTINUE      reduce using rule 46 (primary_expression -> constant .)
    K_BREAK         reduce using rule 46 (primary_expression -> constant .)
    K_DONE          reduce using rule 46 (primary_expression -> constant .)
    K_INT           reduce using rule 46 (primary_expression -> constant .)
    K_DOUBLE        reduce using rule 46 (primary_expression -> constant .)
    K_STRING        reduce using rule 46 (primary_expression -> constant .)
    K_BOOL          reduce using rule 46 (primary_expression -> constant .)
    K_WINDOW        reduce using rule 46 (primary_expression -> constant .)
    K_SHAPE         reduce using rule 46 (primary_expression -> constant .)
    K_TRIANGLE      reduce using rule 46 (primary_expression -> constant .)
    K_RECTANGLE     reduce using rule 46 (primary_expression -> constant .)
    K_CIRCLE        reduce using rule 46 (primary_expression -> constant .)
    K_POINT         reduce using rule 46 (primary_expression -> constant .)
    K_TEXT          reduce using rule 46 (primary_expression -> constant .)
    $end            reduce using rule 46 (primary_expression -> constant .)
    K_EL            reduce using rule 46 (primary_expression -> constant .)
    K_EF            reduce using rule 46 (primary_expression -> constant .)
    K_END           reduce using rule 46 (primary_expression -> constant .)
    COMMA           reduce using rule 46 (primary_expression -> constant .)


state 39

    (51) constant -> number .

    PLUS            reduce using rule 51 (constant -> number .)
    MINUS           reduce using rule 51 (constant -> number .)
    TIMES           reduce using rule 51 (constant -> number .)
    DIVIDE          reduce using rule 51 (constant -> number .)
    MOD             reduce using rule 51 (constant -> number .)
    GT              reduce using rule 51 (constant -> number .)
    LT              reduce using rule 51 (constant -> number .)
    GEQ             reduce using rule 51 (constant -> number .)
    LEQ             reduce using rule 51 (constant -> number .)
    EQ              reduce using rule 51 (constant -> number .)
    NEQ             reduce using rule 51 (constant -> number .)
    AND             reduce using rule 51 (constant -> number .)
    OR              reduce using rule 51 (constant -> number .)
    RPAREN          reduce using rule 51 (constant -> number .)
    K_LIST          reduce using rule 51 (constant -> number .)
    K_DICT          reduce using rule 51 (constant -> number .)
    K_SET           reduce using rule 51 (constant -> number .)
    ID              reduce using rule 51 (constant -> number .)
    K_IF            reduce using rule 51 (constant -> number .)
    K_WHILE         reduce using rule 51 (constant -> number .)
    K_CONTINUE      reduce using rule 51 (constant -> number .)
    K_BREAK         reduce using rule 51 (constant -> number .)
    K_DONE          reduce using rule 51 (constant -> number .)
    K_INT           reduce using rule 51 (constant -> number .)
    K_DOUBLE        reduce using rule 51 (constant -> number .)
    K_STRING        reduce using rule 51 (constant -> number .)
    K_BOOL          reduce using rule 51 (constant -> number .)
    K_WINDOW        reduce using rule 51 (constant -> number .)
    K_SHAPE         reduce using rule 51 (constant -> number .)
    K_TRIANGLE      reduce using rule 51 (constant -> number .)
    K_RECTANGLE     reduce using rule 51 (constant -> number .)
    K_CIRCLE        reduce using rule 51 (constant -> number .)
    K_POINT         reduce using rule 51 (constant -> number .)
    K_TEXT          reduce using rule 51 (constant -> number .)
    $end            reduce using rule 51 (constant -> number .)
    K_EL            reduce using rule 51 (constant -> number .)
    K_EF            reduce using rule 51 (constant -> number .)
    K_END           reduce using rule 51 (constant -> number .)
    COMMA           reduce using rule 51 (constant -> number .)


state 40

    (53) boolean_constant -> K_TRUE .

    K_END           reduce using rule 53 (boolean_constant -> K_TRUE .)
    ID              reduce using rule 53 (boolean_constant -> K_TRUE .)
    K_IF            reduce using rule 53 (boolean_constant -> K_TRUE .)
    K_WHILE         reduce using rule 53 (boolean_constant -> K_TRUE .)
    K_CONTINUE      reduce using rule 53 (boolean_constant -> K_TRUE .)
    K_BREAK         reduce using rule 53 (boolean_constant -> K_TRUE .)
    K_DONE          reduce using rule 53 (boolean_constant -> K_TRUE .)
    K_LIST          reduce using rule 53 (boolean_constant -> K_TRUE .)
    K_DICT          reduce using rule 53 (boolean_constant -> K_TRUE .)
    K_SET           reduce using rule 53 (boolean_constant -> K_TRUE .)
    K_INT           reduce using rule 53 (boolean_constant -> K_TRUE .)
    K_DOUBLE        reduce using rule 53 (boolean_constant -> K_TRUE .)
    K_STRING        reduce using rule 53 (boolean_constant -> K_TRUE .)
    K_BOOL          reduce using rule 53 (boolean_constant -> K_TRUE .)
    K_WINDOW        reduce using rule 53 (boolean_constant -> K_TRUE .)
    K_SHAPE         reduce using rule 53 (boolean_constant -> K_TRUE .)
    K_TRIANGLE      reduce using rule 53 (boolean_constant -> K_TRUE .)
    K_RECTANGLE     reduce using rule 53 (boolean_constant -> K_TRUE .)
    K_CIRCLE        reduce using rule 53 (boolean_constant -> K_TRUE .)
    K_POINT         reduce using rule 53 (boolean_constant -> K_TRUE .)
    K_TEXT          reduce using rule 53 (boolean_constant -> K_TRUE .)
    PLUS            reduce using rule 53 (boolean_constant -> K_TRUE .)
    MINUS           reduce using rule 53 (boolean_constant -> K_TRUE .)
    TIMES           reduce using rule 53 (boolean_constant -> K_TRUE .)
    DIVIDE          reduce using rule 53 (boolean_constant -> K_TRUE .)
    MOD             reduce using rule 53 (boolean_constant -> K_TRUE .)
    GT              reduce using rule 53 (boolean_constant -> K_TRUE .)
    LT              reduce using rule 53 (boolean_constant -> K_TRUE .)
    GEQ             reduce using rule 53 (boolean_constant -> K_TRUE .)
    LEQ             reduce using rule 53 (boolean_constant -> K_TRUE .)
    EQ              reduce using rule 53 (boolean_constant -> K_TRUE .)
    NEQ             reduce using rule 53 (boolean_constant -> K_TRUE .)
    AND             reduce using rule 53 (boolean_constant -> K_TRUE .)
    OR              reduce using rule 53 (boolean_constant -> K_TRUE .)
    RPAREN          reduce using rule 53 (boolean_constant -> K_TRUE .)
    $end            reduce using rule 53 (boolean_constant -> K_TRUE .)
    K_EL            reduce using rule 53 (boolean_constant -> K_TRUE .)
    K_EF            reduce using rule 53 (boolean_constant -> K_TRUE .)
    COMMA           reduce using rule 53 (boolean_constant -> K_TRUE .)


state 41

    (62) number -> INTEGER .

    PLUS            reduce using rule 62 (number -> INTEGER .)
    MINUS           reduce using rule 62 (number -> INTEGER .)
    TIMES           reduce using rule 62 (number -> INTEGER .)
    DIVIDE          reduce using rule 62 (number -> INTEGER .)
    MOD             reduce using rule 62 (number -> INTEGER .)
    GT              reduce using rule 62 (number -> INTEGER .)
    LT              reduce using rule 62 (number -> INTEGER .)
    GEQ             reduce using rule 62 (number -> INTEGER .)
    LEQ             reduce using rule 62 (number -> INTEGER .)
    EQ              reduce using rule 62 (number -> INTEGER .)
    NEQ             reduce using rule 62 (number -> INTEGER .)
    AND             reduce using rule 62 (number -> INTEGER .)
    OR              reduce using rule 62 (number -> INTEGER .)
    RPAREN          reduce using rule 62 (number -> INTEGER .)
    K_LIST          reduce using rule 62 (number -> INTEGER .)
    K_DICT          reduce using rule 62 (number -> INTEGER .)
    K_SET           reduce using rule 62 (number -> INTEGER .)
    ID              reduce using rule 62 (number -> INTEGER .)
    K_IF            reduce using rule 62 (number -> INTEGER .)
    K_WHILE         reduce using rule 62 (number -> INTEGER .)
    K_CONTINUE      reduce using rule 62 (number -> INTEGER .)
    K_BREAK         reduce using rule 62 (number -> INTEGER .)
    K_DONE          reduce using rule 62 (number -> INTEGER .)
    K_INT           reduce using rule 62 (number -> INTEGER .)
    K_DOUBLE        reduce using rule 62 (number -> INTEGER .)
    K_STRING        reduce using rule 62 (number -> INTEGER .)
    K_BOOL          reduce using rule 62 (number -> INTEGER .)
    K_WINDOW        reduce using rule 62 (number -> INTEGER .)
    K_SHAPE         reduce using rule 62 (number -> INTEGER .)
    K_TRIANGLE      reduce using rule 62 (number -> INTEGER .)
    K_RECTANGLE     reduce using rule 62 (number -> INTEGER .)
    K_CIRCLE        reduce using rule 62 (number -> INTEGER .)
    K_POINT         reduce using rule 62 (number -> INTEGER .)
    K_TEXT          reduce using rule 62 (number -> INTEGER .)
    $end            reduce using rule 62 (number -> INTEGER .)
    K_EL            reduce using rule 62 (number -> INTEGER .)
    K_EF            reduce using rule 62 (number -> INTEGER .)
    K_END           reduce using rule 62 (number -> INTEGER .)
    COMMA           reduce using rule 62 (number -> INTEGER .)


state 42

    (52) constant -> STRING .

    PLUS            reduce using rule 52 (constant -> STRING .)
    MINUS           reduce using rule 52 (constant -> STRING .)
    TIMES           reduce using rule 52 (constant -> STRING .)
    DIVIDE          reduce using rule 52 (constant -> STRING .)
    MOD             reduce using rule 52 (constant -> STRING .)
    GT              reduce using rule 52 (constant -> STRING .)
    LT              reduce using rule 52 (constant -> STRING .)
    GEQ             reduce using rule 52 (constant -> STRING .)
    LEQ             reduce using rule 52 (constant -> STRING .)
    EQ              reduce using rule 52 (constant -> STRING .)
    NEQ             reduce using rule 52 (constant -> STRING .)
    AND             reduce using rule 52 (constant -> STRING .)
    OR              reduce using rule 52 (constant -> STRING .)
    RPAREN          reduce using rule 52 (constant -> STRING .)
    K_LIST          reduce using rule 52 (constant -> STRING .)
    K_DICT          reduce using rule 52 (constant -> STRING .)
    K_SET           reduce using rule 52 (constant -> STRING .)
    ID              reduce using rule 52 (constant -> STRING .)
    K_IF            reduce using rule 52 (constant -> STRING .)
    K_WHILE         reduce using rule 52 (constant -> STRING .)
    K_CONTINUE      reduce using rule 52 (constant -> STRING .)
    K_BREAK         reduce using rule 52 (constant -> STRING .)
    K_DONE          reduce using rule 52 (constant -> STRING .)
    K_INT           reduce using rule 52 (constant -> STRING .)
    K_DOUBLE        reduce using rule 52 (constant -> STRING .)
    K_STRING        reduce using rule 52 (constant -> STRING .)
    K_BOOL          reduce using rule 52 (constant -> STRING .)
    K_WINDOW        reduce using rule 52 (constant -> STRING .)
    K_SHAPE         reduce using rule 52 (constant -> STRING .)
    K_TRIANGLE      reduce using rule 52 (constant -> STRING .)
    K_RECTANGLE     reduce using rule 52 (constant -> STRING .)
    K_CIRCLE        reduce using rule 52 (constant -> STRING .)
    K_POINT         reduce using rule 52 (constant -> STRING .)
    K_TEXT          reduce using rule 52 (constant -> STRING .)
    $end            reduce using rule 52 (constant -> STRING .)
    K_EL            reduce using rule 52 (constant -> STRING .)
    K_EF            reduce using rule 52 (constant -> STRING .)
    K_END           reduce using rule 52 (constant -> STRING .)
    COMMA           reduce using rule 52 (constant -> STRING .)


state 43

    (36) expression_term -> primary_expression .

    PLUS            reduce using rule 36 (expression_term -> primary_expression .)
    MINUS           reduce using rule 36 (expression_term -> primary_expression .)
    TIMES           reduce using rule 36 (expression_term -> primary_expression .)
    DIVIDE          reduce using rule 36 (expression_term -> primary_expression .)
    MOD             reduce using rule 36 (expression_term -> primary_expression .)
    GT              reduce using rule 36 (expression_term -> primary_expression .)
    LT              reduce using rule 36 (expression_term -> primary_expression .)
    GEQ             reduce using rule 36 (expression_term -> primary_expression .)
    LEQ             reduce using rule 36 (expression_term -> primary_expression .)
    EQ              reduce using rule 36 (expression_term -> primary_expression .)
    NEQ             reduce using rule 36 (expression_term -> primary_expression .)
    AND             reduce using rule 36 (expression_term -> primary_expression .)
    OR              reduce using rule 36 (expression_term -> primary_expression .)
    K_LIST          reduce using rule 36 (expression_term -> primary_expression .)
    K_DICT          reduce using rule 36 (expression_term -> primary_expression .)
    K_SET           reduce using rule 36 (expression_term -> primary_expression .)
    ID              reduce using rule 36 (expression_term -> primary_expression .)
    K_IF            reduce using rule 36 (expression_term -> primary_expression .)
    K_WHILE         reduce using rule 36 (expression_term -> primary_expression .)
    K_CONTINUE      reduce using rule 36 (expression_term -> primary_expression .)
    K_BREAK         reduce using rule 36 (expression_term -> primary_expression .)
    K_DONE          reduce using rule 36 (expression_term -> primary_expression .)
    K_INT           reduce using rule 36 (expression_term -> primary_expression .)
    K_DOUBLE        reduce using rule 36 (expression_term -> primary_expression .)
    K_STRING        reduce using rule 36 (expression_term -> primary_expression .)
    K_BOOL          reduce using rule 36 (expression_term -> primary_expression .)
    K_WINDOW        reduce using rule 36 (expression_term -> primary_expression .)
    K_SHAPE         reduce using rule 36 (expression_term -> primary_expression .)
    K_TRIANGLE      reduce using rule 36 (expression_term -> primary_expression .)
    K_RECTANGLE     reduce using rule 36 (expression_term -> primary_expression .)
    K_CIRCLE        reduce using rule 36 (expression_term -> primary_expression .)
    K_POINT         reduce using rule 36 (expression_term -> primary_expression .)
    K_TEXT          reduce using rule 36 (expression_term -> primary_expression .)
    $end            reduce using rule 36 (expression_term -> primary_expression .)
    K_EL            reduce using rule 36 (expression_term -> primary_expression .)
    K_EF            reduce using rule 36 (expression_term -> primary_expression .)
    K_END           reduce using rule 36 (expression_term -> primary_expression .)
    RPAREN          reduce using rule 36 (expression_term -> primary_expression .)
    COMMA           reduce using rule 36 (expression_term -> primary_expression .)


state 44

    (49) primary_expression -> LPAREN . expression RPAREN
    (33) expression -> . expression op expression_term
    (34) expression -> . expression_term
    (35) expression_term -> . expression_term op primary_expression
    (36) expression_term -> . primary_expression
    (46) primary_expression -> . constant
    (47) primary_expression -> . ID
    (48) primary_expression -> . function_call_statement
    (49) primary_expression -> . LPAREN expression RPAREN
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . STRING
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (53) boolean_constant -> . K_TRUE
    (54) boolean_constant -> . K_FALSE
    (62) number -> . INTEGER
    (63) number -> . DOUBLE

    ID              shift and go to state 45
    LPAREN          shift and go to state 44
    STRING          shift and go to state 42
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 50
    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 46

    expression_term                shift and go to state 37
    constant                       shift and go to state 38
    number                         shift and go to state 39
    function_call_statement        shift and go to state 47
    primary_expression             shift and go to state 43
    boolean_constant               shift and go to state 49
    expression                     shift and go to state 73

state 45

    (47) primary_expression -> ID .
    (11) function_call_statement -> ID . LPAREN parameter_list RPAREN
    (12) function_call_statement -> ID . LPAREN RPAREN

    PLUS            reduce using rule 47 (primary_expression -> ID .)
    MINUS           reduce using rule 47 (primary_expression -> ID .)
    TIMES           reduce using rule 47 (primary_expression -> ID .)
    DIVIDE          reduce using rule 47 (primary_expression -> ID .)
    MOD             reduce using rule 47 (primary_expression -> ID .)
    GT              reduce using rule 47 (primary_expression -> ID .)
    LT              reduce using rule 47 (primary_expression -> ID .)
    GEQ             reduce using rule 47 (primary_expression -> ID .)
    LEQ             reduce using rule 47 (primary_expression -> ID .)
    EQ              reduce using rule 47 (primary_expression -> ID .)
    NEQ             reduce using rule 47 (primary_expression -> ID .)
    AND             reduce using rule 47 (primary_expression -> ID .)
    OR              reduce using rule 47 (primary_expression -> ID .)
    RPAREN          reduce using rule 47 (primary_expression -> ID .)
    K_LIST          reduce using rule 47 (primary_expression -> ID .)
    K_DICT          reduce using rule 47 (primary_expression -> ID .)
    K_SET           reduce using rule 47 (primary_expression -> ID .)
    ID              reduce using rule 47 (primary_expression -> ID .)
    K_IF            reduce using rule 47 (primary_expression -> ID .)
    K_WHILE         reduce using rule 47 (primary_expression -> ID .)
    K_CONTINUE      reduce using rule 47 (primary_expression -> ID .)
    K_BREAK         reduce using rule 47 (primary_expression -> ID .)
    K_DONE          reduce using rule 47 (primary_expression -> ID .)
    K_INT           reduce using rule 47 (primary_expression -> ID .)
    K_DOUBLE        reduce using rule 47 (primary_expression -> ID .)
    K_STRING        reduce using rule 47 (primary_expression -> ID .)
    K_BOOL          reduce using rule 47 (primary_expression -> ID .)
    K_WINDOW        reduce using rule 47 (primary_expression -> ID .)
    K_SHAPE         reduce using rule 47 (primary_expression -> ID .)
    K_TRIANGLE      reduce using rule 47 (primary_expression -> ID .)
    K_RECTANGLE     reduce using rule 47 (primary_expression -> ID .)
    K_CIRCLE        reduce using rule 47 (primary_expression -> ID .)
    K_POINT         reduce using rule 47 (primary_expression -> ID .)
    K_TEXT          reduce using rule 47 (primary_expression -> ID .)
    $end            reduce using rule 47 (primary_expression -> ID .)
    K_EL            reduce using rule 47 (primary_expression -> ID .)
    K_EF            reduce using rule 47 (primary_expression -> ID .)
    K_END           reduce using rule 47 (primary_expression -> ID .)
    COMMA           reduce using rule 47 (primary_expression -> ID .)
    LPAREN          shift and go to state 36


state 46

    (63) number -> DOUBLE .

    PLUS            reduce using rule 63 (number -> DOUBLE .)
    MINUS           reduce using rule 63 (number -> DOUBLE .)
    TIMES           reduce using rule 63 (number -> DOUBLE .)
    DIVIDE          reduce using rule 63 (number -> DOUBLE .)
    MOD             reduce using rule 63 (number -> DOUBLE .)
    GT              reduce using rule 63 (number -> DOUBLE .)
    LT              reduce using rule 63 (number -> DOUBLE .)
    GEQ             reduce using rule 63 (number -> DOUBLE .)
    LEQ             reduce using rule 63 (number -> DOUBLE .)
    EQ              reduce using rule 63 (number -> DOUBLE .)
    NEQ             reduce using rule 63 (number -> DOUBLE .)
    AND             reduce using rule 63 (number -> DOUBLE .)
    OR              reduce using rule 63 (number -> DOUBLE .)
    RPAREN          reduce using rule 63 (number -> DOUBLE .)
    K_LIST          reduce using rule 63 (number -> DOUBLE .)
    K_DICT          reduce using rule 63 (number -> DOUBLE .)
    K_SET           reduce using rule 63 (number -> DOUBLE .)
    ID              reduce using rule 63 (number -> DOUBLE .)
    K_IF            reduce using rule 63 (number -> DOUBLE .)
    K_WHILE         reduce using rule 63 (number -> DOUBLE .)
    K_CONTINUE      reduce using rule 63 (number -> DOUBLE .)
    K_BREAK         reduce using rule 63 (number -> DOUBLE .)
    K_DONE          reduce using rule 63 (number -> DOUBLE .)
    K_INT           reduce using rule 63 (number -> DOUBLE .)
    K_DOUBLE        reduce using rule 63 (number -> DOUBLE .)
    K_STRING        reduce using rule 63 (number -> DOUBLE .)
    K_BOOL          reduce using rule 63 (number -> DOUBLE .)
    K_WINDOW        reduce using rule 63 (number -> DOUBLE .)
    K_SHAPE         reduce using rule 63 (number -> DOUBLE .)
    K_TRIANGLE      reduce using rule 63 (number -> DOUBLE .)
    K_RECTANGLE     reduce using rule 63 (number -> DOUBLE .)
    K_CIRCLE        reduce using rule 63 (number -> DOUBLE .)
    K_POINT         reduce using rule 63 (number -> DOUBLE .)
    K_TEXT          reduce using rule 63 (number -> DOUBLE .)
    $end            reduce using rule 63 (number -> DOUBLE .)
    K_EL            reduce using rule 63 (number -> DOUBLE .)
    K_EF            reduce using rule 63 (number -> DOUBLE .)
    K_END           reduce using rule 63 (number -> DOUBLE .)
    COMMA           reduce using rule 63 (number -> DOUBLE .)


state 47

    (48) primary_expression -> function_call_statement .

    PLUS            reduce using rule 48 (primary_expression -> function_call_statement .)
    MINUS           reduce using rule 48 (primary_expression -> function_call_statement .)
    TIMES           reduce using rule 48 (primary_expression -> function_call_statement .)
    DIVIDE          reduce using rule 48 (primary_expression -> function_call_statement .)
    MOD             reduce using rule 48 (primary_expression -> function_call_statement .)
    GT              reduce using rule 48 (primary_expression -> function_call_statement .)
    LT              reduce using rule 48 (primary_expression -> function_call_statement .)
    GEQ             reduce using rule 48 (primary_expression -> function_call_statement .)
    LEQ             reduce using rule 48 (primary_expression -> function_call_statement .)
    EQ              reduce using rule 48 (primary_expression -> function_call_statement .)
    NEQ             reduce using rule 48 (primary_expression -> function_call_statement .)
    AND             reduce using rule 48 (primary_expression -> function_call_statement .)
    OR              reduce using rule 48 (primary_expression -> function_call_statement .)
    RPAREN          reduce using rule 48 (primary_expression -> function_call_statement .)
    K_LIST          reduce using rule 48 (primary_expression -> function_call_statement .)
    K_DICT          reduce using rule 48 (primary_expression -> function_call_statement .)
    K_SET           reduce using rule 48 (primary_expression -> function_call_statement .)
    ID              reduce using rule 48 (primary_expression -> function_call_statement .)
    K_IF            reduce using rule 48 (primary_expression -> function_call_statement .)
    K_WHILE         reduce using rule 48 (primary_expression -> function_call_statement .)
    K_CONTINUE      reduce using rule 48 (primary_expression -> function_call_statement .)
    K_BREAK         reduce using rule 48 (primary_expression -> function_call_statement .)
    K_DONE          reduce using rule 48 (primary_expression -> function_call_statement .)
    K_INT           reduce using rule 48 (primary_expression -> function_call_statement .)
    K_DOUBLE        reduce using rule 48 (primary_expression -> function_call_statement .)
    K_STRING        reduce using rule 48 (primary_expression -> function_call_statement .)
    K_BOOL          reduce using rule 48 (primary_expression -> function_call_statement .)
    K_WINDOW        reduce using rule 48 (primary_expression -> function_call_statement .)
    K_SHAPE         reduce using rule 48 (primary_expression -> function_call_statement .)
    K_TRIANGLE      reduce using rule 48 (primary_expression -> function_call_statement .)
    K_RECTANGLE     reduce using rule 48 (primary_expression -> function_call_statement .)
    K_CIRCLE        reduce using rule 48 (primary_expression -> function_call_statement .)
    K_POINT         reduce using rule 48 (primary_expression -> function_call_statement .)
    K_TEXT          reduce using rule 48 (primary_expression -> function_call_statement .)
    $end            reduce using rule 48 (primary_expression -> function_call_statement .)
    K_EL            reduce using rule 48 (primary_expression -> function_call_statement .)
    K_EF            reduce using rule 48 (primary_expression -> function_call_statement .)
    K_END           reduce using rule 48 (primary_expression -> function_call_statement .)
    COMMA           reduce using rule 48 (primary_expression -> function_call_statement .)


state 48

    (64) selection_statement -> K_IF LPAREN expression . RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (33) expression -> expression . op expression_term
    (37) op -> . PLUS
    (38) op -> . MINUS
    (39) op -> . TIMES
    (40) op -> . DIVIDE
    (41) op -> . MOD
    (42) op -> . comparator
    (43) op -> . boolean_operator
    (56) comparator -> . GT
    (57) comparator -> . LT
    (58) comparator -> . GEQ
    (59) comparator -> . LEQ
    (60) comparator -> . EQ
    (61) comparator -> . NEQ
    (44) boolean_operator -> . AND
    (45) boolean_operator -> . OR

    RPAREN          shift and go to state 74
    PLUS            shift and go to state 68
    MINUS           shift and go to state 71
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 69
    GT              shift and go to state 59
    LT              shift and go to state 67
    GEQ             shift and go to state 58
    LEQ             shift and go to state 66
    EQ              shift and go to state 70
    NEQ             shift and go to state 57
    AND             shift and go to state 63
    OR              shift and go to state 64

    comparator                     shift and go to state 61
    boolean_operator               shift and go to state 62
    op                             shift and go to state 75

state 49

    (50) constant -> boolean_constant .

    PLUS            reduce using rule 50 (constant -> boolean_constant .)
    MINUS           reduce using rule 50 (constant -> boolean_constant .)
    TIMES           reduce using rule 50 (constant -> boolean_constant .)
    DIVIDE          reduce using rule 50 (constant -> boolean_constant .)
    MOD             reduce using rule 50 (constant -> boolean_constant .)
    GT              reduce using rule 50 (constant -> boolean_constant .)
    LT              reduce using rule 50 (constant -> boolean_constant .)
    GEQ             reduce using rule 50 (constant -> boolean_constant .)
    LEQ             reduce using rule 50 (constant -> boolean_constant .)
    EQ              reduce using rule 50 (constant -> boolean_constant .)
    NEQ             reduce using rule 50 (constant -> boolean_constant .)
    AND             reduce using rule 50 (constant -> boolean_constant .)
    OR              reduce using rule 50 (constant -> boolean_constant .)
    RPAREN          reduce using rule 50 (constant -> boolean_constant .)
    K_LIST          reduce using rule 50 (constant -> boolean_constant .)
    K_DICT          reduce using rule 50 (constant -> boolean_constant .)
    K_SET           reduce using rule 50 (constant -> boolean_constant .)
    ID              reduce using rule 50 (constant -> boolean_constant .)
    K_IF            reduce using rule 50 (constant -> boolean_constant .)
    K_WHILE         reduce using rule 50 (constant -> boolean_constant .)
    K_CONTINUE      reduce using rule 50 (constant -> boolean_constant .)
    K_BREAK         reduce using rule 50 (constant -> boolean_constant .)
    K_DONE          reduce using rule 50 (constant -> boolean_constant .)
    K_INT           reduce using rule 50 (constant -> boolean_constant .)
    K_DOUBLE        reduce using rule 50 (constant -> boolean_constant .)
    K_STRING        reduce using rule 50 (constant -> boolean_constant .)
    K_BOOL          reduce using rule 50 (constant -> boolean_constant .)
    K_WINDOW        reduce using rule 50 (constant -> boolean_constant .)
    K_SHAPE         reduce using rule 50 (constant -> boolean_constant .)
    K_TRIANGLE      reduce using rule 50 (constant -> boolean_constant .)
    K_RECTANGLE     reduce using rule 50 (constant -> boolean_constant .)
    K_CIRCLE        reduce using rule 50 (constant -> boolean_constant .)
    K_POINT         reduce using rule 50 (constant -> boolean_constant .)
    K_TEXT          reduce using rule 50 (constant -> boolean_constant .)
    $end            reduce using rule 50 (constant -> boolean_constant .)
    K_EL            reduce using rule 50 (constant -> boolean_constant .)
    K_EF            reduce using rule 50 (constant -> boolean_constant .)
    K_END           reduce using rule 50 (constant -> boolean_constant .)
    COMMA           reduce using rule 50 (constant -> boolean_constant .)


state 50

    (54) boolean_constant -> K_FALSE .

    K_END           reduce using rule 54 (boolean_constant -> K_FALSE .)
    ID              reduce using rule 54 (boolean_constant -> K_FALSE .)
    K_IF            reduce using rule 54 (boolean_constant -> K_FALSE .)
    K_WHILE         reduce using rule 54 (boolean_constant -> K_FALSE .)
    K_CONTINUE      reduce using rule 54 (boolean_constant -> K_FALSE .)
    K_BREAK         reduce using rule 54 (boolean_constant -> K_FALSE .)
    K_DONE          reduce using rule 54 (boolean_constant -> K_FALSE .)
    K_LIST          reduce using rule 54 (boolean_constant -> K_FALSE .)
    K_DICT          reduce using rule 54 (boolean_constant -> K_FALSE .)
    K_SET           reduce using rule 54 (boolean_constant -> K_FALSE .)
    K_INT           reduce using rule 54 (boolean_constant -> K_FALSE .)
    K_DOUBLE        reduce using rule 54 (boolean_constant -> K_FALSE .)
    K_STRING        reduce using rule 54 (boolean_constant -> K_FALSE .)
    K_BOOL          reduce using rule 54 (boolean_constant -> K_FALSE .)
    K_WINDOW        reduce using rule 54 (boolean_constant -> K_FALSE .)
    K_SHAPE         reduce using rule 54 (boolean_constant -> K_FALSE .)
    K_TRIANGLE      reduce using rule 54 (boolean_constant -> K_FALSE .)
    K_RECTANGLE     reduce using rule 54 (boolean_constant -> K_FALSE .)
    K_CIRCLE        reduce using rule 54 (boolean_constant -> K_FALSE .)
    K_POINT         reduce using rule 54 (boolean_constant -> K_FALSE .)
    K_TEXT          reduce using rule 54 (boolean_constant -> K_FALSE .)
    PLUS            reduce using rule 54 (boolean_constant -> K_FALSE .)
    MINUS           reduce using rule 54 (boolean_constant -> K_FALSE .)
    TIMES           reduce using rule 54 (boolean_constant -> K_FALSE .)
    DIVIDE          reduce using rule 54 (boolean_constant -> K_FALSE .)
    MOD             reduce using rule 54 (boolean_constant -> K_FALSE .)
    GT              reduce using rule 54 (boolean_constant -> K_FALSE .)
    LT              reduce using rule 54 (boolean_constant -> K_FALSE .)
    GEQ             reduce using rule 54 (boolean_constant -> K_FALSE .)
    LEQ             reduce using rule 54 (boolean_constant -> K_FALSE .)
    EQ              reduce using rule 54 (boolean_constant -> K_FALSE .)
    NEQ             reduce using rule 54 (boolean_constant -> K_FALSE .)
    AND             reduce using rule 54 (boolean_constant -> K_FALSE .)
    OR              reduce using rule 54 (boolean_constant -> K_FALSE .)
    RPAREN          reduce using rule 54 (boolean_constant -> K_FALSE .)
    $end            reduce using rule 54 (boolean_constant -> K_FALSE .)
    K_EL            reduce using rule 54 (boolean_constant -> K_FALSE .)
    K_EF            reduce using rule 54 (boolean_constant -> K_FALSE .)
    COMMA           reduce using rule 54 (boolean_constant -> K_FALSE .)


state 51

    (72) iteration_statement -> K_WHILE LPAREN expression . RPAREN compound_statement_list K_END
    (33) expression -> expression . op expression_term
    (37) op -> . PLUS
    (38) op -> . MINUS
    (39) op -> . TIMES
    (40) op -> . DIVIDE
    (41) op -> . MOD
    (42) op -> . comparator
    (43) op -> . boolean_operator
    (56) comparator -> . GT
    (57) comparator -> . LT
    (58) comparator -> . GEQ
    (59) comparator -> . LEQ
    (60) comparator -> . EQ
    (61) comparator -> . NEQ
    (44) boolean_operator -> . AND
    (45) boolean_operator -> . OR

    RPAREN          shift and go to state 76
    PLUS            shift and go to state 68
    MINUS           shift and go to state 71
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 69
    GT              shift and go to state 59
    LT              shift and go to state 67
    GEQ             shift and go to state 58
    LEQ             shift and go to state 66
    EQ              shift and go to state 70
    NEQ             shift and go to state 57
    AND             shift and go to state 63
    OR              shift and go to state 64

    comparator                     shift and go to state 61
    boolean_operator               shift and go to state 62
    op                             shift and go to state 75

state 52

    (76) function_declaration -> pre_type_modifier type ID . LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END
    (77) function_declaration -> pre_type_modifier type ID . LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END
    (15) variable_declaration -> pre_type_modifier type ID .
    (16) variable_declaration -> pre_type_modifier type ID . ASSIGN expression

    LPAREN          shift and go to state 78
    K_LIST          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DICT          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_SET           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    ID              reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_IF            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_WHILE         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_CONTINUE      reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_BREAK         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DONE          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_INT           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DOUBLE        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_STRING        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_BOOL          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_WINDOW        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_SHAPE         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_TRIANGLE      reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_RECTANGLE     reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_CIRCLE        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_POINT         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_TEXT          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    $end            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    ASSIGN          shift and go to state 77


state 53

    (17) variable_declaration -> ID ASSIGN expression .
    (33) expression -> expression . op expression_term
    (37) op -> . PLUS
    (38) op -> . MINUS
    (39) op -> . TIMES
    (40) op -> . DIVIDE
    (41) op -> . MOD
    (42) op -> . comparator
    (43) op -> . boolean_operator
    (56) comparator -> . GT
    (57) comparator -> . LT
    (58) comparator -> . GEQ
    (59) comparator -> . LEQ
    (60) comparator -> . EQ
    (61) comparator -> . NEQ
    (44) boolean_operator -> . AND
    (45) boolean_operator -> . OR

    K_END           reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    ID              reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_IF            reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_WHILE         reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_CONTINUE      reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_BREAK         reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_DONE          reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_LIST          reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_DICT          reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_SET           reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_INT           reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_DOUBLE        reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_STRING        reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_BOOL          reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_WINDOW        reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_SHAPE         reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_TRIANGLE      reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_RECTANGLE     reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_CIRCLE        reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_POINT         reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_TEXT          reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    $end            reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_EL            reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    K_EF            reduce using rule 17 (variable_declaration -> ID ASSIGN expression .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 71
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 69
    GT              shift and go to state 59
    LT              shift and go to state 67
    GEQ             shift and go to state 58
    LEQ             shift and go to state 66
    EQ              shift and go to state 70
    NEQ             shift and go to state 57
    AND             shift and go to state 63
    OR              shift and go to state 64

    boolean_operator               shift and go to state 62
    comparator                     shift and go to state 61
    op                             shift and go to state 75

state 54

    (12) function_call_statement -> ID LPAREN RPAREN .

    PLUS            reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    MOD             reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    GT              reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    LT              reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    GEQ             reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    LEQ             reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    EQ              reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    NEQ             reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    AND             reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    OR              reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    ID              reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_IF            reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_WHILE         reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_CONTINUE      reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_BREAK         reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_DONE          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_LIST          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_DICT          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_SET           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_INT           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_DOUBLE        reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_STRING        reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_BOOL          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_WINDOW        reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_SHAPE         reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_TRIANGLE      reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_RECTANGLE     reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_CIRCLE        reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_POINT         reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_TEXT          reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_EL            reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_EF            reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    K_END           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    $end            reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 12 (function_call_statement -> ID LPAREN RPAREN .)


state 55

    (11) function_call_statement -> ID LPAREN parameter_list . RPAREN
    (13) parameter_list -> parameter_list . COMMA expression

    RPAREN          shift and go to state 79
    COMMA           shift and go to state 80


state 56

    (14) parameter_list -> expression .
    (33) expression -> expression . op expression_term
    (37) op -> . PLUS
    (38) op -> . MINUS
    (39) op -> . TIMES
    (40) op -> . DIVIDE
    (41) op -> . MOD
    (42) op -> . comparator
    (43) op -> . boolean_operator
    (56) comparator -> . GT
    (57) comparator -> . LT
    (58) comparator -> . GEQ
    (59) comparator -> . LEQ
    (60) comparator -> . EQ
    (61) comparator -> . NEQ
    (44) boolean_operator -> . AND
    (45) boolean_operator -> . OR

    RPAREN          reduce using rule 14 (parameter_list -> expression .)
    COMMA           reduce using rule 14 (parameter_list -> expression .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 71
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 69
    GT              shift and go to state 59
    LT              shift and go to state 67
    GEQ             shift and go to state 58
    LEQ             shift and go to state 66
    EQ              shift and go to state 70
    NEQ             shift and go to state 57
    AND             shift and go to state 63
    OR              shift and go to state 64

    boolean_operator               shift and go to state 62
    comparator                     shift and go to state 61
    op                             shift and go to state 75

state 57

    (61) comparator -> NEQ .

    ID              reduce using rule 61 (comparator -> NEQ .)
    LPAREN          reduce using rule 61 (comparator -> NEQ .)
    STRING          reduce using rule 61 (comparator -> NEQ .)
    K_TRUE          reduce using rule 61 (comparator -> NEQ .)
    K_FALSE         reduce using rule 61 (comparator -> NEQ .)
    INTEGER         reduce using rule 61 (comparator -> NEQ .)
    DOUBLE          reduce using rule 61 (comparator -> NEQ .)


state 58

    (58) comparator -> GEQ .

    ID              reduce using rule 58 (comparator -> GEQ .)
    LPAREN          reduce using rule 58 (comparator -> GEQ .)
    STRING          reduce using rule 58 (comparator -> GEQ .)
    K_TRUE          reduce using rule 58 (comparator -> GEQ .)
    K_FALSE         reduce using rule 58 (comparator -> GEQ .)
    INTEGER         reduce using rule 58 (comparator -> GEQ .)
    DOUBLE          reduce using rule 58 (comparator -> GEQ .)


state 59

    (56) comparator -> GT .

    ID              reduce using rule 56 (comparator -> GT .)
    LPAREN          reduce using rule 56 (comparator -> GT .)
    STRING          reduce using rule 56 (comparator -> GT .)
    K_TRUE          reduce using rule 56 (comparator -> GT .)
    K_FALSE         reduce using rule 56 (comparator -> GT .)
    INTEGER         reduce using rule 56 (comparator -> GT .)
    DOUBLE          reduce using rule 56 (comparator -> GT .)


state 60

    (40) op -> DIVIDE .

    ID              reduce using rule 40 (op -> DIVIDE .)
    LPAREN          reduce using rule 40 (op -> DIVIDE .)
    STRING          reduce using rule 40 (op -> DIVIDE .)
    K_TRUE          reduce using rule 40 (op -> DIVIDE .)
    K_FALSE         reduce using rule 40 (op -> DIVIDE .)
    INTEGER         reduce using rule 40 (op -> DIVIDE .)
    DOUBLE          reduce using rule 40 (op -> DIVIDE .)


state 61

    (42) op -> comparator .

    ID              reduce using rule 42 (op -> comparator .)
    LPAREN          reduce using rule 42 (op -> comparator .)
    STRING          reduce using rule 42 (op -> comparator .)
    K_TRUE          reduce using rule 42 (op -> comparator .)
    K_FALSE         reduce using rule 42 (op -> comparator .)
    INTEGER         reduce using rule 42 (op -> comparator .)
    DOUBLE          reduce using rule 42 (op -> comparator .)


state 62

    (43) op -> boolean_operator .

    ID              reduce using rule 43 (op -> boolean_operator .)
    LPAREN          reduce using rule 43 (op -> boolean_operator .)
    STRING          reduce using rule 43 (op -> boolean_operator .)
    K_TRUE          reduce using rule 43 (op -> boolean_operator .)
    K_FALSE         reduce using rule 43 (op -> boolean_operator .)
    INTEGER         reduce using rule 43 (op -> boolean_operator .)
    DOUBLE          reduce using rule 43 (op -> boolean_operator .)


state 63

    (44) boolean_operator -> AND .

    ID              reduce using rule 44 (boolean_operator -> AND .)
    LPAREN          reduce using rule 44 (boolean_operator -> AND .)
    STRING          reduce using rule 44 (boolean_operator -> AND .)
    K_TRUE          reduce using rule 44 (boolean_operator -> AND .)
    K_FALSE         reduce using rule 44 (boolean_operator -> AND .)
    INTEGER         reduce using rule 44 (boolean_operator -> AND .)
    DOUBLE          reduce using rule 44 (boolean_operator -> AND .)


state 64

    (45) boolean_operator -> OR .

    ID              reduce using rule 45 (boolean_operator -> OR .)
    LPAREN          reduce using rule 45 (boolean_operator -> OR .)
    STRING          reduce using rule 45 (boolean_operator -> OR .)
    K_TRUE          reduce using rule 45 (boolean_operator -> OR .)
    K_FALSE         reduce using rule 45 (boolean_operator -> OR .)
    INTEGER         reduce using rule 45 (boolean_operator -> OR .)
    DOUBLE          reduce using rule 45 (boolean_operator -> OR .)


state 65

    (39) op -> TIMES .

    ID              reduce using rule 39 (op -> TIMES .)
    LPAREN          reduce using rule 39 (op -> TIMES .)
    STRING          reduce using rule 39 (op -> TIMES .)
    K_TRUE          reduce using rule 39 (op -> TIMES .)
    K_FALSE         reduce using rule 39 (op -> TIMES .)
    INTEGER         reduce using rule 39 (op -> TIMES .)
    DOUBLE          reduce using rule 39 (op -> TIMES .)


state 66

    (59) comparator -> LEQ .

    ID              reduce using rule 59 (comparator -> LEQ .)
    LPAREN          reduce using rule 59 (comparator -> LEQ .)
    STRING          reduce using rule 59 (comparator -> LEQ .)
    K_TRUE          reduce using rule 59 (comparator -> LEQ .)
    K_FALSE         reduce using rule 59 (comparator -> LEQ .)
    INTEGER         reduce using rule 59 (comparator -> LEQ .)
    DOUBLE          reduce using rule 59 (comparator -> LEQ .)


state 67

    (57) comparator -> LT .

    ID              reduce using rule 57 (comparator -> LT .)
    LPAREN          reduce using rule 57 (comparator -> LT .)
    STRING          reduce using rule 57 (comparator -> LT .)
    K_TRUE          reduce using rule 57 (comparator -> LT .)
    K_FALSE         reduce using rule 57 (comparator -> LT .)
    INTEGER         reduce using rule 57 (comparator -> LT .)
    DOUBLE          reduce using rule 57 (comparator -> LT .)


state 68

    (37) op -> PLUS .

    ID              reduce using rule 37 (op -> PLUS .)
    LPAREN          reduce using rule 37 (op -> PLUS .)
    STRING          reduce using rule 37 (op -> PLUS .)
    K_TRUE          reduce using rule 37 (op -> PLUS .)
    K_FALSE         reduce using rule 37 (op -> PLUS .)
    INTEGER         reduce using rule 37 (op -> PLUS .)
    DOUBLE          reduce using rule 37 (op -> PLUS .)


state 69

    (41) op -> MOD .

    ID              reduce using rule 41 (op -> MOD .)
    LPAREN          reduce using rule 41 (op -> MOD .)
    STRING          reduce using rule 41 (op -> MOD .)
    K_TRUE          reduce using rule 41 (op -> MOD .)
    K_FALSE         reduce using rule 41 (op -> MOD .)
    INTEGER         reduce using rule 41 (op -> MOD .)
    DOUBLE          reduce using rule 41 (op -> MOD .)


state 70

    (60) comparator -> EQ .

    ID              reduce using rule 60 (comparator -> EQ .)
    LPAREN          reduce using rule 60 (comparator -> EQ .)
    STRING          reduce using rule 60 (comparator -> EQ .)
    K_TRUE          reduce using rule 60 (comparator -> EQ .)
    K_FALSE         reduce using rule 60 (comparator -> EQ .)
    INTEGER         reduce using rule 60 (comparator -> EQ .)
    DOUBLE          reduce using rule 60 (comparator -> EQ .)


state 71

    (38) op -> MINUS .

    ID              reduce using rule 38 (op -> MINUS .)
    LPAREN          reduce using rule 38 (op -> MINUS .)
    STRING          reduce using rule 38 (op -> MINUS .)
    K_TRUE          reduce using rule 38 (op -> MINUS .)
    K_FALSE         reduce using rule 38 (op -> MINUS .)
    INTEGER         reduce using rule 38 (op -> MINUS .)
    DOUBLE          reduce using rule 38 (op -> MINUS .)


state 72

    (35) expression_term -> expression_term op . primary_expression
    (46) primary_expression -> . constant
    (47) primary_expression -> . ID
    (48) primary_expression -> . function_call_statement
    (49) primary_expression -> . LPAREN expression RPAREN
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . STRING
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (53) boolean_constant -> . K_TRUE
    (54) boolean_constant -> . K_FALSE
    (62) number -> . INTEGER
    (63) number -> . DOUBLE

    ID              shift and go to state 45
    LPAREN          shift and go to state 44
    STRING          shift and go to state 42
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 50
    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 46

    constant                       shift and go to state 38
    number                         shift and go to state 39
    function_call_statement        shift and go to state 47
    primary_expression             shift and go to state 81
    boolean_constant               shift and go to state 49

state 73

    (49) primary_expression -> LPAREN expression . RPAREN
    (33) expression -> expression . op expression_term
    (37) op -> . PLUS
    (38) op -> . MINUS
    (39) op -> . TIMES
    (40) op -> . DIVIDE
    (41) op -> . MOD
    (42) op -> . comparator
    (43) op -> . boolean_operator
    (56) comparator -> . GT
    (57) comparator -> . LT
    (58) comparator -> . GEQ
    (59) comparator -> . LEQ
    (60) comparator -> . EQ
    (61) comparator -> . NEQ
    (44) boolean_operator -> . AND
    (45) boolean_operator -> . OR

    RPAREN          shift and go to state 82
    PLUS            shift and go to state 68
    MINUS           shift and go to state 71
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 69
    GT              shift and go to state 59
    LT              shift and go to state 67
    GEQ             shift and go to state 58
    LEQ             shift and go to state 66
    EQ              shift and go to state 70
    NEQ             shift and go to state 57
    AND             shift and go to state 63
    OR              shift and go to state 64

    boolean_operator               shift and go to state 62
    comparator                     shift and go to state 61
    op                             shift and go to state 75

state 74

    (64) selection_statement -> K_IF LPAREN expression RPAREN . compound_statement_list else_if_statement_list else_statement K_END
    (70) compound_statement_list -> .
    (71) compound_statement_list -> . compound_statement_list compound_statement

    ID              reduce using rule 70 (compound_statement_list -> .)
    K_IF            reduce using rule 70 (compound_statement_list -> .)
    K_WHILE         reduce using rule 70 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 70 (compound_statement_list -> .)
    K_BREAK         reduce using rule 70 (compound_statement_list -> .)
    K_DONE          reduce using rule 70 (compound_statement_list -> .)
    K_LIST          reduce using rule 70 (compound_statement_list -> .)
    K_DICT          reduce using rule 70 (compound_statement_list -> .)
    K_SET           reduce using rule 70 (compound_statement_list -> .)
    K_EL            reduce using rule 70 (compound_statement_list -> .)
    K_EF            reduce using rule 70 (compound_statement_list -> .)
    K_END           reduce using rule 70 (compound_statement_list -> .)
    K_INT           reduce using rule 70 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 70 (compound_statement_list -> .)
    K_STRING        reduce using rule 70 (compound_statement_list -> .)
    K_BOOL          reduce using rule 70 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 70 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 70 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 70 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 70 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 70 (compound_statement_list -> .)
    K_POINT         reduce using rule 70 (compound_statement_list -> .)
    K_TEXT          reduce using rule 70 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 83

state 75

    (33) expression -> expression op . expression_term
    (35) expression_term -> . expression_term op primary_expression
    (36) expression_term -> . primary_expression
    (46) primary_expression -> . constant
    (47) primary_expression -> . ID
    (48) primary_expression -> . function_call_statement
    (49) primary_expression -> . LPAREN expression RPAREN
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . STRING
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (53) boolean_constant -> . K_TRUE
    (54) boolean_constant -> . K_FALSE
    (62) number -> . INTEGER
    (63) number -> . DOUBLE

    ID              shift and go to state 45
    LPAREN          shift and go to state 44
    STRING          shift and go to state 42
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 50
    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 46

    expression_term                shift and go to state 84
    constant                       shift and go to state 38
    number                         shift and go to state 39
    function_call_statement        shift and go to state 47
    primary_expression             shift and go to state 43
    boolean_constant               shift and go to state 49

state 76

    (72) iteration_statement -> K_WHILE LPAREN expression RPAREN . compound_statement_list K_END
    (70) compound_statement_list -> .
    (71) compound_statement_list -> . compound_statement_list compound_statement

    K_END           reduce using rule 70 (compound_statement_list -> .)
    ID              reduce using rule 70 (compound_statement_list -> .)
    K_IF            reduce using rule 70 (compound_statement_list -> .)
    K_WHILE         reduce using rule 70 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 70 (compound_statement_list -> .)
    K_BREAK         reduce using rule 70 (compound_statement_list -> .)
    K_DONE          reduce using rule 70 (compound_statement_list -> .)
    K_LIST          reduce using rule 70 (compound_statement_list -> .)
    K_DICT          reduce using rule 70 (compound_statement_list -> .)
    K_SET           reduce using rule 70 (compound_statement_list -> .)
    K_INT           reduce using rule 70 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 70 (compound_statement_list -> .)
    K_STRING        reduce using rule 70 (compound_statement_list -> .)
    K_BOOL          reduce using rule 70 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 70 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 70 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 70 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 70 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 70 (compound_statement_list -> .)
    K_POINT         reduce using rule 70 (compound_statement_list -> .)
    K_TEXT          reduce using rule 70 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 85

state 77

    (16) variable_declaration -> pre_type_modifier type ID ASSIGN . expression
    (33) expression -> . expression op expression_term
    (34) expression -> . expression_term
    (35) expression_term -> . expression_term op primary_expression
    (36) expression_term -> . primary_expression
    (46) primary_expression -> . constant
    (47) primary_expression -> . ID
    (48) primary_expression -> . function_call_statement
    (49) primary_expression -> . LPAREN expression RPAREN
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . STRING
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (53) boolean_constant -> . K_TRUE
    (54) boolean_constant -> . K_FALSE
    (62) number -> . INTEGER
    (63) number -> . DOUBLE

    ID              shift and go to state 45
    LPAREN          shift and go to state 44
    STRING          shift and go to state 42
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 50
    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 46

    expression_term                shift and go to state 37
    boolean_constant               shift and go to state 49
    constant                       shift and go to state 38
    number                         shift and go to state 39
    function_call_statement        shift and go to state 47
    primary_expression             shift and go to state 43
    expression                     shift and go to state 86

state 78

    (76) function_declaration -> pre_type_modifier type ID LPAREN . argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END
    (77) function_declaration -> pre_type_modifier type ID LPAREN . RPAREN ASSIGN unary_expression compound_statement_list K_END
    (78) argument_list -> . argument_list COMMA argument
    (79) argument_list -> . argument
    (80) argument -> . pre_type_modifier type ID
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    RPAREN          shift and go to state 87
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    argument                       shift and go to state 88
    argument_list                  shift and go to state 89
    pre_type_modifier              shift and go to state 90

state 79

    (11) function_call_statement -> ID LPAREN parameter_list RPAREN .

    PLUS            reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    MOD             reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    GT              reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    LT              reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    GEQ             reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    LEQ             reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    EQ              reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    NEQ             reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    AND             reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    OR              reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    ID              reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_IF            reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_WHILE         reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_CONTINUE      reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_BREAK         reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_DONE          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_LIST          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_DICT          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_SET           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_INT           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_DOUBLE        reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_STRING        reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_BOOL          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_WINDOW        reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_SHAPE         reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_TRIANGLE      reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_RECTANGLE     reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_CIRCLE        reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_POINT         reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_TEXT          reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_EL            reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_EF            reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    K_END           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    $end            reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 11 (function_call_statement -> ID LPAREN parameter_list RPAREN .)


state 80

    (13) parameter_list -> parameter_list COMMA . expression
    (33) expression -> . expression op expression_term
    (34) expression -> . expression_term
    (35) expression_term -> . expression_term op primary_expression
    (36) expression_term -> . primary_expression
    (46) primary_expression -> . constant
    (47) primary_expression -> . ID
    (48) primary_expression -> . function_call_statement
    (49) primary_expression -> . LPAREN expression RPAREN
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . STRING
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (53) boolean_constant -> . K_TRUE
    (54) boolean_constant -> . K_FALSE
    (62) number -> . INTEGER
    (63) number -> . DOUBLE

    ID              shift and go to state 45
    LPAREN          shift and go to state 44
    STRING          shift and go to state 42
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 50
    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 46

    expression_term                shift and go to state 37
    constant                       shift and go to state 38
    number                         shift and go to state 39
    function_call_statement        shift and go to state 47
    primary_expression             shift and go to state 43
    boolean_constant               shift and go to state 49
    expression                     shift and go to state 91

state 81

    (35) expression_term -> expression_term op primary_expression .

    PLUS            reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    MINUS           reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    TIMES           reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    DIVIDE          reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    MOD             reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    GT              reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    LT              reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    GEQ             reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    LEQ             reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    EQ              reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    NEQ             reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    AND             reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    OR              reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    K_LIST          reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    K_DICT          reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    K_SET           reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    ID              reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    K_IF            reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    K_WHILE         reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    K_CONTINUE      reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    K_BREAK         reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    K_DONE          reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    K_INT           reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    K_DOUBLE        reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    K_STRING        reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    K_BOOL          reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    K_WINDOW        reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    K_SHAPE         reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    K_TRIANGLE      reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    K_RECTANGLE     reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    K_CIRCLE        reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    K_POINT         reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    K_TEXT          reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    $end            reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    K_EL            reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    K_EF            reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    K_END           reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    RPAREN          reduce using rule 35 (expression_term -> expression_term op primary_expression .)
    COMMA           reduce using rule 35 (expression_term -> expression_term op primary_expression .)


state 82

    (49) primary_expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    GEQ             reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    LEQ             reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    K_LIST          reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    K_DICT          reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    K_SET           reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    K_IF            reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    K_WHILE         reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    K_CONTINUE      reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    K_BREAK         reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    K_DONE          reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    K_INT           reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    K_DOUBLE        reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    K_STRING        reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    K_BOOL          reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    K_WINDOW        reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    K_SHAPE         reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    K_TRIANGLE      reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    K_RECTANGLE     reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    K_CIRCLE        reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    K_POINT         reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    K_TEXT          reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    K_EL            reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    K_EF            reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    K_END           reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 49 (primary_expression -> LPAREN expression RPAREN .)


state 83

    (64) selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list . else_if_statement_list else_statement K_END
    (71) compound_statement_list -> compound_statement_list . compound_statement
    (65) else_if_statement_list -> .
    (66) else_if_statement_list -> . else_if_statement_list else_if_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (64) selection_statement -> . K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (72) iteration_statement -> . K_WHILE LPAREN expression RPAREN compound_statement_list K_END
    (73) jump_statement -> . K_CONTINUE
    (74) jump_statement -> . K_BREAK
    (75) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_EL            reduce using rule 65 (else_if_statement_list -> .)
    K_EF            reduce using rule 65 (else_if_statement_list -> .)
    K_END           reduce using rule 65 (else_if_statement_list -> .)
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 20
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    jump_statement                 shift and go to state 17
    pre_type_modifier              shift and go to state 94
    compound_statement             shift and go to state 92
    iteration_statement            shift and go to state 5
    selection_statement            shift and go to state 3
    function_call_statement        shift and go to state 19
    variable_declaration           shift and go to state 6
    else_if_statement_list         shift and go to state 93

state 84

    (33) expression -> expression op expression_term .
    (35) expression_term -> expression_term . op primary_expression
    (37) op -> . PLUS
    (38) op -> . MINUS
    (39) op -> . TIMES
    (40) op -> . DIVIDE
    (41) op -> . MOD
    (42) op -> . comparator
    (43) op -> . boolean_operator
    (56) comparator -> . GT
    (57) comparator -> . LT
    (58) comparator -> . GEQ
    (59) comparator -> . LEQ
    (60) comparator -> . EQ
    (61) comparator -> . NEQ
    (44) boolean_operator -> . AND
    (45) boolean_operator -> . OR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RPAREN          reduce using rule 33 (expression -> expression op expression_term .)
    COMMA           reduce using rule 33 (expression -> expression op expression_term .)
    K_LIST          reduce using rule 33 (expression -> expression op expression_term .)
    K_DICT          reduce using rule 33 (expression -> expression op expression_term .)
    K_SET           reduce using rule 33 (expression -> expression op expression_term .)
    ID              reduce using rule 33 (expression -> expression op expression_term .)
    K_IF            reduce using rule 33 (expression -> expression op expression_term .)
    K_WHILE         reduce using rule 33 (expression -> expression op expression_term .)
    K_CONTINUE      reduce using rule 33 (expression -> expression op expression_term .)
    K_BREAK         reduce using rule 33 (expression -> expression op expression_term .)
    K_DONE          reduce using rule 33 (expression -> expression op expression_term .)
    K_INT           reduce using rule 33 (expression -> expression op expression_term .)
    K_DOUBLE        reduce using rule 33 (expression -> expression op expression_term .)
    K_STRING        reduce using rule 33 (expression -> expression op expression_term .)
    K_BOOL          reduce using rule 33 (expression -> expression op expression_term .)
    K_WINDOW        reduce using rule 33 (expression -> expression op expression_term .)
    K_SHAPE         reduce using rule 33 (expression -> expression op expression_term .)
    K_TRIANGLE      reduce using rule 33 (expression -> expression op expression_term .)
    K_RECTANGLE     reduce using rule 33 (expression -> expression op expression_term .)
    K_CIRCLE        reduce using rule 33 (expression -> expression op expression_term .)
    K_POINT         reduce using rule 33 (expression -> expression op expression_term .)
    K_TEXT          reduce using rule 33 (expression -> expression op expression_term .)
    $end            reduce using rule 33 (expression -> expression op expression_term .)
    K_EL            reduce using rule 33 (expression -> expression op expression_term .)
    K_EF            reduce using rule 33 (expression -> expression op expression_term .)
    K_END           reduce using rule 33 (expression -> expression op expression_term .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 71
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 69
    GT              shift and go to state 59
    LT              shift and go to state 67
    GEQ             shift and go to state 58
    LEQ             shift and go to state 66
    EQ              shift and go to state 70
    NEQ             shift and go to state 57
    AND             shift and go to state 63
    OR              shift and go to state 64

  ! PLUS            [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! MINUS           [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! TIMES           [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! DIVIDE          [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! MOD             [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! GT              [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! LT              [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! GEQ             [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! LEQ             [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! EQ              [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! NEQ             [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! AND             [ reduce using rule 33 (expression -> expression op expression_term .) ]
  ! OR              [ reduce using rule 33 (expression -> expression op expression_term .) ]

    comparator                     shift and go to state 61
    boolean_operator               shift and go to state 62
    op                             shift and go to state 72

state 85

    (72) iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list . K_END
    (71) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (64) selection_statement -> . K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (72) iteration_statement -> . K_WHILE LPAREN expression RPAREN compound_statement_list K_END
    (73) jump_statement -> . K_CONTINUE
    (74) jump_statement -> . K_BREAK
    (75) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_END           shift and go to state 95
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 20
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    jump_statement                 shift and go to state 17
    compound_statement             shift and go to state 92
    iteration_statement            shift and go to state 5
    selection_statement            shift and go to state 3
    function_call_statement        shift and go to state 19
    pre_type_modifier              shift and go to state 94
    variable_declaration           shift and go to state 6

state 86

    (16) variable_declaration -> pre_type_modifier type ID ASSIGN expression .
    (33) expression -> expression . op expression_term
    (37) op -> . PLUS
    (38) op -> . MINUS
    (39) op -> . TIMES
    (40) op -> . DIVIDE
    (41) op -> . MOD
    (42) op -> . comparator
    (43) op -> . boolean_operator
    (56) comparator -> . GT
    (57) comparator -> . LT
    (58) comparator -> . GEQ
    (59) comparator -> . LEQ
    (60) comparator -> . EQ
    (61) comparator -> . NEQ
    (44) boolean_operator -> . AND
    (45) boolean_operator -> . OR

    K_END           reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    ID              reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_IF            reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_WHILE         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_CONTINUE      reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_BREAK         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_DONE          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_LIST          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_DICT          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_SET           reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_INT           reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_DOUBLE        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_STRING        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_BOOL          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_WINDOW        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_SHAPE         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_TRIANGLE      reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_RECTANGLE     reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_CIRCLE        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_POINT         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_TEXT          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    $end            reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_EL            reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_EF            reduce using rule 16 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 71
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 69
    GT              shift and go to state 59
    LT              shift and go to state 67
    GEQ             shift and go to state 58
    LEQ             shift and go to state 66
    EQ              shift and go to state 70
    NEQ             shift and go to state 57
    AND             shift and go to state 63
    OR              shift and go to state 64

    comparator                     shift and go to state 61
    boolean_operator               shift and go to state 62
    op                             shift and go to state 75

state 87

    (77) function_declaration -> pre_type_modifier type ID LPAREN RPAREN . ASSIGN unary_expression compound_statement_list K_END

    ASSIGN          shift and go to state 96


state 88

    (79) argument_list -> argument .

    RPAREN          reduce using rule 79 (argument_list -> argument .)
    COMMA           reduce using rule 79 (argument_list -> argument .)


state 89

    (76) function_declaration -> pre_type_modifier type ID LPAREN argument_list . RPAREN ASSIGN unary_expression compound_statement_list K_END
    (78) argument_list -> argument_list . COMMA argument

    RPAREN          shift and go to state 97
    COMMA           shift and go to state 98


state 90

    (80) argument -> pre_type_modifier . type ID
    (22) type -> . K_INT
    (23) type -> . K_DOUBLE
    (24) type -> . K_STRING
    (25) type -> . K_BOOL
    (26) type -> . K_WINDOW
    (27) type -> . K_SHAPE
    (28) type -> . K_TRIANGLE
    (29) type -> . K_RECTANGLE
    (30) type -> . K_CIRCLE
    (31) type -> . K_POINT
    (32) type -> . K_TEXT

    K_INT           shift and go to state 30
    K_DOUBLE        shift and go to state 23
    K_STRING        shift and go to state 24
    K_BOOL          shift and go to state 31
    K_WINDOW        shift and go to state 34
    K_SHAPE         shift and go to state 27
    K_TRIANGLE      shift and go to state 25
    K_RECTANGLE     shift and go to state 33
    K_CIRCLE        shift and go to state 26
    K_POINT         shift and go to state 29
    K_TEXT          shift and go to state 28

    type                           shift and go to state 99

state 91

    (13) parameter_list -> parameter_list COMMA expression .
    (33) expression -> expression . op expression_term
    (37) op -> . PLUS
    (38) op -> . MINUS
    (39) op -> . TIMES
    (40) op -> . DIVIDE
    (41) op -> . MOD
    (42) op -> . comparator
    (43) op -> . boolean_operator
    (56) comparator -> . GT
    (57) comparator -> . LT
    (58) comparator -> . GEQ
    (59) comparator -> . LEQ
    (60) comparator -> . EQ
    (61) comparator -> . NEQ
    (44) boolean_operator -> . AND
    (45) boolean_operator -> . OR

    RPAREN          reduce using rule 13 (parameter_list -> parameter_list COMMA expression .)
    COMMA           reduce using rule 13 (parameter_list -> parameter_list COMMA expression .)
    PLUS            shift and go to state 68
    MINUS           shift and go to state 71
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 69
    GT              shift and go to state 59
    LT              shift and go to state 67
    GEQ             shift and go to state 58
    LEQ             shift and go to state 66
    EQ              shift and go to state 70
    NEQ             shift and go to state 57
    AND             shift and go to state 63
    OR              shift and go to state 64

    comparator                     shift and go to state 61
    boolean_operator               shift and go to state 62
    op                             shift and go to state 75

state 92

    (71) compound_statement_list -> compound_statement_list compound_statement .

    K_END           reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)
    ID              reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)
    K_IF            reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)
    K_WHILE         reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)
    K_CONTINUE      reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)
    K_BREAK         reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)
    K_DONE          reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)
    K_LIST          reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)
    K_DICT          reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)
    K_SET           reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)
    K_INT           reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)
    K_DOUBLE        reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)
    K_STRING        reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)
    K_BOOL          reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)
    K_WINDOW        reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)
    K_SHAPE         reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)
    K_TRIANGLE      reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)
    K_RECTANGLE     reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)
    K_CIRCLE        reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)
    K_POINT         reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)
    K_TEXT          reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)
    K_EL            reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)
    K_EF            reduce using rule 71 (compound_statement_list -> compound_statement_list compound_statement .)


state 93

    (64) selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list . else_statement K_END
    (66) else_if_statement_list -> else_if_statement_list . else_if_statement
    (68) else_statement -> .
    (69) else_statement -> . K_EL compound_statement_list
    (67) else_if_statement -> . K_EF LPAREN expression RPAREN compound_statement_list

    K_END           reduce using rule 68 (else_statement -> .)
    K_EL            shift and go to state 101
    K_EF            shift and go to state 103

    else_if_statement              shift and go to state 102
    else_statement                 shift and go to state 100

state 94

    (15) variable_declaration -> pre_type_modifier . type ID
    (16) variable_declaration -> pre_type_modifier . type ID ASSIGN expression
    (22) type -> . K_INT
    (23) type -> . K_DOUBLE
    (24) type -> . K_STRING
    (25) type -> . K_BOOL
    (26) type -> . K_WINDOW
    (27) type -> . K_SHAPE
    (28) type -> . K_TRIANGLE
    (29) type -> . K_RECTANGLE
    (30) type -> . K_CIRCLE
    (31) type -> . K_POINT
    (32) type -> . K_TEXT

    K_INT           shift and go to state 30
    K_DOUBLE        shift and go to state 23
    K_STRING        shift and go to state 24
    K_BOOL          shift and go to state 31
    K_WINDOW        shift and go to state 34
    K_SHAPE         shift and go to state 27
    K_TRIANGLE      shift and go to state 25
    K_RECTANGLE     shift and go to state 33
    K_CIRCLE        shift and go to state 26
    K_POINT         shift and go to state 29
    K_TEXT          shift and go to state 28

    type                           shift and go to state 104

state 95

    (72) iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .

    K_LIST          reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_DICT          reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_SET           reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    ID              reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_IF            reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_WHILE         reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_CONTINUE      reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_BREAK         reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_DONE          reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_INT           reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_DOUBLE        reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_STRING        reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_BOOL          reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_WINDOW        reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_SHAPE         reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_TRIANGLE      reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_RECTANGLE     reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_CIRCLE        reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_POINT         reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_TEXT          reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    $end            reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_END           reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_EL            reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)
    K_EF            reduce using rule 72 (iteration_statement -> K_WHILE LPAREN expression RPAREN compound_statement_list K_END .)


state 96

    (77) function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN . unary_expression compound_statement_list K_END
    (55) unary_expression -> . primary_expression
    (46) primary_expression -> . constant
    (47) primary_expression -> . ID
    (48) primary_expression -> . function_call_statement
    (49) primary_expression -> . LPAREN expression RPAREN
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . STRING
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (53) boolean_constant -> . K_TRUE
    (54) boolean_constant -> . K_FALSE
    (62) number -> . INTEGER
    (63) number -> . DOUBLE

    ID              shift and go to state 45
    LPAREN          shift and go to state 44
    STRING          shift and go to state 42
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 50
    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 46

    boolean_constant               shift and go to state 49
    constant                       shift and go to state 38
    unary_expression               shift and go to state 105
    number                         shift and go to state 39
    function_call_statement        shift and go to state 47
    primary_expression             shift and go to state 106

state 97

    (76) function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN . ASSIGN unary_expression compound_statement_list K_END

    ASSIGN          shift and go to state 107


state 98

    (78) argument_list -> argument_list COMMA . argument
    (80) argument -> . pre_type_modifier type ID
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    pre_type_modifier              shift and go to state 90
    argument                       shift and go to state 108

state 99

    (80) argument -> pre_type_modifier type . ID

    ID              shift and go to state 109


state 100

    (64) selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement . K_END

    K_END           shift and go to state 110


state 101

    (69) else_statement -> K_EL . compound_statement_list
    (70) compound_statement_list -> .
    (71) compound_statement_list -> . compound_statement_list compound_statement

    ID              reduce using rule 70 (compound_statement_list -> .)
    K_IF            reduce using rule 70 (compound_statement_list -> .)
    K_WHILE         reduce using rule 70 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 70 (compound_statement_list -> .)
    K_BREAK         reduce using rule 70 (compound_statement_list -> .)
    K_DONE          reduce using rule 70 (compound_statement_list -> .)
    K_LIST          reduce using rule 70 (compound_statement_list -> .)
    K_DICT          reduce using rule 70 (compound_statement_list -> .)
    K_SET           reduce using rule 70 (compound_statement_list -> .)
    K_INT           reduce using rule 70 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 70 (compound_statement_list -> .)
    K_STRING        reduce using rule 70 (compound_statement_list -> .)
    K_BOOL          reduce using rule 70 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 70 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 70 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 70 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 70 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 70 (compound_statement_list -> .)
    K_POINT         reduce using rule 70 (compound_statement_list -> .)
    K_TEXT          reduce using rule 70 (compound_statement_list -> .)
    K_END           reduce using rule 70 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 111

state 102

    (66) else_if_statement_list -> else_if_statement_list else_if_statement .

    K_EL            reduce using rule 66 (else_if_statement_list -> else_if_statement_list else_if_statement .)
    K_EF            reduce using rule 66 (else_if_statement_list -> else_if_statement_list else_if_statement .)
    K_END           reduce using rule 66 (else_if_statement_list -> else_if_statement_list else_if_statement .)


state 103

    (67) else_if_statement -> K_EF . LPAREN expression RPAREN compound_statement_list

    LPAREN          shift and go to state 112


state 104

    (15) variable_declaration -> pre_type_modifier type . ID
    (16) variable_declaration -> pre_type_modifier type . ID ASSIGN expression

    ID              shift and go to state 113


state 105

    (77) function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression . compound_statement_list K_END
    (70) compound_statement_list -> .
    (71) compound_statement_list -> . compound_statement_list compound_statement

    K_END           reduce using rule 70 (compound_statement_list -> .)
    ID              reduce using rule 70 (compound_statement_list -> .)
    K_IF            reduce using rule 70 (compound_statement_list -> .)
    K_WHILE         reduce using rule 70 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 70 (compound_statement_list -> .)
    K_BREAK         reduce using rule 70 (compound_statement_list -> .)
    K_DONE          reduce using rule 70 (compound_statement_list -> .)
    K_LIST          reduce using rule 70 (compound_statement_list -> .)
    K_DICT          reduce using rule 70 (compound_statement_list -> .)
    K_SET           reduce using rule 70 (compound_statement_list -> .)
    K_INT           reduce using rule 70 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 70 (compound_statement_list -> .)
    K_STRING        reduce using rule 70 (compound_statement_list -> .)
    K_BOOL          reduce using rule 70 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 70 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 70 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 70 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 70 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 70 (compound_statement_list -> .)
    K_POINT         reduce using rule 70 (compound_statement_list -> .)
    K_TEXT          reduce using rule 70 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 114

state 106

    (55) unary_expression -> primary_expression .

    K_END           reduce using rule 55 (unary_expression -> primary_expression .)
    ID              reduce using rule 55 (unary_expression -> primary_expression .)
    K_IF            reduce using rule 55 (unary_expression -> primary_expression .)
    K_WHILE         reduce using rule 55 (unary_expression -> primary_expression .)
    K_CONTINUE      reduce using rule 55 (unary_expression -> primary_expression .)
    K_BREAK         reduce using rule 55 (unary_expression -> primary_expression .)
    K_DONE          reduce using rule 55 (unary_expression -> primary_expression .)
    K_LIST          reduce using rule 55 (unary_expression -> primary_expression .)
    K_DICT          reduce using rule 55 (unary_expression -> primary_expression .)
    K_SET           reduce using rule 55 (unary_expression -> primary_expression .)
    K_INT           reduce using rule 55 (unary_expression -> primary_expression .)
    K_DOUBLE        reduce using rule 55 (unary_expression -> primary_expression .)
    K_STRING        reduce using rule 55 (unary_expression -> primary_expression .)
    K_BOOL          reduce using rule 55 (unary_expression -> primary_expression .)
    K_WINDOW        reduce using rule 55 (unary_expression -> primary_expression .)
    K_SHAPE         reduce using rule 55 (unary_expression -> primary_expression .)
    K_TRIANGLE      reduce using rule 55 (unary_expression -> primary_expression .)
    K_RECTANGLE     reduce using rule 55 (unary_expression -> primary_expression .)
    K_CIRCLE        reduce using rule 55 (unary_expression -> primary_expression .)
    K_POINT         reduce using rule 55 (unary_expression -> primary_expression .)
    K_TEXT          reduce using rule 55 (unary_expression -> primary_expression .)


state 107

    (76) function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN . unary_expression compound_statement_list K_END
    (55) unary_expression -> . primary_expression
    (46) primary_expression -> . constant
    (47) primary_expression -> . ID
    (48) primary_expression -> . function_call_statement
    (49) primary_expression -> . LPAREN expression RPAREN
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . STRING
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (53) boolean_constant -> . K_TRUE
    (54) boolean_constant -> . K_FALSE
    (62) number -> . INTEGER
    (63) number -> . DOUBLE

    ID              shift and go to state 45
    LPAREN          shift and go to state 44
    STRING          shift and go to state 42
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 50
    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 46

    constant                       shift and go to state 38
    unary_expression               shift and go to state 115
    number                         shift and go to state 39
    function_call_statement        shift and go to state 47
    primary_expression             shift and go to state 106
    boolean_constant               shift and go to state 49

state 108

    (78) argument_list -> argument_list COMMA argument .

    RPAREN          reduce using rule 78 (argument_list -> argument_list COMMA argument .)
    COMMA           reduce using rule 78 (argument_list -> argument_list COMMA argument .)


state 109

    (80) argument -> pre_type_modifier type ID .

    RPAREN          reduce using rule 80 (argument -> pre_type_modifier type ID .)
    COMMA           reduce using rule 80 (argument -> pre_type_modifier type ID .)


state 110

    (64) selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .

    ID              reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_IF            reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_WHILE         reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_CONTINUE      reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_BREAK         reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_DONE          reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_LIST          reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_DICT          reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_SET           reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_INT           reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_DOUBLE        reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_STRING        reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_BOOL          reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_WINDOW        reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_SHAPE         reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_TRIANGLE      reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_RECTANGLE     reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_CIRCLE        reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_POINT         reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_TEXT          reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_EL            reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_EF            reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    K_END           reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)
    $end            reduce using rule 64 (selection_statement -> K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END .)


state 111

    (69) else_statement -> K_EL compound_statement_list .
    (71) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (64) selection_statement -> . K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (72) iteration_statement -> . K_WHILE LPAREN expression RPAREN compound_statement_list K_END
    (73) jump_statement -> . K_CONTINUE
    (74) jump_statement -> . K_BREAK
    (75) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_END           reduce using rule 69 (else_statement -> K_EL compound_statement_list .)
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 20
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    jump_statement                 shift and go to state 17
    compound_statement             shift and go to state 92
    selection_statement            shift and go to state 3
    function_call_statement        shift and go to state 19
    pre_type_modifier              shift and go to state 94
    iteration_statement            shift and go to state 5
    variable_declaration           shift and go to state 6

state 112

    (67) else_if_statement -> K_EF LPAREN . expression RPAREN compound_statement_list
    (33) expression -> . expression op expression_term
    (34) expression -> . expression_term
    (35) expression_term -> . expression_term op primary_expression
    (36) expression_term -> . primary_expression
    (46) primary_expression -> . constant
    (47) primary_expression -> . ID
    (48) primary_expression -> . function_call_statement
    (49) primary_expression -> . LPAREN expression RPAREN
    (50) constant -> . boolean_constant
    (51) constant -> . number
    (52) constant -> . STRING
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (53) boolean_constant -> . K_TRUE
    (54) boolean_constant -> . K_FALSE
    (62) number -> . INTEGER
    (63) number -> . DOUBLE

    ID              shift and go to state 45
    LPAREN          shift and go to state 44
    STRING          shift and go to state 42
    K_TRUE          shift and go to state 40
    K_FALSE         shift and go to state 50
    INTEGER         shift and go to state 41
    DOUBLE          shift and go to state 46

    expression_term                shift and go to state 37
    boolean_constant               shift and go to state 49
    constant                       shift and go to state 38
    number                         shift and go to state 39
    function_call_statement        shift and go to state 47
    primary_expression             shift and go to state 43
    expression                     shift and go to state 116

state 113

    (15) variable_declaration -> pre_type_modifier type ID .
    (16) variable_declaration -> pre_type_modifier type ID . ASSIGN expression

    K_END           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    ID              reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_IF            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_WHILE         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_CONTINUE      reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_BREAK         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DONE          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_LIST          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DICT          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_SET           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_INT           reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_DOUBLE        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_STRING        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_BOOL          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_WINDOW        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_SHAPE         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_TRIANGLE      reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_RECTANGLE     reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_CIRCLE        reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_POINT         reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_TEXT          reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_EL            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    K_EF            reduce using rule 15 (variable_declaration -> pre_type_modifier type ID .)
    ASSIGN          shift and go to state 77


state 114

    (77) function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list . K_END
    (71) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (64) selection_statement -> . K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (72) iteration_statement -> . K_WHILE LPAREN expression RPAREN compound_statement_list K_END
    (73) jump_statement -> . K_CONTINUE
    (74) jump_statement -> . K_BREAK
    (75) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_END           shift and go to state 117
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 20
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    jump_statement                 shift and go to state 17
    compound_statement             shift and go to state 92
    iteration_statement            shift and go to state 5
    selection_statement            shift and go to state 3
    function_call_statement        shift and go to state 19
    pre_type_modifier              shift and go to state 94
    variable_declaration           shift and go to state 6

state 115

    (76) function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression . compound_statement_list K_END
    (70) compound_statement_list -> .
    (71) compound_statement_list -> . compound_statement_list compound_statement

    K_END           reduce using rule 70 (compound_statement_list -> .)
    ID              reduce using rule 70 (compound_statement_list -> .)
    K_IF            reduce using rule 70 (compound_statement_list -> .)
    K_WHILE         reduce using rule 70 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 70 (compound_statement_list -> .)
    K_BREAK         reduce using rule 70 (compound_statement_list -> .)
    K_DONE          reduce using rule 70 (compound_statement_list -> .)
    K_LIST          reduce using rule 70 (compound_statement_list -> .)
    K_DICT          reduce using rule 70 (compound_statement_list -> .)
    K_SET           reduce using rule 70 (compound_statement_list -> .)
    K_INT           reduce using rule 70 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 70 (compound_statement_list -> .)
    K_STRING        reduce using rule 70 (compound_statement_list -> .)
    K_BOOL          reduce using rule 70 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 70 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 70 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 70 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 70 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 70 (compound_statement_list -> .)
    K_POINT         reduce using rule 70 (compound_statement_list -> .)
    K_TEXT          reduce using rule 70 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 118

state 116

    (67) else_if_statement -> K_EF LPAREN expression . RPAREN compound_statement_list
    (33) expression -> expression . op expression_term
    (37) op -> . PLUS
    (38) op -> . MINUS
    (39) op -> . TIMES
    (40) op -> . DIVIDE
    (41) op -> . MOD
    (42) op -> . comparator
    (43) op -> . boolean_operator
    (56) comparator -> . GT
    (57) comparator -> . LT
    (58) comparator -> . GEQ
    (59) comparator -> . LEQ
    (60) comparator -> . EQ
    (61) comparator -> . NEQ
    (44) boolean_operator -> . AND
    (45) boolean_operator -> . OR

    RPAREN          shift and go to state 119
    PLUS            shift and go to state 68
    MINUS           shift and go to state 71
    TIMES           shift and go to state 65
    DIVIDE          shift and go to state 60
    MOD             shift and go to state 69
    GT              shift and go to state 59
    LT              shift and go to state 67
    GEQ             shift and go to state 58
    LEQ             shift and go to state 66
    EQ              shift and go to state 70
    NEQ             shift and go to state 57
    AND             shift and go to state 63
    OR              shift and go to state 64

    comparator                     shift and go to state 61
    boolean_operator               shift and go to state 62
    op                             shift and go to state 75

state 117

    (77) function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .

    K_LIST          reduce using rule 77 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_DICT          reduce using rule 77 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_SET           reduce using rule 77 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    ID              reduce using rule 77 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_IF            reduce using rule 77 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_WHILE         reduce using rule 77 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_CONTINUE      reduce using rule 77 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_BREAK         reduce using rule 77 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_DONE          reduce using rule 77 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_INT           reduce using rule 77 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_DOUBLE        reduce using rule 77 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_STRING        reduce using rule 77 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_BOOL          reduce using rule 77 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_WINDOW        reduce using rule 77 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_SHAPE         reduce using rule 77 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_TRIANGLE      reduce using rule 77 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_RECTANGLE     reduce using rule 77 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_CIRCLE        reduce using rule 77 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_POINT         reduce using rule 77 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_TEXT          reduce using rule 77 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    $end            reduce using rule 77 (function_declaration -> pre_type_modifier type ID LPAREN RPAREN ASSIGN unary_expression compound_statement_list K_END .)


state 118

    (76) function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list . K_END
    (71) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (64) selection_statement -> . K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (72) iteration_statement -> . K_WHILE LPAREN expression RPAREN compound_statement_list K_END
    (73) jump_statement -> . K_CONTINUE
    (74) jump_statement -> . K_BREAK
    (75) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_END           shift and go to state 120
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 20
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    jump_statement                 shift and go to state 17
    compound_statement             shift and go to state 92
    iteration_statement            shift and go to state 5
    selection_statement            shift and go to state 3
    function_call_statement        shift and go to state 19
    pre_type_modifier              shift and go to state 94
    variable_declaration           shift and go to state 6

state 119

    (67) else_if_statement -> K_EF LPAREN expression RPAREN . compound_statement_list
    (70) compound_statement_list -> .
    (71) compound_statement_list -> . compound_statement_list compound_statement

    ID              reduce using rule 70 (compound_statement_list -> .)
    K_IF            reduce using rule 70 (compound_statement_list -> .)
    K_WHILE         reduce using rule 70 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 70 (compound_statement_list -> .)
    K_BREAK         reduce using rule 70 (compound_statement_list -> .)
    K_DONE          reduce using rule 70 (compound_statement_list -> .)
    K_LIST          reduce using rule 70 (compound_statement_list -> .)
    K_DICT          reduce using rule 70 (compound_statement_list -> .)
    K_SET           reduce using rule 70 (compound_statement_list -> .)
    K_INT           reduce using rule 70 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 70 (compound_statement_list -> .)
    K_STRING        reduce using rule 70 (compound_statement_list -> .)
    K_BOOL          reduce using rule 70 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 70 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 70 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 70 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 70 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 70 (compound_statement_list -> .)
    K_POINT         reduce using rule 70 (compound_statement_list -> .)
    K_TEXT          reduce using rule 70 (compound_statement_list -> .)
    K_EL            reduce using rule 70 (compound_statement_list -> .)
    K_EF            reduce using rule 70 (compound_statement_list -> .)
    K_END           reduce using rule 70 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 121

state 120

    (76) function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .

    K_LIST          reduce using rule 76 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_DICT          reduce using rule 76 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_SET           reduce using rule 76 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    ID              reduce using rule 76 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_IF            reduce using rule 76 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_WHILE         reduce using rule 76 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_CONTINUE      reduce using rule 76 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_BREAK         reduce using rule 76 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_DONE          reduce using rule 76 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_INT           reduce using rule 76 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_DOUBLE        reduce using rule 76 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_STRING        reduce using rule 76 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_BOOL          reduce using rule 76 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_WINDOW        reduce using rule 76 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_SHAPE         reduce using rule 76 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_TRIANGLE      reduce using rule 76 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_RECTANGLE     reduce using rule 76 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_CIRCLE        reduce using rule 76 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_POINT         reduce using rule 76 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    K_TEXT          reduce using rule 76 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)
    $end            reduce using rule 76 (function_declaration -> pre_type_modifier type ID LPAREN argument_list RPAREN ASSIGN unary_expression compound_statement_list K_END .)


state 121

    (67) else_if_statement -> K_EF LPAREN expression RPAREN compound_statement_list .
    (71) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN parameter_list RPAREN
    (12) function_call_statement -> . ID LPAREN RPAREN
    (15) variable_declaration -> . pre_type_modifier type ID
    (16) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (17) variable_declaration -> . ID ASSIGN expression
    (64) selection_statement -> . K_IF LPAREN expression RPAREN compound_statement_list else_if_statement_list else_statement K_END
    (72) iteration_statement -> . K_WHILE LPAREN expression RPAREN compound_statement_list K_END
    (73) jump_statement -> . K_CONTINUE
    (74) jump_statement -> . K_BREAK
    (75) jump_statement -> . K_DONE
    (18) pre_type_modifier -> .
    (19) pre_type_modifier -> . K_LIST
    (20) pre_type_modifier -> . K_DICT
    (21) pre_type_modifier -> . K_SET

    K_EL            reduce using rule 67 (else_if_statement -> K_EF LPAREN expression RPAREN compound_statement_list .)
    K_EF            reduce using rule 67 (else_if_statement -> K_EF LPAREN expression RPAREN compound_statement_list .)
    K_END           reduce using rule 67 (else_if_statement -> K_EF LPAREN expression RPAREN compound_statement_list .)
    ID              shift and go to state 16
    K_IF            shift and go to state 4
    K_WHILE         shift and go to state 7
    K_CONTINUE      shift and go to state 11
    K_BREAK         shift and go to state 12
    K_DONE          shift and go to state 20
    K_INT           reduce using rule 18 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 18 (pre_type_modifier -> .)
    K_STRING        reduce using rule 18 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 18 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 18 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 18 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 18 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 18 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 18 (pre_type_modifier -> .)
    K_POINT         reduce using rule 18 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 18 (pre_type_modifier -> .)
    K_LIST          shift and go to state 13
    K_DICT          shift and go to state 15
    K_SET           shift and go to state 9

    jump_statement                 shift and go to state 17
    compound_statement             shift and go to state 92
    iteration_statement            shift and go to state 5
    selection_statement            shift and go to state 3
    function_call_statement        shift and go to state 19
    pre_type_modifier              shift and go to state 94
    variable_declaration           shift and go to state 6
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 37 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 37 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 37 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 37 resolved as shift
WARNING: shift/reduce conflict for MOD in state 37 resolved as shift
WARNING: shift/reduce conflict for GT in state 37 resolved as shift
WARNING: shift/reduce conflict for LT in state 37 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 37 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 37 resolved as shift
WARNING: shift/reduce conflict for EQ in state 37 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 37 resolved as shift
WARNING: shift/reduce conflict for AND in state 37 resolved as shift
WARNING: shift/reduce conflict for OR in state 37 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 84 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 84 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 84 resolved as shift
WARNING: shift/reduce conflict for MOD in state 84 resolved as shift
WARNING: shift/reduce conflict for GT in state 84 resolved as shift
WARNING: shift/reduce conflict for LT in state 84 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 84 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 84 resolved as shift
WARNING: shift/reduce conflict for EQ in state 84 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 84 resolved as shift
WARNING: shift/reduce conflict for AND in state 84 resolved as shift
WARNING: shift/reduce conflict for OR in state 84 resolved as shift
