Created by PLY version 3.5 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> <empty>
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> function_declaration
Rule 5     statement -> compound_statement
Rule 6     compound_statement -> function_call_statement
Rule 7     compound_statement -> variable_declaration
Rule 8     compound_statement -> selection_statement
Rule 9     compound_statement -> iteration_statement
Rule 10    compound_statement -> jump_statement
Rule 11    function_call_statement -> ID LPAREN opt_parameter_list RPAREN
Rule 12    opt_parameter_list -> parameter_list
Rule 13    opt_parameter_list -> <empty>
Rule 14    parameter_list -> parameter_list COMMA expression
Rule 15    parameter_list -> expression
Rule 16    variable_declaration -> pre_type_modifier type ID
Rule 17    variable_declaration -> pre_type_modifier type ID ASSIGN expression
Rule 18    variable_declaration -> ID ASSIGN expression
Rule 19    pre_type_modifier -> <empty>
Rule 20    pre_type_modifier -> K_LIST
Rule 21    type -> K_INT
Rule 22    type -> K_DOUBLE
Rule 23    type -> K_STRING
Rule 24    type -> K_BOOL
Rule 25    type -> K_WINDOW
Rule 26    type -> K_SHAPE
Rule 27    type -> K_TRIANGLE
Rule 28    type -> K_RECTANGLE
Rule 29    type -> K_CIRCLE
Rule 30    type -> K_POINT
Rule 31    type -> K_TEXT
Rule 32    type -> K_TABLE
Rule 33    type -> K_LINE
Rule 34    expression -> expression boolean_operator expression_pre_term
Rule 35    expression -> expression_pre_term
Rule 36    expression_pre_term -> expression_pre_term eq_comparator expression_term
Rule 37    expression_pre_term -> expression_term
Rule 38    expression_term -> expression_term comparator expression_factor
Rule 39    expression_term -> expression_factor
Rule 40    expression_factor -> expression_factor op unary_expression
Rule 41    expression_factor -> unary_expression
Rule 42    op -> PLUS
Rule 43    op -> MINUS
Rule 44    op -> TIMES
Rule 45    op -> DIVIDE
Rule 46    op -> MOD
Rule 47    boolean_operator -> AND
Rule 48    boolean_operator -> OR
Rule 49    primary_expression -> constant
Rule 50    primary_expression -> id_expression
Rule 51    primary_expression -> function_call_statement
Rule 52    primary_expression -> MINUS primary_expression
Rule 53    primary_expression -> null_expression
Rule 54    id_expression -> ID
Rule 55    constant -> boolean_constant
Rule 56    constant -> number
Rule 57    constant -> string_constant
Rule 58    string_constant -> STRING
Rule 59    boolean_constant -> K_TRUE
Rule 60    boolean_constant -> K_FALSE
Rule 61    unary_expression -> LPAREN expression RPAREN
Rule 62    unary_expression -> primary_expression
Rule 63    unary_expression -> NEG primary_expression
Rule 64    unary_expression -> NEG LPAREN expression RPAREN
Rule 65    null_expression -> K_NULL
Rule 66    comparator -> GT
Rule 67    comparator -> LT
Rule 68    comparator -> GEQ
Rule 69    comparator -> LEQ
Rule 70    eq_comparator -> EQ
Rule 71    eq_comparator -> NEQ
Rule 72    number -> integer_number
Rule 73    number -> double_number
Rule 74    integer_number -> INTEGER
Rule 75    double_number -> DOUBLE
Rule 76    selection_statement -> if_statement else_if_statement_list else_statement K_END
Rule 77    if_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list
Rule 78    else_if_statement_list -> <empty>
Rule 79    else_if_statement_list -> else_if_statement_list else_if_statement
Rule 80    else_if_statement -> K_EF LPAREN expression RPAREN push_scope compound_statement_list
Rule 81    else_statement -> <empty>
Rule 82    else_statement -> K_EL push_scope compound_statement_list
Rule 83    compound_statement_list -> <empty>
Rule 84    compound_statement_list -> compound_statement_list compound_statement
Rule 85    iteration_statement -> iteration_statement_header compound_statement_list K_END
Rule 86    iteration_statement_header -> K_WHILE LPAREN expression RPAREN
Rule 87    jump_statement -> K_CONTINUE
Rule 88    jump_statement -> K_BREAK
Rule 89    jump_statement -> K_DONE
Rule 90    function_declaration -> function_header compound_statement_list K_END
Rule 91    function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag
Rule 92    opt_argument_list -> argument_list
Rule 93    opt_argument_list -> <empty>
Rule 94    argument_list -> argument_list COMMA argument
Rule 95    argument_list -> argument
Rule 96    argument -> pre_type_modifier type ID
Rule 97    push_scope -> <empty>
Rule 98    set_ignore_flag -> <empty>
Rule 99    unset_ignore_flag -> <empty>

Terminals, with rules where they appear

AND                  : 47
ASSIGN               : 17 18 91
COMMA                : 14 94
COMMENT              : 
DIVIDE               : 45
DOUBLE               : 75
EQ                   : 70
GEQ                  : 68
GT                   : 66
ID                   : 11 16 17 18 54 91 96
INTEGER              : 74
K_BOOL               : 24
K_BREAK              : 88
K_CIRCLE             : 29
K_CONTINUE           : 87
K_DONE               : 89
K_DOUBLE             : 22
K_EF                 : 80
K_EL                 : 82
K_END                : 76 85 90
K_FALSE              : 60
K_IF                 : 77
K_INT                : 21
K_LINE               : 33
K_LIST               : 20
K_NULL               : 65
K_POINT              : 30
K_RECTANGLE          : 28
K_SHAPE              : 26
K_STRING             : 23
K_TABLE              : 32
K_TEXT               : 31
K_TRIANGLE           : 27
K_TRUE               : 59
K_WHILE              : 86
K_WINDOW             : 25
LEQ                  : 69
LPAREN               : 11 61 64 77 80 86 91
LT                   : 67
MINUS                : 43 52
MOD                  : 46
NEG                  : 63 64
NEQ                  : 71
OR                   : 48
PLUS                 : 42
RPAREN               : 11 61 64 77 80 86 91
STRING               : 58
TIMES                : 44
error                : 

Nonterminals, with rules where they appear

argument             : 94 95
argument_list        : 92 94
boolean_constant     : 55
boolean_operator     : 34
comparator           : 38
compound_statement   : 5 84
compound_statement_list : 77 80 82 84 85 90
constant             : 49
double_number        : 73
else_if_statement    : 79
else_if_statement_list : 76 79
else_statement       : 76
eq_comparator        : 36
expression           : 14 15 17 18 34 61 64 77 80 86
expression_factor    : 38 39 40
expression_pre_term  : 34 35 36
expression_term      : 36 37 38
function_call_statement : 6 51
function_declaration : 4
function_header      : 90
id_expression        : 50
if_statement         : 76
integer_number       : 72
iteration_statement  : 9
iteration_statement_header : 85
jump_statement       : 10
null_expression      : 53
number               : 56
op                   : 40
opt_argument_list    : 91
opt_parameter_list   : 11
parameter_list       : 12 14
pre_type_modifier    : 16 17 91 96
primary_expression   : 52 62 63 91
program              : 0
push_scope           : 77 80 82 91
selection_statement  : 8
set_ignore_flag      : 91
statement            : 3
statement_list       : 1 3
string_constant      : 57
type                 : 16 17 91 96
unary_expression     : 40 41
unset_ignore_flag    : 91
variable_declaration : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> .
    (3) statement_list -> . statement_list statement

    ID              reduce using rule 2 (statement_list -> .)
    K_CONTINUE      reduce using rule 2 (statement_list -> .)
    K_BREAK         reduce using rule 2 (statement_list -> .)
    K_DONE          reduce using rule 2 (statement_list -> .)
    K_LIST          reduce using rule 2 (statement_list -> .)
    K_IF            reduce using rule 2 (statement_list -> .)
    K_WHILE         reduce using rule 2 (statement_list -> .)
    K_INT           reduce using rule 2 (statement_list -> .)
    K_DOUBLE        reduce using rule 2 (statement_list -> .)
    K_STRING        reduce using rule 2 (statement_list -> .)
    K_BOOL          reduce using rule 2 (statement_list -> .)
    K_WINDOW        reduce using rule 2 (statement_list -> .)
    K_SHAPE         reduce using rule 2 (statement_list -> .)
    K_TRIANGLE      reduce using rule 2 (statement_list -> .)
    K_RECTANGLE     reduce using rule 2 (statement_list -> .)
    K_CIRCLE        reduce using rule 2 (statement_list -> .)
    K_POINT         reduce using rule 2 (statement_list -> .)
    K_TEXT          reduce using rule 2 (statement_list -> .)
    K_TABLE         reduce using rule 2 (statement_list -> .)
    K_LINE          reduce using rule 2 (statement_list -> .)
    $end            reduce using rule 2 (statement_list -> .)

    statement_list                 shift and go to state 1
    program                        shift and go to state 2

state 1

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . function_declaration
    (5) statement -> . compound_statement
    (90) function_declaration -> . function_header compound_statement_list K_END
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (91) function_header -> . pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag
    (11) function_call_statement -> . ID LPAREN opt_parameter_list RPAREN
    (16) variable_declaration -> . pre_type_modifier type ID
    (17) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (18) variable_declaration -> . ID ASSIGN expression
    (76) selection_statement -> . if_statement else_if_statement_list else_statement K_END
    (85) iteration_statement -> . iteration_statement_header compound_statement_list K_END
    (87) jump_statement -> . K_CONTINUE
    (88) jump_statement -> . K_BREAK
    (89) jump_statement -> . K_DONE
    (19) pre_type_modifier -> .
    (20) pre_type_modifier -> . K_LIST
    (77) if_statement -> . K_IF LPAREN expression RPAREN push_scope compound_statement_list
    (86) iteration_statement_header -> . K_WHILE LPAREN expression RPAREN

    $end            reduce using rule 1 (program -> statement_list .)
    ID              shift and go to state 17
    K_CONTINUE      shift and go to state 12
    K_BREAK         shift and go to state 13
    K_DONE          shift and go to state 21
    K_INT           reduce using rule 19 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 19 (pre_type_modifier -> .)
    K_STRING        reduce using rule 19 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 19 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 19 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 19 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 19 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 19 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 19 (pre_type_modifier -> .)
    K_POINT         reduce using rule 19 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 19 (pre_type_modifier -> .)
    K_TABLE         reduce using rule 19 (pre_type_modifier -> .)
    K_LINE          reduce using rule 19 (pre_type_modifier -> .)
    K_LIST          shift and go to state 15
    K_IF            shift and go to state 3
    K_WHILE         shift and go to state 6

    iteration_statement            shift and go to state 4
    variable_declaration           shift and go to state 5
    compound_statement             shift and go to state 7
    selection_statement            shift and go to state 8
    function_header                shift and go to state 9
    statement                      shift and go to state 10
    if_statement                   shift and go to state 11
    iteration_statement_header     shift and go to state 14
    pre_type_modifier              shift and go to state 16
    jump_statement                 shift and go to state 18
    function_declaration           shift and go to state 19
    function_call_statement        shift and go to state 20

state 2

    (0) S' -> program .



state 3

    (77) if_statement -> K_IF . LPAREN expression RPAREN push_scope compound_statement_list

    LPAREN          shift and go to state 22


state 4

    (9) compound_statement -> iteration_statement .

    ID              reduce using rule 9 (compound_statement -> iteration_statement .)
    K_CONTINUE      reduce using rule 9 (compound_statement -> iteration_statement .)
    K_BREAK         reduce using rule 9 (compound_statement -> iteration_statement .)
    K_DONE          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_LIST          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_IF            reduce using rule 9 (compound_statement -> iteration_statement .)
    K_WHILE         reduce using rule 9 (compound_statement -> iteration_statement .)
    K_INT           reduce using rule 9 (compound_statement -> iteration_statement .)
    K_DOUBLE        reduce using rule 9 (compound_statement -> iteration_statement .)
    K_STRING        reduce using rule 9 (compound_statement -> iteration_statement .)
    K_BOOL          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_WINDOW        reduce using rule 9 (compound_statement -> iteration_statement .)
    K_SHAPE         reduce using rule 9 (compound_statement -> iteration_statement .)
    K_TRIANGLE      reduce using rule 9 (compound_statement -> iteration_statement .)
    K_RECTANGLE     reduce using rule 9 (compound_statement -> iteration_statement .)
    K_CIRCLE        reduce using rule 9 (compound_statement -> iteration_statement .)
    K_POINT         reduce using rule 9 (compound_statement -> iteration_statement .)
    K_TEXT          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_TABLE         reduce using rule 9 (compound_statement -> iteration_statement .)
    K_LINE          reduce using rule 9 (compound_statement -> iteration_statement .)
    K_EL            reduce using rule 9 (compound_statement -> iteration_statement .)
    K_EF            reduce using rule 9 (compound_statement -> iteration_statement .)
    K_END           reduce using rule 9 (compound_statement -> iteration_statement .)
    $end            reduce using rule 9 (compound_statement -> iteration_statement .)


state 5

    (7) compound_statement -> variable_declaration .

    ID              reduce using rule 7 (compound_statement -> variable_declaration .)
    K_CONTINUE      reduce using rule 7 (compound_statement -> variable_declaration .)
    K_BREAK         reduce using rule 7 (compound_statement -> variable_declaration .)
    K_DONE          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_LIST          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_IF            reduce using rule 7 (compound_statement -> variable_declaration .)
    K_WHILE         reduce using rule 7 (compound_statement -> variable_declaration .)
    K_INT           reduce using rule 7 (compound_statement -> variable_declaration .)
    K_DOUBLE        reduce using rule 7 (compound_statement -> variable_declaration .)
    K_STRING        reduce using rule 7 (compound_statement -> variable_declaration .)
    K_BOOL          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_WINDOW        reduce using rule 7 (compound_statement -> variable_declaration .)
    K_SHAPE         reduce using rule 7 (compound_statement -> variable_declaration .)
    K_TRIANGLE      reduce using rule 7 (compound_statement -> variable_declaration .)
    K_RECTANGLE     reduce using rule 7 (compound_statement -> variable_declaration .)
    K_CIRCLE        reduce using rule 7 (compound_statement -> variable_declaration .)
    K_POINT         reduce using rule 7 (compound_statement -> variable_declaration .)
    K_TEXT          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_TABLE         reduce using rule 7 (compound_statement -> variable_declaration .)
    K_LINE          reduce using rule 7 (compound_statement -> variable_declaration .)
    K_EL            reduce using rule 7 (compound_statement -> variable_declaration .)
    K_EF            reduce using rule 7 (compound_statement -> variable_declaration .)
    K_END           reduce using rule 7 (compound_statement -> variable_declaration .)
    $end            reduce using rule 7 (compound_statement -> variable_declaration .)


state 6

    (86) iteration_statement_header -> K_WHILE . LPAREN expression RPAREN

    LPAREN          shift and go to state 23


state 7

    (5) statement -> compound_statement .

    ID              reduce using rule 5 (statement -> compound_statement .)
    K_CONTINUE      reduce using rule 5 (statement -> compound_statement .)
    K_BREAK         reduce using rule 5 (statement -> compound_statement .)
    K_DONE          reduce using rule 5 (statement -> compound_statement .)
    K_LIST          reduce using rule 5 (statement -> compound_statement .)
    K_IF            reduce using rule 5 (statement -> compound_statement .)
    K_WHILE         reduce using rule 5 (statement -> compound_statement .)
    K_INT           reduce using rule 5 (statement -> compound_statement .)
    K_DOUBLE        reduce using rule 5 (statement -> compound_statement .)
    K_STRING        reduce using rule 5 (statement -> compound_statement .)
    K_BOOL          reduce using rule 5 (statement -> compound_statement .)
    K_WINDOW        reduce using rule 5 (statement -> compound_statement .)
    K_SHAPE         reduce using rule 5 (statement -> compound_statement .)
    K_TRIANGLE      reduce using rule 5 (statement -> compound_statement .)
    K_RECTANGLE     reduce using rule 5 (statement -> compound_statement .)
    K_CIRCLE        reduce using rule 5 (statement -> compound_statement .)
    K_POINT         reduce using rule 5 (statement -> compound_statement .)
    K_TEXT          reduce using rule 5 (statement -> compound_statement .)
    K_TABLE         reduce using rule 5 (statement -> compound_statement .)
    K_LINE          reduce using rule 5 (statement -> compound_statement .)
    $end            reduce using rule 5 (statement -> compound_statement .)


state 8

    (8) compound_statement -> selection_statement .

    ID              reduce using rule 8 (compound_statement -> selection_statement .)
    K_CONTINUE      reduce using rule 8 (compound_statement -> selection_statement .)
    K_BREAK         reduce using rule 8 (compound_statement -> selection_statement .)
    K_DONE          reduce using rule 8 (compound_statement -> selection_statement .)
    K_LIST          reduce using rule 8 (compound_statement -> selection_statement .)
    K_IF            reduce using rule 8 (compound_statement -> selection_statement .)
    K_WHILE         reduce using rule 8 (compound_statement -> selection_statement .)
    K_INT           reduce using rule 8 (compound_statement -> selection_statement .)
    K_DOUBLE        reduce using rule 8 (compound_statement -> selection_statement .)
    K_STRING        reduce using rule 8 (compound_statement -> selection_statement .)
    K_BOOL          reduce using rule 8 (compound_statement -> selection_statement .)
    K_WINDOW        reduce using rule 8 (compound_statement -> selection_statement .)
    K_SHAPE         reduce using rule 8 (compound_statement -> selection_statement .)
    K_TRIANGLE      reduce using rule 8 (compound_statement -> selection_statement .)
    K_RECTANGLE     reduce using rule 8 (compound_statement -> selection_statement .)
    K_CIRCLE        reduce using rule 8 (compound_statement -> selection_statement .)
    K_POINT         reduce using rule 8 (compound_statement -> selection_statement .)
    K_TEXT          reduce using rule 8 (compound_statement -> selection_statement .)
    K_TABLE         reduce using rule 8 (compound_statement -> selection_statement .)
    K_LINE          reduce using rule 8 (compound_statement -> selection_statement .)
    K_EL            reduce using rule 8 (compound_statement -> selection_statement .)
    K_EF            reduce using rule 8 (compound_statement -> selection_statement .)
    K_END           reduce using rule 8 (compound_statement -> selection_statement .)
    $end            reduce using rule 8 (compound_statement -> selection_statement .)


state 9

    (90) function_declaration -> function_header . compound_statement_list K_END
    (83) compound_statement_list -> .
    (84) compound_statement_list -> . compound_statement_list compound_statement

    K_END           reduce using rule 83 (compound_statement_list -> .)
    ID              reduce using rule 83 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 83 (compound_statement_list -> .)
    K_BREAK         reduce using rule 83 (compound_statement_list -> .)
    K_DONE          reduce using rule 83 (compound_statement_list -> .)
    K_LIST          reduce using rule 83 (compound_statement_list -> .)
    K_IF            reduce using rule 83 (compound_statement_list -> .)
    K_WHILE         reduce using rule 83 (compound_statement_list -> .)
    K_INT           reduce using rule 83 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 83 (compound_statement_list -> .)
    K_STRING        reduce using rule 83 (compound_statement_list -> .)
    K_BOOL          reduce using rule 83 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 83 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 83 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 83 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 83 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 83 (compound_statement_list -> .)
    K_POINT         reduce using rule 83 (compound_statement_list -> .)
    K_TEXT          reduce using rule 83 (compound_statement_list -> .)
    K_TABLE         reduce using rule 83 (compound_statement_list -> .)
    K_LINE          reduce using rule 83 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 24

state 10

    (3) statement_list -> statement_list statement .

    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    K_CONTINUE      reduce using rule 3 (statement_list -> statement_list statement .)
    K_BREAK         reduce using rule 3 (statement_list -> statement_list statement .)
    K_DONE          reduce using rule 3 (statement_list -> statement_list statement .)
    K_LIST          reduce using rule 3 (statement_list -> statement_list statement .)
    K_IF            reduce using rule 3 (statement_list -> statement_list statement .)
    K_WHILE         reduce using rule 3 (statement_list -> statement_list statement .)
    K_INT           reduce using rule 3 (statement_list -> statement_list statement .)
    K_DOUBLE        reduce using rule 3 (statement_list -> statement_list statement .)
    K_STRING        reduce using rule 3 (statement_list -> statement_list statement .)
    K_BOOL          reduce using rule 3 (statement_list -> statement_list statement .)
    K_WINDOW        reduce using rule 3 (statement_list -> statement_list statement .)
    K_SHAPE         reduce using rule 3 (statement_list -> statement_list statement .)
    K_TRIANGLE      reduce using rule 3 (statement_list -> statement_list statement .)
    K_RECTANGLE     reduce using rule 3 (statement_list -> statement_list statement .)
    K_CIRCLE        reduce using rule 3 (statement_list -> statement_list statement .)
    K_POINT         reduce using rule 3 (statement_list -> statement_list statement .)
    K_TEXT          reduce using rule 3 (statement_list -> statement_list statement .)
    K_TABLE         reduce using rule 3 (statement_list -> statement_list statement .)
    K_LINE          reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)


state 11

    (76) selection_statement -> if_statement . else_if_statement_list else_statement K_END
    (78) else_if_statement_list -> .
    (79) else_if_statement_list -> . else_if_statement_list else_if_statement

    K_EL            reduce using rule 78 (else_if_statement_list -> .)
    K_EF            reduce using rule 78 (else_if_statement_list -> .)
    K_END           reduce using rule 78 (else_if_statement_list -> .)

    else_if_statement_list         shift and go to state 25

state 12

    (87) jump_statement -> K_CONTINUE .

    K_END           reduce using rule 87 (jump_statement -> K_CONTINUE .)
    ID              reduce using rule 87 (jump_statement -> K_CONTINUE .)
    K_CONTINUE      reduce using rule 87 (jump_statement -> K_CONTINUE .)
    K_BREAK         reduce using rule 87 (jump_statement -> K_CONTINUE .)
    K_DONE          reduce using rule 87 (jump_statement -> K_CONTINUE .)
    K_LIST          reduce using rule 87 (jump_statement -> K_CONTINUE .)
    K_IF            reduce using rule 87 (jump_statement -> K_CONTINUE .)
    K_WHILE         reduce using rule 87 (jump_statement -> K_CONTINUE .)
    K_INT           reduce using rule 87 (jump_statement -> K_CONTINUE .)
    K_DOUBLE        reduce using rule 87 (jump_statement -> K_CONTINUE .)
    K_STRING        reduce using rule 87 (jump_statement -> K_CONTINUE .)
    K_BOOL          reduce using rule 87 (jump_statement -> K_CONTINUE .)
    K_WINDOW        reduce using rule 87 (jump_statement -> K_CONTINUE .)
    K_SHAPE         reduce using rule 87 (jump_statement -> K_CONTINUE .)
    K_TRIANGLE      reduce using rule 87 (jump_statement -> K_CONTINUE .)
    K_RECTANGLE     reduce using rule 87 (jump_statement -> K_CONTINUE .)
    K_CIRCLE        reduce using rule 87 (jump_statement -> K_CONTINUE .)
    K_POINT         reduce using rule 87 (jump_statement -> K_CONTINUE .)
    K_TEXT          reduce using rule 87 (jump_statement -> K_CONTINUE .)
    K_TABLE         reduce using rule 87 (jump_statement -> K_CONTINUE .)
    K_LINE          reduce using rule 87 (jump_statement -> K_CONTINUE .)
    K_EL            reduce using rule 87 (jump_statement -> K_CONTINUE .)
    K_EF            reduce using rule 87 (jump_statement -> K_CONTINUE .)
    $end            reduce using rule 87 (jump_statement -> K_CONTINUE .)


state 13

    (88) jump_statement -> K_BREAK .

    K_END           reduce using rule 88 (jump_statement -> K_BREAK .)
    ID              reduce using rule 88 (jump_statement -> K_BREAK .)
    K_CONTINUE      reduce using rule 88 (jump_statement -> K_BREAK .)
    K_BREAK         reduce using rule 88 (jump_statement -> K_BREAK .)
    K_DONE          reduce using rule 88 (jump_statement -> K_BREAK .)
    K_LIST          reduce using rule 88 (jump_statement -> K_BREAK .)
    K_IF            reduce using rule 88 (jump_statement -> K_BREAK .)
    K_WHILE         reduce using rule 88 (jump_statement -> K_BREAK .)
    K_INT           reduce using rule 88 (jump_statement -> K_BREAK .)
    K_DOUBLE        reduce using rule 88 (jump_statement -> K_BREAK .)
    K_STRING        reduce using rule 88 (jump_statement -> K_BREAK .)
    K_BOOL          reduce using rule 88 (jump_statement -> K_BREAK .)
    K_WINDOW        reduce using rule 88 (jump_statement -> K_BREAK .)
    K_SHAPE         reduce using rule 88 (jump_statement -> K_BREAK .)
    K_TRIANGLE      reduce using rule 88 (jump_statement -> K_BREAK .)
    K_RECTANGLE     reduce using rule 88 (jump_statement -> K_BREAK .)
    K_CIRCLE        reduce using rule 88 (jump_statement -> K_BREAK .)
    K_POINT         reduce using rule 88 (jump_statement -> K_BREAK .)
    K_TEXT          reduce using rule 88 (jump_statement -> K_BREAK .)
    K_TABLE         reduce using rule 88 (jump_statement -> K_BREAK .)
    K_LINE          reduce using rule 88 (jump_statement -> K_BREAK .)
    K_EL            reduce using rule 88 (jump_statement -> K_BREAK .)
    K_EF            reduce using rule 88 (jump_statement -> K_BREAK .)
    $end            reduce using rule 88 (jump_statement -> K_BREAK .)


state 14

    (85) iteration_statement -> iteration_statement_header . compound_statement_list K_END
    (83) compound_statement_list -> .
    (84) compound_statement_list -> . compound_statement_list compound_statement

    K_END           reduce using rule 83 (compound_statement_list -> .)
    ID              reduce using rule 83 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 83 (compound_statement_list -> .)
    K_BREAK         reduce using rule 83 (compound_statement_list -> .)
    K_DONE          reduce using rule 83 (compound_statement_list -> .)
    K_LIST          reduce using rule 83 (compound_statement_list -> .)
    K_IF            reduce using rule 83 (compound_statement_list -> .)
    K_WHILE         reduce using rule 83 (compound_statement_list -> .)
    K_INT           reduce using rule 83 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 83 (compound_statement_list -> .)
    K_STRING        reduce using rule 83 (compound_statement_list -> .)
    K_BOOL          reduce using rule 83 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 83 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 83 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 83 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 83 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 83 (compound_statement_list -> .)
    K_POINT         reduce using rule 83 (compound_statement_list -> .)
    K_TEXT          reduce using rule 83 (compound_statement_list -> .)
    K_TABLE         reduce using rule 83 (compound_statement_list -> .)
    K_LINE          reduce using rule 83 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 26

state 15

    (20) pre_type_modifier -> K_LIST .

    K_INT           reduce using rule 20 (pre_type_modifier -> K_LIST .)
    K_DOUBLE        reduce using rule 20 (pre_type_modifier -> K_LIST .)
    K_STRING        reduce using rule 20 (pre_type_modifier -> K_LIST .)
    K_BOOL          reduce using rule 20 (pre_type_modifier -> K_LIST .)
    K_WINDOW        reduce using rule 20 (pre_type_modifier -> K_LIST .)
    K_SHAPE         reduce using rule 20 (pre_type_modifier -> K_LIST .)
    K_TRIANGLE      reduce using rule 20 (pre_type_modifier -> K_LIST .)
    K_RECTANGLE     reduce using rule 20 (pre_type_modifier -> K_LIST .)
    K_CIRCLE        reduce using rule 20 (pre_type_modifier -> K_LIST .)
    K_POINT         reduce using rule 20 (pre_type_modifier -> K_LIST .)
    K_TEXT          reduce using rule 20 (pre_type_modifier -> K_LIST .)
    K_TABLE         reduce using rule 20 (pre_type_modifier -> K_LIST .)
    K_LINE          reduce using rule 20 (pre_type_modifier -> K_LIST .)


state 16

    (91) function_header -> pre_type_modifier . type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag
    (16) variable_declaration -> pre_type_modifier . type ID
    (17) variable_declaration -> pre_type_modifier . type ID ASSIGN expression
    (21) type -> . K_INT
    (22) type -> . K_DOUBLE
    (23) type -> . K_STRING
    (24) type -> . K_BOOL
    (25) type -> . K_WINDOW
    (26) type -> . K_SHAPE
    (27) type -> . K_TRIANGLE
    (28) type -> . K_RECTANGLE
    (29) type -> . K_CIRCLE
    (30) type -> . K_POINT
    (31) type -> . K_TEXT
    (32) type -> . K_TABLE
    (33) type -> . K_LINE

    K_INT           shift and go to state 34
    K_DOUBLE        shift and go to state 27
    K_STRING        shift and go to state 28
    K_BOOL          shift and go to state 35
    K_WINDOW        shift and go to state 40
    K_SHAPE         shift and go to state 31
    K_TRIANGLE      shift and go to state 29
    K_RECTANGLE     shift and go to state 39
    K_CIRCLE        shift and go to state 30
    K_POINT         shift and go to state 33
    K_TEXT          shift and go to state 32
    K_TABLE         shift and go to state 37
    K_LINE          shift and go to state 38

    type                           shift and go to state 36

state 17

    (11) function_call_statement -> ID . LPAREN opt_parameter_list RPAREN
    (18) variable_declaration -> ID . ASSIGN expression

    LPAREN          shift and go to state 42
    ASSIGN          shift and go to state 41


state 18

    (10) compound_statement -> jump_statement .

    ID              reduce using rule 10 (compound_statement -> jump_statement .)
    K_CONTINUE      reduce using rule 10 (compound_statement -> jump_statement .)
    K_BREAK         reduce using rule 10 (compound_statement -> jump_statement .)
    K_DONE          reduce using rule 10 (compound_statement -> jump_statement .)
    K_LIST          reduce using rule 10 (compound_statement -> jump_statement .)
    K_IF            reduce using rule 10 (compound_statement -> jump_statement .)
    K_WHILE         reduce using rule 10 (compound_statement -> jump_statement .)
    K_INT           reduce using rule 10 (compound_statement -> jump_statement .)
    K_DOUBLE        reduce using rule 10 (compound_statement -> jump_statement .)
    K_STRING        reduce using rule 10 (compound_statement -> jump_statement .)
    K_BOOL          reduce using rule 10 (compound_statement -> jump_statement .)
    K_WINDOW        reduce using rule 10 (compound_statement -> jump_statement .)
    K_SHAPE         reduce using rule 10 (compound_statement -> jump_statement .)
    K_TRIANGLE      reduce using rule 10 (compound_statement -> jump_statement .)
    K_RECTANGLE     reduce using rule 10 (compound_statement -> jump_statement .)
    K_CIRCLE        reduce using rule 10 (compound_statement -> jump_statement .)
    K_POINT         reduce using rule 10 (compound_statement -> jump_statement .)
    K_TEXT          reduce using rule 10 (compound_statement -> jump_statement .)
    K_TABLE         reduce using rule 10 (compound_statement -> jump_statement .)
    K_LINE          reduce using rule 10 (compound_statement -> jump_statement .)
    K_EL            reduce using rule 10 (compound_statement -> jump_statement .)
    K_EF            reduce using rule 10 (compound_statement -> jump_statement .)
    K_END           reduce using rule 10 (compound_statement -> jump_statement .)
    $end            reduce using rule 10 (compound_statement -> jump_statement .)


state 19

    (4) statement -> function_declaration .

    ID              reduce using rule 4 (statement -> function_declaration .)
    K_CONTINUE      reduce using rule 4 (statement -> function_declaration .)
    K_BREAK         reduce using rule 4 (statement -> function_declaration .)
    K_DONE          reduce using rule 4 (statement -> function_declaration .)
    K_LIST          reduce using rule 4 (statement -> function_declaration .)
    K_IF            reduce using rule 4 (statement -> function_declaration .)
    K_WHILE         reduce using rule 4 (statement -> function_declaration .)
    K_INT           reduce using rule 4 (statement -> function_declaration .)
    K_DOUBLE        reduce using rule 4 (statement -> function_declaration .)
    K_STRING        reduce using rule 4 (statement -> function_declaration .)
    K_BOOL          reduce using rule 4 (statement -> function_declaration .)
    K_WINDOW        reduce using rule 4 (statement -> function_declaration .)
    K_SHAPE         reduce using rule 4 (statement -> function_declaration .)
    K_TRIANGLE      reduce using rule 4 (statement -> function_declaration .)
    K_RECTANGLE     reduce using rule 4 (statement -> function_declaration .)
    K_CIRCLE        reduce using rule 4 (statement -> function_declaration .)
    K_POINT         reduce using rule 4 (statement -> function_declaration .)
    K_TEXT          reduce using rule 4 (statement -> function_declaration .)
    K_TABLE         reduce using rule 4 (statement -> function_declaration .)
    K_LINE          reduce using rule 4 (statement -> function_declaration .)
    $end            reduce using rule 4 (statement -> function_declaration .)


state 20

    (6) compound_statement -> function_call_statement .

    ID              reduce using rule 6 (compound_statement -> function_call_statement .)
    K_CONTINUE      reduce using rule 6 (compound_statement -> function_call_statement .)
    K_BREAK         reduce using rule 6 (compound_statement -> function_call_statement .)
    K_DONE          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_LIST          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_IF            reduce using rule 6 (compound_statement -> function_call_statement .)
    K_WHILE         reduce using rule 6 (compound_statement -> function_call_statement .)
    K_INT           reduce using rule 6 (compound_statement -> function_call_statement .)
    K_DOUBLE        reduce using rule 6 (compound_statement -> function_call_statement .)
    K_STRING        reduce using rule 6 (compound_statement -> function_call_statement .)
    K_BOOL          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_WINDOW        reduce using rule 6 (compound_statement -> function_call_statement .)
    K_SHAPE         reduce using rule 6 (compound_statement -> function_call_statement .)
    K_TRIANGLE      reduce using rule 6 (compound_statement -> function_call_statement .)
    K_RECTANGLE     reduce using rule 6 (compound_statement -> function_call_statement .)
    K_CIRCLE        reduce using rule 6 (compound_statement -> function_call_statement .)
    K_POINT         reduce using rule 6 (compound_statement -> function_call_statement .)
    K_TEXT          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_TABLE         reduce using rule 6 (compound_statement -> function_call_statement .)
    K_LINE          reduce using rule 6 (compound_statement -> function_call_statement .)
    K_EL            reduce using rule 6 (compound_statement -> function_call_statement .)
    K_EF            reduce using rule 6 (compound_statement -> function_call_statement .)
    K_END           reduce using rule 6 (compound_statement -> function_call_statement .)
    $end            reduce using rule 6 (compound_statement -> function_call_statement .)


state 21

    (89) jump_statement -> K_DONE .

    K_END           reduce using rule 89 (jump_statement -> K_DONE .)
    ID              reduce using rule 89 (jump_statement -> K_DONE .)
    K_CONTINUE      reduce using rule 89 (jump_statement -> K_DONE .)
    K_BREAK         reduce using rule 89 (jump_statement -> K_DONE .)
    K_DONE          reduce using rule 89 (jump_statement -> K_DONE .)
    K_LIST          reduce using rule 89 (jump_statement -> K_DONE .)
    K_IF            reduce using rule 89 (jump_statement -> K_DONE .)
    K_WHILE         reduce using rule 89 (jump_statement -> K_DONE .)
    K_INT           reduce using rule 89 (jump_statement -> K_DONE .)
    K_DOUBLE        reduce using rule 89 (jump_statement -> K_DONE .)
    K_STRING        reduce using rule 89 (jump_statement -> K_DONE .)
    K_BOOL          reduce using rule 89 (jump_statement -> K_DONE .)
    K_WINDOW        reduce using rule 89 (jump_statement -> K_DONE .)
    K_SHAPE         reduce using rule 89 (jump_statement -> K_DONE .)
    K_TRIANGLE      reduce using rule 89 (jump_statement -> K_DONE .)
    K_RECTANGLE     reduce using rule 89 (jump_statement -> K_DONE .)
    K_CIRCLE        reduce using rule 89 (jump_statement -> K_DONE .)
    K_POINT         reduce using rule 89 (jump_statement -> K_DONE .)
    K_TEXT          reduce using rule 89 (jump_statement -> K_DONE .)
    K_TABLE         reduce using rule 89 (jump_statement -> K_DONE .)
    K_LINE          reduce using rule 89 (jump_statement -> K_DONE .)
    K_EL            reduce using rule 89 (jump_statement -> K_DONE .)
    K_EF            reduce using rule 89 (jump_statement -> K_DONE .)
    $end            reduce using rule 89 (jump_statement -> K_DONE .)


state 22

    (77) if_statement -> K_IF LPAREN . expression RPAREN push_scope compound_statement_list
    (34) expression -> . expression boolean_operator expression_pre_term
    (35) expression -> . expression_pre_term
    (36) expression_pre_term -> . expression_pre_term eq_comparator expression_term
    (37) expression_pre_term -> . expression_term
    (38) expression_term -> . expression_term comparator expression_factor
    (39) expression_term -> . expression_factor
    (40) expression_factor -> . expression_factor op unary_expression
    (41) expression_factor -> . unary_expression
    (61) unary_expression -> . LPAREN expression RPAREN
    (62) unary_expression -> . primary_expression
    (63) unary_expression -> . NEG primary_expression
    (64) unary_expression -> . NEG LPAREN expression RPAREN
    (49) primary_expression -> . constant
    (50) primary_expression -> . id_expression
    (51) primary_expression -> . function_call_statement
    (52) primary_expression -> . MINUS primary_expression
    (53) primary_expression -> . null_expression
    (55) constant -> . boolean_constant
    (56) constant -> . number
    (57) constant -> . string_constant
    (54) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN opt_parameter_list RPAREN
    (65) null_expression -> . K_NULL
    (59) boolean_constant -> . K_TRUE
    (60) boolean_constant -> . K_FALSE
    (72) number -> . integer_number
    (73) number -> . double_number
    (58) string_constant -> . STRING
    (74) integer_number -> . INTEGER
    (75) double_number -> . DOUBLE

    LPAREN          shift and go to state 60
    NEG             shift and go to state 54
    MINUS           shift and go to state 52
    ID              shift and go to state 62
    K_NULL          shift and go to state 61
    K_TRUE          shift and go to state 49
    K_FALSE         shift and go to state 45
    STRING          shift and go to state 58
    INTEGER         shift and go to state 55
    DOUBLE          shift and go to state 65

    expression_term                shift and go to state 43
    constant                       shift and go to state 44
    unary_expression               shift and go to state 46
    expression_factor              shift and go to state 47
    number                         shift and go to state 48
    integer_number                 shift and go to state 50
    double_number                  shift and go to state 51
    string_constant                shift and go to state 53
    id_expression                  shift and go to state 56
    null_expression                shift and go to state 57
    primary_expression             shift and go to state 59
    expression                     shift and go to state 67
    function_call_statement        shift and go to state 63
    expression_pre_term            shift and go to state 64
    boolean_constant               shift and go to state 66

state 23

    (86) iteration_statement_header -> K_WHILE LPAREN . expression RPAREN
    (34) expression -> . expression boolean_operator expression_pre_term
    (35) expression -> . expression_pre_term
    (36) expression_pre_term -> . expression_pre_term eq_comparator expression_term
    (37) expression_pre_term -> . expression_term
    (38) expression_term -> . expression_term comparator expression_factor
    (39) expression_term -> . expression_factor
    (40) expression_factor -> . expression_factor op unary_expression
    (41) expression_factor -> . unary_expression
    (61) unary_expression -> . LPAREN expression RPAREN
    (62) unary_expression -> . primary_expression
    (63) unary_expression -> . NEG primary_expression
    (64) unary_expression -> . NEG LPAREN expression RPAREN
    (49) primary_expression -> . constant
    (50) primary_expression -> . id_expression
    (51) primary_expression -> . function_call_statement
    (52) primary_expression -> . MINUS primary_expression
    (53) primary_expression -> . null_expression
    (55) constant -> . boolean_constant
    (56) constant -> . number
    (57) constant -> . string_constant
    (54) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN opt_parameter_list RPAREN
    (65) null_expression -> . K_NULL
    (59) boolean_constant -> . K_TRUE
    (60) boolean_constant -> . K_FALSE
    (72) number -> . integer_number
    (73) number -> . double_number
    (58) string_constant -> . STRING
    (74) integer_number -> . INTEGER
    (75) double_number -> . DOUBLE

    LPAREN          shift and go to state 60
    NEG             shift and go to state 54
    MINUS           shift and go to state 52
    ID              shift and go to state 62
    K_NULL          shift and go to state 61
    K_TRUE          shift and go to state 49
    K_FALSE         shift and go to state 45
    STRING          shift and go to state 58
    INTEGER         shift and go to state 55
    DOUBLE          shift and go to state 65

    expression_term                shift and go to state 43
    null_expression                shift and go to state 57
    constant                       shift and go to state 44
    unary_expression               shift and go to state 46
    id_expression                  shift and go to state 56
    expression_factor              shift and go to state 47
    number                         shift and go to state 48
    function_call_statement        shift and go to state 63
    primary_expression             shift and go to state 59
    expression_pre_term            shift and go to state 64
    string_constant                shift and go to state 53
    double_number                  shift and go to state 51
    boolean_constant               shift and go to state 66
    expression                     shift and go to state 68
    integer_number                 shift and go to state 50

state 24

    (90) function_declaration -> function_header compound_statement_list . K_END
    (84) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN opt_parameter_list RPAREN
    (16) variable_declaration -> . pre_type_modifier type ID
    (17) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (18) variable_declaration -> . ID ASSIGN expression
    (76) selection_statement -> . if_statement else_if_statement_list else_statement K_END
    (85) iteration_statement -> . iteration_statement_header compound_statement_list K_END
    (87) jump_statement -> . K_CONTINUE
    (88) jump_statement -> . K_BREAK
    (89) jump_statement -> . K_DONE
    (19) pre_type_modifier -> .
    (20) pre_type_modifier -> . K_LIST
    (77) if_statement -> . K_IF LPAREN expression RPAREN push_scope compound_statement_list
    (86) iteration_statement_header -> . K_WHILE LPAREN expression RPAREN

    K_END           shift and go to state 69
    ID              shift and go to state 17
    K_CONTINUE      shift and go to state 12
    K_BREAK         shift and go to state 13
    K_DONE          shift and go to state 21
    K_INT           reduce using rule 19 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 19 (pre_type_modifier -> .)
    K_STRING        reduce using rule 19 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 19 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 19 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 19 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 19 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 19 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 19 (pre_type_modifier -> .)
    K_POINT         reduce using rule 19 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 19 (pre_type_modifier -> .)
    K_TABLE         reduce using rule 19 (pre_type_modifier -> .)
    K_LINE          reduce using rule 19 (pre_type_modifier -> .)
    K_LIST          shift and go to state 15
    K_IF            shift and go to state 3
    K_WHILE         shift and go to state 6

    jump_statement                 shift and go to state 18
    if_statement                   shift and go to state 11
    compound_statement             shift and go to state 70
    selection_statement            shift and go to state 8
    function_call_statement        shift and go to state 20
    iteration_statement_header     shift and go to state 14
    pre_type_modifier              shift and go to state 71
    iteration_statement            shift and go to state 4
    variable_declaration           shift and go to state 5

state 25

    (76) selection_statement -> if_statement else_if_statement_list . else_statement K_END
    (79) else_if_statement_list -> else_if_statement_list . else_if_statement
    (81) else_statement -> .
    (82) else_statement -> . K_EL push_scope compound_statement_list
    (80) else_if_statement -> . K_EF LPAREN expression RPAREN push_scope compound_statement_list

    K_END           reduce using rule 81 (else_statement -> .)
    K_EL            shift and go to state 73
    K_EF            shift and go to state 74

    else_if_statement              shift and go to state 72
    else_statement                 shift and go to state 75

state 26

    (85) iteration_statement -> iteration_statement_header compound_statement_list . K_END
    (84) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN opt_parameter_list RPAREN
    (16) variable_declaration -> . pre_type_modifier type ID
    (17) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (18) variable_declaration -> . ID ASSIGN expression
    (76) selection_statement -> . if_statement else_if_statement_list else_statement K_END
    (85) iteration_statement -> . iteration_statement_header compound_statement_list K_END
    (87) jump_statement -> . K_CONTINUE
    (88) jump_statement -> . K_BREAK
    (89) jump_statement -> . K_DONE
    (19) pre_type_modifier -> .
    (20) pre_type_modifier -> . K_LIST
    (77) if_statement -> . K_IF LPAREN expression RPAREN push_scope compound_statement_list
    (86) iteration_statement_header -> . K_WHILE LPAREN expression RPAREN

    K_END           shift and go to state 76
    ID              shift and go to state 17
    K_CONTINUE      shift and go to state 12
    K_BREAK         shift and go to state 13
    K_DONE          shift and go to state 21
    K_INT           reduce using rule 19 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 19 (pre_type_modifier -> .)
    K_STRING        reduce using rule 19 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 19 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 19 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 19 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 19 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 19 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 19 (pre_type_modifier -> .)
    K_POINT         reduce using rule 19 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 19 (pre_type_modifier -> .)
    K_TABLE         reduce using rule 19 (pre_type_modifier -> .)
    K_LINE          reduce using rule 19 (pre_type_modifier -> .)
    K_LIST          shift and go to state 15
    K_IF            shift and go to state 3
    K_WHILE         shift and go to state 6

    jump_statement                 shift and go to state 18
    if_statement                   shift and go to state 11
    compound_statement             shift and go to state 70
    selection_statement            shift and go to state 8
    function_call_statement        shift and go to state 20
    iteration_statement_header     shift and go to state 14
    pre_type_modifier              shift and go to state 71
    iteration_statement            shift and go to state 4
    variable_declaration           shift and go to state 5

state 27

    (22) type -> K_DOUBLE .

    ID              reduce using rule 22 (type -> K_DOUBLE .)


state 28

    (23) type -> K_STRING .

    ID              reduce using rule 23 (type -> K_STRING .)


state 29

    (27) type -> K_TRIANGLE .

    ID              reduce using rule 27 (type -> K_TRIANGLE .)


state 30

    (29) type -> K_CIRCLE .

    ID              reduce using rule 29 (type -> K_CIRCLE .)


state 31

    (26) type -> K_SHAPE .

    ID              reduce using rule 26 (type -> K_SHAPE .)


state 32

    (31) type -> K_TEXT .

    ID              reduce using rule 31 (type -> K_TEXT .)


state 33

    (30) type -> K_POINT .

    ID              reduce using rule 30 (type -> K_POINT .)


state 34

    (21) type -> K_INT .

    ID              reduce using rule 21 (type -> K_INT .)


state 35

    (24) type -> K_BOOL .

    ID              reduce using rule 24 (type -> K_BOOL .)


state 36

    (91) function_header -> pre_type_modifier type . ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag
    (16) variable_declaration -> pre_type_modifier type . ID
    (17) variable_declaration -> pre_type_modifier type . ID ASSIGN expression

    ID              shift and go to state 77


state 37

    (32) type -> K_TABLE .

    ID              reduce using rule 32 (type -> K_TABLE .)


state 38

    (33) type -> K_LINE .

    ID              reduce using rule 33 (type -> K_LINE .)


state 39

    (28) type -> K_RECTANGLE .

    ID              reduce using rule 28 (type -> K_RECTANGLE .)


state 40

    (25) type -> K_WINDOW .

    ID              reduce using rule 25 (type -> K_WINDOW .)


state 41

    (18) variable_declaration -> ID ASSIGN . expression
    (34) expression -> . expression boolean_operator expression_pre_term
    (35) expression -> . expression_pre_term
    (36) expression_pre_term -> . expression_pre_term eq_comparator expression_term
    (37) expression_pre_term -> . expression_term
    (38) expression_term -> . expression_term comparator expression_factor
    (39) expression_term -> . expression_factor
    (40) expression_factor -> . expression_factor op unary_expression
    (41) expression_factor -> . unary_expression
    (61) unary_expression -> . LPAREN expression RPAREN
    (62) unary_expression -> . primary_expression
    (63) unary_expression -> . NEG primary_expression
    (64) unary_expression -> . NEG LPAREN expression RPAREN
    (49) primary_expression -> . constant
    (50) primary_expression -> . id_expression
    (51) primary_expression -> . function_call_statement
    (52) primary_expression -> . MINUS primary_expression
    (53) primary_expression -> . null_expression
    (55) constant -> . boolean_constant
    (56) constant -> . number
    (57) constant -> . string_constant
    (54) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN opt_parameter_list RPAREN
    (65) null_expression -> . K_NULL
    (59) boolean_constant -> . K_TRUE
    (60) boolean_constant -> . K_FALSE
    (72) number -> . integer_number
    (73) number -> . double_number
    (58) string_constant -> . STRING
    (74) integer_number -> . INTEGER
    (75) double_number -> . DOUBLE

    LPAREN          shift and go to state 60
    NEG             shift and go to state 54
    MINUS           shift and go to state 52
    ID              shift and go to state 62
    K_NULL          shift and go to state 61
    K_TRUE          shift and go to state 49
    K_FALSE         shift and go to state 45
    STRING          shift and go to state 58
    INTEGER         shift and go to state 55
    DOUBLE          shift and go to state 65

    expression_term                shift and go to state 43
    null_expression                shift and go to state 57
    constant                       shift and go to state 44
    unary_expression               shift and go to state 46
    id_expression                  shift and go to state 56
    expression_factor              shift and go to state 47
    number                         shift and go to state 48
    function_call_statement        shift and go to state 63
    primary_expression             shift and go to state 59
    expression_pre_term            shift and go to state 64
    string_constant                shift and go to state 53
    double_number                  shift and go to state 51
    boolean_constant               shift and go to state 66
    expression                     shift and go to state 78
    integer_number                 shift and go to state 50

state 42

    (11) function_call_statement -> ID LPAREN . opt_parameter_list RPAREN
    (12) opt_parameter_list -> . parameter_list
    (13) opt_parameter_list -> .
    (14) parameter_list -> . parameter_list COMMA expression
    (15) parameter_list -> . expression
    (34) expression -> . expression boolean_operator expression_pre_term
    (35) expression -> . expression_pre_term
    (36) expression_pre_term -> . expression_pre_term eq_comparator expression_term
    (37) expression_pre_term -> . expression_term
    (38) expression_term -> . expression_term comparator expression_factor
    (39) expression_term -> . expression_factor
    (40) expression_factor -> . expression_factor op unary_expression
    (41) expression_factor -> . unary_expression
    (61) unary_expression -> . LPAREN expression RPAREN
    (62) unary_expression -> . primary_expression
    (63) unary_expression -> . NEG primary_expression
    (64) unary_expression -> . NEG LPAREN expression RPAREN
    (49) primary_expression -> . constant
    (50) primary_expression -> . id_expression
    (51) primary_expression -> . function_call_statement
    (52) primary_expression -> . MINUS primary_expression
    (53) primary_expression -> . null_expression
    (55) constant -> . boolean_constant
    (56) constant -> . number
    (57) constant -> . string_constant
    (54) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN opt_parameter_list RPAREN
    (65) null_expression -> . K_NULL
    (59) boolean_constant -> . K_TRUE
    (60) boolean_constant -> . K_FALSE
    (72) number -> . integer_number
    (73) number -> . double_number
    (58) string_constant -> . STRING
    (74) integer_number -> . INTEGER
    (75) double_number -> . DOUBLE

    RPAREN          reduce using rule 13 (opt_parameter_list -> .)
    LPAREN          shift and go to state 60
    NEG             shift and go to state 54
    MINUS           shift and go to state 52
    ID              shift and go to state 62
    K_NULL          shift and go to state 61
    K_TRUE          shift and go to state 49
    K_FALSE         shift and go to state 45
    STRING          shift and go to state 58
    INTEGER         shift and go to state 55
    DOUBLE          shift and go to state 65

    expression_term                shift and go to state 43
    string_constant                shift and go to state 53
    null_expression                shift and go to state 57
    constant                       shift and go to state 44
    parameter_list                 shift and go to state 79
    id_expression                  shift and go to state 56
    opt_parameter_list             shift and go to state 80
    number                         shift and go to state 48
    unary_expression               shift and go to state 46
    primary_expression             shift and go to state 59
    expression_pre_term            shift and go to state 64
    expression_factor              shift and go to state 47
    function_call_statement        shift and go to state 63
    double_number                  shift and go to state 51
    boolean_constant               shift and go to state 66
    expression                     shift and go to state 81
    integer_number                 shift and go to state 50

state 43

    (37) expression_pre_term -> expression_term .
    (38) expression_term -> expression_term . comparator expression_factor
    (66) comparator -> . GT
    (67) comparator -> . LT
    (68) comparator -> . GEQ
    (69) comparator -> . LEQ

    EQ              reduce using rule 37 (expression_pre_term -> expression_term .)
    NEQ             reduce using rule 37 (expression_pre_term -> expression_term .)
    AND             reduce using rule 37 (expression_pre_term -> expression_term .)
    OR              reduce using rule 37 (expression_pre_term -> expression_term .)
    ID              reduce using rule 37 (expression_pre_term -> expression_term .)
    K_CONTINUE      reduce using rule 37 (expression_pre_term -> expression_term .)
    K_BREAK         reduce using rule 37 (expression_pre_term -> expression_term .)
    K_DONE          reduce using rule 37 (expression_pre_term -> expression_term .)
    K_LIST          reduce using rule 37 (expression_pre_term -> expression_term .)
    K_IF            reduce using rule 37 (expression_pre_term -> expression_term .)
    K_WHILE         reduce using rule 37 (expression_pre_term -> expression_term .)
    K_INT           reduce using rule 37 (expression_pre_term -> expression_term .)
    K_DOUBLE        reduce using rule 37 (expression_pre_term -> expression_term .)
    K_STRING        reduce using rule 37 (expression_pre_term -> expression_term .)
    K_BOOL          reduce using rule 37 (expression_pre_term -> expression_term .)
    K_WINDOW        reduce using rule 37 (expression_pre_term -> expression_term .)
    K_SHAPE         reduce using rule 37 (expression_pre_term -> expression_term .)
    K_TRIANGLE      reduce using rule 37 (expression_pre_term -> expression_term .)
    K_RECTANGLE     reduce using rule 37 (expression_pre_term -> expression_term .)
    K_CIRCLE        reduce using rule 37 (expression_pre_term -> expression_term .)
    K_POINT         reduce using rule 37 (expression_pre_term -> expression_term .)
    K_TEXT          reduce using rule 37 (expression_pre_term -> expression_term .)
    K_TABLE         reduce using rule 37 (expression_pre_term -> expression_term .)
    K_LINE          reduce using rule 37 (expression_pre_term -> expression_term .)
    $end            reduce using rule 37 (expression_pre_term -> expression_term .)
    K_END           reduce using rule 37 (expression_pre_term -> expression_term .)
    K_EL            reduce using rule 37 (expression_pre_term -> expression_term .)
    K_EF            reduce using rule 37 (expression_pre_term -> expression_term .)
    COMMA           reduce using rule 37 (expression_pre_term -> expression_term .)
    RPAREN          reduce using rule 37 (expression_pre_term -> expression_term .)
    GT              shift and go to state 83
    LT              shift and go to state 86
    GEQ             shift and go to state 82
    LEQ             shift and go to state 85

    comparator                     shift and go to state 84

state 44

    (49) primary_expression -> constant .

    PLUS            reduce using rule 49 (primary_expression -> constant .)
    MINUS           reduce using rule 49 (primary_expression -> constant .)
    TIMES           reduce using rule 49 (primary_expression -> constant .)
    DIVIDE          reduce using rule 49 (primary_expression -> constant .)
    MOD             reduce using rule 49 (primary_expression -> constant .)
    GT              reduce using rule 49 (primary_expression -> constant .)
    LT              reduce using rule 49 (primary_expression -> constant .)
    GEQ             reduce using rule 49 (primary_expression -> constant .)
    LEQ             reduce using rule 49 (primary_expression -> constant .)
    EQ              reduce using rule 49 (primary_expression -> constant .)
    NEQ             reduce using rule 49 (primary_expression -> constant .)
    RPAREN          reduce using rule 49 (primary_expression -> constant .)
    AND             reduce using rule 49 (primary_expression -> constant .)
    OR              reduce using rule 49 (primary_expression -> constant .)
    ID              reduce using rule 49 (primary_expression -> constant .)
    K_CONTINUE      reduce using rule 49 (primary_expression -> constant .)
    K_BREAK         reduce using rule 49 (primary_expression -> constant .)
    K_DONE          reduce using rule 49 (primary_expression -> constant .)
    K_LIST          reduce using rule 49 (primary_expression -> constant .)
    K_IF            reduce using rule 49 (primary_expression -> constant .)
    K_WHILE         reduce using rule 49 (primary_expression -> constant .)
    K_INT           reduce using rule 49 (primary_expression -> constant .)
    K_DOUBLE        reduce using rule 49 (primary_expression -> constant .)
    K_STRING        reduce using rule 49 (primary_expression -> constant .)
    K_BOOL          reduce using rule 49 (primary_expression -> constant .)
    K_WINDOW        reduce using rule 49 (primary_expression -> constant .)
    K_SHAPE         reduce using rule 49 (primary_expression -> constant .)
    K_TRIANGLE      reduce using rule 49 (primary_expression -> constant .)
    K_RECTANGLE     reduce using rule 49 (primary_expression -> constant .)
    K_CIRCLE        reduce using rule 49 (primary_expression -> constant .)
    K_POINT         reduce using rule 49 (primary_expression -> constant .)
    K_TEXT          reduce using rule 49 (primary_expression -> constant .)
    K_TABLE         reduce using rule 49 (primary_expression -> constant .)
    K_LINE          reduce using rule 49 (primary_expression -> constant .)
    $end            reduce using rule 49 (primary_expression -> constant .)
    K_END           reduce using rule 49 (primary_expression -> constant .)
    K_EL            reduce using rule 49 (primary_expression -> constant .)
    K_EF            reduce using rule 49 (primary_expression -> constant .)
    COMMA           reduce using rule 49 (primary_expression -> constant .)


state 45

    (60) boolean_constant -> K_FALSE .

    PLUS            reduce using rule 60 (boolean_constant -> K_FALSE .)
    MINUS           reduce using rule 60 (boolean_constant -> K_FALSE .)
    TIMES           reduce using rule 60 (boolean_constant -> K_FALSE .)
    DIVIDE          reduce using rule 60 (boolean_constant -> K_FALSE .)
    MOD             reduce using rule 60 (boolean_constant -> K_FALSE .)
    GT              reduce using rule 60 (boolean_constant -> K_FALSE .)
    LT              reduce using rule 60 (boolean_constant -> K_FALSE .)
    GEQ             reduce using rule 60 (boolean_constant -> K_FALSE .)
    LEQ             reduce using rule 60 (boolean_constant -> K_FALSE .)
    EQ              reduce using rule 60 (boolean_constant -> K_FALSE .)
    NEQ             reduce using rule 60 (boolean_constant -> K_FALSE .)
    RPAREN          reduce using rule 60 (boolean_constant -> K_FALSE .)
    AND             reduce using rule 60 (boolean_constant -> K_FALSE .)
    OR              reduce using rule 60 (boolean_constant -> K_FALSE .)
    ID              reduce using rule 60 (boolean_constant -> K_FALSE .)
    K_CONTINUE      reduce using rule 60 (boolean_constant -> K_FALSE .)
    K_BREAK         reduce using rule 60 (boolean_constant -> K_FALSE .)
    K_DONE          reduce using rule 60 (boolean_constant -> K_FALSE .)
    K_LIST          reduce using rule 60 (boolean_constant -> K_FALSE .)
    K_IF            reduce using rule 60 (boolean_constant -> K_FALSE .)
    K_WHILE         reduce using rule 60 (boolean_constant -> K_FALSE .)
    K_INT           reduce using rule 60 (boolean_constant -> K_FALSE .)
    K_DOUBLE        reduce using rule 60 (boolean_constant -> K_FALSE .)
    K_STRING        reduce using rule 60 (boolean_constant -> K_FALSE .)
    K_BOOL          reduce using rule 60 (boolean_constant -> K_FALSE .)
    K_WINDOW        reduce using rule 60 (boolean_constant -> K_FALSE .)
    K_SHAPE         reduce using rule 60 (boolean_constant -> K_FALSE .)
    K_TRIANGLE      reduce using rule 60 (boolean_constant -> K_FALSE .)
    K_RECTANGLE     reduce using rule 60 (boolean_constant -> K_FALSE .)
    K_CIRCLE        reduce using rule 60 (boolean_constant -> K_FALSE .)
    K_POINT         reduce using rule 60 (boolean_constant -> K_FALSE .)
    K_TEXT          reduce using rule 60 (boolean_constant -> K_FALSE .)
    K_TABLE         reduce using rule 60 (boolean_constant -> K_FALSE .)
    K_LINE          reduce using rule 60 (boolean_constant -> K_FALSE .)
    $end            reduce using rule 60 (boolean_constant -> K_FALSE .)
    K_END           reduce using rule 60 (boolean_constant -> K_FALSE .)
    K_EL            reduce using rule 60 (boolean_constant -> K_FALSE .)
    K_EF            reduce using rule 60 (boolean_constant -> K_FALSE .)
    COMMA           reduce using rule 60 (boolean_constant -> K_FALSE .)


state 46

    (41) expression_factor -> unary_expression .

    PLUS            reduce using rule 41 (expression_factor -> unary_expression .)
    MINUS           reduce using rule 41 (expression_factor -> unary_expression .)
    TIMES           reduce using rule 41 (expression_factor -> unary_expression .)
    DIVIDE          reduce using rule 41 (expression_factor -> unary_expression .)
    MOD             reduce using rule 41 (expression_factor -> unary_expression .)
    GT              reduce using rule 41 (expression_factor -> unary_expression .)
    LT              reduce using rule 41 (expression_factor -> unary_expression .)
    GEQ             reduce using rule 41 (expression_factor -> unary_expression .)
    LEQ             reduce using rule 41 (expression_factor -> unary_expression .)
    EQ              reduce using rule 41 (expression_factor -> unary_expression .)
    NEQ             reduce using rule 41 (expression_factor -> unary_expression .)
    RPAREN          reduce using rule 41 (expression_factor -> unary_expression .)
    AND             reduce using rule 41 (expression_factor -> unary_expression .)
    OR              reduce using rule 41 (expression_factor -> unary_expression .)
    ID              reduce using rule 41 (expression_factor -> unary_expression .)
    K_CONTINUE      reduce using rule 41 (expression_factor -> unary_expression .)
    K_BREAK         reduce using rule 41 (expression_factor -> unary_expression .)
    K_DONE          reduce using rule 41 (expression_factor -> unary_expression .)
    K_LIST          reduce using rule 41 (expression_factor -> unary_expression .)
    K_IF            reduce using rule 41 (expression_factor -> unary_expression .)
    K_WHILE         reduce using rule 41 (expression_factor -> unary_expression .)
    K_INT           reduce using rule 41 (expression_factor -> unary_expression .)
    K_DOUBLE        reduce using rule 41 (expression_factor -> unary_expression .)
    K_STRING        reduce using rule 41 (expression_factor -> unary_expression .)
    K_BOOL          reduce using rule 41 (expression_factor -> unary_expression .)
    K_WINDOW        reduce using rule 41 (expression_factor -> unary_expression .)
    K_SHAPE         reduce using rule 41 (expression_factor -> unary_expression .)
    K_TRIANGLE      reduce using rule 41 (expression_factor -> unary_expression .)
    K_RECTANGLE     reduce using rule 41 (expression_factor -> unary_expression .)
    K_CIRCLE        reduce using rule 41 (expression_factor -> unary_expression .)
    K_POINT         reduce using rule 41 (expression_factor -> unary_expression .)
    K_TEXT          reduce using rule 41 (expression_factor -> unary_expression .)
    K_TABLE         reduce using rule 41 (expression_factor -> unary_expression .)
    K_LINE          reduce using rule 41 (expression_factor -> unary_expression .)
    $end            reduce using rule 41 (expression_factor -> unary_expression .)
    K_END           reduce using rule 41 (expression_factor -> unary_expression .)
    K_EL            reduce using rule 41 (expression_factor -> unary_expression .)
    K_EF            reduce using rule 41 (expression_factor -> unary_expression .)
    COMMA           reduce using rule 41 (expression_factor -> unary_expression .)


state 47

    (39) expression_term -> expression_factor .
    (40) expression_factor -> expression_factor . op unary_expression
    (42) op -> . PLUS
    (43) op -> . MINUS
    (44) op -> . TIMES
    (45) op -> . DIVIDE
    (46) op -> . MOD

    GT              reduce using rule 39 (expression_term -> expression_factor .)
    LT              reduce using rule 39 (expression_term -> expression_factor .)
    GEQ             reduce using rule 39 (expression_term -> expression_factor .)
    LEQ             reduce using rule 39 (expression_term -> expression_factor .)
    EQ              reduce using rule 39 (expression_term -> expression_factor .)
    NEQ             reduce using rule 39 (expression_term -> expression_factor .)
    AND             reduce using rule 39 (expression_term -> expression_factor .)
    OR              reduce using rule 39 (expression_term -> expression_factor .)
    COMMA           reduce using rule 39 (expression_term -> expression_factor .)
    RPAREN          reduce using rule 39 (expression_term -> expression_factor .)
    ID              reduce using rule 39 (expression_term -> expression_factor .)
    K_CONTINUE      reduce using rule 39 (expression_term -> expression_factor .)
    K_BREAK         reduce using rule 39 (expression_term -> expression_factor .)
    K_DONE          reduce using rule 39 (expression_term -> expression_factor .)
    K_LIST          reduce using rule 39 (expression_term -> expression_factor .)
    K_IF            reduce using rule 39 (expression_term -> expression_factor .)
    K_WHILE         reduce using rule 39 (expression_term -> expression_factor .)
    K_INT           reduce using rule 39 (expression_term -> expression_factor .)
    K_DOUBLE        reduce using rule 39 (expression_term -> expression_factor .)
    K_STRING        reduce using rule 39 (expression_term -> expression_factor .)
    K_BOOL          reduce using rule 39 (expression_term -> expression_factor .)
    K_WINDOW        reduce using rule 39 (expression_term -> expression_factor .)
    K_SHAPE         reduce using rule 39 (expression_term -> expression_factor .)
    K_TRIANGLE      reduce using rule 39 (expression_term -> expression_factor .)
    K_RECTANGLE     reduce using rule 39 (expression_term -> expression_factor .)
    K_CIRCLE        reduce using rule 39 (expression_term -> expression_factor .)
    K_POINT         reduce using rule 39 (expression_term -> expression_factor .)
    K_TEXT          reduce using rule 39 (expression_term -> expression_factor .)
    K_TABLE         reduce using rule 39 (expression_term -> expression_factor .)
    K_LINE          reduce using rule 39 (expression_term -> expression_factor .)
    $end            reduce using rule 39 (expression_term -> expression_factor .)
    K_END           reduce using rule 39 (expression_term -> expression_factor .)
    K_EL            reduce using rule 39 (expression_term -> expression_factor .)
    K_EF            reduce using rule 39 (expression_term -> expression_factor .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 91
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 90

    op                             shift and go to state 92

state 48

    (56) constant -> number .

    PLUS            reduce using rule 56 (constant -> number .)
    MINUS           reduce using rule 56 (constant -> number .)
    TIMES           reduce using rule 56 (constant -> number .)
    DIVIDE          reduce using rule 56 (constant -> number .)
    MOD             reduce using rule 56 (constant -> number .)
    GT              reduce using rule 56 (constant -> number .)
    LT              reduce using rule 56 (constant -> number .)
    GEQ             reduce using rule 56 (constant -> number .)
    LEQ             reduce using rule 56 (constant -> number .)
    EQ              reduce using rule 56 (constant -> number .)
    NEQ             reduce using rule 56 (constant -> number .)
    AND             reduce using rule 56 (constant -> number .)
    OR              reduce using rule 56 (constant -> number .)
    COMMA           reduce using rule 56 (constant -> number .)
    RPAREN          reduce using rule 56 (constant -> number .)
    ID              reduce using rule 56 (constant -> number .)
    K_CONTINUE      reduce using rule 56 (constant -> number .)
    K_BREAK         reduce using rule 56 (constant -> number .)
    K_DONE          reduce using rule 56 (constant -> number .)
    K_LIST          reduce using rule 56 (constant -> number .)
    K_IF            reduce using rule 56 (constant -> number .)
    K_WHILE         reduce using rule 56 (constant -> number .)
    K_INT           reduce using rule 56 (constant -> number .)
    K_DOUBLE        reduce using rule 56 (constant -> number .)
    K_STRING        reduce using rule 56 (constant -> number .)
    K_BOOL          reduce using rule 56 (constant -> number .)
    K_WINDOW        reduce using rule 56 (constant -> number .)
    K_SHAPE         reduce using rule 56 (constant -> number .)
    K_TRIANGLE      reduce using rule 56 (constant -> number .)
    K_RECTANGLE     reduce using rule 56 (constant -> number .)
    K_CIRCLE        reduce using rule 56 (constant -> number .)
    K_POINT         reduce using rule 56 (constant -> number .)
    K_TEXT          reduce using rule 56 (constant -> number .)
    K_TABLE         reduce using rule 56 (constant -> number .)
    K_LINE          reduce using rule 56 (constant -> number .)
    $end            reduce using rule 56 (constant -> number .)
    K_END           reduce using rule 56 (constant -> number .)
    K_EL            reduce using rule 56 (constant -> number .)
    K_EF            reduce using rule 56 (constant -> number .)


state 49

    (59) boolean_constant -> K_TRUE .

    PLUS            reduce using rule 59 (boolean_constant -> K_TRUE .)
    MINUS           reduce using rule 59 (boolean_constant -> K_TRUE .)
    TIMES           reduce using rule 59 (boolean_constant -> K_TRUE .)
    DIVIDE          reduce using rule 59 (boolean_constant -> K_TRUE .)
    MOD             reduce using rule 59 (boolean_constant -> K_TRUE .)
    GT              reduce using rule 59 (boolean_constant -> K_TRUE .)
    LT              reduce using rule 59 (boolean_constant -> K_TRUE .)
    GEQ             reduce using rule 59 (boolean_constant -> K_TRUE .)
    LEQ             reduce using rule 59 (boolean_constant -> K_TRUE .)
    EQ              reduce using rule 59 (boolean_constant -> K_TRUE .)
    NEQ             reduce using rule 59 (boolean_constant -> K_TRUE .)
    RPAREN          reduce using rule 59 (boolean_constant -> K_TRUE .)
    AND             reduce using rule 59 (boolean_constant -> K_TRUE .)
    OR              reduce using rule 59 (boolean_constant -> K_TRUE .)
    ID              reduce using rule 59 (boolean_constant -> K_TRUE .)
    K_CONTINUE      reduce using rule 59 (boolean_constant -> K_TRUE .)
    K_BREAK         reduce using rule 59 (boolean_constant -> K_TRUE .)
    K_DONE          reduce using rule 59 (boolean_constant -> K_TRUE .)
    K_LIST          reduce using rule 59 (boolean_constant -> K_TRUE .)
    K_IF            reduce using rule 59 (boolean_constant -> K_TRUE .)
    K_WHILE         reduce using rule 59 (boolean_constant -> K_TRUE .)
    K_INT           reduce using rule 59 (boolean_constant -> K_TRUE .)
    K_DOUBLE        reduce using rule 59 (boolean_constant -> K_TRUE .)
    K_STRING        reduce using rule 59 (boolean_constant -> K_TRUE .)
    K_BOOL          reduce using rule 59 (boolean_constant -> K_TRUE .)
    K_WINDOW        reduce using rule 59 (boolean_constant -> K_TRUE .)
    K_SHAPE         reduce using rule 59 (boolean_constant -> K_TRUE .)
    K_TRIANGLE      reduce using rule 59 (boolean_constant -> K_TRUE .)
    K_RECTANGLE     reduce using rule 59 (boolean_constant -> K_TRUE .)
    K_CIRCLE        reduce using rule 59 (boolean_constant -> K_TRUE .)
    K_POINT         reduce using rule 59 (boolean_constant -> K_TRUE .)
    K_TEXT          reduce using rule 59 (boolean_constant -> K_TRUE .)
    K_TABLE         reduce using rule 59 (boolean_constant -> K_TRUE .)
    K_LINE          reduce using rule 59 (boolean_constant -> K_TRUE .)
    $end            reduce using rule 59 (boolean_constant -> K_TRUE .)
    K_END           reduce using rule 59 (boolean_constant -> K_TRUE .)
    K_EL            reduce using rule 59 (boolean_constant -> K_TRUE .)
    K_EF            reduce using rule 59 (boolean_constant -> K_TRUE .)
    COMMA           reduce using rule 59 (boolean_constant -> K_TRUE .)


state 50

    (72) number -> integer_number .

    PLUS            reduce using rule 72 (number -> integer_number .)
    MINUS           reduce using rule 72 (number -> integer_number .)
    TIMES           reduce using rule 72 (number -> integer_number .)
    DIVIDE          reduce using rule 72 (number -> integer_number .)
    MOD             reduce using rule 72 (number -> integer_number .)
    GT              reduce using rule 72 (number -> integer_number .)
    LT              reduce using rule 72 (number -> integer_number .)
    GEQ             reduce using rule 72 (number -> integer_number .)
    LEQ             reduce using rule 72 (number -> integer_number .)
    EQ              reduce using rule 72 (number -> integer_number .)
    NEQ             reduce using rule 72 (number -> integer_number .)
    RPAREN          reduce using rule 72 (number -> integer_number .)
    AND             reduce using rule 72 (number -> integer_number .)
    OR              reduce using rule 72 (number -> integer_number .)
    ID              reduce using rule 72 (number -> integer_number .)
    K_CONTINUE      reduce using rule 72 (number -> integer_number .)
    K_BREAK         reduce using rule 72 (number -> integer_number .)
    K_DONE          reduce using rule 72 (number -> integer_number .)
    K_LIST          reduce using rule 72 (number -> integer_number .)
    K_IF            reduce using rule 72 (number -> integer_number .)
    K_WHILE         reduce using rule 72 (number -> integer_number .)
    K_INT           reduce using rule 72 (number -> integer_number .)
    K_DOUBLE        reduce using rule 72 (number -> integer_number .)
    K_STRING        reduce using rule 72 (number -> integer_number .)
    K_BOOL          reduce using rule 72 (number -> integer_number .)
    K_WINDOW        reduce using rule 72 (number -> integer_number .)
    K_SHAPE         reduce using rule 72 (number -> integer_number .)
    K_TRIANGLE      reduce using rule 72 (number -> integer_number .)
    K_RECTANGLE     reduce using rule 72 (number -> integer_number .)
    K_CIRCLE        reduce using rule 72 (number -> integer_number .)
    K_POINT         reduce using rule 72 (number -> integer_number .)
    K_TEXT          reduce using rule 72 (number -> integer_number .)
    K_TABLE         reduce using rule 72 (number -> integer_number .)
    K_LINE          reduce using rule 72 (number -> integer_number .)
    $end            reduce using rule 72 (number -> integer_number .)
    K_END           reduce using rule 72 (number -> integer_number .)
    K_EL            reduce using rule 72 (number -> integer_number .)
    K_EF            reduce using rule 72 (number -> integer_number .)
    COMMA           reduce using rule 72 (number -> integer_number .)


state 51

    (73) number -> double_number .

    PLUS            reduce using rule 73 (number -> double_number .)
    MINUS           reduce using rule 73 (number -> double_number .)
    TIMES           reduce using rule 73 (number -> double_number .)
    DIVIDE          reduce using rule 73 (number -> double_number .)
    MOD             reduce using rule 73 (number -> double_number .)
    GT              reduce using rule 73 (number -> double_number .)
    LT              reduce using rule 73 (number -> double_number .)
    GEQ             reduce using rule 73 (number -> double_number .)
    LEQ             reduce using rule 73 (number -> double_number .)
    EQ              reduce using rule 73 (number -> double_number .)
    NEQ             reduce using rule 73 (number -> double_number .)
    RPAREN          reduce using rule 73 (number -> double_number .)
    AND             reduce using rule 73 (number -> double_number .)
    OR              reduce using rule 73 (number -> double_number .)
    ID              reduce using rule 73 (number -> double_number .)
    K_CONTINUE      reduce using rule 73 (number -> double_number .)
    K_BREAK         reduce using rule 73 (number -> double_number .)
    K_DONE          reduce using rule 73 (number -> double_number .)
    K_LIST          reduce using rule 73 (number -> double_number .)
    K_IF            reduce using rule 73 (number -> double_number .)
    K_WHILE         reduce using rule 73 (number -> double_number .)
    K_INT           reduce using rule 73 (number -> double_number .)
    K_DOUBLE        reduce using rule 73 (number -> double_number .)
    K_STRING        reduce using rule 73 (number -> double_number .)
    K_BOOL          reduce using rule 73 (number -> double_number .)
    K_WINDOW        reduce using rule 73 (number -> double_number .)
    K_SHAPE         reduce using rule 73 (number -> double_number .)
    K_TRIANGLE      reduce using rule 73 (number -> double_number .)
    K_RECTANGLE     reduce using rule 73 (number -> double_number .)
    K_CIRCLE        reduce using rule 73 (number -> double_number .)
    K_POINT         reduce using rule 73 (number -> double_number .)
    K_TEXT          reduce using rule 73 (number -> double_number .)
    K_TABLE         reduce using rule 73 (number -> double_number .)
    K_LINE          reduce using rule 73 (number -> double_number .)
    $end            reduce using rule 73 (number -> double_number .)
    K_END           reduce using rule 73 (number -> double_number .)
    K_EL            reduce using rule 73 (number -> double_number .)
    K_EF            reduce using rule 73 (number -> double_number .)
    COMMA           reduce using rule 73 (number -> double_number .)


state 52

    (52) primary_expression -> MINUS . primary_expression
    (49) primary_expression -> . constant
    (50) primary_expression -> . id_expression
    (51) primary_expression -> . function_call_statement
    (52) primary_expression -> . MINUS primary_expression
    (53) primary_expression -> . null_expression
    (55) constant -> . boolean_constant
    (56) constant -> . number
    (57) constant -> . string_constant
    (54) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN opt_parameter_list RPAREN
    (65) null_expression -> . K_NULL
    (59) boolean_constant -> . K_TRUE
    (60) boolean_constant -> . K_FALSE
    (72) number -> . integer_number
    (73) number -> . double_number
    (58) string_constant -> . STRING
    (74) integer_number -> . INTEGER
    (75) double_number -> . DOUBLE

    MINUS           shift and go to state 52
    ID              shift and go to state 62
    K_NULL          shift and go to state 61
    K_TRUE          shift and go to state 49
    K_FALSE         shift and go to state 45
    STRING          shift and go to state 58
    INTEGER         shift and go to state 55
    DOUBLE          shift and go to state 65

    id_expression                  shift and go to state 56
    null_expression                shift and go to state 57
    constant                       shift and go to state 44
    string_constant                shift and go to state 53
    number                         shift and go to state 48
    function_call_statement        shift and go to state 63
    primary_expression             shift and go to state 93
    integer_number                 shift and go to state 50
    double_number                  shift and go to state 51
    boolean_constant               shift and go to state 66

state 53

    (57) constant -> string_constant .

    PLUS            reduce using rule 57 (constant -> string_constant .)
    MINUS           reduce using rule 57 (constant -> string_constant .)
    TIMES           reduce using rule 57 (constant -> string_constant .)
    DIVIDE          reduce using rule 57 (constant -> string_constant .)
    MOD             reduce using rule 57 (constant -> string_constant .)
    GT              reduce using rule 57 (constant -> string_constant .)
    LT              reduce using rule 57 (constant -> string_constant .)
    GEQ             reduce using rule 57 (constant -> string_constant .)
    LEQ             reduce using rule 57 (constant -> string_constant .)
    EQ              reduce using rule 57 (constant -> string_constant .)
    NEQ             reduce using rule 57 (constant -> string_constant .)
    AND             reduce using rule 57 (constant -> string_constant .)
    OR              reduce using rule 57 (constant -> string_constant .)
    COMMA           reduce using rule 57 (constant -> string_constant .)
    RPAREN          reduce using rule 57 (constant -> string_constant .)
    ID              reduce using rule 57 (constant -> string_constant .)
    K_CONTINUE      reduce using rule 57 (constant -> string_constant .)
    K_BREAK         reduce using rule 57 (constant -> string_constant .)
    K_DONE          reduce using rule 57 (constant -> string_constant .)
    K_LIST          reduce using rule 57 (constant -> string_constant .)
    K_IF            reduce using rule 57 (constant -> string_constant .)
    K_WHILE         reduce using rule 57 (constant -> string_constant .)
    K_INT           reduce using rule 57 (constant -> string_constant .)
    K_DOUBLE        reduce using rule 57 (constant -> string_constant .)
    K_STRING        reduce using rule 57 (constant -> string_constant .)
    K_BOOL          reduce using rule 57 (constant -> string_constant .)
    K_WINDOW        reduce using rule 57 (constant -> string_constant .)
    K_SHAPE         reduce using rule 57 (constant -> string_constant .)
    K_TRIANGLE      reduce using rule 57 (constant -> string_constant .)
    K_RECTANGLE     reduce using rule 57 (constant -> string_constant .)
    K_CIRCLE        reduce using rule 57 (constant -> string_constant .)
    K_POINT         reduce using rule 57 (constant -> string_constant .)
    K_TEXT          reduce using rule 57 (constant -> string_constant .)
    K_TABLE         reduce using rule 57 (constant -> string_constant .)
    K_LINE          reduce using rule 57 (constant -> string_constant .)
    $end            reduce using rule 57 (constant -> string_constant .)
    K_END           reduce using rule 57 (constant -> string_constant .)
    K_EL            reduce using rule 57 (constant -> string_constant .)
    K_EF            reduce using rule 57 (constant -> string_constant .)


state 54

    (63) unary_expression -> NEG . primary_expression
    (64) unary_expression -> NEG . LPAREN expression RPAREN
    (49) primary_expression -> . constant
    (50) primary_expression -> . id_expression
    (51) primary_expression -> . function_call_statement
    (52) primary_expression -> . MINUS primary_expression
    (53) primary_expression -> . null_expression
    (55) constant -> . boolean_constant
    (56) constant -> . number
    (57) constant -> . string_constant
    (54) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN opt_parameter_list RPAREN
    (65) null_expression -> . K_NULL
    (59) boolean_constant -> . K_TRUE
    (60) boolean_constant -> . K_FALSE
    (72) number -> . integer_number
    (73) number -> . double_number
    (58) string_constant -> . STRING
    (74) integer_number -> . INTEGER
    (75) double_number -> . DOUBLE

    LPAREN          shift and go to state 95
    MINUS           shift and go to state 52
    ID              shift and go to state 62
    K_NULL          shift and go to state 61
    K_TRUE          shift and go to state 49
    K_FALSE         shift and go to state 45
    STRING          shift and go to state 58
    INTEGER         shift and go to state 55
    DOUBLE          shift and go to state 65

    id_expression                  shift and go to state 56
    null_expression                shift and go to state 57
    constant                       shift and go to state 44
    string_constant                shift and go to state 53
    number                         shift and go to state 48
    function_call_statement        shift and go to state 63
    primary_expression             shift and go to state 94
    double_number                  shift and go to state 51
    boolean_constant               shift and go to state 66
    integer_number                 shift and go to state 50

state 55

    (74) integer_number -> INTEGER .

    PLUS            reduce using rule 74 (integer_number -> INTEGER .)
    MINUS           reduce using rule 74 (integer_number -> INTEGER .)
    TIMES           reduce using rule 74 (integer_number -> INTEGER .)
    DIVIDE          reduce using rule 74 (integer_number -> INTEGER .)
    MOD             reduce using rule 74 (integer_number -> INTEGER .)
    GT              reduce using rule 74 (integer_number -> INTEGER .)
    LT              reduce using rule 74 (integer_number -> INTEGER .)
    GEQ             reduce using rule 74 (integer_number -> INTEGER .)
    LEQ             reduce using rule 74 (integer_number -> INTEGER .)
    EQ              reduce using rule 74 (integer_number -> INTEGER .)
    NEQ             reduce using rule 74 (integer_number -> INTEGER .)
    RPAREN          reduce using rule 74 (integer_number -> INTEGER .)
    AND             reduce using rule 74 (integer_number -> INTEGER .)
    OR              reduce using rule 74 (integer_number -> INTEGER .)
    ID              reduce using rule 74 (integer_number -> INTEGER .)
    K_CONTINUE      reduce using rule 74 (integer_number -> INTEGER .)
    K_BREAK         reduce using rule 74 (integer_number -> INTEGER .)
    K_DONE          reduce using rule 74 (integer_number -> INTEGER .)
    K_LIST          reduce using rule 74 (integer_number -> INTEGER .)
    K_IF            reduce using rule 74 (integer_number -> INTEGER .)
    K_WHILE         reduce using rule 74 (integer_number -> INTEGER .)
    K_INT           reduce using rule 74 (integer_number -> INTEGER .)
    K_DOUBLE        reduce using rule 74 (integer_number -> INTEGER .)
    K_STRING        reduce using rule 74 (integer_number -> INTEGER .)
    K_BOOL          reduce using rule 74 (integer_number -> INTEGER .)
    K_WINDOW        reduce using rule 74 (integer_number -> INTEGER .)
    K_SHAPE         reduce using rule 74 (integer_number -> INTEGER .)
    K_TRIANGLE      reduce using rule 74 (integer_number -> INTEGER .)
    K_RECTANGLE     reduce using rule 74 (integer_number -> INTEGER .)
    K_CIRCLE        reduce using rule 74 (integer_number -> INTEGER .)
    K_POINT         reduce using rule 74 (integer_number -> INTEGER .)
    K_TEXT          reduce using rule 74 (integer_number -> INTEGER .)
    K_TABLE         reduce using rule 74 (integer_number -> INTEGER .)
    K_LINE          reduce using rule 74 (integer_number -> INTEGER .)
    $end            reduce using rule 74 (integer_number -> INTEGER .)
    K_END           reduce using rule 74 (integer_number -> INTEGER .)
    K_EL            reduce using rule 74 (integer_number -> INTEGER .)
    K_EF            reduce using rule 74 (integer_number -> INTEGER .)
    COMMA           reduce using rule 74 (integer_number -> INTEGER .)


state 56

    (50) primary_expression -> id_expression .

    PLUS            reduce using rule 50 (primary_expression -> id_expression .)
    MINUS           reduce using rule 50 (primary_expression -> id_expression .)
    TIMES           reduce using rule 50 (primary_expression -> id_expression .)
    DIVIDE          reduce using rule 50 (primary_expression -> id_expression .)
    MOD             reduce using rule 50 (primary_expression -> id_expression .)
    GT              reduce using rule 50 (primary_expression -> id_expression .)
    LT              reduce using rule 50 (primary_expression -> id_expression .)
    GEQ             reduce using rule 50 (primary_expression -> id_expression .)
    LEQ             reduce using rule 50 (primary_expression -> id_expression .)
    EQ              reduce using rule 50 (primary_expression -> id_expression .)
    NEQ             reduce using rule 50 (primary_expression -> id_expression .)
    RPAREN          reduce using rule 50 (primary_expression -> id_expression .)
    AND             reduce using rule 50 (primary_expression -> id_expression .)
    OR              reduce using rule 50 (primary_expression -> id_expression .)
    ID              reduce using rule 50 (primary_expression -> id_expression .)
    K_CONTINUE      reduce using rule 50 (primary_expression -> id_expression .)
    K_BREAK         reduce using rule 50 (primary_expression -> id_expression .)
    K_DONE          reduce using rule 50 (primary_expression -> id_expression .)
    K_LIST          reduce using rule 50 (primary_expression -> id_expression .)
    K_IF            reduce using rule 50 (primary_expression -> id_expression .)
    K_WHILE         reduce using rule 50 (primary_expression -> id_expression .)
    K_INT           reduce using rule 50 (primary_expression -> id_expression .)
    K_DOUBLE        reduce using rule 50 (primary_expression -> id_expression .)
    K_STRING        reduce using rule 50 (primary_expression -> id_expression .)
    K_BOOL          reduce using rule 50 (primary_expression -> id_expression .)
    K_WINDOW        reduce using rule 50 (primary_expression -> id_expression .)
    K_SHAPE         reduce using rule 50 (primary_expression -> id_expression .)
    K_TRIANGLE      reduce using rule 50 (primary_expression -> id_expression .)
    K_RECTANGLE     reduce using rule 50 (primary_expression -> id_expression .)
    K_CIRCLE        reduce using rule 50 (primary_expression -> id_expression .)
    K_POINT         reduce using rule 50 (primary_expression -> id_expression .)
    K_TEXT          reduce using rule 50 (primary_expression -> id_expression .)
    K_TABLE         reduce using rule 50 (primary_expression -> id_expression .)
    K_LINE          reduce using rule 50 (primary_expression -> id_expression .)
    $end            reduce using rule 50 (primary_expression -> id_expression .)
    K_END           reduce using rule 50 (primary_expression -> id_expression .)
    K_EL            reduce using rule 50 (primary_expression -> id_expression .)
    K_EF            reduce using rule 50 (primary_expression -> id_expression .)
    COMMA           reduce using rule 50 (primary_expression -> id_expression .)


state 57

    (53) primary_expression -> null_expression .

    PLUS            reduce using rule 53 (primary_expression -> null_expression .)
    MINUS           reduce using rule 53 (primary_expression -> null_expression .)
    TIMES           reduce using rule 53 (primary_expression -> null_expression .)
    DIVIDE          reduce using rule 53 (primary_expression -> null_expression .)
    MOD             reduce using rule 53 (primary_expression -> null_expression .)
    GT              reduce using rule 53 (primary_expression -> null_expression .)
    LT              reduce using rule 53 (primary_expression -> null_expression .)
    GEQ             reduce using rule 53 (primary_expression -> null_expression .)
    LEQ             reduce using rule 53 (primary_expression -> null_expression .)
    EQ              reduce using rule 53 (primary_expression -> null_expression .)
    NEQ             reduce using rule 53 (primary_expression -> null_expression .)
    RPAREN          reduce using rule 53 (primary_expression -> null_expression .)
    AND             reduce using rule 53 (primary_expression -> null_expression .)
    OR              reduce using rule 53 (primary_expression -> null_expression .)
    ID              reduce using rule 53 (primary_expression -> null_expression .)
    K_CONTINUE      reduce using rule 53 (primary_expression -> null_expression .)
    K_BREAK         reduce using rule 53 (primary_expression -> null_expression .)
    K_DONE          reduce using rule 53 (primary_expression -> null_expression .)
    K_LIST          reduce using rule 53 (primary_expression -> null_expression .)
    K_IF            reduce using rule 53 (primary_expression -> null_expression .)
    K_WHILE         reduce using rule 53 (primary_expression -> null_expression .)
    K_INT           reduce using rule 53 (primary_expression -> null_expression .)
    K_DOUBLE        reduce using rule 53 (primary_expression -> null_expression .)
    K_STRING        reduce using rule 53 (primary_expression -> null_expression .)
    K_BOOL          reduce using rule 53 (primary_expression -> null_expression .)
    K_WINDOW        reduce using rule 53 (primary_expression -> null_expression .)
    K_SHAPE         reduce using rule 53 (primary_expression -> null_expression .)
    K_TRIANGLE      reduce using rule 53 (primary_expression -> null_expression .)
    K_RECTANGLE     reduce using rule 53 (primary_expression -> null_expression .)
    K_CIRCLE        reduce using rule 53 (primary_expression -> null_expression .)
    K_POINT         reduce using rule 53 (primary_expression -> null_expression .)
    K_TEXT          reduce using rule 53 (primary_expression -> null_expression .)
    K_TABLE         reduce using rule 53 (primary_expression -> null_expression .)
    K_LINE          reduce using rule 53 (primary_expression -> null_expression .)
    $end            reduce using rule 53 (primary_expression -> null_expression .)
    K_END           reduce using rule 53 (primary_expression -> null_expression .)
    K_EL            reduce using rule 53 (primary_expression -> null_expression .)
    K_EF            reduce using rule 53 (primary_expression -> null_expression .)
    COMMA           reduce using rule 53 (primary_expression -> null_expression .)


state 58

    (58) string_constant -> STRING .

    PLUS            reduce using rule 58 (string_constant -> STRING .)
    MINUS           reduce using rule 58 (string_constant -> STRING .)
    TIMES           reduce using rule 58 (string_constant -> STRING .)
    DIVIDE          reduce using rule 58 (string_constant -> STRING .)
    MOD             reduce using rule 58 (string_constant -> STRING .)
    GT              reduce using rule 58 (string_constant -> STRING .)
    LT              reduce using rule 58 (string_constant -> STRING .)
    GEQ             reduce using rule 58 (string_constant -> STRING .)
    LEQ             reduce using rule 58 (string_constant -> STRING .)
    EQ              reduce using rule 58 (string_constant -> STRING .)
    NEQ             reduce using rule 58 (string_constant -> STRING .)
    RPAREN          reduce using rule 58 (string_constant -> STRING .)
    AND             reduce using rule 58 (string_constant -> STRING .)
    OR              reduce using rule 58 (string_constant -> STRING .)
    ID              reduce using rule 58 (string_constant -> STRING .)
    K_CONTINUE      reduce using rule 58 (string_constant -> STRING .)
    K_BREAK         reduce using rule 58 (string_constant -> STRING .)
    K_DONE          reduce using rule 58 (string_constant -> STRING .)
    K_LIST          reduce using rule 58 (string_constant -> STRING .)
    K_IF            reduce using rule 58 (string_constant -> STRING .)
    K_WHILE         reduce using rule 58 (string_constant -> STRING .)
    K_INT           reduce using rule 58 (string_constant -> STRING .)
    K_DOUBLE        reduce using rule 58 (string_constant -> STRING .)
    K_STRING        reduce using rule 58 (string_constant -> STRING .)
    K_BOOL          reduce using rule 58 (string_constant -> STRING .)
    K_WINDOW        reduce using rule 58 (string_constant -> STRING .)
    K_SHAPE         reduce using rule 58 (string_constant -> STRING .)
    K_TRIANGLE      reduce using rule 58 (string_constant -> STRING .)
    K_RECTANGLE     reduce using rule 58 (string_constant -> STRING .)
    K_CIRCLE        reduce using rule 58 (string_constant -> STRING .)
    K_POINT         reduce using rule 58 (string_constant -> STRING .)
    K_TEXT          reduce using rule 58 (string_constant -> STRING .)
    K_TABLE         reduce using rule 58 (string_constant -> STRING .)
    K_LINE          reduce using rule 58 (string_constant -> STRING .)
    $end            reduce using rule 58 (string_constant -> STRING .)
    K_END           reduce using rule 58 (string_constant -> STRING .)
    K_EL            reduce using rule 58 (string_constant -> STRING .)
    K_EF            reduce using rule 58 (string_constant -> STRING .)
    COMMA           reduce using rule 58 (string_constant -> STRING .)


state 59

    (62) unary_expression -> primary_expression .

    PLUS            reduce using rule 62 (unary_expression -> primary_expression .)
    MINUS           reduce using rule 62 (unary_expression -> primary_expression .)
    TIMES           reduce using rule 62 (unary_expression -> primary_expression .)
    DIVIDE          reduce using rule 62 (unary_expression -> primary_expression .)
    MOD             reduce using rule 62 (unary_expression -> primary_expression .)
    GT              reduce using rule 62 (unary_expression -> primary_expression .)
    LT              reduce using rule 62 (unary_expression -> primary_expression .)
    GEQ             reduce using rule 62 (unary_expression -> primary_expression .)
    LEQ             reduce using rule 62 (unary_expression -> primary_expression .)
    EQ              reduce using rule 62 (unary_expression -> primary_expression .)
    NEQ             reduce using rule 62 (unary_expression -> primary_expression .)
    RPAREN          reduce using rule 62 (unary_expression -> primary_expression .)
    AND             reduce using rule 62 (unary_expression -> primary_expression .)
    OR              reduce using rule 62 (unary_expression -> primary_expression .)
    ID              reduce using rule 62 (unary_expression -> primary_expression .)
    K_CONTINUE      reduce using rule 62 (unary_expression -> primary_expression .)
    K_BREAK         reduce using rule 62 (unary_expression -> primary_expression .)
    K_DONE          reduce using rule 62 (unary_expression -> primary_expression .)
    K_LIST          reduce using rule 62 (unary_expression -> primary_expression .)
    K_IF            reduce using rule 62 (unary_expression -> primary_expression .)
    K_WHILE         reduce using rule 62 (unary_expression -> primary_expression .)
    K_INT           reduce using rule 62 (unary_expression -> primary_expression .)
    K_DOUBLE        reduce using rule 62 (unary_expression -> primary_expression .)
    K_STRING        reduce using rule 62 (unary_expression -> primary_expression .)
    K_BOOL          reduce using rule 62 (unary_expression -> primary_expression .)
    K_WINDOW        reduce using rule 62 (unary_expression -> primary_expression .)
    K_SHAPE         reduce using rule 62 (unary_expression -> primary_expression .)
    K_TRIANGLE      reduce using rule 62 (unary_expression -> primary_expression .)
    K_RECTANGLE     reduce using rule 62 (unary_expression -> primary_expression .)
    K_CIRCLE        reduce using rule 62 (unary_expression -> primary_expression .)
    K_POINT         reduce using rule 62 (unary_expression -> primary_expression .)
    K_TEXT          reduce using rule 62 (unary_expression -> primary_expression .)
    K_TABLE         reduce using rule 62 (unary_expression -> primary_expression .)
    K_LINE          reduce using rule 62 (unary_expression -> primary_expression .)
    $end            reduce using rule 62 (unary_expression -> primary_expression .)
    K_END           reduce using rule 62 (unary_expression -> primary_expression .)
    K_EL            reduce using rule 62 (unary_expression -> primary_expression .)
    K_EF            reduce using rule 62 (unary_expression -> primary_expression .)
    COMMA           reduce using rule 62 (unary_expression -> primary_expression .)


state 60

    (61) unary_expression -> LPAREN . expression RPAREN
    (34) expression -> . expression boolean_operator expression_pre_term
    (35) expression -> . expression_pre_term
    (36) expression_pre_term -> . expression_pre_term eq_comparator expression_term
    (37) expression_pre_term -> . expression_term
    (38) expression_term -> . expression_term comparator expression_factor
    (39) expression_term -> . expression_factor
    (40) expression_factor -> . expression_factor op unary_expression
    (41) expression_factor -> . unary_expression
    (61) unary_expression -> . LPAREN expression RPAREN
    (62) unary_expression -> . primary_expression
    (63) unary_expression -> . NEG primary_expression
    (64) unary_expression -> . NEG LPAREN expression RPAREN
    (49) primary_expression -> . constant
    (50) primary_expression -> . id_expression
    (51) primary_expression -> . function_call_statement
    (52) primary_expression -> . MINUS primary_expression
    (53) primary_expression -> . null_expression
    (55) constant -> . boolean_constant
    (56) constant -> . number
    (57) constant -> . string_constant
    (54) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN opt_parameter_list RPAREN
    (65) null_expression -> . K_NULL
    (59) boolean_constant -> . K_TRUE
    (60) boolean_constant -> . K_FALSE
    (72) number -> . integer_number
    (73) number -> . double_number
    (58) string_constant -> . STRING
    (74) integer_number -> . INTEGER
    (75) double_number -> . DOUBLE

    LPAREN          shift and go to state 60
    NEG             shift and go to state 54
    MINUS           shift and go to state 52
    ID              shift and go to state 62
    K_NULL          shift and go to state 61
    K_TRUE          shift and go to state 49
    K_FALSE         shift and go to state 45
    STRING          shift and go to state 58
    INTEGER         shift and go to state 55
    DOUBLE          shift and go to state 65

    expression_term                shift and go to state 43
    null_expression                shift and go to state 57
    constant                       shift and go to state 44
    unary_expression               shift and go to state 46
    id_expression                  shift and go to state 56
    expression_factor              shift and go to state 47
    number                         shift and go to state 48
    function_call_statement        shift and go to state 63
    primary_expression             shift and go to state 59
    expression_pre_term            shift and go to state 64
    string_constant                shift and go to state 53
    double_number                  shift and go to state 51
    boolean_constant               shift and go to state 66
    expression                     shift and go to state 96
    integer_number                 shift and go to state 50

state 61

    (65) null_expression -> K_NULL .

    PLUS            reduce using rule 65 (null_expression -> K_NULL .)
    MINUS           reduce using rule 65 (null_expression -> K_NULL .)
    TIMES           reduce using rule 65 (null_expression -> K_NULL .)
    DIVIDE          reduce using rule 65 (null_expression -> K_NULL .)
    MOD             reduce using rule 65 (null_expression -> K_NULL .)
    GT              reduce using rule 65 (null_expression -> K_NULL .)
    LT              reduce using rule 65 (null_expression -> K_NULL .)
    GEQ             reduce using rule 65 (null_expression -> K_NULL .)
    LEQ             reduce using rule 65 (null_expression -> K_NULL .)
    EQ              reduce using rule 65 (null_expression -> K_NULL .)
    NEQ             reduce using rule 65 (null_expression -> K_NULL .)
    RPAREN          reduce using rule 65 (null_expression -> K_NULL .)
    AND             reduce using rule 65 (null_expression -> K_NULL .)
    OR              reduce using rule 65 (null_expression -> K_NULL .)
    ID              reduce using rule 65 (null_expression -> K_NULL .)
    K_CONTINUE      reduce using rule 65 (null_expression -> K_NULL .)
    K_BREAK         reduce using rule 65 (null_expression -> K_NULL .)
    K_DONE          reduce using rule 65 (null_expression -> K_NULL .)
    K_LIST          reduce using rule 65 (null_expression -> K_NULL .)
    K_IF            reduce using rule 65 (null_expression -> K_NULL .)
    K_WHILE         reduce using rule 65 (null_expression -> K_NULL .)
    K_INT           reduce using rule 65 (null_expression -> K_NULL .)
    K_DOUBLE        reduce using rule 65 (null_expression -> K_NULL .)
    K_STRING        reduce using rule 65 (null_expression -> K_NULL .)
    K_BOOL          reduce using rule 65 (null_expression -> K_NULL .)
    K_WINDOW        reduce using rule 65 (null_expression -> K_NULL .)
    K_SHAPE         reduce using rule 65 (null_expression -> K_NULL .)
    K_TRIANGLE      reduce using rule 65 (null_expression -> K_NULL .)
    K_RECTANGLE     reduce using rule 65 (null_expression -> K_NULL .)
    K_CIRCLE        reduce using rule 65 (null_expression -> K_NULL .)
    K_POINT         reduce using rule 65 (null_expression -> K_NULL .)
    K_TEXT          reduce using rule 65 (null_expression -> K_NULL .)
    K_TABLE         reduce using rule 65 (null_expression -> K_NULL .)
    K_LINE          reduce using rule 65 (null_expression -> K_NULL .)
    $end            reduce using rule 65 (null_expression -> K_NULL .)
    K_END           reduce using rule 65 (null_expression -> K_NULL .)
    K_EL            reduce using rule 65 (null_expression -> K_NULL .)
    K_EF            reduce using rule 65 (null_expression -> K_NULL .)
    COMMA           reduce using rule 65 (null_expression -> K_NULL .)


state 62

    (54) id_expression -> ID .
    (11) function_call_statement -> ID . LPAREN opt_parameter_list RPAREN

    PLUS            reduce using rule 54 (id_expression -> ID .)
    MINUS           reduce using rule 54 (id_expression -> ID .)
    TIMES           reduce using rule 54 (id_expression -> ID .)
    DIVIDE          reduce using rule 54 (id_expression -> ID .)
    MOD             reduce using rule 54 (id_expression -> ID .)
    GT              reduce using rule 54 (id_expression -> ID .)
    LT              reduce using rule 54 (id_expression -> ID .)
    GEQ             reduce using rule 54 (id_expression -> ID .)
    LEQ             reduce using rule 54 (id_expression -> ID .)
    EQ              reduce using rule 54 (id_expression -> ID .)
    NEQ             reduce using rule 54 (id_expression -> ID .)
    RPAREN          reduce using rule 54 (id_expression -> ID .)
    AND             reduce using rule 54 (id_expression -> ID .)
    OR              reduce using rule 54 (id_expression -> ID .)
    K_END           reduce using rule 54 (id_expression -> ID .)
    ID              reduce using rule 54 (id_expression -> ID .)
    K_CONTINUE      reduce using rule 54 (id_expression -> ID .)
    K_BREAK         reduce using rule 54 (id_expression -> ID .)
    K_DONE          reduce using rule 54 (id_expression -> ID .)
    K_LIST          reduce using rule 54 (id_expression -> ID .)
    K_IF            reduce using rule 54 (id_expression -> ID .)
    K_WHILE         reduce using rule 54 (id_expression -> ID .)
    K_INT           reduce using rule 54 (id_expression -> ID .)
    K_DOUBLE        reduce using rule 54 (id_expression -> ID .)
    K_STRING        reduce using rule 54 (id_expression -> ID .)
    K_BOOL          reduce using rule 54 (id_expression -> ID .)
    K_WINDOW        reduce using rule 54 (id_expression -> ID .)
    K_SHAPE         reduce using rule 54 (id_expression -> ID .)
    K_TRIANGLE      reduce using rule 54 (id_expression -> ID .)
    K_RECTANGLE     reduce using rule 54 (id_expression -> ID .)
    K_CIRCLE        reduce using rule 54 (id_expression -> ID .)
    K_POINT         reduce using rule 54 (id_expression -> ID .)
    K_TEXT          reduce using rule 54 (id_expression -> ID .)
    K_TABLE         reduce using rule 54 (id_expression -> ID .)
    K_LINE          reduce using rule 54 (id_expression -> ID .)
    $end            reduce using rule 54 (id_expression -> ID .)
    K_EL            reduce using rule 54 (id_expression -> ID .)
    K_EF            reduce using rule 54 (id_expression -> ID .)
    COMMA           reduce using rule 54 (id_expression -> ID .)
    LPAREN          shift and go to state 42


state 63

    (51) primary_expression -> function_call_statement .

    PLUS            reduce using rule 51 (primary_expression -> function_call_statement .)
    MINUS           reduce using rule 51 (primary_expression -> function_call_statement .)
    TIMES           reduce using rule 51 (primary_expression -> function_call_statement .)
    DIVIDE          reduce using rule 51 (primary_expression -> function_call_statement .)
    MOD             reduce using rule 51 (primary_expression -> function_call_statement .)
    GT              reduce using rule 51 (primary_expression -> function_call_statement .)
    LT              reduce using rule 51 (primary_expression -> function_call_statement .)
    GEQ             reduce using rule 51 (primary_expression -> function_call_statement .)
    LEQ             reduce using rule 51 (primary_expression -> function_call_statement .)
    EQ              reduce using rule 51 (primary_expression -> function_call_statement .)
    NEQ             reduce using rule 51 (primary_expression -> function_call_statement .)
    RPAREN          reduce using rule 51 (primary_expression -> function_call_statement .)
    AND             reduce using rule 51 (primary_expression -> function_call_statement .)
    OR              reduce using rule 51 (primary_expression -> function_call_statement .)
    ID              reduce using rule 51 (primary_expression -> function_call_statement .)
    K_CONTINUE      reduce using rule 51 (primary_expression -> function_call_statement .)
    K_BREAK         reduce using rule 51 (primary_expression -> function_call_statement .)
    K_DONE          reduce using rule 51 (primary_expression -> function_call_statement .)
    K_LIST          reduce using rule 51 (primary_expression -> function_call_statement .)
    K_IF            reduce using rule 51 (primary_expression -> function_call_statement .)
    K_WHILE         reduce using rule 51 (primary_expression -> function_call_statement .)
    K_INT           reduce using rule 51 (primary_expression -> function_call_statement .)
    K_DOUBLE        reduce using rule 51 (primary_expression -> function_call_statement .)
    K_STRING        reduce using rule 51 (primary_expression -> function_call_statement .)
    K_BOOL          reduce using rule 51 (primary_expression -> function_call_statement .)
    K_WINDOW        reduce using rule 51 (primary_expression -> function_call_statement .)
    K_SHAPE         reduce using rule 51 (primary_expression -> function_call_statement .)
    K_TRIANGLE      reduce using rule 51 (primary_expression -> function_call_statement .)
    K_RECTANGLE     reduce using rule 51 (primary_expression -> function_call_statement .)
    K_CIRCLE        reduce using rule 51 (primary_expression -> function_call_statement .)
    K_POINT         reduce using rule 51 (primary_expression -> function_call_statement .)
    K_TEXT          reduce using rule 51 (primary_expression -> function_call_statement .)
    K_TABLE         reduce using rule 51 (primary_expression -> function_call_statement .)
    K_LINE          reduce using rule 51 (primary_expression -> function_call_statement .)
    $end            reduce using rule 51 (primary_expression -> function_call_statement .)
    K_END           reduce using rule 51 (primary_expression -> function_call_statement .)
    K_EL            reduce using rule 51 (primary_expression -> function_call_statement .)
    K_EF            reduce using rule 51 (primary_expression -> function_call_statement .)
    COMMA           reduce using rule 51 (primary_expression -> function_call_statement .)


state 64

    (35) expression -> expression_pre_term .
    (36) expression_pre_term -> expression_pre_term . eq_comparator expression_term
    (70) eq_comparator -> . EQ
    (71) eq_comparator -> . NEQ

    RPAREN          reduce using rule 35 (expression -> expression_pre_term .)
    AND             reduce using rule 35 (expression -> expression_pre_term .)
    OR              reduce using rule 35 (expression -> expression_pre_term .)
    COMMA           reduce using rule 35 (expression -> expression_pre_term .)
    ID              reduce using rule 35 (expression -> expression_pre_term .)
    K_CONTINUE      reduce using rule 35 (expression -> expression_pre_term .)
    K_BREAK         reduce using rule 35 (expression -> expression_pre_term .)
    K_DONE          reduce using rule 35 (expression -> expression_pre_term .)
    K_LIST          reduce using rule 35 (expression -> expression_pre_term .)
    K_IF            reduce using rule 35 (expression -> expression_pre_term .)
    K_WHILE         reduce using rule 35 (expression -> expression_pre_term .)
    K_INT           reduce using rule 35 (expression -> expression_pre_term .)
    K_DOUBLE        reduce using rule 35 (expression -> expression_pre_term .)
    K_STRING        reduce using rule 35 (expression -> expression_pre_term .)
    K_BOOL          reduce using rule 35 (expression -> expression_pre_term .)
    K_WINDOW        reduce using rule 35 (expression -> expression_pre_term .)
    K_SHAPE         reduce using rule 35 (expression -> expression_pre_term .)
    K_TRIANGLE      reduce using rule 35 (expression -> expression_pre_term .)
    K_RECTANGLE     reduce using rule 35 (expression -> expression_pre_term .)
    K_CIRCLE        reduce using rule 35 (expression -> expression_pre_term .)
    K_POINT         reduce using rule 35 (expression -> expression_pre_term .)
    K_TEXT          reduce using rule 35 (expression -> expression_pre_term .)
    K_TABLE         reduce using rule 35 (expression -> expression_pre_term .)
    K_LINE          reduce using rule 35 (expression -> expression_pre_term .)
    $end            reduce using rule 35 (expression -> expression_pre_term .)
    K_END           reduce using rule 35 (expression -> expression_pre_term .)
    K_EL            reduce using rule 35 (expression -> expression_pre_term .)
    K_EF            reduce using rule 35 (expression -> expression_pre_term .)
    EQ              shift and go to state 98
    NEQ             shift and go to state 99

    eq_comparator                  shift and go to state 97

state 65

    (75) double_number -> DOUBLE .

    PLUS            reduce using rule 75 (double_number -> DOUBLE .)
    MINUS           reduce using rule 75 (double_number -> DOUBLE .)
    TIMES           reduce using rule 75 (double_number -> DOUBLE .)
    DIVIDE          reduce using rule 75 (double_number -> DOUBLE .)
    MOD             reduce using rule 75 (double_number -> DOUBLE .)
    GT              reduce using rule 75 (double_number -> DOUBLE .)
    LT              reduce using rule 75 (double_number -> DOUBLE .)
    GEQ             reduce using rule 75 (double_number -> DOUBLE .)
    LEQ             reduce using rule 75 (double_number -> DOUBLE .)
    EQ              reduce using rule 75 (double_number -> DOUBLE .)
    NEQ             reduce using rule 75 (double_number -> DOUBLE .)
    RPAREN          reduce using rule 75 (double_number -> DOUBLE .)
    AND             reduce using rule 75 (double_number -> DOUBLE .)
    OR              reduce using rule 75 (double_number -> DOUBLE .)
    ID              reduce using rule 75 (double_number -> DOUBLE .)
    K_CONTINUE      reduce using rule 75 (double_number -> DOUBLE .)
    K_BREAK         reduce using rule 75 (double_number -> DOUBLE .)
    K_DONE          reduce using rule 75 (double_number -> DOUBLE .)
    K_LIST          reduce using rule 75 (double_number -> DOUBLE .)
    K_IF            reduce using rule 75 (double_number -> DOUBLE .)
    K_WHILE         reduce using rule 75 (double_number -> DOUBLE .)
    K_INT           reduce using rule 75 (double_number -> DOUBLE .)
    K_DOUBLE        reduce using rule 75 (double_number -> DOUBLE .)
    K_STRING        reduce using rule 75 (double_number -> DOUBLE .)
    K_BOOL          reduce using rule 75 (double_number -> DOUBLE .)
    K_WINDOW        reduce using rule 75 (double_number -> DOUBLE .)
    K_SHAPE         reduce using rule 75 (double_number -> DOUBLE .)
    K_TRIANGLE      reduce using rule 75 (double_number -> DOUBLE .)
    K_RECTANGLE     reduce using rule 75 (double_number -> DOUBLE .)
    K_CIRCLE        reduce using rule 75 (double_number -> DOUBLE .)
    K_POINT         reduce using rule 75 (double_number -> DOUBLE .)
    K_TEXT          reduce using rule 75 (double_number -> DOUBLE .)
    K_TABLE         reduce using rule 75 (double_number -> DOUBLE .)
    K_LINE          reduce using rule 75 (double_number -> DOUBLE .)
    $end            reduce using rule 75 (double_number -> DOUBLE .)
    K_END           reduce using rule 75 (double_number -> DOUBLE .)
    K_EL            reduce using rule 75 (double_number -> DOUBLE .)
    K_EF            reduce using rule 75 (double_number -> DOUBLE .)
    COMMA           reduce using rule 75 (double_number -> DOUBLE .)


state 66

    (55) constant -> boolean_constant .

    PLUS            reduce using rule 55 (constant -> boolean_constant .)
    MINUS           reduce using rule 55 (constant -> boolean_constant .)
    TIMES           reduce using rule 55 (constant -> boolean_constant .)
    DIVIDE          reduce using rule 55 (constant -> boolean_constant .)
    MOD             reduce using rule 55 (constant -> boolean_constant .)
    GT              reduce using rule 55 (constant -> boolean_constant .)
    LT              reduce using rule 55 (constant -> boolean_constant .)
    GEQ             reduce using rule 55 (constant -> boolean_constant .)
    LEQ             reduce using rule 55 (constant -> boolean_constant .)
    EQ              reduce using rule 55 (constant -> boolean_constant .)
    NEQ             reduce using rule 55 (constant -> boolean_constant .)
    AND             reduce using rule 55 (constant -> boolean_constant .)
    OR              reduce using rule 55 (constant -> boolean_constant .)
    COMMA           reduce using rule 55 (constant -> boolean_constant .)
    RPAREN          reduce using rule 55 (constant -> boolean_constant .)
    ID              reduce using rule 55 (constant -> boolean_constant .)
    K_CONTINUE      reduce using rule 55 (constant -> boolean_constant .)
    K_BREAK         reduce using rule 55 (constant -> boolean_constant .)
    K_DONE          reduce using rule 55 (constant -> boolean_constant .)
    K_LIST          reduce using rule 55 (constant -> boolean_constant .)
    K_IF            reduce using rule 55 (constant -> boolean_constant .)
    K_WHILE         reduce using rule 55 (constant -> boolean_constant .)
    K_INT           reduce using rule 55 (constant -> boolean_constant .)
    K_DOUBLE        reduce using rule 55 (constant -> boolean_constant .)
    K_STRING        reduce using rule 55 (constant -> boolean_constant .)
    K_BOOL          reduce using rule 55 (constant -> boolean_constant .)
    K_WINDOW        reduce using rule 55 (constant -> boolean_constant .)
    K_SHAPE         reduce using rule 55 (constant -> boolean_constant .)
    K_TRIANGLE      reduce using rule 55 (constant -> boolean_constant .)
    K_RECTANGLE     reduce using rule 55 (constant -> boolean_constant .)
    K_CIRCLE        reduce using rule 55 (constant -> boolean_constant .)
    K_POINT         reduce using rule 55 (constant -> boolean_constant .)
    K_TEXT          reduce using rule 55 (constant -> boolean_constant .)
    K_TABLE         reduce using rule 55 (constant -> boolean_constant .)
    K_LINE          reduce using rule 55 (constant -> boolean_constant .)
    $end            reduce using rule 55 (constant -> boolean_constant .)
    K_END           reduce using rule 55 (constant -> boolean_constant .)
    K_EL            reduce using rule 55 (constant -> boolean_constant .)
    K_EF            reduce using rule 55 (constant -> boolean_constant .)


state 67

    (77) if_statement -> K_IF LPAREN expression . RPAREN push_scope compound_statement_list
    (34) expression -> expression . boolean_operator expression_pre_term
    (47) boolean_operator -> . AND
    (48) boolean_operator -> . OR

    RPAREN          shift and go to state 101
    AND             shift and go to state 100
    OR              shift and go to state 103

    boolean_operator               shift and go to state 102

state 68

    (86) iteration_statement_header -> K_WHILE LPAREN expression . RPAREN
    (34) expression -> expression . boolean_operator expression_pre_term
    (47) boolean_operator -> . AND
    (48) boolean_operator -> . OR

    RPAREN          shift and go to state 104
    AND             shift and go to state 100
    OR              shift and go to state 103

    boolean_operator               shift and go to state 102

state 69

    (90) function_declaration -> function_header compound_statement_list K_END .

    ID              reduce using rule 90 (function_declaration -> function_header compound_statement_list K_END .)
    K_CONTINUE      reduce using rule 90 (function_declaration -> function_header compound_statement_list K_END .)
    K_BREAK         reduce using rule 90 (function_declaration -> function_header compound_statement_list K_END .)
    K_DONE          reduce using rule 90 (function_declaration -> function_header compound_statement_list K_END .)
    K_LIST          reduce using rule 90 (function_declaration -> function_header compound_statement_list K_END .)
    K_IF            reduce using rule 90 (function_declaration -> function_header compound_statement_list K_END .)
    K_WHILE         reduce using rule 90 (function_declaration -> function_header compound_statement_list K_END .)
    K_INT           reduce using rule 90 (function_declaration -> function_header compound_statement_list K_END .)
    K_DOUBLE        reduce using rule 90 (function_declaration -> function_header compound_statement_list K_END .)
    K_STRING        reduce using rule 90 (function_declaration -> function_header compound_statement_list K_END .)
    K_BOOL          reduce using rule 90 (function_declaration -> function_header compound_statement_list K_END .)
    K_WINDOW        reduce using rule 90 (function_declaration -> function_header compound_statement_list K_END .)
    K_SHAPE         reduce using rule 90 (function_declaration -> function_header compound_statement_list K_END .)
    K_TRIANGLE      reduce using rule 90 (function_declaration -> function_header compound_statement_list K_END .)
    K_RECTANGLE     reduce using rule 90 (function_declaration -> function_header compound_statement_list K_END .)
    K_CIRCLE        reduce using rule 90 (function_declaration -> function_header compound_statement_list K_END .)
    K_POINT         reduce using rule 90 (function_declaration -> function_header compound_statement_list K_END .)
    K_TEXT          reduce using rule 90 (function_declaration -> function_header compound_statement_list K_END .)
    K_TABLE         reduce using rule 90 (function_declaration -> function_header compound_statement_list K_END .)
    K_LINE          reduce using rule 90 (function_declaration -> function_header compound_statement_list K_END .)
    $end            reduce using rule 90 (function_declaration -> function_header compound_statement_list K_END .)


state 70

    (84) compound_statement_list -> compound_statement_list compound_statement .

    ID              reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_CONTINUE      reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_BREAK         reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_DONE          reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_LIST          reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_IF            reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_WHILE         reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_INT           reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_DOUBLE        reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_STRING        reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_BOOL          reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_WINDOW        reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_SHAPE         reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_TRIANGLE      reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_RECTANGLE     reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_CIRCLE        reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_POINT         reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_TEXT          reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_TABLE         reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_LINE          reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_EL            reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_EF            reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)
    K_END           reduce using rule 84 (compound_statement_list -> compound_statement_list compound_statement .)


state 71

    (16) variable_declaration -> pre_type_modifier . type ID
    (17) variable_declaration -> pre_type_modifier . type ID ASSIGN expression
    (21) type -> . K_INT
    (22) type -> . K_DOUBLE
    (23) type -> . K_STRING
    (24) type -> . K_BOOL
    (25) type -> . K_WINDOW
    (26) type -> . K_SHAPE
    (27) type -> . K_TRIANGLE
    (28) type -> . K_RECTANGLE
    (29) type -> . K_CIRCLE
    (30) type -> . K_POINT
    (31) type -> . K_TEXT
    (32) type -> . K_TABLE
    (33) type -> . K_LINE

    K_INT           shift and go to state 34
    K_DOUBLE        shift and go to state 27
    K_STRING        shift and go to state 28
    K_BOOL          shift and go to state 35
    K_WINDOW        shift and go to state 40
    K_SHAPE         shift and go to state 31
    K_TRIANGLE      shift and go to state 29
    K_RECTANGLE     shift and go to state 39
    K_CIRCLE        shift and go to state 30
    K_POINT         shift and go to state 33
    K_TEXT          shift and go to state 32
    K_TABLE         shift and go to state 37
    K_LINE          shift and go to state 38

    type                           shift and go to state 105

state 72

    (79) else_if_statement_list -> else_if_statement_list else_if_statement .

    K_EL            reduce using rule 79 (else_if_statement_list -> else_if_statement_list else_if_statement .)
    K_EF            reduce using rule 79 (else_if_statement_list -> else_if_statement_list else_if_statement .)
    K_END           reduce using rule 79 (else_if_statement_list -> else_if_statement_list else_if_statement .)


state 73

    (82) else_statement -> K_EL . push_scope compound_statement_list
    (97) push_scope -> .

    ID              reduce using rule 97 (push_scope -> .)
    K_CONTINUE      reduce using rule 97 (push_scope -> .)
    K_BREAK         reduce using rule 97 (push_scope -> .)
    K_DONE          reduce using rule 97 (push_scope -> .)
    K_LIST          reduce using rule 97 (push_scope -> .)
    K_IF            reduce using rule 97 (push_scope -> .)
    K_WHILE         reduce using rule 97 (push_scope -> .)
    K_INT           reduce using rule 97 (push_scope -> .)
    K_DOUBLE        reduce using rule 97 (push_scope -> .)
    K_STRING        reduce using rule 97 (push_scope -> .)
    K_BOOL          reduce using rule 97 (push_scope -> .)
    K_WINDOW        reduce using rule 97 (push_scope -> .)
    K_SHAPE         reduce using rule 97 (push_scope -> .)
    K_TRIANGLE      reduce using rule 97 (push_scope -> .)
    K_RECTANGLE     reduce using rule 97 (push_scope -> .)
    K_CIRCLE        reduce using rule 97 (push_scope -> .)
    K_POINT         reduce using rule 97 (push_scope -> .)
    K_TEXT          reduce using rule 97 (push_scope -> .)
    K_TABLE         reduce using rule 97 (push_scope -> .)
    K_LINE          reduce using rule 97 (push_scope -> .)
    K_END           reduce using rule 97 (push_scope -> .)

    push_scope                     shift and go to state 106

state 74

    (80) else_if_statement -> K_EF . LPAREN expression RPAREN push_scope compound_statement_list

    LPAREN          shift and go to state 107


state 75

    (76) selection_statement -> if_statement else_if_statement_list else_statement . K_END

    K_END           shift and go to state 108


state 76

    (85) iteration_statement -> iteration_statement_header compound_statement_list K_END .

    ID              reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    K_CONTINUE      reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    K_BREAK         reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    K_DONE          reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    K_LIST          reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    K_IF            reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    K_WHILE         reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    K_INT           reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    K_DOUBLE        reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    K_STRING        reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    K_BOOL          reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    K_WINDOW        reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    K_SHAPE         reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    K_TRIANGLE      reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    K_RECTANGLE     reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    K_CIRCLE        reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    K_POINT         reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    K_TEXT          reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    K_TABLE         reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    K_LINE          reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    K_EL            reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    K_EF            reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    K_END           reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)
    $end            reduce using rule 85 (iteration_statement -> iteration_statement_header compound_statement_list K_END .)


state 77

    (91) function_header -> pre_type_modifier type ID . LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag
    (16) variable_declaration -> pre_type_modifier type ID .
    (17) variable_declaration -> pre_type_modifier type ID . ASSIGN expression

    LPAREN          shift and go to state 110
    ID              reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_CONTINUE      reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_BREAK         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_DONE          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_LIST          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_IF            reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_WHILE         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_INT           reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_DOUBLE        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_STRING        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_BOOL          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_WINDOW        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_SHAPE         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_TRIANGLE      reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_RECTANGLE     reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_CIRCLE        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_POINT         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_TEXT          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_TABLE         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_LINE          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    $end            reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    ASSIGN          shift and go to state 109


state 78

    (18) variable_declaration -> ID ASSIGN expression .
    (34) expression -> expression . boolean_operator expression_pre_term
    (47) boolean_operator -> . AND
    (48) boolean_operator -> . OR

    K_END           reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    ID              reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    K_CONTINUE      reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    K_BREAK         reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    K_DONE          reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    K_LIST          reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    K_IF            reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    K_WHILE         reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    K_INT           reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    K_DOUBLE        reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    K_STRING        reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    K_BOOL          reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    K_WINDOW        reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    K_SHAPE         reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    K_TRIANGLE      reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    K_RECTANGLE     reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    K_CIRCLE        reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    K_POINT         reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    K_TEXT          reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    K_TABLE         reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    K_LINE          reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    $end            reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    K_EL            reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    K_EF            reduce using rule 18 (variable_declaration -> ID ASSIGN expression .)
    AND             shift and go to state 100
    OR              shift and go to state 103

    boolean_operator               shift and go to state 102

state 79

    (12) opt_parameter_list -> parameter_list .
    (14) parameter_list -> parameter_list . COMMA expression

    RPAREN          reduce using rule 12 (opt_parameter_list -> parameter_list .)
    COMMA           shift and go to state 111


state 80

    (11) function_call_statement -> ID LPAREN opt_parameter_list . RPAREN

    RPAREN          shift and go to state 112


state 81

    (15) parameter_list -> expression .
    (34) expression -> expression . boolean_operator expression_pre_term
    (47) boolean_operator -> . AND
    (48) boolean_operator -> . OR

    COMMA           reduce using rule 15 (parameter_list -> expression .)
    RPAREN          reduce using rule 15 (parameter_list -> expression .)
    AND             shift and go to state 100
    OR              shift and go to state 103

    boolean_operator               shift and go to state 102

state 82

    (68) comparator -> GEQ .

    LPAREN          reduce using rule 68 (comparator -> GEQ .)
    NEG             reduce using rule 68 (comparator -> GEQ .)
    MINUS           reduce using rule 68 (comparator -> GEQ .)
    ID              reduce using rule 68 (comparator -> GEQ .)
    K_NULL          reduce using rule 68 (comparator -> GEQ .)
    K_TRUE          reduce using rule 68 (comparator -> GEQ .)
    K_FALSE         reduce using rule 68 (comparator -> GEQ .)
    STRING          reduce using rule 68 (comparator -> GEQ .)
    INTEGER         reduce using rule 68 (comparator -> GEQ .)
    DOUBLE          reduce using rule 68 (comparator -> GEQ .)


state 83

    (66) comparator -> GT .

    LPAREN          reduce using rule 66 (comparator -> GT .)
    NEG             reduce using rule 66 (comparator -> GT .)
    MINUS           reduce using rule 66 (comparator -> GT .)
    ID              reduce using rule 66 (comparator -> GT .)
    K_NULL          reduce using rule 66 (comparator -> GT .)
    K_TRUE          reduce using rule 66 (comparator -> GT .)
    K_FALSE         reduce using rule 66 (comparator -> GT .)
    STRING          reduce using rule 66 (comparator -> GT .)
    INTEGER         reduce using rule 66 (comparator -> GT .)
    DOUBLE          reduce using rule 66 (comparator -> GT .)


state 84

    (38) expression_term -> expression_term comparator . expression_factor
    (40) expression_factor -> . expression_factor op unary_expression
    (41) expression_factor -> . unary_expression
    (61) unary_expression -> . LPAREN expression RPAREN
    (62) unary_expression -> . primary_expression
    (63) unary_expression -> . NEG primary_expression
    (64) unary_expression -> . NEG LPAREN expression RPAREN
    (49) primary_expression -> . constant
    (50) primary_expression -> . id_expression
    (51) primary_expression -> . function_call_statement
    (52) primary_expression -> . MINUS primary_expression
    (53) primary_expression -> . null_expression
    (55) constant -> . boolean_constant
    (56) constant -> . number
    (57) constant -> . string_constant
    (54) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN opt_parameter_list RPAREN
    (65) null_expression -> . K_NULL
    (59) boolean_constant -> . K_TRUE
    (60) boolean_constant -> . K_FALSE
    (72) number -> . integer_number
    (73) number -> . double_number
    (58) string_constant -> . STRING
    (74) integer_number -> . INTEGER
    (75) double_number -> . DOUBLE

    LPAREN          shift and go to state 60
    NEG             shift and go to state 54
    MINUS           shift and go to state 52
    ID              shift and go to state 62
    K_NULL          shift and go to state 61
    K_TRUE          shift and go to state 49
    K_FALSE         shift and go to state 45
    STRING          shift and go to state 58
    INTEGER         shift and go to state 55
    DOUBLE          shift and go to state 65

    id_expression                  shift and go to state 56
    null_expression                shift and go to state 57
    constant                       shift and go to state 44
    unary_expression               shift and go to state 46
    expression_factor              shift and go to state 113
    number                         shift and go to state 48
    function_call_statement        shift and go to state 63
    primary_expression             shift and go to state 59
    string_constant                shift and go to state 53
    double_number                  shift and go to state 51
    boolean_constant               shift and go to state 66
    integer_number                 shift and go to state 50

state 85

    (69) comparator -> LEQ .

    LPAREN          reduce using rule 69 (comparator -> LEQ .)
    NEG             reduce using rule 69 (comparator -> LEQ .)
    MINUS           reduce using rule 69 (comparator -> LEQ .)
    ID              reduce using rule 69 (comparator -> LEQ .)
    K_NULL          reduce using rule 69 (comparator -> LEQ .)
    K_TRUE          reduce using rule 69 (comparator -> LEQ .)
    K_FALSE         reduce using rule 69 (comparator -> LEQ .)
    STRING          reduce using rule 69 (comparator -> LEQ .)
    INTEGER         reduce using rule 69 (comparator -> LEQ .)
    DOUBLE          reduce using rule 69 (comparator -> LEQ .)


state 86

    (67) comparator -> LT .

    LPAREN          reduce using rule 67 (comparator -> LT .)
    NEG             reduce using rule 67 (comparator -> LT .)
    MINUS           reduce using rule 67 (comparator -> LT .)
    ID              reduce using rule 67 (comparator -> LT .)
    K_NULL          reduce using rule 67 (comparator -> LT .)
    K_TRUE          reduce using rule 67 (comparator -> LT .)
    K_FALSE         reduce using rule 67 (comparator -> LT .)
    STRING          reduce using rule 67 (comparator -> LT .)
    INTEGER         reduce using rule 67 (comparator -> LT .)
    DOUBLE          reduce using rule 67 (comparator -> LT .)


state 87

    (45) op -> DIVIDE .

    LPAREN          reduce using rule 45 (op -> DIVIDE .)
    NEG             reduce using rule 45 (op -> DIVIDE .)
    MINUS           reduce using rule 45 (op -> DIVIDE .)
    ID              reduce using rule 45 (op -> DIVIDE .)
    K_NULL          reduce using rule 45 (op -> DIVIDE .)
    K_TRUE          reduce using rule 45 (op -> DIVIDE .)
    K_FALSE         reduce using rule 45 (op -> DIVIDE .)
    STRING          reduce using rule 45 (op -> DIVIDE .)
    INTEGER         reduce using rule 45 (op -> DIVIDE .)
    DOUBLE          reduce using rule 45 (op -> DIVIDE .)


state 88

    (44) op -> TIMES .

    LPAREN          reduce using rule 44 (op -> TIMES .)
    NEG             reduce using rule 44 (op -> TIMES .)
    MINUS           reduce using rule 44 (op -> TIMES .)
    ID              reduce using rule 44 (op -> TIMES .)
    K_NULL          reduce using rule 44 (op -> TIMES .)
    K_TRUE          reduce using rule 44 (op -> TIMES .)
    K_FALSE         reduce using rule 44 (op -> TIMES .)
    STRING          reduce using rule 44 (op -> TIMES .)
    INTEGER         reduce using rule 44 (op -> TIMES .)
    DOUBLE          reduce using rule 44 (op -> TIMES .)


state 89

    (42) op -> PLUS .

    LPAREN          reduce using rule 42 (op -> PLUS .)
    NEG             reduce using rule 42 (op -> PLUS .)
    MINUS           reduce using rule 42 (op -> PLUS .)
    ID              reduce using rule 42 (op -> PLUS .)
    K_NULL          reduce using rule 42 (op -> PLUS .)
    K_TRUE          reduce using rule 42 (op -> PLUS .)
    K_FALSE         reduce using rule 42 (op -> PLUS .)
    STRING          reduce using rule 42 (op -> PLUS .)
    INTEGER         reduce using rule 42 (op -> PLUS .)
    DOUBLE          reduce using rule 42 (op -> PLUS .)


state 90

    (46) op -> MOD .

    LPAREN          reduce using rule 46 (op -> MOD .)
    NEG             reduce using rule 46 (op -> MOD .)
    MINUS           reduce using rule 46 (op -> MOD .)
    ID              reduce using rule 46 (op -> MOD .)
    K_NULL          reduce using rule 46 (op -> MOD .)
    K_TRUE          reduce using rule 46 (op -> MOD .)
    K_FALSE         reduce using rule 46 (op -> MOD .)
    STRING          reduce using rule 46 (op -> MOD .)
    INTEGER         reduce using rule 46 (op -> MOD .)
    DOUBLE          reduce using rule 46 (op -> MOD .)


state 91

    (43) op -> MINUS .

    LPAREN          reduce using rule 43 (op -> MINUS .)
    NEG             reduce using rule 43 (op -> MINUS .)
    MINUS           reduce using rule 43 (op -> MINUS .)
    ID              reduce using rule 43 (op -> MINUS .)
    K_NULL          reduce using rule 43 (op -> MINUS .)
    K_TRUE          reduce using rule 43 (op -> MINUS .)
    K_FALSE         reduce using rule 43 (op -> MINUS .)
    STRING          reduce using rule 43 (op -> MINUS .)
    INTEGER         reduce using rule 43 (op -> MINUS .)
    DOUBLE          reduce using rule 43 (op -> MINUS .)


state 92

    (40) expression_factor -> expression_factor op . unary_expression
    (61) unary_expression -> . LPAREN expression RPAREN
    (62) unary_expression -> . primary_expression
    (63) unary_expression -> . NEG primary_expression
    (64) unary_expression -> . NEG LPAREN expression RPAREN
    (49) primary_expression -> . constant
    (50) primary_expression -> . id_expression
    (51) primary_expression -> . function_call_statement
    (52) primary_expression -> . MINUS primary_expression
    (53) primary_expression -> . null_expression
    (55) constant -> . boolean_constant
    (56) constant -> . number
    (57) constant -> . string_constant
    (54) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN opt_parameter_list RPAREN
    (65) null_expression -> . K_NULL
    (59) boolean_constant -> . K_TRUE
    (60) boolean_constant -> . K_FALSE
    (72) number -> . integer_number
    (73) number -> . double_number
    (58) string_constant -> . STRING
    (74) integer_number -> . INTEGER
    (75) double_number -> . DOUBLE

    LPAREN          shift and go to state 60
    NEG             shift and go to state 54
    MINUS           shift and go to state 52
    ID              shift and go to state 62
    K_NULL          shift and go to state 61
    K_TRUE          shift and go to state 49
    K_FALSE         shift and go to state 45
    STRING          shift and go to state 58
    INTEGER         shift and go to state 55
    DOUBLE          shift and go to state 65

    id_expression                  shift and go to state 56
    null_expression                shift and go to state 57
    constant                       shift and go to state 44
    unary_expression               shift and go to state 114
    number                         shift and go to state 48
    function_call_statement        shift and go to state 63
    primary_expression             shift and go to state 59
    string_constant                shift and go to state 53
    double_number                  shift and go to state 51
    boolean_constant               shift and go to state 66
    integer_number                 shift and go to state 50

state 93

    (52) primary_expression -> MINUS primary_expression .

    PLUS            reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    MINUS           reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    TIMES           reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    DIVIDE          reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    MOD             reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    GT              reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    LT              reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    GEQ             reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    LEQ             reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    EQ              reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    NEQ             reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    RPAREN          reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    AND             reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    OR              reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    ID              reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    K_CONTINUE      reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    K_BREAK         reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    K_DONE          reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    K_LIST          reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    K_IF            reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    K_WHILE         reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    K_INT           reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    K_DOUBLE        reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    K_STRING        reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    K_BOOL          reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    K_WINDOW        reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    K_SHAPE         reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    K_TRIANGLE      reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    K_RECTANGLE     reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    K_CIRCLE        reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    K_POINT         reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    K_TEXT          reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    K_TABLE         reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    K_LINE          reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    $end            reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    K_END           reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    K_EL            reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    K_EF            reduce using rule 52 (primary_expression -> MINUS primary_expression .)
    COMMA           reduce using rule 52 (primary_expression -> MINUS primary_expression .)


state 94

    (63) unary_expression -> NEG primary_expression .

    PLUS            reduce using rule 63 (unary_expression -> NEG primary_expression .)
    MINUS           reduce using rule 63 (unary_expression -> NEG primary_expression .)
    TIMES           reduce using rule 63 (unary_expression -> NEG primary_expression .)
    DIVIDE          reduce using rule 63 (unary_expression -> NEG primary_expression .)
    MOD             reduce using rule 63 (unary_expression -> NEG primary_expression .)
    GT              reduce using rule 63 (unary_expression -> NEG primary_expression .)
    LT              reduce using rule 63 (unary_expression -> NEG primary_expression .)
    GEQ             reduce using rule 63 (unary_expression -> NEG primary_expression .)
    LEQ             reduce using rule 63 (unary_expression -> NEG primary_expression .)
    EQ              reduce using rule 63 (unary_expression -> NEG primary_expression .)
    NEQ             reduce using rule 63 (unary_expression -> NEG primary_expression .)
    RPAREN          reduce using rule 63 (unary_expression -> NEG primary_expression .)
    AND             reduce using rule 63 (unary_expression -> NEG primary_expression .)
    OR              reduce using rule 63 (unary_expression -> NEG primary_expression .)
    ID              reduce using rule 63 (unary_expression -> NEG primary_expression .)
    K_CONTINUE      reduce using rule 63 (unary_expression -> NEG primary_expression .)
    K_BREAK         reduce using rule 63 (unary_expression -> NEG primary_expression .)
    K_DONE          reduce using rule 63 (unary_expression -> NEG primary_expression .)
    K_LIST          reduce using rule 63 (unary_expression -> NEG primary_expression .)
    K_IF            reduce using rule 63 (unary_expression -> NEG primary_expression .)
    K_WHILE         reduce using rule 63 (unary_expression -> NEG primary_expression .)
    K_INT           reduce using rule 63 (unary_expression -> NEG primary_expression .)
    K_DOUBLE        reduce using rule 63 (unary_expression -> NEG primary_expression .)
    K_STRING        reduce using rule 63 (unary_expression -> NEG primary_expression .)
    K_BOOL          reduce using rule 63 (unary_expression -> NEG primary_expression .)
    K_WINDOW        reduce using rule 63 (unary_expression -> NEG primary_expression .)
    K_SHAPE         reduce using rule 63 (unary_expression -> NEG primary_expression .)
    K_TRIANGLE      reduce using rule 63 (unary_expression -> NEG primary_expression .)
    K_RECTANGLE     reduce using rule 63 (unary_expression -> NEG primary_expression .)
    K_CIRCLE        reduce using rule 63 (unary_expression -> NEG primary_expression .)
    K_POINT         reduce using rule 63 (unary_expression -> NEG primary_expression .)
    K_TEXT          reduce using rule 63 (unary_expression -> NEG primary_expression .)
    K_TABLE         reduce using rule 63 (unary_expression -> NEG primary_expression .)
    K_LINE          reduce using rule 63 (unary_expression -> NEG primary_expression .)
    $end            reduce using rule 63 (unary_expression -> NEG primary_expression .)
    K_END           reduce using rule 63 (unary_expression -> NEG primary_expression .)
    K_EL            reduce using rule 63 (unary_expression -> NEG primary_expression .)
    K_EF            reduce using rule 63 (unary_expression -> NEG primary_expression .)
    COMMA           reduce using rule 63 (unary_expression -> NEG primary_expression .)


state 95

    (64) unary_expression -> NEG LPAREN . expression RPAREN
    (34) expression -> . expression boolean_operator expression_pre_term
    (35) expression -> . expression_pre_term
    (36) expression_pre_term -> . expression_pre_term eq_comparator expression_term
    (37) expression_pre_term -> . expression_term
    (38) expression_term -> . expression_term comparator expression_factor
    (39) expression_term -> . expression_factor
    (40) expression_factor -> . expression_factor op unary_expression
    (41) expression_factor -> . unary_expression
    (61) unary_expression -> . LPAREN expression RPAREN
    (62) unary_expression -> . primary_expression
    (63) unary_expression -> . NEG primary_expression
    (64) unary_expression -> . NEG LPAREN expression RPAREN
    (49) primary_expression -> . constant
    (50) primary_expression -> . id_expression
    (51) primary_expression -> . function_call_statement
    (52) primary_expression -> . MINUS primary_expression
    (53) primary_expression -> . null_expression
    (55) constant -> . boolean_constant
    (56) constant -> . number
    (57) constant -> . string_constant
    (54) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN opt_parameter_list RPAREN
    (65) null_expression -> . K_NULL
    (59) boolean_constant -> . K_TRUE
    (60) boolean_constant -> . K_FALSE
    (72) number -> . integer_number
    (73) number -> . double_number
    (58) string_constant -> . STRING
    (74) integer_number -> . INTEGER
    (75) double_number -> . DOUBLE

    LPAREN          shift and go to state 60
    NEG             shift and go to state 54
    MINUS           shift and go to state 52
    ID              shift and go to state 62
    K_NULL          shift and go to state 61
    K_TRUE          shift and go to state 49
    K_FALSE         shift and go to state 45
    STRING          shift and go to state 58
    INTEGER         shift and go to state 55
    DOUBLE          shift and go to state 65

    expression_term                shift and go to state 43
    null_expression                shift and go to state 57
    constant                       shift and go to state 44
    unary_expression               shift and go to state 46
    id_expression                  shift and go to state 56
    expression_factor              shift and go to state 47
    number                         shift and go to state 48
    function_call_statement        shift and go to state 63
    primary_expression             shift and go to state 59
    expression_pre_term            shift and go to state 64
    string_constant                shift and go to state 53
    double_number                  shift and go to state 51
    boolean_constant               shift and go to state 66
    expression                     shift and go to state 115
    integer_number                 shift and go to state 50

state 96

    (61) unary_expression -> LPAREN expression . RPAREN
    (34) expression -> expression . boolean_operator expression_pre_term
    (47) boolean_operator -> . AND
    (48) boolean_operator -> . OR

    RPAREN          shift and go to state 116
    AND             shift and go to state 100
    OR              shift and go to state 103

    boolean_operator               shift and go to state 102

state 97

    (36) expression_pre_term -> expression_pre_term eq_comparator . expression_term
    (38) expression_term -> . expression_term comparator expression_factor
    (39) expression_term -> . expression_factor
    (40) expression_factor -> . expression_factor op unary_expression
    (41) expression_factor -> . unary_expression
    (61) unary_expression -> . LPAREN expression RPAREN
    (62) unary_expression -> . primary_expression
    (63) unary_expression -> . NEG primary_expression
    (64) unary_expression -> . NEG LPAREN expression RPAREN
    (49) primary_expression -> . constant
    (50) primary_expression -> . id_expression
    (51) primary_expression -> . function_call_statement
    (52) primary_expression -> . MINUS primary_expression
    (53) primary_expression -> . null_expression
    (55) constant -> . boolean_constant
    (56) constant -> . number
    (57) constant -> . string_constant
    (54) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN opt_parameter_list RPAREN
    (65) null_expression -> . K_NULL
    (59) boolean_constant -> . K_TRUE
    (60) boolean_constant -> . K_FALSE
    (72) number -> . integer_number
    (73) number -> . double_number
    (58) string_constant -> . STRING
    (74) integer_number -> . INTEGER
    (75) double_number -> . DOUBLE

    LPAREN          shift and go to state 60
    NEG             shift and go to state 54
    MINUS           shift and go to state 52
    ID              shift and go to state 62
    K_NULL          shift and go to state 61
    K_TRUE          shift and go to state 49
    K_FALSE         shift and go to state 45
    STRING          shift and go to state 58
    INTEGER         shift and go to state 55
    DOUBLE          shift and go to state 65

    expression_term                shift and go to state 117
    null_expression                shift and go to state 57
    constant                       shift and go to state 44
    unary_expression               shift and go to state 46
    id_expression                  shift and go to state 56
    expression_factor              shift and go to state 47
    number                         shift and go to state 48
    function_call_statement        shift and go to state 63
    primary_expression             shift and go to state 59
    string_constant                shift and go to state 53
    double_number                  shift and go to state 51
    boolean_constant               shift and go to state 66
    integer_number                 shift and go to state 50

state 98

    (70) eq_comparator -> EQ .

    LPAREN          reduce using rule 70 (eq_comparator -> EQ .)
    NEG             reduce using rule 70 (eq_comparator -> EQ .)
    MINUS           reduce using rule 70 (eq_comparator -> EQ .)
    ID              reduce using rule 70 (eq_comparator -> EQ .)
    K_NULL          reduce using rule 70 (eq_comparator -> EQ .)
    K_TRUE          reduce using rule 70 (eq_comparator -> EQ .)
    K_FALSE         reduce using rule 70 (eq_comparator -> EQ .)
    STRING          reduce using rule 70 (eq_comparator -> EQ .)
    INTEGER         reduce using rule 70 (eq_comparator -> EQ .)
    DOUBLE          reduce using rule 70 (eq_comparator -> EQ .)


state 99

    (71) eq_comparator -> NEQ .

    LPAREN          reduce using rule 71 (eq_comparator -> NEQ .)
    NEG             reduce using rule 71 (eq_comparator -> NEQ .)
    MINUS           reduce using rule 71 (eq_comparator -> NEQ .)
    ID              reduce using rule 71 (eq_comparator -> NEQ .)
    K_NULL          reduce using rule 71 (eq_comparator -> NEQ .)
    K_TRUE          reduce using rule 71 (eq_comparator -> NEQ .)
    K_FALSE         reduce using rule 71 (eq_comparator -> NEQ .)
    STRING          reduce using rule 71 (eq_comparator -> NEQ .)
    INTEGER         reduce using rule 71 (eq_comparator -> NEQ .)
    DOUBLE          reduce using rule 71 (eq_comparator -> NEQ .)


state 100

    (47) boolean_operator -> AND .

    LPAREN          reduce using rule 47 (boolean_operator -> AND .)
    NEG             reduce using rule 47 (boolean_operator -> AND .)
    MINUS           reduce using rule 47 (boolean_operator -> AND .)
    ID              reduce using rule 47 (boolean_operator -> AND .)
    K_NULL          reduce using rule 47 (boolean_operator -> AND .)
    K_TRUE          reduce using rule 47 (boolean_operator -> AND .)
    K_FALSE         reduce using rule 47 (boolean_operator -> AND .)
    STRING          reduce using rule 47 (boolean_operator -> AND .)
    INTEGER         reduce using rule 47 (boolean_operator -> AND .)
    DOUBLE          reduce using rule 47 (boolean_operator -> AND .)


state 101

    (77) if_statement -> K_IF LPAREN expression RPAREN . push_scope compound_statement_list
    (97) push_scope -> .

    ID              reduce using rule 97 (push_scope -> .)
    K_CONTINUE      reduce using rule 97 (push_scope -> .)
    K_BREAK         reduce using rule 97 (push_scope -> .)
    K_DONE          reduce using rule 97 (push_scope -> .)
    K_LIST          reduce using rule 97 (push_scope -> .)
    K_IF            reduce using rule 97 (push_scope -> .)
    K_WHILE         reduce using rule 97 (push_scope -> .)
    K_INT           reduce using rule 97 (push_scope -> .)
    K_DOUBLE        reduce using rule 97 (push_scope -> .)
    K_STRING        reduce using rule 97 (push_scope -> .)
    K_BOOL          reduce using rule 97 (push_scope -> .)
    K_WINDOW        reduce using rule 97 (push_scope -> .)
    K_SHAPE         reduce using rule 97 (push_scope -> .)
    K_TRIANGLE      reduce using rule 97 (push_scope -> .)
    K_RECTANGLE     reduce using rule 97 (push_scope -> .)
    K_CIRCLE        reduce using rule 97 (push_scope -> .)
    K_POINT         reduce using rule 97 (push_scope -> .)
    K_TEXT          reduce using rule 97 (push_scope -> .)
    K_TABLE         reduce using rule 97 (push_scope -> .)
    K_LINE          reduce using rule 97 (push_scope -> .)
    K_EL            reduce using rule 97 (push_scope -> .)
    K_EF            reduce using rule 97 (push_scope -> .)
    K_END           reduce using rule 97 (push_scope -> .)

    push_scope                     shift and go to state 118

state 102

    (34) expression -> expression boolean_operator . expression_pre_term
    (36) expression_pre_term -> . expression_pre_term eq_comparator expression_term
    (37) expression_pre_term -> . expression_term
    (38) expression_term -> . expression_term comparator expression_factor
    (39) expression_term -> . expression_factor
    (40) expression_factor -> . expression_factor op unary_expression
    (41) expression_factor -> . unary_expression
    (61) unary_expression -> . LPAREN expression RPAREN
    (62) unary_expression -> . primary_expression
    (63) unary_expression -> . NEG primary_expression
    (64) unary_expression -> . NEG LPAREN expression RPAREN
    (49) primary_expression -> . constant
    (50) primary_expression -> . id_expression
    (51) primary_expression -> . function_call_statement
    (52) primary_expression -> . MINUS primary_expression
    (53) primary_expression -> . null_expression
    (55) constant -> . boolean_constant
    (56) constant -> . number
    (57) constant -> . string_constant
    (54) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN opt_parameter_list RPAREN
    (65) null_expression -> . K_NULL
    (59) boolean_constant -> . K_TRUE
    (60) boolean_constant -> . K_FALSE
    (72) number -> . integer_number
    (73) number -> . double_number
    (58) string_constant -> . STRING
    (74) integer_number -> . INTEGER
    (75) double_number -> . DOUBLE

    LPAREN          shift and go to state 60
    NEG             shift and go to state 54
    MINUS           shift and go to state 52
    ID              shift and go to state 62
    K_NULL          shift and go to state 61
    K_TRUE          shift and go to state 49
    K_FALSE         shift and go to state 45
    STRING          shift and go to state 58
    INTEGER         shift and go to state 55
    DOUBLE          shift and go to state 65

    expression_term                shift and go to state 43
    null_expression                shift and go to state 57
    constant                       shift and go to state 44
    unary_expression               shift and go to state 46
    id_expression                  shift and go to state 56
    expression_factor              shift and go to state 47
    number                         shift and go to state 48
    function_call_statement        shift and go to state 63
    primary_expression             shift and go to state 59
    expression_pre_term            shift and go to state 119
    string_constant                shift and go to state 53
    double_number                  shift and go to state 51
    boolean_constant               shift and go to state 66
    integer_number                 shift and go to state 50

state 103

    (48) boolean_operator -> OR .

    LPAREN          reduce using rule 48 (boolean_operator -> OR .)
    NEG             reduce using rule 48 (boolean_operator -> OR .)
    MINUS           reduce using rule 48 (boolean_operator -> OR .)
    ID              reduce using rule 48 (boolean_operator -> OR .)
    K_NULL          reduce using rule 48 (boolean_operator -> OR .)
    K_TRUE          reduce using rule 48 (boolean_operator -> OR .)
    K_FALSE         reduce using rule 48 (boolean_operator -> OR .)
    STRING          reduce using rule 48 (boolean_operator -> OR .)
    INTEGER         reduce using rule 48 (boolean_operator -> OR .)
    DOUBLE          reduce using rule 48 (boolean_operator -> OR .)


state 104

    (86) iteration_statement_header -> K_WHILE LPAREN expression RPAREN .

    K_END           reduce using rule 86 (iteration_statement_header -> K_WHILE LPAREN expression RPAREN .)
    ID              reduce using rule 86 (iteration_statement_header -> K_WHILE LPAREN expression RPAREN .)
    K_CONTINUE      reduce using rule 86 (iteration_statement_header -> K_WHILE LPAREN expression RPAREN .)
    K_BREAK         reduce using rule 86 (iteration_statement_header -> K_WHILE LPAREN expression RPAREN .)
    K_DONE          reduce using rule 86 (iteration_statement_header -> K_WHILE LPAREN expression RPAREN .)
    K_LIST          reduce using rule 86 (iteration_statement_header -> K_WHILE LPAREN expression RPAREN .)
    K_IF            reduce using rule 86 (iteration_statement_header -> K_WHILE LPAREN expression RPAREN .)
    K_WHILE         reduce using rule 86 (iteration_statement_header -> K_WHILE LPAREN expression RPAREN .)
    K_INT           reduce using rule 86 (iteration_statement_header -> K_WHILE LPAREN expression RPAREN .)
    K_DOUBLE        reduce using rule 86 (iteration_statement_header -> K_WHILE LPAREN expression RPAREN .)
    K_STRING        reduce using rule 86 (iteration_statement_header -> K_WHILE LPAREN expression RPAREN .)
    K_BOOL          reduce using rule 86 (iteration_statement_header -> K_WHILE LPAREN expression RPAREN .)
    K_WINDOW        reduce using rule 86 (iteration_statement_header -> K_WHILE LPAREN expression RPAREN .)
    K_SHAPE         reduce using rule 86 (iteration_statement_header -> K_WHILE LPAREN expression RPAREN .)
    K_TRIANGLE      reduce using rule 86 (iteration_statement_header -> K_WHILE LPAREN expression RPAREN .)
    K_RECTANGLE     reduce using rule 86 (iteration_statement_header -> K_WHILE LPAREN expression RPAREN .)
    K_CIRCLE        reduce using rule 86 (iteration_statement_header -> K_WHILE LPAREN expression RPAREN .)
    K_POINT         reduce using rule 86 (iteration_statement_header -> K_WHILE LPAREN expression RPAREN .)
    K_TEXT          reduce using rule 86 (iteration_statement_header -> K_WHILE LPAREN expression RPAREN .)
    K_TABLE         reduce using rule 86 (iteration_statement_header -> K_WHILE LPAREN expression RPAREN .)
    K_LINE          reduce using rule 86 (iteration_statement_header -> K_WHILE LPAREN expression RPAREN .)


state 105

    (16) variable_declaration -> pre_type_modifier type . ID
    (17) variable_declaration -> pre_type_modifier type . ID ASSIGN expression

    ID              shift and go to state 120


state 106

    (82) else_statement -> K_EL push_scope . compound_statement_list
    (83) compound_statement_list -> .
    (84) compound_statement_list -> . compound_statement_list compound_statement

    ID              reduce using rule 83 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 83 (compound_statement_list -> .)
    K_BREAK         reduce using rule 83 (compound_statement_list -> .)
    K_DONE          reduce using rule 83 (compound_statement_list -> .)
    K_LIST          reduce using rule 83 (compound_statement_list -> .)
    K_IF            reduce using rule 83 (compound_statement_list -> .)
    K_WHILE         reduce using rule 83 (compound_statement_list -> .)
    K_INT           reduce using rule 83 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 83 (compound_statement_list -> .)
    K_STRING        reduce using rule 83 (compound_statement_list -> .)
    K_BOOL          reduce using rule 83 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 83 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 83 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 83 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 83 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 83 (compound_statement_list -> .)
    K_POINT         reduce using rule 83 (compound_statement_list -> .)
    K_TEXT          reduce using rule 83 (compound_statement_list -> .)
    K_TABLE         reduce using rule 83 (compound_statement_list -> .)
    K_LINE          reduce using rule 83 (compound_statement_list -> .)
    K_END           reduce using rule 83 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 121

state 107

    (80) else_if_statement -> K_EF LPAREN . expression RPAREN push_scope compound_statement_list
    (34) expression -> . expression boolean_operator expression_pre_term
    (35) expression -> . expression_pre_term
    (36) expression_pre_term -> . expression_pre_term eq_comparator expression_term
    (37) expression_pre_term -> . expression_term
    (38) expression_term -> . expression_term comparator expression_factor
    (39) expression_term -> . expression_factor
    (40) expression_factor -> . expression_factor op unary_expression
    (41) expression_factor -> . unary_expression
    (61) unary_expression -> . LPAREN expression RPAREN
    (62) unary_expression -> . primary_expression
    (63) unary_expression -> . NEG primary_expression
    (64) unary_expression -> . NEG LPAREN expression RPAREN
    (49) primary_expression -> . constant
    (50) primary_expression -> . id_expression
    (51) primary_expression -> . function_call_statement
    (52) primary_expression -> . MINUS primary_expression
    (53) primary_expression -> . null_expression
    (55) constant -> . boolean_constant
    (56) constant -> . number
    (57) constant -> . string_constant
    (54) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN opt_parameter_list RPAREN
    (65) null_expression -> . K_NULL
    (59) boolean_constant -> . K_TRUE
    (60) boolean_constant -> . K_FALSE
    (72) number -> . integer_number
    (73) number -> . double_number
    (58) string_constant -> . STRING
    (74) integer_number -> . INTEGER
    (75) double_number -> . DOUBLE

    LPAREN          shift and go to state 60
    NEG             shift and go to state 54
    MINUS           shift and go to state 52
    ID              shift and go to state 62
    K_NULL          shift and go to state 61
    K_TRUE          shift and go to state 49
    K_FALSE         shift and go to state 45
    STRING          shift and go to state 58
    INTEGER         shift and go to state 55
    DOUBLE          shift and go to state 65

    expression_term                shift and go to state 43
    constant                       shift and go to state 44
    unary_expression               shift and go to state 46
    expression_factor              shift and go to state 47
    number                         shift and go to state 48
    integer_number                 shift and go to state 50
    double_number                  shift and go to state 51
    string_constant                shift and go to state 53
    id_expression                  shift and go to state 56
    null_expression                shift and go to state 57
    primary_expression             shift and go to state 59
    expression                     shift and go to state 122
    function_call_statement        shift and go to state 63
    expression_pre_term            shift and go to state 64
    boolean_constant               shift and go to state 66

state 108

    (76) selection_statement -> if_statement else_if_statement_list else_statement K_END .

    K_END           reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    ID              reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    K_CONTINUE      reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    K_BREAK         reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    K_DONE          reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    K_LIST          reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    K_IF            reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    K_WHILE         reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    K_INT           reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    K_DOUBLE        reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    K_STRING        reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    K_BOOL          reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    K_WINDOW        reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    K_SHAPE         reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    K_TRIANGLE      reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    K_RECTANGLE     reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    K_CIRCLE        reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    K_POINT         reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    K_TEXT          reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    K_TABLE         reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    K_LINE          reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    K_EL            reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    K_EF            reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)
    $end            reduce using rule 76 (selection_statement -> if_statement else_if_statement_list else_statement K_END .)


state 109

    (17) variable_declaration -> pre_type_modifier type ID ASSIGN . expression
    (34) expression -> . expression boolean_operator expression_pre_term
    (35) expression -> . expression_pre_term
    (36) expression_pre_term -> . expression_pre_term eq_comparator expression_term
    (37) expression_pre_term -> . expression_term
    (38) expression_term -> . expression_term comparator expression_factor
    (39) expression_term -> . expression_factor
    (40) expression_factor -> . expression_factor op unary_expression
    (41) expression_factor -> . unary_expression
    (61) unary_expression -> . LPAREN expression RPAREN
    (62) unary_expression -> . primary_expression
    (63) unary_expression -> . NEG primary_expression
    (64) unary_expression -> . NEG LPAREN expression RPAREN
    (49) primary_expression -> . constant
    (50) primary_expression -> . id_expression
    (51) primary_expression -> . function_call_statement
    (52) primary_expression -> . MINUS primary_expression
    (53) primary_expression -> . null_expression
    (55) constant -> . boolean_constant
    (56) constant -> . number
    (57) constant -> . string_constant
    (54) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN opt_parameter_list RPAREN
    (65) null_expression -> . K_NULL
    (59) boolean_constant -> . K_TRUE
    (60) boolean_constant -> . K_FALSE
    (72) number -> . integer_number
    (73) number -> . double_number
    (58) string_constant -> . STRING
    (74) integer_number -> . INTEGER
    (75) double_number -> . DOUBLE

    LPAREN          shift and go to state 60
    NEG             shift and go to state 54
    MINUS           shift and go to state 52
    ID              shift and go to state 62
    K_NULL          shift and go to state 61
    K_TRUE          shift and go to state 49
    K_FALSE         shift and go to state 45
    STRING          shift and go to state 58
    INTEGER         shift and go to state 55
    DOUBLE          shift and go to state 65

    expression_term                shift and go to state 43
    constant                       shift and go to state 44
    unary_expression               shift and go to state 46
    expression_factor              shift and go to state 47
    number                         shift and go to state 48
    integer_number                 shift and go to state 50
    double_number                  shift and go to state 51
    string_constant                shift and go to state 53
    id_expression                  shift and go to state 56
    null_expression                shift and go to state 57
    primary_expression             shift and go to state 59
    expression                     shift and go to state 123
    function_call_statement        shift and go to state 63
    expression_pre_term            shift and go to state 64
    boolean_constant               shift and go to state 66

state 110

    (91) function_header -> pre_type_modifier type ID LPAREN . push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag
    (97) push_scope -> .

    K_LIST          reduce using rule 97 (push_scope -> .)
    RPAREN          reduce using rule 97 (push_scope -> .)
    K_INT           reduce using rule 97 (push_scope -> .)
    K_DOUBLE        reduce using rule 97 (push_scope -> .)
    K_STRING        reduce using rule 97 (push_scope -> .)
    K_BOOL          reduce using rule 97 (push_scope -> .)
    K_WINDOW        reduce using rule 97 (push_scope -> .)
    K_SHAPE         reduce using rule 97 (push_scope -> .)
    K_TRIANGLE      reduce using rule 97 (push_scope -> .)
    K_RECTANGLE     reduce using rule 97 (push_scope -> .)
    K_CIRCLE        reduce using rule 97 (push_scope -> .)
    K_POINT         reduce using rule 97 (push_scope -> .)
    K_TEXT          reduce using rule 97 (push_scope -> .)
    K_TABLE         reduce using rule 97 (push_scope -> .)
    K_LINE          reduce using rule 97 (push_scope -> .)

    push_scope                     shift and go to state 124

state 111

    (14) parameter_list -> parameter_list COMMA . expression
    (34) expression -> . expression boolean_operator expression_pre_term
    (35) expression -> . expression_pre_term
    (36) expression_pre_term -> . expression_pre_term eq_comparator expression_term
    (37) expression_pre_term -> . expression_term
    (38) expression_term -> . expression_term comparator expression_factor
    (39) expression_term -> . expression_factor
    (40) expression_factor -> . expression_factor op unary_expression
    (41) expression_factor -> . unary_expression
    (61) unary_expression -> . LPAREN expression RPAREN
    (62) unary_expression -> . primary_expression
    (63) unary_expression -> . NEG primary_expression
    (64) unary_expression -> . NEG LPAREN expression RPAREN
    (49) primary_expression -> . constant
    (50) primary_expression -> . id_expression
    (51) primary_expression -> . function_call_statement
    (52) primary_expression -> . MINUS primary_expression
    (53) primary_expression -> . null_expression
    (55) constant -> . boolean_constant
    (56) constant -> . number
    (57) constant -> . string_constant
    (54) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN opt_parameter_list RPAREN
    (65) null_expression -> . K_NULL
    (59) boolean_constant -> . K_TRUE
    (60) boolean_constant -> . K_FALSE
    (72) number -> . integer_number
    (73) number -> . double_number
    (58) string_constant -> . STRING
    (74) integer_number -> . INTEGER
    (75) double_number -> . DOUBLE

    LPAREN          shift and go to state 60
    NEG             shift and go to state 54
    MINUS           shift and go to state 52
    ID              shift and go to state 62
    K_NULL          shift and go to state 61
    K_TRUE          shift and go to state 49
    K_FALSE         shift and go to state 45
    STRING          shift and go to state 58
    INTEGER         shift and go to state 55
    DOUBLE          shift and go to state 65

    expression_term                shift and go to state 43
    null_expression                shift and go to state 57
    constant                       shift and go to state 44
    id_expression                  shift and go to state 56
    expression_factor              shift and go to state 47
    number                         shift and go to state 48
    unary_expression               shift and go to state 46
    primary_expression             shift and go to state 59
    expression_pre_term            shift and go to state 64
    string_constant                shift and go to state 53
    function_call_statement        shift and go to state 63
    double_number                  shift and go to state 51
    boolean_constant               shift and go to state 66
    expression                     shift and go to state 125
    integer_number                 shift and go to state 50

state 112

    (11) function_call_statement -> ID LPAREN opt_parameter_list RPAREN .

    PLUS            reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    MINUS           reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    TIMES           reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    DIVIDE          reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    MOD             reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    GT              reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    LT              reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    GEQ             reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    LEQ             reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    EQ              reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    NEQ             reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    RPAREN          reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    AND             reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    OR              reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    ID              reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    K_CONTINUE      reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    K_BREAK         reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    K_DONE          reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    K_LIST          reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    K_IF            reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    K_WHILE         reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    K_INT           reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    K_DOUBLE        reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    K_STRING        reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    K_BOOL          reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    K_WINDOW        reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    K_SHAPE         reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    K_TRIANGLE      reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    K_RECTANGLE     reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    K_CIRCLE        reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    K_POINT         reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    K_TEXT          reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    K_TABLE         reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    K_LINE          reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    K_END           reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    COMMA           reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    $end            reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    K_EL            reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)
    K_EF            reduce using rule 11 (function_call_statement -> ID LPAREN opt_parameter_list RPAREN .)


state 113

    (38) expression_term -> expression_term comparator expression_factor .
    (40) expression_factor -> expression_factor . op unary_expression
    (42) op -> . PLUS
    (43) op -> . MINUS
    (44) op -> . TIMES
    (45) op -> . DIVIDE
    (46) op -> . MOD

    GT              reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    LT              reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    GEQ             reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    LEQ             reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    EQ              reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    NEQ             reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    AND             reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    OR              reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    COMMA           reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    RPAREN          reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    ID              reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    K_CONTINUE      reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    K_BREAK         reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    K_DONE          reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    K_LIST          reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    K_IF            reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    K_WHILE         reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    K_INT           reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    K_DOUBLE        reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    K_STRING        reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    K_BOOL          reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    K_WINDOW        reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    K_SHAPE         reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    K_TRIANGLE      reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    K_RECTANGLE     reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    K_CIRCLE        reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    K_POINT         reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    K_TEXT          reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    K_TABLE         reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    K_LINE          reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    $end            reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    K_END           reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    K_EL            reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    K_EF            reduce using rule 38 (expression_term -> expression_term comparator expression_factor .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 91
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 87
    MOD             shift and go to state 90

    op                             shift and go to state 92

state 114

    (40) expression_factor -> expression_factor op unary_expression .

    PLUS            reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    MINUS           reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    TIMES           reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    DIVIDE          reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    MOD             reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    GT              reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    LT              reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    GEQ             reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    LEQ             reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    EQ              reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    NEQ             reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    RPAREN          reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    AND             reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    OR              reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    ID              reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    K_CONTINUE      reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    K_BREAK         reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    K_DONE          reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    K_LIST          reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    K_IF            reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    K_WHILE         reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    K_INT           reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    K_DOUBLE        reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    K_STRING        reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    K_BOOL          reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    K_WINDOW        reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    K_SHAPE         reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    K_TRIANGLE      reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    K_RECTANGLE     reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    K_CIRCLE        reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    K_POINT         reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    K_TEXT          reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    K_TABLE         reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    K_LINE          reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    $end            reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    K_END           reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    K_EL            reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    K_EF            reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)
    COMMA           reduce using rule 40 (expression_factor -> expression_factor op unary_expression .)


state 115

    (64) unary_expression -> NEG LPAREN expression . RPAREN
    (34) expression -> expression . boolean_operator expression_pre_term
    (47) boolean_operator -> . AND
    (48) boolean_operator -> . OR

    RPAREN          shift and go to state 126
    AND             shift and go to state 100
    OR              shift and go to state 103

    boolean_operator               shift and go to state 102

state 116

    (61) unary_expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    GEQ             reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    LEQ             reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    K_CONTINUE      reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    K_BREAK         reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    K_DONE          reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    K_LIST          reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    K_IF            reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    K_WHILE         reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    K_INT           reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    K_DOUBLE        reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    K_STRING        reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    K_BOOL          reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    K_WINDOW        reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    K_SHAPE         reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    K_TRIANGLE      reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    K_RECTANGLE     reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    K_CIRCLE        reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    K_POINT         reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    K_TEXT          reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    K_TABLE         reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    K_LINE          reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    K_END           reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    K_EL            reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    K_EF            reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 61 (unary_expression -> LPAREN expression RPAREN .)


state 117

    (36) expression_pre_term -> expression_pre_term eq_comparator expression_term .
    (38) expression_term -> expression_term . comparator expression_factor
    (66) comparator -> . GT
    (67) comparator -> . LT
    (68) comparator -> . GEQ
    (69) comparator -> . LEQ

    EQ              reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    NEQ             reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    AND             reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    OR              reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    ID              reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    K_CONTINUE      reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    K_BREAK         reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    K_DONE          reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    K_LIST          reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    K_IF            reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    K_WHILE         reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    K_INT           reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    K_DOUBLE        reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    K_STRING        reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    K_BOOL          reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    K_WINDOW        reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    K_SHAPE         reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    K_TRIANGLE      reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    K_RECTANGLE     reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    K_CIRCLE        reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    K_POINT         reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    K_TEXT          reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    K_TABLE         reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    K_LINE          reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    $end            reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    K_END           reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    K_EL            reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    K_EF            reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    COMMA           reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    RPAREN          reduce using rule 36 (expression_pre_term -> expression_pre_term eq_comparator expression_term .)
    GT              shift and go to state 83
    LT              shift and go to state 86
    GEQ             shift and go to state 82
    LEQ             shift and go to state 85

    comparator                     shift and go to state 84

state 118

    (77) if_statement -> K_IF LPAREN expression RPAREN push_scope . compound_statement_list
    (83) compound_statement_list -> .
    (84) compound_statement_list -> . compound_statement_list compound_statement

    ID              reduce using rule 83 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 83 (compound_statement_list -> .)
    K_BREAK         reduce using rule 83 (compound_statement_list -> .)
    K_DONE          reduce using rule 83 (compound_statement_list -> .)
    K_LIST          reduce using rule 83 (compound_statement_list -> .)
    K_IF            reduce using rule 83 (compound_statement_list -> .)
    K_WHILE         reduce using rule 83 (compound_statement_list -> .)
    K_INT           reduce using rule 83 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 83 (compound_statement_list -> .)
    K_STRING        reduce using rule 83 (compound_statement_list -> .)
    K_BOOL          reduce using rule 83 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 83 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 83 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 83 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 83 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 83 (compound_statement_list -> .)
    K_POINT         reduce using rule 83 (compound_statement_list -> .)
    K_TEXT          reduce using rule 83 (compound_statement_list -> .)
    K_TABLE         reduce using rule 83 (compound_statement_list -> .)
    K_LINE          reduce using rule 83 (compound_statement_list -> .)
    K_EL            reduce using rule 83 (compound_statement_list -> .)
    K_EF            reduce using rule 83 (compound_statement_list -> .)
    K_END           reduce using rule 83 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 127

state 119

    (34) expression -> expression boolean_operator expression_pre_term .
    (36) expression_pre_term -> expression_pre_term . eq_comparator expression_term
    (70) eq_comparator -> . EQ
    (71) eq_comparator -> . NEQ

    RPAREN          reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    AND             reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    OR              reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    COMMA           reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    ID              reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    K_CONTINUE      reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    K_BREAK         reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    K_DONE          reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    K_LIST          reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    K_IF            reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    K_WHILE         reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    K_INT           reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    K_DOUBLE        reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    K_STRING        reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    K_BOOL          reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    K_WINDOW        reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    K_SHAPE         reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    K_TRIANGLE      reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    K_RECTANGLE     reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    K_CIRCLE        reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    K_POINT         reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    K_TEXT          reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    K_TABLE         reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    K_LINE          reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    $end            reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    K_END           reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    K_EL            reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    K_EF            reduce using rule 34 (expression -> expression boolean_operator expression_pre_term .)
    EQ              shift and go to state 98
    NEQ             shift and go to state 99

    eq_comparator                  shift and go to state 97

state 120

    (16) variable_declaration -> pre_type_modifier type ID .
    (17) variable_declaration -> pre_type_modifier type ID . ASSIGN expression

    K_END           reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    ID              reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_CONTINUE      reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_BREAK         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_DONE          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_LIST          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_IF            reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_WHILE         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_INT           reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_DOUBLE        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_STRING        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_BOOL          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_WINDOW        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_SHAPE         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_TRIANGLE      reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_RECTANGLE     reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_CIRCLE        reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_POINT         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_TEXT          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_TABLE         reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_LINE          reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_EL            reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    K_EF            reduce using rule 16 (variable_declaration -> pre_type_modifier type ID .)
    ASSIGN          shift and go to state 109


state 121

    (82) else_statement -> K_EL push_scope compound_statement_list .
    (84) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN opt_parameter_list RPAREN
    (16) variable_declaration -> . pre_type_modifier type ID
    (17) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (18) variable_declaration -> . ID ASSIGN expression
    (76) selection_statement -> . if_statement else_if_statement_list else_statement K_END
    (85) iteration_statement -> . iteration_statement_header compound_statement_list K_END
    (87) jump_statement -> . K_CONTINUE
    (88) jump_statement -> . K_BREAK
    (89) jump_statement -> . K_DONE
    (19) pre_type_modifier -> .
    (20) pre_type_modifier -> . K_LIST
    (77) if_statement -> . K_IF LPAREN expression RPAREN push_scope compound_statement_list
    (86) iteration_statement_header -> . K_WHILE LPAREN expression RPAREN

    K_END           reduce using rule 82 (else_statement -> K_EL push_scope compound_statement_list .)
    ID              shift and go to state 17
    K_CONTINUE      shift and go to state 12
    K_BREAK         shift and go to state 13
    K_DONE          shift and go to state 21
    K_INT           reduce using rule 19 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 19 (pre_type_modifier -> .)
    K_STRING        reduce using rule 19 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 19 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 19 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 19 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 19 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 19 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 19 (pre_type_modifier -> .)
    K_POINT         reduce using rule 19 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 19 (pre_type_modifier -> .)
    K_TABLE         reduce using rule 19 (pre_type_modifier -> .)
    K_LINE          reduce using rule 19 (pre_type_modifier -> .)
    K_LIST          shift and go to state 15
    K_IF            shift and go to state 3
    K_WHILE         shift and go to state 6

    jump_statement                 shift and go to state 18
    if_statement                   shift and go to state 11
    compound_statement             shift and go to state 70
    selection_statement            shift and go to state 8
    function_call_statement        shift and go to state 20
    iteration_statement_header     shift and go to state 14
    pre_type_modifier              shift and go to state 71
    iteration_statement            shift and go to state 4
    variable_declaration           shift and go to state 5

state 122

    (80) else_if_statement -> K_EF LPAREN expression . RPAREN push_scope compound_statement_list
    (34) expression -> expression . boolean_operator expression_pre_term
    (47) boolean_operator -> . AND
    (48) boolean_operator -> . OR

    RPAREN          shift and go to state 128
    AND             shift and go to state 100
    OR              shift and go to state 103

    boolean_operator               shift and go to state 102

state 123

    (17) variable_declaration -> pre_type_modifier type ID ASSIGN expression .
    (34) expression -> expression . boolean_operator expression_pre_term
    (47) boolean_operator -> . AND
    (48) boolean_operator -> . OR

    K_END           reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    ID              reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_CONTINUE      reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_BREAK         reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_DONE          reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_LIST          reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_IF            reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_WHILE         reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_INT           reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_DOUBLE        reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_STRING        reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_BOOL          reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_WINDOW        reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_SHAPE         reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_TRIANGLE      reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_RECTANGLE     reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_CIRCLE        reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_POINT         reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_TEXT          reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_TABLE         reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_LINE          reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    $end            reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_EL            reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    K_EF            reduce using rule 17 (variable_declaration -> pre_type_modifier type ID ASSIGN expression .)
    AND             shift and go to state 100
    OR              shift and go to state 103

    boolean_operator               shift and go to state 102

state 124

    (91) function_header -> pre_type_modifier type ID LPAREN push_scope . opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag
    (92) opt_argument_list -> . argument_list
    (93) opt_argument_list -> .
    (94) argument_list -> . argument_list COMMA argument
    (95) argument_list -> . argument
    (96) argument -> . pre_type_modifier type ID
    (19) pre_type_modifier -> .
    (20) pre_type_modifier -> . K_LIST

    RPAREN          reduce using rule 93 (opt_argument_list -> .)
    K_INT           reduce using rule 19 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 19 (pre_type_modifier -> .)
    K_STRING        reduce using rule 19 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 19 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 19 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 19 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 19 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 19 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 19 (pre_type_modifier -> .)
    K_POINT         reduce using rule 19 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 19 (pre_type_modifier -> .)
    K_TABLE         reduce using rule 19 (pre_type_modifier -> .)
    K_LINE          reduce using rule 19 (pre_type_modifier -> .)
    K_LIST          shift and go to state 15

    opt_argument_list              shift and go to state 129
    argument                       shift and go to state 130
    pre_type_modifier              shift and go to state 131
    argument_list                  shift and go to state 132

state 125

    (14) parameter_list -> parameter_list COMMA expression .
    (34) expression -> expression . boolean_operator expression_pre_term
    (47) boolean_operator -> . AND
    (48) boolean_operator -> . OR

    COMMA           reduce using rule 14 (parameter_list -> parameter_list COMMA expression .)
    RPAREN          reduce using rule 14 (parameter_list -> parameter_list COMMA expression .)
    AND             shift and go to state 100
    OR              shift and go to state 103

    boolean_operator               shift and go to state 102

state 126

    (64) unary_expression -> NEG LPAREN expression RPAREN .

    PLUS            reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    MINUS           reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    TIMES           reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    MOD             reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    GT              reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    LT              reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    GEQ             reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    LEQ             reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    EQ              reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    NEQ             reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    RPAREN          reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    AND             reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    OR              reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    ID              reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    K_CONTINUE      reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    K_BREAK         reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    K_DONE          reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    K_LIST          reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    K_IF            reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    K_WHILE         reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    K_INT           reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    K_DOUBLE        reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    K_STRING        reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    K_BOOL          reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    K_WINDOW        reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    K_SHAPE         reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    K_TRIANGLE      reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    K_RECTANGLE     reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    K_CIRCLE        reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    K_POINT         reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    K_TEXT          reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    K_TABLE         reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    K_LINE          reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    $end            reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    K_END           reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    K_EL            reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    K_EF            reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)
    COMMA           reduce using rule 64 (unary_expression -> NEG LPAREN expression RPAREN .)


state 127

    (77) if_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list .
    (84) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN opt_parameter_list RPAREN
    (16) variable_declaration -> . pre_type_modifier type ID
    (17) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (18) variable_declaration -> . ID ASSIGN expression
    (76) selection_statement -> . if_statement else_if_statement_list else_statement K_END
    (85) iteration_statement -> . iteration_statement_header compound_statement_list K_END
    (87) jump_statement -> . K_CONTINUE
    (88) jump_statement -> . K_BREAK
    (89) jump_statement -> . K_DONE
    (19) pre_type_modifier -> .
    (20) pre_type_modifier -> . K_LIST
    (77) if_statement -> . K_IF LPAREN expression RPAREN push_scope compound_statement_list
    (86) iteration_statement_header -> . K_WHILE LPAREN expression RPAREN

    K_EL            reduce using rule 77 (if_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list .)
    K_EF            reduce using rule 77 (if_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list .)
    K_END           reduce using rule 77 (if_statement -> K_IF LPAREN expression RPAREN push_scope compound_statement_list .)
    ID              shift and go to state 17
    K_CONTINUE      shift and go to state 12
    K_BREAK         shift and go to state 13
    K_DONE          shift and go to state 21
    K_INT           reduce using rule 19 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 19 (pre_type_modifier -> .)
    K_STRING        reduce using rule 19 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 19 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 19 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 19 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 19 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 19 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 19 (pre_type_modifier -> .)
    K_POINT         reduce using rule 19 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 19 (pre_type_modifier -> .)
    K_TABLE         reduce using rule 19 (pre_type_modifier -> .)
    K_LINE          reduce using rule 19 (pre_type_modifier -> .)
    K_LIST          shift and go to state 15
    K_IF            shift and go to state 3
    K_WHILE         shift and go to state 6

    jump_statement                 shift and go to state 18
    if_statement                   shift and go to state 11
    compound_statement             shift and go to state 70
    iteration_statement            shift and go to state 4
    selection_statement            shift and go to state 8
    function_call_statement        shift and go to state 20
    iteration_statement_header     shift and go to state 14
    pre_type_modifier              shift and go to state 71
    variable_declaration           shift and go to state 5

state 128

    (80) else_if_statement -> K_EF LPAREN expression RPAREN . push_scope compound_statement_list
    (97) push_scope -> .

    ID              reduce using rule 97 (push_scope -> .)
    K_CONTINUE      reduce using rule 97 (push_scope -> .)
    K_BREAK         reduce using rule 97 (push_scope -> .)
    K_DONE          reduce using rule 97 (push_scope -> .)
    K_LIST          reduce using rule 97 (push_scope -> .)
    K_IF            reduce using rule 97 (push_scope -> .)
    K_WHILE         reduce using rule 97 (push_scope -> .)
    K_INT           reduce using rule 97 (push_scope -> .)
    K_DOUBLE        reduce using rule 97 (push_scope -> .)
    K_STRING        reduce using rule 97 (push_scope -> .)
    K_BOOL          reduce using rule 97 (push_scope -> .)
    K_WINDOW        reduce using rule 97 (push_scope -> .)
    K_SHAPE         reduce using rule 97 (push_scope -> .)
    K_TRIANGLE      reduce using rule 97 (push_scope -> .)
    K_RECTANGLE     reduce using rule 97 (push_scope -> .)
    K_CIRCLE        reduce using rule 97 (push_scope -> .)
    K_POINT         reduce using rule 97 (push_scope -> .)
    K_TEXT          reduce using rule 97 (push_scope -> .)
    K_TABLE         reduce using rule 97 (push_scope -> .)
    K_LINE          reduce using rule 97 (push_scope -> .)
    K_EL            reduce using rule 97 (push_scope -> .)
    K_EF            reduce using rule 97 (push_scope -> .)
    K_END           reduce using rule 97 (push_scope -> .)

    push_scope                     shift and go to state 133

state 129

    (91) function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list . RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag

    RPAREN          shift and go to state 134


state 130

    (95) argument_list -> argument .

    COMMA           reduce using rule 95 (argument_list -> argument .)
    RPAREN          reduce using rule 95 (argument_list -> argument .)


state 131

    (96) argument -> pre_type_modifier . type ID
    (21) type -> . K_INT
    (22) type -> . K_DOUBLE
    (23) type -> . K_STRING
    (24) type -> . K_BOOL
    (25) type -> . K_WINDOW
    (26) type -> . K_SHAPE
    (27) type -> . K_TRIANGLE
    (28) type -> . K_RECTANGLE
    (29) type -> . K_CIRCLE
    (30) type -> . K_POINT
    (31) type -> . K_TEXT
    (32) type -> . K_TABLE
    (33) type -> . K_LINE

    K_INT           shift and go to state 34
    K_DOUBLE        shift and go to state 27
    K_STRING        shift and go to state 28
    K_BOOL          shift and go to state 35
    K_WINDOW        shift and go to state 40
    K_SHAPE         shift and go to state 31
    K_TRIANGLE      shift and go to state 29
    K_RECTANGLE     shift and go to state 39
    K_CIRCLE        shift and go to state 30
    K_POINT         shift and go to state 33
    K_TEXT          shift and go to state 32
    K_TABLE         shift and go to state 37
    K_LINE          shift and go to state 38

    type                           shift and go to state 135

state 132

    (92) opt_argument_list -> argument_list .
    (94) argument_list -> argument_list . COMMA argument

    RPAREN          reduce using rule 92 (opt_argument_list -> argument_list .)
    COMMA           shift and go to state 136


state 133

    (80) else_if_statement -> K_EF LPAREN expression RPAREN push_scope . compound_statement_list
    (83) compound_statement_list -> .
    (84) compound_statement_list -> . compound_statement_list compound_statement

    ID              reduce using rule 83 (compound_statement_list -> .)
    K_CONTINUE      reduce using rule 83 (compound_statement_list -> .)
    K_BREAK         reduce using rule 83 (compound_statement_list -> .)
    K_DONE          reduce using rule 83 (compound_statement_list -> .)
    K_LIST          reduce using rule 83 (compound_statement_list -> .)
    K_IF            reduce using rule 83 (compound_statement_list -> .)
    K_WHILE         reduce using rule 83 (compound_statement_list -> .)
    K_INT           reduce using rule 83 (compound_statement_list -> .)
    K_DOUBLE        reduce using rule 83 (compound_statement_list -> .)
    K_STRING        reduce using rule 83 (compound_statement_list -> .)
    K_BOOL          reduce using rule 83 (compound_statement_list -> .)
    K_WINDOW        reduce using rule 83 (compound_statement_list -> .)
    K_SHAPE         reduce using rule 83 (compound_statement_list -> .)
    K_TRIANGLE      reduce using rule 83 (compound_statement_list -> .)
    K_RECTANGLE     reduce using rule 83 (compound_statement_list -> .)
    K_CIRCLE        reduce using rule 83 (compound_statement_list -> .)
    K_POINT         reduce using rule 83 (compound_statement_list -> .)
    K_TEXT          reduce using rule 83 (compound_statement_list -> .)
    K_TABLE         reduce using rule 83 (compound_statement_list -> .)
    K_LINE          reduce using rule 83 (compound_statement_list -> .)
    K_EL            reduce using rule 83 (compound_statement_list -> .)
    K_EF            reduce using rule 83 (compound_statement_list -> .)
    K_END           reduce using rule 83 (compound_statement_list -> .)

    compound_statement_list        shift and go to state 137

state 134

    (91) function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN . ASSIGN set_ignore_flag primary_expression unset_ignore_flag

    ASSIGN          shift and go to state 138


state 135

    (96) argument -> pre_type_modifier type . ID

    ID              shift and go to state 139


state 136

    (94) argument_list -> argument_list COMMA . argument
    (96) argument -> . pre_type_modifier type ID
    (19) pre_type_modifier -> .
    (20) pre_type_modifier -> . K_LIST

    K_INT           reduce using rule 19 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 19 (pre_type_modifier -> .)
    K_STRING        reduce using rule 19 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 19 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 19 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 19 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 19 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 19 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 19 (pre_type_modifier -> .)
    K_POINT         reduce using rule 19 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 19 (pre_type_modifier -> .)
    K_TABLE         reduce using rule 19 (pre_type_modifier -> .)
    K_LINE          reduce using rule 19 (pre_type_modifier -> .)
    K_LIST          shift and go to state 15

    pre_type_modifier              shift and go to state 131
    argument                       shift and go to state 140

state 137

    (80) else_if_statement -> K_EF LPAREN expression RPAREN push_scope compound_statement_list .
    (84) compound_statement_list -> compound_statement_list . compound_statement
    (6) compound_statement -> . function_call_statement
    (7) compound_statement -> . variable_declaration
    (8) compound_statement -> . selection_statement
    (9) compound_statement -> . iteration_statement
    (10) compound_statement -> . jump_statement
    (11) function_call_statement -> . ID LPAREN opt_parameter_list RPAREN
    (16) variable_declaration -> . pre_type_modifier type ID
    (17) variable_declaration -> . pre_type_modifier type ID ASSIGN expression
    (18) variable_declaration -> . ID ASSIGN expression
    (76) selection_statement -> . if_statement else_if_statement_list else_statement K_END
    (85) iteration_statement -> . iteration_statement_header compound_statement_list K_END
    (87) jump_statement -> . K_CONTINUE
    (88) jump_statement -> . K_BREAK
    (89) jump_statement -> . K_DONE
    (19) pre_type_modifier -> .
    (20) pre_type_modifier -> . K_LIST
    (77) if_statement -> . K_IF LPAREN expression RPAREN push_scope compound_statement_list
    (86) iteration_statement_header -> . K_WHILE LPAREN expression RPAREN

    K_EL            reduce using rule 80 (else_if_statement -> K_EF LPAREN expression RPAREN push_scope compound_statement_list .)
    K_EF            reduce using rule 80 (else_if_statement -> K_EF LPAREN expression RPAREN push_scope compound_statement_list .)
    K_END           reduce using rule 80 (else_if_statement -> K_EF LPAREN expression RPAREN push_scope compound_statement_list .)
    ID              shift and go to state 17
    K_CONTINUE      shift and go to state 12
    K_BREAK         shift and go to state 13
    K_DONE          shift and go to state 21
    K_INT           reduce using rule 19 (pre_type_modifier -> .)
    K_DOUBLE        reduce using rule 19 (pre_type_modifier -> .)
    K_STRING        reduce using rule 19 (pre_type_modifier -> .)
    K_BOOL          reduce using rule 19 (pre_type_modifier -> .)
    K_WINDOW        reduce using rule 19 (pre_type_modifier -> .)
    K_SHAPE         reduce using rule 19 (pre_type_modifier -> .)
    K_TRIANGLE      reduce using rule 19 (pre_type_modifier -> .)
    K_RECTANGLE     reduce using rule 19 (pre_type_modifier -> .)
    K_CIRCLE        reduce using rule 19 (pre_type_modifier -> .)
    K_POINT         reduce using rule 19 (pre_type_modifier -> .)
    K_TEXT          reduce using rule 19 (pre_type_modifier -> .)
    K_TABLE         reduce using rule 19 (pre_type_modifier -> .)
    K_LINE          reduce using rule 19 (pre_type_modifier -> .)
    K_LIST          shift and go to state 15
    K_IF            shift and go to state 3
    K_WHILE         shift and go to state 6

    jump_statement                 shift and go to state 18
    if_statement                   shift and go to state 11
    compound_statement             shift and go to state 70
    iteration_statement            shift and go to state 4
    selection_statement            shift and go to state 8
    function_call_statement        shift and go to state 20
    iteration_statement_header     shift and go to state 14
    pre_type_modifier              shift and go to state 71
    variable_declaration           shift and go to state 5

state 138

    (91) function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN . set_ignore_flag primary_expression unset_ignore_flag
    (98) set_ignore_flag -> .

    MINUS           reduce using rule 98 (set_ignore_flag -> .)
    ID              reduce using rule 98 (set_ignore_flag -> .)
    K_NULL          reduce using rule 98 (set_ignore_flag -> .)
    K_TRUE          reduce using rule 98 (set_ignore_flag -> .)
    K_FALSE         reduce using rule 98 (set_ignore_flag -> .)
    STRING          reduce using rule 98 (set_ignore_flag -> .)
    INTEGER         reduce using rule 98 (set_ignore_flag -> .)
    DOUBLE          reduce using rule 98 (set_ignore_flag -> .)

    set_ignore_flag                shift and go to state 141

state 139

    (96) argument -> pre_type_modifier type ID .

    COMMA           reduce using rule 96 (argument -> pre_type_modifier type ID .)
    RPAREN          reduce using rule 96 (argument -> pre_type_modifier type ID .)


state 140

    (94) argument_list -> argument_list COMMA argument .

    COMMA           reduce using rule 94 (argument_list -> argument_list COMMA argument .)
    RPAREN          reduce using rule 94 (argument_list -> argument_list COMMA argument .)


state 141

    (91) function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag . primary_expression unset_ignore_flag
    (49) primary_expression -> . constant
    (50) primary_expression -> . id_expression
    (51) primary_expression -> . function_call_statement
    (52) primary_expression -> . MINUS primary_expression
    (53) primary_expression -> . null_expression
    (55) constant -> . boolean_constant
    (56) constant -> . number
    (57) constant -> . string_constant
    (54) id_expression -> . ID
    (11) function_call_statement -> . ID LPAREN opt_parameter_list RPAREN
    (65) null_expression -> . K_NULL
    (59) boolean_constant -> . K_TRUE
    (60) boolean_constant -> . K_FALSE
    (72) number -> . integer_number
    (73) number -> . double_number
    (58) string_constant -> . STRING
    (74) integer_number -> . INTEGER
    (75) double_number -> . DOUBLE

    MINUS           shift and go to state 52
    ID              shift and go to state 62
    K_NULL          shift and go to state 61
    K_TRUE          shift and go to state 49
    K_FALSE         shift and go to state 45
    STRING          shift and go to state 58
    INTEGER         shift and go to state 55
    DOUBLE          shift and go to state 65

    id_expression                  shift and go to state 56
    null_expression                shift and go to state 57
    constant                       shift and go to state 44
    string_constant                shift and go to state 53
    function_call_statement        shift and go to state 63
    primary_expression             shift and go to state 142
    boolean_constant               shift and go to state 66
    number                         shift and go to state 48
    double_number                  shift and go to state 51
    integer_number                 shift and go to state 50

state 142

    (91) function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression . unset_ignore_flag
    (99) unset_ignore_flag -> .

    K_END           reduce using rule 99 (unset_ignore_flag -> .)
    ID              reduce using rule 99 (unset_ignore_flag -> .)
    K_CONTINUE      reduce using rule 99 (unset_ignore_flag -> .)
    K_BREAK         reduce using rule 99 (unset_ignore_flag -> .)
    K_DONE          reduce using rule 99 (unset_ignore_flag -> .)
    K_LIST          reduce using rule 99 (unset_ignore_flag -> .)
    K_IF            reduce using rule 99 (unset_ignore_flag -> .)
    K_WHILE         reduce using rule 99 (unset_ignore_flag -> .)
    K_INT           reduce using rule 99 (unset_ignore_flag -> .)
    K_DOUBLE        reduce using rule 99 (unset_ignore_flag -> .)
    K_STRING        reduce using rule 99 (unset_ignore_flag -> .)
    K_BOOL          reduce using rule 99 (unset_ignore_flag -> .)
    K_WINDOW        reduce using rule 99 (unset_ignore_flag -> .)
    K_SHAPE         reduce using rule 99 (unset_ignore_flag -> .)
    K_TRIANGLE      reduce using rule 99 (unset_ignore_flag -> .)
    K_RECTANGLE     reduce using rule 99 (unset_ignore_flag -> .)
    K_CIRCLE        reduce using rule 99 (unset_ignore_flag -> .)
    K_POINT         reduce using rule 99 (unset_ignore_flag -> .)
    K_TEXT          reduce using rule 99 (unset_ignore_flag -> .)
    K_TABLE         reduce using rule 99 (unset_ignore_flag -> .)
    K_LINE          reduce using rule 99 (unset_ignore_flag -> .)

    unset_ignore_flag              shift and go to state 143

state 143

    (91) function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .

    K_END           reduce using rule 91 (function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    ID              reduce using rule 91 (function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_CONTINUE      reduce using rule 91 (function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_BREAK         reduce using rule 91 (function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_DONE          reduce using rule 91 (function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_LIST          reduce using rule 91 (function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_IF            reduce using rule 91 (function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_WHILE         reduce using rule 91 (function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_INT           reduce using rule 91 (function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_DOUBLE        reduce using rule 91 (function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_STRING        reduce using rule 91 (function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_BOOL          reduce using rule 91 (function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_WINDOW        reduce using rule 91 (function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_SHAPE         reduce using rule 91 (function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_TRIANGLE      reduce using rule 91 (function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_RECTANGLE     reduce using rule 91 (function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_CIRCLE        reduce using rule 91 (function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_POINT         reduce using rule 91 (function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_TEXT          reduce using rule 91 (function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_TABLE         reduce using rule 91 (function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)
    K_LINE          reduce using rule 91 (function_header -> pre_type_modifier type ID LPAREN push_scope opt_argument_list RPAREN ASSIGN set_ignore_flag primary_expression unset_ignore_flag .)

