
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\x05\x1bfS\xfa\\\n\xecu\xa9\x92o\xbd@\xd4&'
    
_lr_action_items = {'DIVIDE':([39,41,42,48,49,51,52,62,77,78,79,80,82,88,90,96,105,106,107,110,111,118,],[75,-68,-74,-70,-71,-75,-72,-11,-73,-75,-72,-71,-74,-72,-71,-10,-67,-66,-65,75,75,-69,]),'K_DOUBLE':([0,1,3,5,6,8,9,10,11,12,13,14,15,17,18,19,35,37,38,39,41,42,45,47,48,49,51,52,53,55,56,57,58,59,60,61,62,72,77,78,79,80,82,92,94,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,120,121,122,123,125,127,129,132,133,136,137,],[-2,-17,-20,-8,-6,-4,-7,-3,-85,-86,-18,23,-19,-9,-5,-87,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-55,-73,-75,-72,-71,-74,-82,-82,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,-17,-46,-17,-15,-83,-84,-82,-76,-17,-82,-17,]),'NEG':([20,21,33,34,36,46,73,93,95,97,134,],[36,36,36,36,36,36,36,36,36,36,36,]),'K_TRUE':([20,21,33,34,36,46,65,66,67,68,69,70,71,73,93,95,97,134,],[38,38,38,38,38,38,-58,-56,38,-59,-57,-60,-61,38,38,38,38,38,]),'K_END':([5,6,9,11,12,17,18,19,35,37,38,39,41,42,45,47,48,49,51,52,53,55,56,57,58,59,60,61,62,72,77,78,79,80,82,92,94,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,120,121,122,123,125,126,127,128,129,130,132,133,136,137,],[-8,-6,-7,-85,-86,-9,-5,-87,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-55,-73,-75,-72,-71,-74,-82,-82,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,-77,-46,127,-15,-83,-80,-84,132,-82,-78,-76,-81,-82,-79,]),'K_STRING':([0,1,3,5,6,8,9,10,11,12,13,14,15,17,18,19,35,37,38,39,41,42,45,47,48,49,51,52,53,55,56,57,58,59,60,61,62,72,77,78,79,80,82,92,94,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,120,121,122,123,125,127,129,132,133,136,137,],[-2,-17,-20,-8,-6,-4,-7,-3,-85,-86,-18,30,-19,-9,-5,-87,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-55,-73,-75,-72,-71,-74,-82,-82,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,-17,-46,-17,-15,-83,-84,-82,-76,-17,-82,-17,]),'K_IF':([0,1,5,6,8,9,10,11,12,17,18,19,35,37,38,39,41,42,45,47,48,49,51,52,53,55,56,57,58,59,60,61,62,72,77,78,79,80,82,92,94,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,120,121,122,123,125,127,129,132,133,136,137,],[-2,4,-8,-6,-4,-7,-3,-85,-86,-9,-5,-87,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-55,-73,-75,-72,-71,-74,-82,-82,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,4,-46,4,-15,-83,-84,-82,-76,4,-82,4,]),'MINUS':([20,21,33,34,36,39,40,41,42,43,46,48,49,51,52,57,62,65,66,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,85,88,89,90,93,95,96,97,105,106,107,108,109,110,111,118,134,],[40,40,40,40,40,-64,40,-68,-74,85,40,-70,-71,-75,-72,85,-11,-58,-56,-59,-57,-60,-61,40,40,40,40,-73,-75,-72,-71,40,-74,40,40,40,-72,85,-71,40,40,-10,40,-67,-66,-65,85,85,-62,-63,-69,40,]),'NEQ':([35,38,39,41,42,43,44,45,48,49,51,52,53,56,57,58,59,62,77,78,79,80,82,88,89,90,96,105,106,107,110,111,114,115,116,118,],[71,-44,-64,-68,-41,71,71,-36,-70,-39,-43,-42,-45,71,71,71,-36,-11,-73,-75,-72,-71,-74,-42,71,-39,-10,-67,-66,-65,-62,-63,-38,-37,-35,-69,]),'K_WHILE':([0,1,5,6,8,9,10,11,12,17,18,19,35,37,38,39,41,42,45,47,48,49,51,52,53,55,56,57,58,59,60,61,62,72,77,78,79,80,82,92,94,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,120,121,122,123,125,127,129,132,133,136,137,],[-2,7,-8,-6,-4,-7,-3,-85,-86,-9,-5,-87,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-55,-73,-75,-72,-71,-74,-82,-82,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,7,-46,7,-15,-83,-84,-82,-76,7,-82,7,]),'K_LIST':([0,1,5,6,8,9,10,11,12,17,18,19,35,37,38,39,41,42,45,47,48,49,51,52,53,55,56,57,58,59,60,61,62,72,77,78,79,80,82,92,94,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,120,121,122,123,125,127,129,132,133,136,137,],[-2,13,-8,-6,-4,-7,-3,-85,-86,-9,-5,-87,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-55,-73,-75,-72,-71,-74,-82,-82,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,13,-46,13,-15,-83,-84,-82,-76,13,-82,13,]),'GEQ':([35,38,39,41,42,43,44,45,48,49,51,52,53,56,57,58,59,62,77,78,79,80,82,88,89,90,96,105,106,107,110,111,114,115,116,118,],[65,-44,-64,-68,-41,65,65,-36,-70,-39,-43,-42,-45,65,65,65,-36,-11,-73,-75,-72,-71,-74,-42,65,-39,-10,-67,-66,-65,-62,-63,-38,-37,-35,-69,]),'EQ':([35,38,39,41,42,43,44,45,48,49,51,52,53,56,57,58,59,62,77,78,79,80,82,88,89,90,96,105,106,107,110,111,114,115,116,118,],[70,-44,-64,-68,-41,70,70,-36,-70,-39,-43,-42,-45,70,70,70,-36,-11,-73,-75,-72,-71,-74,-42,70,-39,-10,-67,-66,-65,-62,-63,-38,-37,-35,-69,]),'K_SET':([0,1,5,6,8,9,10,11,12,17,18,19,35,37,38,39,41,42,45,47,48,49,51,52,53,55,56,57,58,59,60,61,62,72,77,78,79,80,82,92,94,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,120,121,122,123,125,127,129,132,133,136,137,],[-2,3,-8,-6,-4,-7,-3,-85,-86,-9,-5,-87,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-55,-73,-75,-72,-71,-74,-82,-82,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,3,-46,3,-15,-83,-84,-82,-76,3,-82,3,]),'PLUS':([39,41,42,43,44,45,48,49,51,52,57,58,59,62,77,78,79,80,82,88,89,90,96,105,106,107,108,109,110,111,112,113,114,115,116,118,],[-64,-68,-74,84,87,-36,-70,-71,-75,-72,84,87,-36,-11,-73,-75,-72,-71,-74,-72,84,-71,-10,-67,-66,-65,84,84,-62,-63,87,-36,-38,-37,-35,-69,]),'LT':([35,38,39,41,42,43,44,45,48,49,51,52,53,56,57,58,59,62,77,78,79,80,82,88,89,90,96,105,106,107,110,111,114,115,116,118,],[69,-44,-64,-68,-41,69,69,-36,-70,-39,-43,-42,-45,69,69,69,-36,-11,-73,-75,-72,-71,-74,-42,69,-39,-10,-67,-66,-65,-62,-63,-38,-37,-35,-69,]),'COMMA':([35,37,38,39,41,42,45,47,48,49,51,52,53,56,57,58,59,60,62,63,64,72,77,78,79,80,82,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,121,124,],[-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-32,-34,-31,-36,-33,-11,97,-13,-55,-73,-75,-72,-71,-74,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,-46,-12,]),'K_EL':([5,6,9,11,12,17,18,19,35,37,38,39,41,42,45,47,48,49,51,52,53,55,56,57,58,59,60,61,62,72,77,78,79,80,82,92,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,120,121,123,125,126,127,130,132,136,137,],[-8,-6,-7,-85,-86,-9,-5,-87,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-55,-73,-75,-72,-71,-74,-82,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,-77,-46,-15,-83,129,-84,-78,-76,-82,-79,]),'INTEGER':([20,21,33,34,36,40,46,65,66,67,68,69,70,71,73,74,75,76,81,83,84,85,93,95,97,134,],[42,42,42,42,42,82,42,-58,-56,101,-59,-57,-60,-61,42,82,82,82,82,82,82,82,42,42,42,42,]),'K_TRIANGLE':([0,1,3,5,6,8,9,10,11,12,13,14,15,17,18,19,35,37,38,39,41,42,45,47,48,49,51,52,53,55,56,57,58,59,60,61,62,72,77,78,79,80,82,92,94,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,120,121,122,123,125,127,129,132,133,136,137,],[-2,-17,-20,-8,-6,-4,-7,-3,-85,-86,-18,24,-19,-9,-5,-87,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-55,-73,-75,-72,-71,-74,-82,-82,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,-17,-46,-17,-15,-83,-84,-82,-76,-17,-82,-17,]),'ASSIGN':([16,55,],[33,95,]),'K_CIRCLE':([0,1,3,5,6,8,9,10,11,12,13,14,15,17,18,19,35,37,38,39,41,42,45,47,48,49,51,52,53,55,56,57,58,59,60,61,62,72,77,78,79,80,82,92,94,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,120,121,122,123,125,127,129,132,133,136,137,],[-2,-17,-20,-8,-6,-4,-7,-3,-85,-86,-18,32,-19,-9,-5,-87,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-55,-73,-75,-72,-71,-74,-82,-82,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,-17,-46,-17,-15,-83,-84,-82,-76,-17,-82,-17,]),'$end':([0,1,2,5,6,8,9,10,11,12,17,18,19,35,37,38,39,41,42,45,47,48,49,51,52,53,55,56,57,58,59,60,61,62,72,77,78,79,80,82,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,121,123,127,132,],[-2,-1,0,-8,-6,-4,-7,-3,-85,-86,-9,-5,-87,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-55,-73,-75,-72,-71,-74,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,-46,-15,-84,-76,]),'GT':([35,38,39,41,42,43,44,45,48,49,51,52,53,56,57,58,59,62,77,78,79,80,82,88,89,90,96,105,106,107,110,111,114,115,116,118,],[66,-44,-64,-68,-41,66,66,-36,-70,-39,-43,-42,-45,66,66,66,-36,-11,-73,-75,-72,-71,-74,-42,66,-39,-10,-67,-66,-65,-62,-63,-38,-37,-35,-69,]),'STRING':([20,21,33,34,36,46,65,66,67,68,69,70,71,73,86,87,93,95,97,134,],[45,45,59,59,45,45,-58,-56,98,-59,-57,-60,-61,45,113,114,45,59,59,45,]),'K_SHAPE':([0,1,3,5,6,8,9,10,11,12,13,14,15,17,18,19,35,37,38,39,41,42,45,47,48,49,51,52,53,55,56,57,58,59,60,61,62,72,77,78,79,80,82,92,94,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,120,121,122,123,125,127,129,132,133,136,137,],[-2,-17,-20,-8,-6,-4,-7,-3,-85,-86,-18,26,-19,-9,-5,-87,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-55,-73,-75,-72,-71,-74,-82,-82,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,-17,-46,-17,-15,-83,-84,-82,-76,-17,-82,-17,]),'K_CONTINUE':([0,1,5,6,8,9,10,11,12,17,18,19,35,37,38,39,41,42,45,47,48,49,51,52,53,55,56,57,58,59,60,61,62,72,77,78,79,80,82,92,94,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,120,121,122,123,125,127,129,132,133,136,137,],[-2,11,-8,-6,-4,-7,-3,-85,-86,-9,-5,-87,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-55,-73,-75,-72,-71,-74,-82,-82,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,11,-46,11,-15,-83,-84,-82,-76,11,-82,11,]),'K_BREAK':([0,1,5,6,8,9,10,11,12,17,18,19,35,37,38,39,41,42,45,47,48,49,51,52,53,55,56,57,58,59,60,61,62,72,77,78,79,80,82,92,94,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,120,121,122,123,125,127,129,132,133,136,137,],[-2,12,-8,-6,-4,-7,-3,-85,-86,-9,-5,-87,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-55,-73,-75,-72,-71,-74,-82,-82,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,12,-46,12,-15,-83,-84,-82,-76,12,-82,12,]),'K_TEXT':([0,1,3,5,6,8,9,10,11,12,13,14,15,17,18,19,35,37,38,39,41,42,45,47,48,49,51,52,53,55,56,57,58,59,60,61,62,72,77,78,79,80,82,92,94,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,120,121,122,123,125,127,129,132,133,136,137,],[-2,-17,-20,-8,-6,-4,-7,-3,-85,-86,-18,27,-19,-9,-5,-87,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-55,-73,-75,-72,-71,-74,-82,-82,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,-17,-46,-17,-15,-83,-84,-82,-76,-17,-82,-17,]),'TIMES':([39,41,42,48,49,51,52,62,77,78,79,80,82,88,90,96,105,106,107,110,111,118,],[76,-68,-74,-70,-71,-75,-72,-11,-73,-75,-72,-71,-74,-72,-71,-10,-67,-66,-65,76,76,-69,]),'K_INT':([0,1,3,5,6,8,9,10,11,12,13,14,15,17,18,19,35,37,38,39,41,42,45,47,48,49,51,52,53,55,56,57,58,59,60,61,62,72,77,78,79,80,82,92,94,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,120,121,122,123,125,127,129,132,133,136,137,],[-2,-17,-20,-8,-6,-4,-7,-3,-85,-86,-18,29,-19,-9,-5,-87,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-55,-73,-75,-72,-71,-74,-82,-82,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,-17,-46,-17,-15,-83,-84,-82,-76,-17,-82,-17,]),'LPAREN':([4,7,16,20,21,33,34,36,40,46,49,65,66,68,69,70,71,73,74,75,76,80,81,83,84,85,90,93,95,97,103,117,131,134,],[20,21,34,46,46,46,46,46,81,46,34,-58,-56,-59,-57,-60,-61,46,81,81,81,34,81,81,81,81,34,46,46,46,34,34,134,46,]),'RPAREN':([34,35,37,38,39,41,42,45,47,48,49,50,51,52,53,54,56,57,58,59,60,62,63,64,72,77,78,79,80,82,88,89,90,91,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,119,121,124,135,],[62,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,92,-43,-42,-45,94,-32,-34,-31,-36,-33,-11,96,-13,-55,-73,-75,-72,-71,-74,-42,118,-39,119,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,118,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,-46,-12,136,]),'K_DICT':([0,1,5,6,8,9,10,11,12,17,18,19,35,37,38,39,41,42,45,47,48,49,51,52,53,55,56,57,58,59,60,61,62,72,77,78,79,80,82,92,94,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,120,121,122,123,125,127,129,132,133,136,137,],[-2,15,-8,-6,-4,-7,-3,-85,-86,-9,-5,-87,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-55,-73,-75,-72,-71,-74,-82,-82,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,15,-46,15,-15,-83,-84,-82,-76,15,-82,15,]),'ID':([0,1,5,6,8,9,10,11,12,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,45,46,47,48,49,51,52,53,55,56,57,58,59,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,120,121,122,123,125,127,129,132,133,134,136,137,],[-2,16,-8,-6,-4,-7,-3,-85,-86,-9,-5,-87,49,49,-24,-22,-27,55,-26,-30,-28,-21,-23,-25,-29,49,49,-54,49,-47,-44,-64,80,-68,-41,-40,90,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-58,-56,103,-59,-57,-60,-61,-55,49,80,80,80,-73,-75,-72,-71,80,-74,80,80,80,117,-82,49,-82,49,-10,49,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,16,-46,16,-15,-83,-84,-82,-76,16,49,-82,16,]),'AND':([35,37,38,39,41,42,45,47,48,49,51,52,53,56,59,62,72,77,78,79,80,82,88,90,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,121,],[-54,73,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-54,-40,-11,-55,-73,-75,-72,-71,-74,-42,-39,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,73,]),'K_BOOL':([0,1,3,5,6,8,9,10,11,12,13,14,15,17,18,19,35,37,38,39,41,42,45,47,48,49,51,52,53,55,56,57,58,59,60,61,62,72,77,78,79,80,82,92,94,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,120,121,122,123,125,127,129,132,133,136,137,],[-2,-17,-20,-8,-6,-4,-7,-3,-85,-86,-18,22,-19,-9,-5,-87,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-55,-73,-75,-72,-71,-74,-82,-82,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,-17,-46,-17,-15,-83,-84,-82,-76,-17,-82,-17,]),'DOUBLE':([20,21,33,34,36,40,46,65,66,67,68,69,70,71,73,74,75,76,81,83,84,85,93,95,97,134,],[51,51,51,51,51,78,51,-58,-56,99,-59,-57,-60,-61,51,78,78,78,78,78,78,78,51,51,51,51,]),'K_DONE':([0,1,5,6,8,9,10,11,12,17,18,19,35,37,38,39,41,42,45,47,48,49,51,52,53,55,56,57,58,59,60,61,62,72,77,78,79,80,82,92,94,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,120,121,122,123,125,127,129,132,133,136,137,],[-2,19,-8,-6,-4,-7,-3,-85,-86,-9,-5,-87,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-55,-73,-75,-72,-71,-74,-82,-82,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,19,-46,19,-15,-83,-84,-82,-76,19,-82,19,]),'LEQ':([35,38,39,41,42,43,44,45,48,49,51,52,53,56,57,58,59,62,77,78,79,80,82,88,89,90,96,105,106,107,110,111,114,115,116,118,],[68,-44,-64,-68,-41,68,68,-36,-70,-39,-43,-42,-45,68,68,68,-36,-11,-73,-75,-72,-71,-74,-42,68,-39,-10,-67,-66,-65,-62,-63,-38,-37,-35,-69,]),'K_RECTANGLE':([0,1,3,5,6,8,9,10,11,12,13,14,15,17,18,19,35,37,38,39,41,42,45,47,48,49,51,52,53,55,56,57,58,59,60,61,62,72,77,78,79,80,82,92,94,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,120,121,122,123,125,127,129,132,133,136,137,],[-2,-17,-20,-8,-6,-4,-7,-3,-85,-86,-18,28,-19,-9,-5,-87,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-55,-73,-75,-72,-71,-74,-82,-82,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,-17,-46,-17,-15,-83,-84,-82,-76,-17,-82,-17,]),'K_WINDOW':([0,1,3,5,6,8,9,10,11,12,13,14,15,17,18,19,35,37,38,39,41,42,45,47,48,49,51,52,53,55,56,57,58,59,60,61,62,72,77,78,79,80,82,92,94,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,120,121,122,123,125,127,129,132,133,136,137,],[-2,-17,-20,-8,-6,-4,-7,-3,-85,-86,-18,31,-19,-9,-5,-87,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-55,-73,-75,-72,-71,-74,-82,-82,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,-17,-46,-17,-15,-83,-84,-82,-76,-17,-82,-17,]),'K_EF':([5,6,9,11,12,17,18,19,35,37,38,39,41,42,45,47,48,49,51,52,53,55,56,57,58,59,60,61,62,72,77,78,79,80,82,92,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,120,121,123,125,126,127,130,132,136,137,],[-8,-6,-7,-85,-86,-9,-5,-87,-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,-43,-42,-45,-14,-32,-34,-31,-36,-33,-16,-11,-55,-73,-75,-72,-71,-74,-82,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,-77,-46,-15,-83,131,-84,-78,-76,-82,-79,]),'K_FALSE':([20,21,33,34,36,46,65,66,67,68,69,70,71,73,93,95,97,134,],[53,53,53,53,53,53,-58,-56,53,-59,-57,-60,-61,53,53,53,53,53,]),'OR':([35,37,38,39,41,42,45,47,48,49,50,51,52,53,54,56,59,60,62,72,77,78,79,80,82,88,90,91,96,98,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,118,119,121,135,],[-54,-47,-44,-64,-68,-41,-40,-49,-70,-39,93,-43,-42,-45,93,-54,-40,93,-11,-55,-73,-75,-72,-71,-74,-42,-39,93,-10,-40,-43,-42,-41,-51,-39,-48,-67,-66,-65,-52,-62,-63,-53,-36,-38,-37,-35,-69,-50,-46,93,]),'MOD':([39,41,42,48,49,51,52,62,77,78,79,80,82,88,90,96,105,106,107,110,111,118,],[74,-68,-74,-70,-71,-75,-72,-11,-73,-75,-72,-71,-74,-72,-71,-10,-67,-66,-65,74,74,-69,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'unary_expression':([20,21,33,34,36,46,67,73,93,95,97,134,],[35,35,56,56,35,35,102,35,35,56,56,35,]),'number':([20,21,33,34,36,40,46,73,74,75,76,81,83,84,85,93,95,97,134,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'arithmetic_term':([20,21,33,34,36,46,73,81,83,84,85,93,95,97,134,],[39,39,39,39,39,39,39,39,39,110,111,39,39,39,39,]),'iteration_statement':([1,120,122,133,137,],[5,5,5,5,5,]),'variable_declaration':([1,120,122,133,137,],[6,6,6,6,6,]),'compound_statement':([1,120,122,133,137,],[8,125,125,125,125,]),'selection_statement':([1,120,122,133,137,],[9,9,9,9,9,]),'program':([0,],[2,]),'statement':([1,],[10,]),'type':([14,],[25,]),'else_if_statement_list':([120,],[126,]),'arithmetic_expression':([20,21,33,34,36,46,73,81,83,93,95,97,134,],[43,43,57,57,43,89,43,108,109,43,57,57,43,]),'string_expression':([20,21,33,34,36,46,73,86,93,95,97,134,],[44,44,58,58,44,44,44,112,44,58,58,44,]),'boolean_term':([20,21,33,34,46,93,95,97,134,],[37,37,37,37,37,121,37,37,37,]),'string_term':([87,],[116,]),'boolean_factor':([20,21,33,34,36,46,73,93,95,97,134,],[47,47,47,47,72,47,104,47,47,47,47,]),'pre_type_modifier':([1,120,122,133,137,],[14,14,14,14,14,]),'else_statement':([126,],[128,]),'jump_statement':([1,120,122,133,137,],[17,17,17,17,17,]),'else_if_statement':([126,],[130,]),'comparator':([35,43,44,56,57,58,89,],[67,83,86,67,83,86,83,]),'parameter_list':([34,],[63,]),'boolean_expression':([20,21,33,34,46,95,97,134,],[50,54,60,60,91,60,60,135,]),'arithmetic_factor':([20,21,33,34,36,40,46,73,74,75,76,81,83,84,85,93,95,97,134,],[41,41,41,41,41,77,41,41,105,106,107,41,41,41,41,41,41,41,41,]),'function_call_statement':([1,20,21,33,34,36,40,46,67,73,74,75,76,81,83,84,85,87,93,95,97,120,122,133,134,137,],[18,52,52,52,52,52,79,88,100,52,79,79,79,79,79,79,79,115,52,52,52,18,18,18,52,18,]),'statement_list':([0,],[1,]),'expression':([33,34,95,97,],[61,64,123,124,]),'compound_statement_list':([92,94,129,136,],[120,122,133,137,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','lex_yacc.py',117),
  ('statement_list -> <empty>','statement_list',0,'p_statement_list','lex_yacc.py',125),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','lex_yacc.py',126),
  ('statement -> compound_statement','statement',1,'p_statement','lex_yacc.py',136),
  ('compound_statement -> function_call_statement','compound_statement',1,'p_compound_statement','lex_yacc.py',143),
  ('compound_statement -> variable_declaration','compound_statement',1,'p_compound_statement','lex_yacc.py',144),
  ('compound_statement -> selection_statement','compound_statement',1,'p_compound_statement','lex_yacc.py',145),
  ('compound_statement -> iteration_statement','compound_statement',1,'p_compound_statement','lex_yacc.py',146),
  ('compound_statement -> jump_statement','compound_statement',1,'p_compound_statement','lex_yacc.py',147),
  ('function_call_statement -> ID LPAREN parameter_list RPAREN','function_call_statement',4,'p_function_call_statement','lex_yacc.py',153),
  ('function_call_statement -> ID LPAREN RPAREN','function_call_statement',3,'p_function_call_statement','lex_yacc.py',154),
  ('parameter_list -> parameter_list COMMA expression','parameter_list',3,'p_parameter_list','lex_yacc.py',164),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','lex_yacc.py',165),
  ('variable_declaration -> pre_type_modifier type ID','variable_declaration',3,'p_variable_declaration','lex_yacc.py',174),
  ('variable_declaration -> pre_type_modifier type ID ASSIGN expression','variable_declaration',5,'p_variable_declaration','lex_yacc.py',175),
  ('variable_declaration -> ID ASSIGN expression','variable_declaration',3,'p_variable_declaration','lex_yacc.py',176),
  ('pre_type_modifier -> <empty>','pre_type_modifier',0,'p_pre_type_modifier','lex_yacc.py',197),
  ('pre_type_modifier -> K_LIST','pre_type_modifier',1,'p_pre_type_modifier','lex_yacc.py',198),
  ('pre_type_modifier -> K_DICT','pre_type_modifier',1,'p_pre_type_modifier','lex_yacc.py',199),
  ('pre_type_modifier -> K_SET','pre_type_modifier',1,'p_pre_type_modifier','lex_yacc.py',200),
  ('type -> K_INT','type',1,'p_type','lex_yacc.py',209),
  ('type -> K_DOUBLE','type',1,'p_type','lex_yacc.py',210),
  ('type -> K_STRING','type',1,'p_type','lex_yacc.py',211),
  ('type -> K_BOOL','type',1,'p_type','lex_yacc.py',212),
  ('type -> K_WINDOW','type',1,'p_type','lex_yacc.py',213),
  ('type -> K_SHAPE','type',1,'p_type','lex_yacc.py',214),
  ('type -> K_TRIANGLE','type',1,'p_type','lex_yacc.py',215),
  ('type -> K_RECTANGLE','type',1,'p_type','lex_yacc.py',216),
  ('type -> K_CIRCLE','type',1,'p_type','lex_yacc.py',217),
  ('type -> K_TEXT','type',1,'p_type','lex_yacc.py',218),
  ('expression -> string_expression','expression',1,'p_expression','lex_yacc.py',225),
  ('expression -> unary_expression','expression',1,'p_expression','lex_yacc.py',226),
  ('expression -> boolean_expression','expression',1,'p_expression','lex_yacc.py',227),
  ('expression -> arithmetic_expression','expression',1,'p_expression','lex_yacc.py',228),
  ('string_expression -> string_expression PLUS string_term','string_expression',3,'p_string_expression','lex_yacc.py',234),
  ('string_expression -> STRING','string_expression',1,'p_string_expression','lex_yacc.py',235),
  ('string_term -> function_call_statement','string_term',1,'p_string_term','lex_yacc.py',245),
  ('string_term -> STRING','string_term',1,'p_string_term','lex_yacc.py',246),
  ('unary_expression -> ID','unary_expression',1,'p_unary_expression','lex_yacc.py',253),
  ('unary_expression -> STRING','unary_expression',1,'p_unary_expression','lex_yacc.py',254),
  ('unary_expression -> INTEGER','unary_expression',1,'p_unary_expression','lex_yacc.py',255),
  ('unary_expression -> function_call_statement','unary_expression',1,'p_unary_expression','lex_yacc.py',256),
  ('unary_expression -> DOUBLE','unary_expression',1,'p_unary_expression','lex_yacc.py',257),
  ('unary_expression -> K_TRUE','unary_expression',1,'p_unary_expression','lex_yacc.py',258),
  ('unary_expression -> K_FALSE','unary_expression',1,'p_unary_expression','lex_yacc.py',259),
  ('boolean_expression -> boolean_expression OR boolean_term','boolean_expression',3,'p_boolean_expression','lex_yacc.py',270),
  ('boolean_expression -> boolean_term','boolean_expression',1,'p_boolean_expression','lex_yacc.py',271),
  ('boolean_term -> boolean_term AND boolean_factor','boolean_term',3,'p_boolean_term','lex_yacc.py',280),
  ('boolean_term -> boolean_factor','boolean_term',1,'p_boolean_term','lex_yacc.py',281),
  ('boolean_factor -> LPAREN boolean_expression RPAREN','boolean_factor',3,'p_boolean_factor','lex_yacc.py',290),
  ('boolean_factor -> unary_expression comparator unary_expression','boolean_factor',3,'p_boolean_factor','lex_yacc.py',291),
  ('boolean_factor -> arithmetic_expression comparator arithmetic_expression','boolean_factor',3,'p_boolean_factor','lex_yacc.py',292),
  ('boolean_factor -> string_expression comparator string_expression','boolean_factor',3,'p_boolean_factor','lex_yacc.py',293),
  ('boolean_factor -> unary_expression','boolean_factor',1,'p_boolean_factor','lex_yacc.py',294),
  ('boolean_factor -> NEG boolean_factor','boolean_factor',2,'p_boolean_factor','lex_yacc.py',295),
  ('comparator -> GT','comparator',1,'p_comparator','lex_yacc.py',310),
  ('comparator -> LT','comparator',1,'p_comparator','lex_yacc.py',311),
  ('comparator -> GEQ','comparator',1,'p_comparator','lex_yacc.py',312),
  ('comparator -> LEQ','comparator',1,'p_comparator','lex_yacc.py',313),
  ('comparator -> EQ','comparator',1,'p_comparator','lex_yacc.py',314),
  ('comparator -> NEQ','comparator',1,'p_comparator','lex_yacc.py',315),
  ('arithmetic_expression -> arithmetic_expression PLUS arithmetic_term','arithmetic_expression',3,'p_arithmetic_expression','lex_yacc.py',325),
  ('arithmetic_expression -> arithmetic_expression MINUS arithmetic_term','arithmetic_expression',3,'p_arithmetic_expression','lex_yacc.py',326),
  ('arithmetic_expression -> arithmetic_term','arithmetic_expression',1,'p_arithmetic_expression','lex_yacc.py',327),
  ('arithmetic_term -> arithmetic_term TIMES arithmetic_factor','arithmetic_term',3,'p_arithmetic_term','lex_yacc.py',341),
  ('arithmetic_term -> arithmetic_term DIVIDE arithmetic_factor','arithmetic_term',3,'p_arithmetic_term','lex_yacc.py',342),
  ('arithmetic_term -> arithmetic_term MOD arithmetic_factor','arithmetic_term',3,'p_arithmetic_term','lex_yacc.py',343),
  ('arithmetic_term -> arithmetic_factor','arithmetic_term',1,'p_arithmetic_term','lex_yacc.py',344),
  ('arithmetic_factor -> LPAREN arithmetic_expression RPAREN','arithmetic_factor',3,'p_arithmetic_factor','lex_yacc.py',359),
  ('arithmetic_factor -> number','arithmetic_factor',1,'p_arithmetic_factor','lex_yacc.py',360),
  ('arithmetic_factor -> ID','arithmetic_factor',1,'p_arithmetic_factor','lex_yacc.py',361),
  ('arithmetic_factor -> function_call_statement','arithmetic_factor',1,'p_arithmetic_factor','lex_yacc.py',362),
  ('arithmetic_factor -> MINUS arithmetic_factor','arithmetic_factor',2,'p_arithmetic_factor','lex_yacc.py',363),
  ('number -> INTEGER','number',1,'p_number','lex_yacc.py',375),
  ('number -> DOUBLE','number',1,'p_number','lex_yacc.py',376),
  ('selection_statement -> K_IF LPAREN boolean_expression RPAREN compound_statement_list else_if_statement_list else_statement K_END','selection_statement',8,'p_selection_statement','lex_yacc.py',384),
  ('else_if_statement_list -> <empty>','else_if_statement_list',0,'p_else_if_statement_list','lex_yacc.py',394),
  ('else_if_statement_list -> else_if_statement_list else_if_statement','else_if_statement_list',2,'p_else_if_statement_list','lex_yacc.py',395),
  ('else_if_statement -> K_EF LPAREN boolean_expression RPAREN compound_statement_list','else_if_statement',5,'p_else_if_statement','lex_yacc.py',409),
  ('else_statement -> <empty>','else_statement',0,'p_else_statement','lex_yacc.py',417),
  ('else_statement -> K_EL compound_statement_list','else_statement',2,'p_else_statement','lex_yacc.py',418),
  ('compound_statement_list -> <empty>','compound_statement_list',0,'p_compound_statement_list','lex_yacc.py',427),
  ('compound_statement_list -> compound_statement_list compound_statement','compound_statement_list',2,'p_compound_statement_list','lex_yacc.py',428),
  ('iteration_statement -> K_WHILE LPAREN boolean_expression RPAREN compound_statement_list K_END','iteration_statement',6,'p_iteration_statement','lex_yacc.py',442),
  ('jump_statement -> K_CONTINUE','jump_statement',1,'p_jump_statement','lex_yacc.py',451),
  ('jump_statement -> K_BREAK','jump_statement',1,'p_jump_statement','lex_yacc.py',452),
  ('jump_statement -> K_DONE','jump_statement',1,'p_jump_statement','lex_yacc.py',453),
]
